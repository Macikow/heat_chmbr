
HEAT_CHMBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  0002050c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ef4  08005ef4  0002050c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ef4  08005ef4  0002050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000050c  20000000  08005f00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000510  0800640c  00020510  2**3
                  ALLOC
 10 ._user_heap_stack 00000800  20000c90  0800640c  00020c90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022347  00000000  00000000  00020535  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004341  00000000  00000000  0004287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c6d1  00000000  00000000  00046bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000012d8  00000000  00000000  00053290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000015d8  00000000  00000000  00054568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00017c5b  00000000  00000000  00055b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00011fde  00000000  00000000  0006d79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007b63a  00000000  00000000  0007f779  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000fadb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000359c  00000000  00000000  000fae30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000510 	.word	0x20000510
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ddc 	.word	0x08005ddc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000514 	.word	0x20000514
 800014c:	08005ddc 	.word	0x08005ddc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_fmul>:
 8000adc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aea:	ea92 0f0c 	teqne	r2, ip
 8000aee:	ea93 0f0c 	teqne	r3, ip
 8000af2:	d06f      	beq.n	8000bd4 <__aeabi_fmul+0xf8>
 8000af4:	441a      	add	r2, r3
 8000af6:	ea80 0c01 	eor.w	ip, r0, r1
 8000afa:	0240      	lsls	r0, r0, #9
 8000afc:	bf18      	it	ne
 8000afe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b02:	d01e      	beq.n	8000b42 <__aeabi_fmul+0x66>
 8000b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b10:	fba0 3101 	umull	r3, r1, r0, r1
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b1c:	bf3e      	ittt	cc
 8000b1e:	0049      	lslcc	r1, r1, #1
 8000b20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b24:	005b      	lslcc	r3, r3, #1
 8000b26:	ea40 0001 	orr.w	r0, r0, r1
 8000b2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b2e:	2afd      	cmp	r2, #253	; 0xfd
 8000b30:	d81d      	bhi.n	8000b6e <__aeabi_fmul+0x92>
 8000b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	4770      	bx	lr
 8000b42:	f090 0f00 	teq	r0, #0
 8000b46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b4a:	bf08      	it	eq
 8000b4c:	0249      	lsleq	r1, r1, #9
 8000b4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b56:	3a7f      	subs	r2, #127	; 0x7f
 8000b58:	bfc2      	ittt	gt
 8000b5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b62:	4770      	bxgt	lr
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	dc5d      	bgt.n	8000c2c <__aeabi_fmul+0x150>
 8000b70:	f112 0f19 	cmn.w	r2, #25
 8000b74:	bfdc      	itt	le
 8000b76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b7a:	4770      	bxle	lr
 8000b7c:	f1c2 0200 	rsb	r2, r2, #0
 8000b80:	0041      	lsls	r1, r0, #1
 8000b82:	fa21 f102 	lsr.w	r1, r1, r2
 8000b86:	f1c2 0220 	rsb	r2, r2, #32
 8000b8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b92:	f140 0000 	adc.w	r0, r0, #0
 8000b96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b9a:	bf08      	it	eq
 8000b9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba0:	4770      	bx	lr
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000baa:	bf02      	ittt	eq
 8000bac:	0040      	lsleq	r0, r0, #1
 8000bae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bb2:	3a01      	subeq	r2, #1
 8000bb4:	d0f9      	beq.n	8000baa <__aeabi_fmul+0xce>
 8000bb6:	ea40 000c 	orr.w	r0, r0, ip
 8000bba:	f093 0f00 	teq	r3, #0
 8000bbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc2:	bf02      	ittt	eq
 8000bc4:	0049      	lsleq	r1, r1, #1
 8000bc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bca:	3b01      	subeq	r3, #1
 8000bcc:	d0f9      	beq.n	8000bc2 <__aeabi_fmul+0xe6>
 8000bce:	ea41 010c 	orr.w	r1, r1, ip
 8000bd2:	e78f      	b.n	8000af4 <__aeabi_fmul+0x18>
 8000bd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd8:	ea92 0f0c 	teq	r2, ip
 8000bdc:	bf18      	it	ne
 8000bde:	ea93 0f0c 	teqne	r3, ip
 8000be2:	d00a      	beq.n	8000bfa <__aeabi_fmul+0x11e>
 8000be4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000be8:	bf18      	it	ne
 8000bea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bee:	d1d8      	bne.n	8000ba2 <__aeabi_fmul+0xc6>
 8000bf0:	ea80 0001 	eor.w	r0, r0, r1
 8000bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f090 0f00 	teq	r0, #0
 8000bfe:	bf17      	itett	ne
 8000c00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c04:	4608      	moveq	r0, r1
 8000c06:	f091 0f00 	teqne	r1, #0
 8000c0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c0e:	d014      	beq.n	8000c3a <__aeabi_fmul+0x15e>
 8000c10:	ea92 0f0c 	teq	r2, ip
 8000c14:	d101      	bne.n	8000c1a <__aeabi_fmul+0x13e>
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	d10f      	bne.n	8000c3a <__aeabi_fmul+0x15e>
 8000c1a:	ea93 0f0c 	teq	r3, ip
 8000c1e:	d103      	bne.n	8000c28 <__aeabi_fmul+0x14c>
 8000c20:	024b      	lsls	r3, r1, #9
 8000c22:	bf18      	it	ne
 8000c24:	4608      	movne	r0, r1
 8000c26:	d108      	bne.n	8000c3a <__aeabi_fmul+0x15e>
 8000c28:	ea80 0001 	eor.w	r0, r0, r1
 8000c2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fdiv>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d069      	beq.n	8000d30 <__aeabi_fdiv+0xec>
 8000c5c:	eba2 0203 	sub.w	r2, r2, r3
 8000c60:	ea80 0c01 	eor.w	ip, r0, r1
 8000c64:	0249      	lsls	r1, r1, #9
 8000c66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c6a:	d037      	beq.n	8000cdc <__aeabi_fdiv+0x98>
 8000c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	bf38      	it	cc
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	bf24      	itt	cs
 8000c8e:	1a5b      	subcs	r3, r3, r1
 8000c90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c98:	bf24      	itt	cs
 8000c9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ca2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ca6:	bf24      	itt	cs
 8000ca8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cb4:	bf24      	itt	cs
 8000cb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	bf18      	it	ne
 8000cc2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cc6:	d1e0      	bne.n	8000c8a <__aeabi_fdiv+0x46>
 8000cc8:	2afd      	cmp	r2, #253	; 0xfd
 8000cca:	f63f af50 	bhi.w	8000b6e <__aeabi_fmul+0x92>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd4:	bf08      	it	eq
 8000cd6:	f020 0001 	biceq.w	r0, r0, #1
 8000cda:	4770      	bx	lr
 8000cdc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ce0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ce4:	327f      	adds	r2, #127	; 0x7f
 8000ce6:	bfc2      	ittt	gt
 8000ce8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cf0:	4770      	bxgt	lr
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	e737      	b.n	8000b6e <__aeabi_fmul+0x92>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fdiv+0xc2>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fdiv+0xda>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e795      	b.n	8000c5c <__aeabi_fdiv+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	d108      	bne.n	8000d4c <__aeabi_fdiv+0x108>
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	f47f af7d 	bne.w	8000c3a <__aeabi_fmul+0x15e>
 8000d40:	ea93 0f0c 	teq	r3, ip
 8000d44:	f47f af70 	bne.w	8000c28 <__aeabi_fmul+0x14c>
 8000d48:	4608      	mov	r0, r1
 8000d4a:	e776      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d4c:	ea93 0f0c 	teq	r3, ip
 8000d50:	d104      	bne.n	8000d5c <__aeabi_fdiv+0x118>
 8000d52:	024b      	lsls	r3, r1, #9
 8000d54:	f43f af4c 	beq.w	8000bf0 <__aeabi_fmul+0x114>
 8000d58:	4608      	mov	r0, r1
 8000d5a:	e76e      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d60:	bf18      	it	ne
 8000d62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	d1ca      	bne.n	8000cfe <__aeabi_fdiv+0xba>
 8000d68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d6c:	f47f af5c 	bne.w	8000c28 <__aeabi_fmul+0x14c>
 8000d70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d74:	f47f af3c 	bne.w	8000bf0 <__aeabi_fmul+0x114>
 8000d78:	e75f      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d7a:	bf00      	nop

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_InitTick+0x40>)
 8000d82:	7818      	ldrb	r0, [r3, #0]
 8000d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d88:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_InitTick+0x44>)
 8000d8e:	6810      	ldr	r0, [r2, #0]
 8000d90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d94:	f000 fbf0 	bl	8001578 <HAL_SYSTICK_Config>
 8000d98:	b968      	cbnz	r0, 8000db6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	2c0f      	cmp	r4, #15
 8000d9c:	d901      	bls.n	8000da2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
 8000da0:	e00a      	b.n	8000db8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da2:	2200      	movs	r2, #0
 8000da4:	4621      	mov	r1, r4
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295
 8000daa:	f000 fba3 	bl	80014f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_InitTick+0x48>)
 8000db0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2000      	movs	r0, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
}
 8000db8:	bd10      	pop	{r4, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	200000d8 	.word	0x200000d8
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_Init>:
{
 8000dc8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x20>)
 8000dcc:	6813      	ldr	r3, [r2, #0]
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 fb7b 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ffce 	bl	8000d7c <HAL_InitTick>
  HAL_MspInit();
 8000de0:	f004 fd90 	bl	8005904 <HAL_MspInit>
}
 8000de4:	2000      	movs	r0, #0
 8000de6:	bd08      	pop	{r3, pc}
 8000de8:	40022000 	.word	0x40022000

08000dec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_IncTick+0x10>)
 8000dee:	6811      	ldr	r1, [r2, #0]
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_IncTick+0x14>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	440b      	add	r3, r1
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	2000054c 	.word	0x2000054c
 8000e00:	20000000 	.word	0x20000000

08000e04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e04:	4b01      	ldr	r3, [pc, #4]	; (8000e0c <HAL_GetTick+0x8>)
 8000e06:	6818      	ldr	r0, [r3, #0]
}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000054c 	.word	0x2000054c

08000e10 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e10:	4770      	bx	lr

08000e12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e12:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e18:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000e1c:	d003      	beq.n	8000e26 <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4798      	blx	r3
  }
}
 8000e24:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	6892      	ldr	r2, [r2, #8]
 8000e32:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000e36:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000e3a:	d003      	beq.n	8000e44 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ffe7 	bl	8000e10 <HAL_ADC_ConvCpltCallback>
 8000e42:	e7ef      	b.n	8000e24 <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e44:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	d1f8      	bne.n	8000e3c <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e54:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000e58:	d1f0      	bne.n	8000e3c <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e5c:	f042 0201 	orr.w	r2, r2, #1
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
 8000e62:	e7eb      	b.n	8000e3c <ADC_DMAConvCplt+0x2a>

08000e64 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000e64:	4770      	bx	lr

08000e66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e66:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000e68:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000e6a:	f7ff fffb 	bl	8000e64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e6e:	bd08      	pop	{r3, pc}

08000e70 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8000e70:	4770      	bx	lr

08000e72 <HAL_ADC_IRQHandler>:
{
 8000e72:	b510      	push	{r4, lr}
 8000e74:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000e76:	6803      	ldr	r3, [r0, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	f012 0f20 	tst.w	r2, #32
 8000e7e:	d018      	beq.n	8000eb2 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f012 0f02 	tst.w	r2, #2
 8000e86:	d014      	beq.n	8000eb2 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e88:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000e8a:	f012 0f10 	tst.w	r2, #16
 8000e8e:	d103      	bne.n	8000e98 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e90:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e96:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000e9e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000ea2:	d038      	beq.n	8000f16 <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff ffb3 	bl	8000e10 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	f06f 0212 	mvn.w	r2, #18
 8000eb0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000eba:	d022      	beq.n	8000f02 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f012 0f04 	tst.w	r2, #4
 8000ec2:	d01e      	beq.n	8000f02 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ec6:	f012 0f10 	tst.w	r2, #16
 8000eca:	d103      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ecc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ed2:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000eda:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000ede:	d031      	beq.n	8000f44 <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ee0:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ee2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000ee6:	d105      	bne.n	8000ef4 <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000eee:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000ef2:	d024      	beq.n	8000f3e <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f000 fae9 	bl	80014cc <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	f06f 020c 	mvn.w	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000f0a:	d003      	beq.n	8000f14 <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f013 0f01 	tst.w	r3, #1
 8000f12:	d128      	bne.n	8000f66 <HAL_ADC_IRQHandler+0xf4>
}
 8000f14:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f16:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d1c3      	bne.n	8000ea4 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	f022 0220 	bic.w	r2, r2, #32
 8000f22:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f2a:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f2e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000f32:	d1b7      	bne.n	8000ea4 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f3c:	e7b2      	b.n	8000ea4 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f3e:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	d1d7      	bne.n	8000ef4 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f4a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f52:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f5a:	d1cb      	bne.n	8000ef4 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f64:	e7c6      	b.n	8000ef4 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f7ff ff7e 	bl	8000e70 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	f06f 0201 	mvn.w	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	e7ca      	b.n	8000f14 <HAL_ADC_IRQHandler+0xa2>

08000f7e <HAL_ADC_ErrorCallback>:
}
 8000f7e:	4770      	bx	lr

08000f80 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000f80:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f82:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f94:	f7ff fff3 	bl	8000f7e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f98:	bd08      	pop	{r3, pc}
	...

08000f9c <HAL_ADC_ConfigChannel>:
{ 
 8000f9c:	b430      	push	{r4, r5}
 8000f9e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000fa4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	f000 808b 	beq.w	80010c4 <HAL_ADC_ConfigChannel+0x128>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000fb6:	684b      	ldr	r3, [r1, #4]
 8000fb8:	2b06      	cmp	r3, #6
 8000fba:	d829      	bhi.n	8001010 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fbc:	6805      	ldr	r5, [r0, #0]
 8000fbe:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000fc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fc4:	3b05      	subs	r3, #5
 8000fc6:	241f      	movs	r4, #31
 8000fc8:	409c      	lsls	r4, r3
 8000fca:	ea20 0004 	bic.w	r0, r0, r4
 8000fce:	680c      	ldr	r4, [r1, #0]
 8000fd0:	fa04 f303 	lsl.w	r3, r4, r3
 8000fd4:	4303      	orrs	r3, r0
 8000fd6:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd8:	680b      	ldr	r3, [r1, #0]
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	d938      	bls.n	8001050 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fde:	6815      	ldr	r5, [r2, #0]
 8000fe0:	68e8      	ldr	r0, [r5, #12]
 8000fe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fe6:	3b1e      	subs	r3, #30
 8000fe8:	2407      	movs	r4, #7
 8000fea:	409c      	lsls	r4, r3
 8000fec:	ea20 0004 	bic.w	r0, r0, r4
 8000ff0:	688c      	ldr	r4, [r1, #8]
 8000ff2:	fa04 f303 	lsl.w	r3, r4, r3
 8000ff6:	4303      	orrs	r3, r0
 8000ff8:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ffa:	680b      	ldr	r3, [r1, #0]
 8000ffc:	3b10      	subs	r3, #16
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d934      	bls.n	800106c <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001002:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001004:	2300      	movs	r3, #0
 8001006:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 800100a:	b002      	add	sp, #8
 800100c:	bc30      	pop	{r4, r5}
 800100e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d80e      	bhi.n	8001032 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001014:	6805      	ldr	r5, [r0, #0]
 8001016:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001018:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800101c:	3b23      	subs	r3, #35	; 0x23
 800101e:	241f      	movs	r4, #31
 8001020:	409c      	lsls	r4, r3
 8001022:	ea20 0004 	bic.w	r0, r0, r4
 8001026:	680c      	ldr	r4, [r1, #0]
 8001028:	fa04 f303 	lsl.w	r3, r4, r3
 800102c:	4303      	orrs	r3, r0
 800102e:	632b      	str	r3, [r5, #48]	; 0x30
 8001030:	e7d2      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001032:	6805      	ldr	r5, [r0, #0]
 8001034:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001036:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800103a:	3b41      	subs	r3, #65	; 0x41
 800103c:	241f      	movs	r4, #31
 800103e:	409c      	lsls	r4, r3
 8001040:	ea20 0004 	bic.w	r0, r0, r4
 8001044:	680c      	ldr	r4, [r1, #0]
 8001046:	fa04 f303 	lsl.w	r3, r4, r3
 800104a:	4303      	orrs	r3, r0
 800104c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800104e:	e7c3      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001050:	6815      	ldr	r5, [r2, #0]
 8001052:	6928      	ldr	r0, [r5, #16]
 8001054:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001058:	2407      	movs	r4, #7
 800105a:	409c      	lsls	r4, r3
 800105c:	ea20 0004 	bic.w	r0, r0, r4
 8001060:	688c      	ldr	r4, [r1, #8]
 8001062:	fa04 f303 	lsl.w	r3, r4, r3
 8001066:	4303      	orrs	r3, r0
 8001068:	612b      	str	r3, [r5, #16]
 800106a:	e7c6      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	4816      	ldr	r0, [pc, #88]	; (80010c8 <HAL_ADC_ConfigChannel+0x12c>)
 8001070:	4283      	cmp	r3, r0
 8001072:	d005      	beq.n	8001080 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001074:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800107c:	2001      	movs	r0, #1
 800107e:	e7c1      	b.n	8001004 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001080:	6898      	ldr	r0, [r3, #8]
 8001082:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001086:	d11b      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001088:	6898      	ldr	r0, [r3, #8]
 800108a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800108e:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001090:	680b      	ldr	r3, [r1, #0]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d001      	beq.n	800109a <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001096:	2000      	movs	r0, #0
 8001098:	e7b4      	b.n	8001004 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_ADC_ConfigChannel+0x130>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	490c      	ldr	r1, [pc, #48]	; (80010d0 <HAL_ADC_ConfigChannel+0x134>)
 80010a0:	fba1 1303 	umull	r1, r3, r1, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010aa:	0059      	lsls	r1, r3, #1
 80010ac:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80010ae:	e002      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 80010b0:	9b01      	ldr	r3, [sp, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80010b6:	9b01      	ldr	r3, [sp, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f9      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	2000      	movs	r0, #0
 80010be:	e7a1      	b.n	8001004 <HAL_ADC_ConfigChannel+0x68>
 80010c0:	2000      	movs	r0, #0
 80010c2:	e79f      	b.n	8001004 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80010c4:	2002      	movs	r0, #2
 80010c6:	e7a0      	b.n	800100a <HAL_ADC_ConfigChannel+0x6e>
 80010c8:	40012400 	.word	0x40012400
 80010cc:	200000d8 	.word	0x200000d8
 80010d0:	431bde83 	.word	0x431bde83

080010d4 <ADC_Enable>:
{
 80010d4:	b530      	push	{r4, r5, lr}
 80010d6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010dc:	6803      	ldr	r3, [r0, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	f012 0f01 	tst.w	r2, #1
 80010e4:	d12e      	bne.n	8001144 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	f042 0201 	orr.w	r2, r2, #1
 80010ec:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <ADC_Enable+0x78>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <ADC_Enable+0x7c>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9b      	lsrs	r3, r3, #18
 80010fa:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80010fc:	e002      	b.n	8001104 <ADC_Enable+0x30>
      wait_loop_index--;
 80010fe:	9b01      	ldr	r3, [sp, #4]
 8001100:	3b01      	subs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001104:	9b01      	ldr	r3, [sp, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f9      	bne.n	80010fe <ADC_Enable+0x2a>
 800110a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800110c:	f7ff fe7a 	bl	8000e04 <HAL_GetTick>
 8001110:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f013 0f01 	tst.w	r3, #1
 800111a:	d111      	bne.n	8001140 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800111c:	f7ff fe72 	bl	8000e04 <HAL_GetTick>
 8001120:	1b40      	subs	r0, r0, r5
 8001122:	2802      	cmp	r0, #2
 8001124:	d9f5      	bls.n	8001112 <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001136:	2300      	movs	r3, #0
 8001138:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800113c:	2001      	movs	r0, #1
 800113e:	e002      	b.n	8001146 <ADC_Enable+0x72>
  return HAL_OK;
 8001140:	2000      	movs	r0, #0
 8001142:	e000      	b.n	8001146 <ADC_Enable+0x72>
 8001144:	2000      	movs	r0, #0
}
 8001146:	b003      	add	sp, #12
 8001148:	bd30      	pop	{r4, r5, pc}
 800114a:	bf00      	nop
 800114c:	200000d8 	.word	0x200000d8
 8001150:	431bde83 	.word	0x431bde83

08001154 <HAL_ADC_Start_DMA>:
{
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001156:	6804      	ldr	r4, [r0, #0]
 8001158:	4d45      	ldr	r5, [pc, #276]	; (8001270 <HAL_ADC_Start_DMA+0x11c>)
 800115a:	42ac      	cmp	r4, r5
 800115c:	d05b      	beq.n	8001216 <HAL_ADC_Start_DMA+0xc2>
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <HAL_ADC_Start_DMA+0x120>)
 8001160:	429c      	cmp	r4, r3
 8001162:	d058      	beq.n	8001216 <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 8001164:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001168:	2c01      	cmp	r4, #1
 800116a:	d07e      	beq.n	800126a <HAL_ADC_Start_DMA+0x116>
 800116c:	4616      	mov	r6, r2
 800116e:	460d      	mov	r5, r1
 8001170:	4604      	mov	r4, r0
 8001172:	2301      	movs	r3, #1
 8001174:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001178:	f7ff ffac 	bl	80010d4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800117c:	4607      	mov	r7, r0
 800117e:	2800      	cmp	r0, #0
 8001180:	d16e      	bne.n	8001260 <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 8001182:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001184:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001192:	6822      	ldr	r2, [r4, #0]
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <HAL_ADC_Start_DMA+0x120>)
 8001196:	429a      	cmp	r2, r3
 8001198:	d044      	beq.n	8001224 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800119a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800119c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80011a0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a2:	6853      	ldr	r3, [r2, #4]
 80011a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011a8:	d005      	beq.n	80011b6 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80011bc:	d048      	beq.n	8001250 <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011c0:	f023 0306 	bic.w	r3, r3, #6
 80011c4:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80011c6:	2300      	movs	r3, #0
 80011c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011cc:	6a23      	ldr	r3, [r4, #32]
 80011ce:	4a2a      	ldr	r2, [pc, #168]	; (8001278 <HAL_ADC_Start_DMA+0x124>)
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011d2:	6a23      	ldr	r3, [r4, #32]
 80011d4:	4a29      	ldr	r2, [pc, #164]	; (800127c <HAL_ADC_Start_DMA+0x128>)
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011d8:	6a23      	ldr	r3, [r4, #32]
 80011da:	4a29      	ldr	r2, [pc, #164]	; (8001280 <HAL_ADC_Start_DMA+0x12c>)
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	f06f 0202 	mvn.w	r2, #2
 80011e4:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	6893      	ldr	r3, [r2, #8]
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011f0:	6821      	ldr	r1, [r4, #0]
 80011f2:	4633      	mov	r3, r6
 80011f4:	462a      	mov	r2, r5
 80011f6:	314c      	adds	r1, #76	; 0x4c
 80011f8:	6a20      	ldr	r0, [r4, #32]
 80011fa:	f000 fa1f 	bl	800163c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	6893      	ldr	r3, [r2, #8]
 8001202:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001206:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800120a:	d024      	beq.n	8001256 <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800120c:	6893      	ldr	r3, [r2, #8]
 800120e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001212:	6093      	str	r3, [r2, #8]
 8001214:	e027      	b.n	8001266 <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_ADC_Start_DMA+0x11c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800121e:	d0a1      	beq.n	8001164 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 8001220:	2701      	movs	r7, #1
 8001222:	e020      	b.n	8001266 <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001224:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800122e:	d0b4      	beq.n	800119a <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001230:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001236:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_ADC_Start_DMA+0x11c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001240:	d0b9      	beq.n	80011b6 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001244:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124c:	62a3      	str	r3, [r4, #40]	; 0x28
 800124e:	e7b2      	b.n	80011b6 <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 8001250:	2300      	movs	r3, #0
 8001252:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001254:	e7b7      	b.n	80011c6 <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001256:	6893      	ldr	r3, [r2, #8]
 8001258:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800125c:	6093      	str	r3, [r2, #8]
 800125e:	e002      	b.n	8001266 <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 8001260:	2300      	movs	r3, #0
 8001262:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001266:	4638      	mov	r0, r7
 8001268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800126a:	2702      	movs	r7, #2
 800126c:	e7fb      	b.n	8001266 <HAL_ADC_Start_DMA+0x112>
 800126e:	bf00      	nop
 8001270:	40012400 	.word	0x40012400
 8001274:	40012800 	.word	0x40012800
 8001278:	08000e13 	.word	0x08000e13
 800127c:	08000e67 	.word	0x08000e67
 8001280:	08000f81 	.word	0x08000f81

08001284 <ADC_ConversionStop_Disable>:
{
 8001284:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001286:	6803      	ldr	r3, [r0, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	f012 0f01 	tst.w	r2, #1
 800128e:	d101      	bne.n	8001294 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
}
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800129e:	f7ff fdb1 	bl	8000e04 <HAL_GetTick>
 80012a2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f013 0f01 	tst.w	r3, #1
 80012ac:	d00e      	beq.n	80012cc <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012ae:	f7ff fda9 	bl	8000e04 <HAL_GetTick>
 80012b2:	1b40      	subs	r0, r0, r5
 80012b4:	2802      	cmp	r0, #2
 80012b6:	d9f5      	bls.n	80012a4 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
 80012ca:	e7e2      	b.n	8001292 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
 80012ce:	e7e0      	b.n	8001292 <ADC_ConversionStop_Disable+0xe>

080012d0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d07f      	beq.n	80013d4 <HAL_ADC_Init+0x104>
{
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d033      	beq.n	8001346 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff ffd0 	bl	8001284 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012e6:	f013 0310 	ands.w	r3, r3, #16
 80012ea:	d16d      	bne.n	80013c8 <HAL_ADC_Init+0xf8>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d16b      	bne.n	80013c8 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 80012f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012f2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80012f6:	f022 0202 	bic.w	r2, r2, #2
 80012fa:	f042 0202 	orr.w	r2, r2, #2
 80012fe:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001300:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001302:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001304:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001306:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001308:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800130c:	68a1      	ldr	r1, [r4, #8]
 800130e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001312:	d021      	beq.n	8001358 <HAL_ADC_Init+0x88>
 8001314:	2901      	cmp	r1, #1
 8001316:	d01c      	beq.n	8001352 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001318:	7d21      	ldrb	r1, [r4, #20]
 800131a:	2901      	cmp	r1, #1
 800131c:	d01f      	beq.n	800135e <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 800131e:	6825      	ldr	r5, [r4, #0]
 8001320:	6869      	ldr	r1, [r5, #4]
 8001322:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001326:	430b      	orrs	r3, r1
 8001328:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800132a:	6821      	ldr	r1, [r4, #0]
 800132c:	688d      	ldr	r5, [r1, #8]
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_ADC_Init+0x108>)
 8001330:	402b      	ands	r3, r5
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001336:	68a3      	ldr	r3, [r4, #8]
 8001338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800133c:	d020      	beq.n	8001380 <HAL_ADC_Init+0xb0>
 800133e:	2b01      	cmp	r3, #1
 8001340:	d01e      	beq.n	8001380 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8001342:	2100      	movs	r1, #0
 8001344:	e01f      	b.n	8001386 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 8001346:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001348:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800134c:	f004 fafc 	bl	8005948 <HAL_ADC_MspInit>
 8001350:	e7c5      	b.n	80012de <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001356:	e7df      	b.n	8001318 <HAL_ADC_Init+0x48>
 8001358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135c:	e7dc      	b.n	8001318 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800135e:	b935      	cbnz	r5, 800136e <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001360:	69a1      	ldr	r1, [r4, #24]
 8001362:	3901      	subs	r1, #1
 8001364:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8001368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800136c:	e7d7      	b.n	800131e <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001370:	f041 0120 	orr.w	r1, r1, #32
 8001374:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001378:	f041 0101 	orr.w	r1, r1, #1
 800137c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800137e:	e7ce      	b.n	800131e <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001380:	6923      	ldr	r3, [r4, #16]
 8001382:	3b01      	subs	r3, #1
 8001384:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001386:	6825      	ldr	r5, [r4, #0]
 8001388:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800138a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800138e:	430b      	orrs	r3, r1
 8001390:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_ADC_Init+0x10c>)
 8001398:	400b      	ands	r3, r1
 800139a:	429a      	cmp	r2, r3
 800139c:	d00b      	beq.n	80013b6 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 800139e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013a0:	f023 0312 	bic.w	r3, r3, #18
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
 80013b4:	e00d      	b.n	80013d2 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80013b6:	2300      	movs	r3, #0
 80013b8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80013ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013bc:	f023 0303 	bic.w	r3, r3, #3
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80013c6:	e004      	b.n	80013d2 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013ca:	f043 0310 	orr.w	r3, r3, #16
 80013ce:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
}
 80013d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80013d4:	2001      	movs	r0, #1
}
 80013d6:	4770      	bx	lr
 80013d8:	ffe1f7fd 	.word	0xffe1f7fd
 80013dc:	ff1f0efe 	.word	0xff1f0efe

080013e0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d068      	beq.n	80014c2 <HAL_ADCEx_Calibration_Start+0xe2>
 80013f0:	4604      	mov	r4, r0
 80013f2:	2301      	movs	r3, #1
 80013f4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013f8:	f7ff ff44 	bl	8001284 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013fc:	4605      	mov	r5, r0
 80013fe:	b128      	cbz	r0, 800140c <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001400:	2300      	movs	r3, #0
 8001402:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001406:	4628      	mov	r0, r5
 8001408:	b002      	add	sp, #8
 800140a:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800140e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001412:	f023 0302 	bic.w	r3, r3, #2
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_ADCEx_Calibration_Start+0xe8>)
 800141e:	681e      	ldr	r6, [r3, #0]
 8001420:	2002      	movs	r0, #2
 8001422:	f000 ffa9 	bl	8002378 <HAL_RCCEx_GetPeriphCLKFreq>
 8001426:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800142a:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800142c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800142e:	e002      	b.n	8001436 <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001436:	9b01      	ldr	r3, [sp, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f9      	bne.n	8001430 <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff fe49 	bl	80010d4 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	6893      	ldr	r3, [r2, #8]
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800144c:	f7ff fcda 	bl	8000e04 <HAL_GetTick>
 8001450:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	f012 0f08 	tst.w	r2, #8
 800145a:	d00f      	beq.n	800147c <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800145c:	f7ff fcd2 	bl	8000e04 <HAL_GetTick>
 8001460:	1b80      	subs	r0, r0, r6
 8001462:	280a      	cmp	r0, #10
 8001464:	d9f5      	bls.n	8001452 <HAL_ADCEx_Calibration_Start+0x72>
        ADC_STATE_CLR_SET(hadc->State,
 8001466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001468:	f023 0312 	bic.w	r3, r3, #18
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001472:	2300      	movs	r3, #0
 8001474:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001478:	2501      	movs	r5, #1
 800147a:	e7c4      	b.n	8001406 <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	f042 0204 	orr.w	r2, r2, #4
 8001482:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001484:	f7ff fcbe 	bl	8000e04 <HAL_GetTick>
 8001488:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f013 0f04 	tst.w	r3, #4
 8001492:	d00f      	beq.n	80014b4 <HAL_ADCEx_Calibration_Start+0xd4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001494:	f7ff fcb6 	bl	8000e04 <HAL_GetTick>
 8001498:	1b80      	subs	r0, r0, r6
 800149a:	280a      	cmp	r0, #10
 800149c:	d9f5      	bls.n	800148a <HAL_ADCEx_Calibration_Start+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 800149e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014a0:	f023 0312 	bic.w	r3, r3, #18
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80014aa:	2300      	movs	r3, #0
 80014ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80014b0:	2501      	movs	r5, #1
 80014b2:	e7a8      	b.n	8001406 <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 80014b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	62a3      	str	r3, [r4, #40]	; 0x28
 80014c0:	e79e      	b.n	8001400 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 80014c2:	2502      	movs	r5, #2
 80014c4:	e79f      	b.n	8001406 <HAL_ADCEx_Calibration_Start+0x26>
 80014c6:	bf00      	nop
 80014c8:	200000d8 	.word	0x200000d8

080014cc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014dc:	0200      	lsls	r0, r0, #8
 80014de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80014e4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80014e8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014ec:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_NVIC_SetPriority+0x60>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fe:	f1c3 0407 	rsb	r4, r3, #7
 8001502:	2c04      	cmp	r4, #4
 8001504:	bf28      	it	cs
 8001506:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001508:	1d1d      	adds	r5, r3, #4
 800150a:	2d06      	cmp	r5, #6
 800150c:	d918      	bls.n	8001540 <HAL_NVIC_SetPriority+0x4c>
 800150e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 35ff 	mov.w	r5, #4294967295
 8001514:	fa05 f404 	lsl.w	r4, r5, r4
 8001518:	ea21 0104 	bic.w	r1, r1, r4
 800151c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151e:	fa05 f303 	lsl.w	r3, r5, r3
 8001522:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001526:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001528:	2800      	cmp	r0, #0
 800152a:	db0b      	blt.n	8001544 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	0109      	lsls	r1, r1, #4
 800152e:	b2c9      	uxtb	r1, r1
 8001530:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001534:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001538:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800153c:	bc30      	pop	{r4, r5}
 800153e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001540:	2300      	movs	r3, #0
 8001542:	e7e5      	b.n	8001510 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	f000 000f 	and.w	r0, r0, #15
 8001548:	0109      	lsls	r1, r1, #4
 800154a:	b2c9      	uxtb	r1, r1
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_NVIC_SetPriority+0x64>)
 800154e:	5419      	strb	r1, [r3, r0]
 8001550:	e7f4      	b.n	800153c <HAL_NVIC_SetPriority+0x48>
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00
 8001558:	e000ed14 	.word	0xe000ed14

0800155c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800155c:	2800      	cmp	r0, #0
 800155e:	db07      	blt.n	8001570 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001560:	f000 021f 	and.w	r2, r0, #31
 8001564:	0940      	lsrs	r0, r0, #5
 8001566:	2301      	movs	r3, #1
 8001568:	4093      	lsls	r3, r2
 800156a:	4a02      	ldr	r2, [pc, #8]	; (8001574 <HAL_NVIC_EnableIRQ+0x18>)
 800156c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	3801      	subs	r0, #1
 800157a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800157e:	d20a      	bcs.n	8001596 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_SYSTICK_Config+0x24>)
 8001582:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_SYSTICK_Config+0x28>)
 8001586:	21f0      	movs	r1, #240	; 0xf0
 8001588:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	2000      	movs	r0, #0
 800158e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a4:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015a6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80015a8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80015aa:	2401      	movs	r4, #1
 80015ac:	40b4      	lsls	r4, r6
 80015ae:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015b0:	6804      	ldr	r4, [r0, #0]
 80015b2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b4:	6843      	ldr	r3, [r0, #4]
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	d005      	beq.n	80015c6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80015ba:	6803      	ldr	r3, [r0, #0]
 80015bc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80015be:	6803      	ldr	r3, [r0, #0]
 80015c0:	60da      	str	r2, [r3, #12]
  }
}
 80015c2:	bc70      	pop	{r4, r5, r6}
 80015c4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80015ca:	6803      	ldr	r3, [r0, #0]
 80015cc:	60d9      	str	r1, [r3, #12]
 80015ce:	e7f8      	b.n	80015c2 <DMA_SetConfig+0x1e>

080015d0 <HAL_DMA_Init>:
  if(hdma == NULL)
 80015d0:	b360      	cbz	r0, 800162c <HAL_DMA_Init+0x5c>
{
 80015d2:	b410      	push	{r4}
 80015d4:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015d6:	6801      	ldr	r1, [r0, #0]
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_DMA_Init+0x60>)
 80015da:	440b      	add	r3, r1
 80015dc:	4815      	ldr	r0, [pc, #84]	; (8001634 <HAL_DMA_Init+0x64>)
 80015de:	fba0 0303 	umull	r0, r3, r0, r3
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_DMA_Init+0x68>)
 80015ea:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ec:	2302      	movs	r3, #2
 80015ee:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80015f2:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015f4:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80015f8:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80015fc:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8001600:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	68d4      	ldr	r4, [r2, #12]
 8001604:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	6954      	ldr	r4, [r2, #20]
 800160c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800160e:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001612:	69d4      	ldr	r4, [r2, #28]
 8001614:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001616:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001618:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161a:	2000      	movs	r0, #0
 800161c:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800161e:	2301      	movs	r3, #1
 8001620:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001624:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001628:	bc10      	pop	{r4}
 800162a:	4770      	bx	lr
    return HAL_ERROR;
 800162c:	2001      	movs	r0, #1
}
 800162e:	4770      	bx	lr
 8001630:	bffdfff8 	.word	0xbffdfff8
 8001634:	cccccccd 	.word	0xcccccccd
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_DMA_Start_IT>:
{
 800163c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800163e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001642:	2c01      	cmp	r4, #1
 8001644:	d032      	beq.n	80016ac <HAL_DMA_Start_IT+0x70>
 8001646:	2401      	movs	r4, #1
 8001648:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800164c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001650:	2c01      	cmp	r4, #1
 8001652:	d004      	beq.n	800165e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001654:	2300      	movs	r3, #0
 8001656:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800165a:	2002      	movs	r0, #2
}
 800165c:	bd38      	pop	{r3, r4, r5, pc}
 800165e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001660:	2002      	movs	r0, #2
 8001662:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001666:	2000      	movs	r0, #0
 8001668:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800166a:	6825      	ldr	r5, [r4, #0]
 800166c:	6828      	ldr	r0, [r5, #0]
 800166e:	f020 0001 	bic.w	r0, r0, #1
 8001672:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff ff95 	bl	80015a4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800167a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800167c:	b15b      	cbz	r3, 8001696 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f043 030e 	orr.w	r3, r3, #14
 8001686:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001688:	6822      	ldr	r2, [r4, #0]
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001692:	2000      	movs	r0, #0
 8001694:	e7e2      	b.n	800165c <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001696:	6822      	ldr	r2, [r4, #0]
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	f043 030a 	orr.w	r3, r3, #10
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e7ed      	b.n	8001688 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80016ac:	2002      	movs	r0, #2
 80016ae:	e7d5      	b.n	800165c <HAL_DMA_Start_IT+0x20>

080016b0 <HAL_DMA_Abort_IT>:
{  
 80016b0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016b2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d003      	beq.n	80016c2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	2304      	movs	r3, #4
 80016bc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80016be:	2001      	movs	r0, #1
}
 80016c0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c2:	6802      	ldr	r2, [r0, #0]
 80016c4:	6813      	ldr	r3, [r2, #0]
 80016c6:	f023 030e 	bic.w	r3, r3, #14
 80016ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80016cc:	6802      	ldr	r2, [r0, #0]
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016d6:	6803      	ldr	r3, [r0, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_DMA_Abort_IT+0x90>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d014      	beq.n	8001708 <HAL_DMA_Abort_IT+0x58>
 80016de:	3214      	adds	r2, #20
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d01f      	beq.n	8001724 <HAL_DMA_Abort_IT+0x74>
 80016e4:	3214      	adds	r2, #20
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01e      	beq.n	8001728 <HAL_DMA_Abort_IT+0x78>
 80016ea:	3214      	adds	r2, #20
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d01e      	beq.n	800172e <HAL_DMA_Abort_IT+0x7e>
 80016f0:	3214      	adds	r2, #20
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01e      	beq.n	8001734 <HAL_DMA_Abort_IT+0x84>
 80016f6:	3214      	adds	r2, #20
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d002      	beq.n	8001702 <HAL_DMA_Abort_IT+0x52>
 80016fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001700:	e003      	b.n	800170a <HAL_DMA_Abort_IT+0x5a>
 8001702:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001706:	e000      	b.n	800170a <HAL_DMA_Abort_IT+0x5a>
 8001708:	2201      	movs	r2, #1
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_DMA_Abort_IT+0x94>)
 800170c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800170e:	2301      	movs	r3, #1
 8001710:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001714:	2300      	movs	r3, #0
 8001716:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800171a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800171c:	b16b      	cbz	r3, 800173a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800171e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2000      	movs	r0, #0
 8001722:	e7cd      	b.n	80016c0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001724:	2210      	movs	r2, #16
 8001726:	e7f0      	b.n	800170a <HAL_DMA_Abort_IT+0x5a>
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	e7ed      	b.n	800170a <HAL_DMA_Abort_IT+0x5a>
 800172e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001732:	e7ea      	b.n	800170a <HAL_DMA_Abort_IT+0x5a>
 8001734:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001738:	e7e7      	b.n	800170a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2000      	movs	r0, #0
 800173c:	e7c0      	b.n	80016c0 <HAL_DMA_Abort_IT+0x10>
 800173e:	bf00      	nop
 8001740:	40020008 	.word	0x40020008
 8001744:	40020000 	.word	0x40020000

08001748 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <FLASH_Program_HalfWord+0x14>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800174e:	4a04      	ldr	r2, [pc, #16]	; (8001760 <FLASH_Program_HalfWord+0x18>)
 8001750:	6913      	ldr	r3, [r2, #16]
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001758:	8001      	strh	r1, [r0, #0]
}
 800175a:	4770      	bx	lr
 800175c:	20000550 	.word	0x20000550
 8001760:	40022000 	.word	0x40022000

08001764 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <FLASH_SetErrorCode+0x6c>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f013 0f10 	tst.w	r3, #16
 800176c:	d027      	beq.n	80017be <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <FLASH_SetErrorCode+0x70>)
 8001770:	69d3      	ldr	r3, [r2, #28]
 8001772:	f043 0302 	orr.w	r3, r3, #2
 8001776:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001778:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <FLASH_SetErrorCode+0x6c>)
 800177c:	68d2      	ldr	r2, [r2, #12]
 800177e:	f012 0f04 	tst.w	r2, #4
 8001782:	d006      	beq.n	8001792 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001784:	4913      	ldr	r1, [pc, #76]	; (80017d4 <FLASH_SetErrorCode+0x70>)
 8001786:	69ca      	ldr	r2, [r1, #28]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800178e:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <FLASH_SetErrorCode+0x6c>)
 8001794:	69d2      	ldr	r2, [r2, #28]
 8001796:	f012 0f01 	tst.w	r2, #1
 800179a:	d009      	beq.n	80017b0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800179c:	490d      	ldr	r1, [pc, #52]	; (80017d4 <FLASH_SetErrorCode+0x70>)
 800179e:	69ca      	ldr	r2, [r1, #28]
 80017a0:	f042 0204 	orr.w	r2, r2, #4
 80017a4:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017a6:	490a      	ldr	r1, [pc, #40]	; (80017d0 <FLASH_SetErrorCode+0x6c>)
 80017a8:	69ca      	ldr	r2, [r1, #28]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017b0:	f240 1201 	movw	r2, #257	; 0x101
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d004      	beq.n	80017c2 <FLASH_SetErrorCode+0x5e>
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <FLASH_SetErrorCode+0x6c>)
 80017ba:	60d3      	str	r3, [r2, #12]
}  
 80017bc:	4770      	bx	lr
  uint32_t flags = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	e7db      	b.n	800177a <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017c2:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <FLASH_SetErrorCode+0x6c>)
 80017c4:	69d3      	ldr	r3, [r2, #28]
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	61d3      	str	r3, [r2, #28]
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000
 80017d4:	20000550 	.word	0x20000550

080017d8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_FLASH_Unlock+0x2c>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017e0:	d00d      	beq.n	80017fe <HAL_FLASH_Unlock+0x26>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_FLASH_Unlock+0x2c>)
 80017e4:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_FLASH_Unlock+0x30>)
 80017e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017e8:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80017ec:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017f4:	d001      	beq.n	80017fa <HAL_FLASH_Unlock+0x22>
      status = HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
}
 80017f8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80017fa:	2000      	movs	r0, #0
 80017fc:	4770      	bx	lr
 80017fe:	2000      	movs	r0, #0
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40022000 	.word	0x40022000
 8001808:	45670123 	.word	0x45670123

0800180c <FLASH_WaitForLastOperation>:
{
 800180c:	b538      	push	{r3, r4, r5, lr}
 800180e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff faf8 	bl	8000e04 <HAL_GetTick>
 8001814:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <FLASH_WaitForLastOperation+0x68>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f013 0f01 	tst.w	r3, #1
 800181e:	d00a      	beq.n	8001836 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001820:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001824:	d0f7      	beq.n	8001816 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001826:	b30c      	cbz	r4, 800186c <FLASH_WaitForLastOperation+0x60>
 8001828:	f7ff faec 	bl	8000e04 <HAL_GetTick>
 800182c:	1b40      	subs	r0, r0, r5
 800182e:	42a0      	cmp	r0, r4
 8001830:	d9f1      	bls.n	8001816 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001832:	2003      	movs	r0, #3
 8001834:	e019      	b.n	800186a <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <FLASH_WaitForLastOperation+0x68>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f013 0f20 	tst.w	r3, #32
 800183e:	d002      	beq.n	8001846 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <FLASH_WaitForLastOperation+0x68>)
 8001842:	2220      	movs	r2, #32
 8001844:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <FLASH_WaitForLastOperation+0x68>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f013 0f10 	tst.w	r3, #16
 800184e:	d109      	bne.n	8001864 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <FLASH_WaitForLastOperation+0x68>)
 8001852:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001854:	f013 0f01 	tst.w	r3, #1
 8001858:	d104      	bne.n	8001864 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <FLASH_WaitForLastOperation+0x68>)
 800185c:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800185e:	f013 0f04 	tst.w	r3, #4
 8001862:	d005      	beq.n	8001870 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8001864:	f7ff ff7e 	bl	8001764 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
}
 800186a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 800186c:	2003      	movs	r0, #3
 800186e:	e7fc      	b.n	800186a <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8001870:	2000      	movs	r0, #0
 8001872:	e7fa      	b.n	800186a <FLASH_WaitForLastOperation+0x5e>
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_FLASH_Program>:
{
 8001878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800187c:	4c23      	ldr	r4, [pc, #140]	; (800190c <HAL_FLASH_Program+0x94>)
 800187e:	7e24      	ldrb	r4, [r4, #24]
 8001880:	2c01      	cmp	r4, #1
 8001882:	d041      	beq.n	8001908 <HAL_FLASH_Program+0x90>
 8001884:	461e      	mov	r6, r3
 8001886:	4690      	mov	r8, r2
 8001888:	460f      	mov	r7, r1
 800188a:	4604      	mov	r4, r0
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_FLASH_Program+0x94>)
 800188e:	2201      	movs	r2, #1
 8001890:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001892:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001896:	f7ff ffb9 	bl	800180c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800189a:	4603      	mov	r3, r0
 800189c:	bb70      	cbnz	r0, 80018fc <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800189e:	2c01      	cmp	r4, #1
 80018a0:	d029      	beq.n	80018f6 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80018a2:	2c02      	cmp	r4, #2
 80018a4:	d024      	beq.n	80018f0 <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 80018a6:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 80018aa:	2400      	movs	r4, #0
 80018ac:	454c      	cmp	r4, r9
 80018ae:	d225      	bcs.n	80018fc <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80018b0:	0121      	lsls	r1, r4, #4
 80018b2:	f1c1 0220 	rsb	r2, r1, #32
 80018b6:	f1a1 0320 	sub.w	r3, r1, #32
 80018ba:	fa28 f101 	lsr.w	r1, r8, r1
 80018be:	fa06 f202 	lsl.w	r2, r6, r2
 80018c2:	4311      	orrs	r1, r2
 80018c4:	fa26 f303 	lsr.w	r3, r6, r3
 80018c8:	4319      	orrs	r1, r3
 80018ca:	b289      	uxth	r1, r1
 80018cc:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80018d0:	f7ff ff3a 	bl	8001748 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018d8:	f7ff ff98 	bl	800180c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_FLASH_Program+0x98>)
 80018de:	691d      	ldr	r5, [r3, #16]
 80018e0:	f025 0501 	bic.w	r5, r5, #1
 80018e4:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 80018e6:	4603      	mov	r3, r0
 80018e8:	b940      	cbnz	r0, 80018fc <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 80018ea:	3401      	adds	r4, #1
 80018ec:	b2e4      	uxtb	r4, r4
 80018ee:	e7dd      	b.n	80018ac <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 80018f0:	f04f 0902 	mov.w	r9, #2
 80018f4:	e7d9      	b.n	80018aa <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 80018f6:	f04f 0901 	mov.w	r9, #1
 80018fa:	e7d6      	b.n	80018aa <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 80018fc:	4a03      	ldr	r2, [pc, #12]	; (800190c <HAL_FLASH_Program+0x94>)
 80018fe:	2100      	movs	r1, #0
 8001900:	7611      	strb	r1, [r2, #24]
}
 8001902:	4618      	mov	r0, r3
 8001904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8001908:	2302      	movs	r3, #2
 800190a:	e7fa      	b.n	8001902 <HAL_FLASH_Program+0x8a>
 800190c:	20000550 	.word	0x20000550
 8001910:	40022000 	.word	0x40022000

08001914 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <FLASH_MassErase+0x1c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <FLASH_MassErase+0x20>)
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	f042 0204 	orr.w	r2, r2, #4
 8001922:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800192a:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000550 	.word	0x20000550
 8001934:	40022000 	.word	0x40022000

08001938 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <FLASH_PageErase+0x1c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <FLASH_PageErase+0x20>)
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	f042 0202 	orr.w	r2, r2, #2
 8001946:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001948:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001950:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001952:	4770      	bx	lr
 8001954:	20000550 	.word	0x20000550
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_FLASHEx_Erase+0x9c>)
 800195e:	7e1b      	ldrb	r3, [r3, #24]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d046      	beq.n	80019f2 <HAL_FLASHEx_Erase+0x96>
{
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	460e      	mov	r6, r1
 8001968:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_FLASHEx_Erase+0x9c>)
 800196c:	2201      	movs	r2, #1
 800196e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001970:	6803      	ldr	r3, [r0, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d020      	beq.n	80019b8 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001976:	f24c 3050 	movw	r0, #50000	; 0xc350
 800197a:	f7ff ff47 	bl	800180c <FLASH_WaitForLastOperation>
 800197e:	bb90      	cbnz	r0, 80019e6 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001986:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001988:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800198a:	68e1      	ldr	r1, [r4, #12]
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8001992:	42ab      	cmp	r3, r5
 8001994:	d928      	bls.n	80019e8 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8001996:	4628      	mov	r0, r5
 8001998:	f7ff ffce 	bl	8001938 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800199c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019a0:	f7ff ff34 	bl	800180c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80019a4:	4a15      	ldr	r2, [pc, #84]	; (80019fc <HAL_FLASHEx_Erase+0xa0>)
 80019a6:	6913      	ldr	r3, [r2, #16]
 80019a8:	f023 0302 	bic.w	r3, r3, #2
 80019ac:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80019ae:	4602      	mov	r2, r0
 80019b0:	b9b8      	cbnz	r0, 80019e2 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 80019b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019b6:	e7e8      	b.n	800198a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019bc:	f7ff ff26 	bl	800180c <FLASH_WaitForLastOperation>
 80019c0:	b108      	cbz	r0, 80019c6 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80019c2:	2201      	movs	r2, #1
 80019c4:	e010      	b.n	80019e8 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff ffa4 	bl	8001914 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d0:	f7ff ff1c 	bl	800180c <FLASH_WaitForLastOperation>
 80019d4:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019d6:	4909      	ldr	r1, [pc, #36]	; (80019fc <HAL_FLASHEx_Erase+0xa0>)
 80019d8:	690b      	ldr	r3, [r1, #16]
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	610b      	str	r3, [r1, #16]
 80019e0:	e002      	b.n	80019e8 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 80019e2:	6035      	str	r5, [r6, #0]
            break;
 80019e4:	e000      	b.n	80019e8 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80019e6:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_FLASHEx_Erase+0x9c>)
 80019ea:	2100      	movs	r1, #0
 80019ec:	7619      	strb	r1, [r3, #24]
}
 80019ee:	4610      	mov	r0, r2
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80019f2:	2202      	movs	r2, #2
}
 80019f4:	4610      	mov	r0, r2
 80019f6:	4770      	bx	lr
 80019f8:	20000550 	.word	0x20000550
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b4f0      	push	{r4, r5, r6, r7}
 8001a02:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a04:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001a06:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a08:	e0a2      	b.n	8001b50 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	d05a      	beq.n	8001ac4 <HAL_GPIO_Init+0xc4>
 8001a0e:	2d01      	cmp	r5, #1
 8001a10:	d100      	bne.n	8001a14 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a12:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d869      	bhi.n	8001aec <HAL_GPIO_Init+0xec>
 8001a18:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d869      	bhi.n	8001af2 <HAL_GPIO_Init+0xf2>
 8001a1e:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a20:	f8dc 4000 	ldr.w	r4, [ip]
 8001a24:	270f      	movs	r7, #15
 8001a26:	40af      	lsls	r7, r5
 8001a28:	ea24 0407 	bic.w	r4, r4, r7
 8001a2c:	fa06 f505 	lsl.w	r5, r6, r5
 8001a30:	432c      	orrs	r4, r5
 8001a32:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a36:	684c      	ldr	r4, [r1, #4]
 8001a38:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a40:	4c5f      	ldr	r4, [pc, #380]	; (8001bc0 <HAL_GPIO_Init+0x1c0>)
 8001a42:	69a5      	ldr	r5, [r4, #24]
 8001a44:	f045 0501 	orr.w	r5, r5, #1
 8001a48:	61a5      	str	r5, [r4, #24]
 8001a4a:	69a4      	ldr	r4, [r4, #24]
 8001a4c:	f004 0401 	and.w	r4, r4, #1
 8001a50:	9401      	str	r4, [sp, #4]
 8001a52:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	0895      	lsrs	r5, r2, #2
 8001a56:	1caf      	adds	r7, r5, #2
 8001a58:	4c5a      	ldr	r4, [pc, #360]	; (8001bc4 <HAL_GPIO_Init+0x1c4>)
 8001a5a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a5e:	f002 0703 	and.w	r7, r2, #3
 8001a62:	00bf      	lsls	r7, r7, #2
 8001a64:	f04f 0c0f 	mov.w	ip, #15
 8001a68:	fa0c fc07 	lsl.w	ip, ip, r7
 8001a6c:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a70:	4c55      	ldr	r4, [pc, #340]	; (8001bc8 <HAL_GPIO_Init+0x1c8>)
 8001a72:	42a0      	cmp	r0, r4
 8001a74:	d043      	beq.n	8001afe <HAL_GPIO_Init+0xfe>
 8001a76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a7a:	42a0      	cmp	r0, r4
 8001a7c:	f000 8081 	beq.w	8001b82 <HAL_GPIO_Init+0x182>
 8001a80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a84:	42a0      	cmp	r0, r4
 8001a86:	d07e      	beq.n	8001b86 <HAL_GPIO_Init+0x186>
 8001a88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	d034      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a90:	2404      	movs	r4, #4
 8001a92:	e035      	b.n	8001b00 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8001a94:	4f4d      	ldr	r7, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x1cc>)
 8001a96:	42bd      	cmp	r5, r7
 8001a98:	d014      	beq.n	8001ac4 <HAL_GPIO_Init+0xc4>
 8001a9a:	d90b      	bls.n	8001ab4 <HAL_GPIO_Init+0xb4>
 8001a9c:	4f4c      	ldr	r7, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x1d0>)
 8001a9e:	42bd      	cmp	r5, r7
 8001aa0:	d010      	beq.n	8001ac4 <HAL_GPIO_Init+0xc4>
 8001aa2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001aa6:	42bd      	cmp	r5, r7
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_GPIO_Init+0xc4>
 8001aaa:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001aae:	42bd      	cmp	r5, r7
 8001ab0:	d1b0      	bne.n	8001a14 <HAL_GPIO_Init+0x14>
 8001ab2:	e007      	b.n	8001ac4 <HAL_GPIO_Init+0xc4>
 8001ab4:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001ab8:	42bd      	cmp	r5, r7
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0xc4>
 8001abc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001ac0:	42bd      	cmp	r5, r7
 8001ac2:	d1a7      	bne.n	8001a14 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac4:	688d      	ldr	r5, [r1, #8]
 8001ac6:	b17d      	cbz	r5, 8001ae8 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	2d01      	cmp	r5, #1
 8001aca:	d008      	beq.n	8001ade <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8001acc:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ace:	2608      	movs	r6, #8
 8001ad0:	e7a0      	b.n	8001a14 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad2:	68ce      	ldr	r6, [r1, #12]
 8001ad4:	3608      	adds	r6, #8
          break;
 8001ad6:	e79d      	b.n	8001a14 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad8:	68ce      	ldr	r6, [r1, #12]
 8001ada:	360c      	adds	r6, #12
          break;
 8001adc:	e79a      	b.n	8001a14 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001ade:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae0:	2608      	movs	r6, #8
 8001ae2:	e797      	b.n	8001a14 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	e795      	b.n	8001a14 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae8:	2604      	movs	r6, #4
 8001aea:	e793      	b.n	8001a14 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aec:	f100 0c04 	add.w	ip, r0, #4
 8001af0:	e793      	b.n	8001a1a <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af2:	f1a2 0508 	sub.w	r5, r2, #8
 8001af6:	00ad      	lsls	r5, r5, #2
 8001af8:	e792      	b.n	8001a20 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001afa:	2403      	movs	r4, #3
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x100>
 8001afe:	2400      	movs	r4, #0
 8001b00:	40bc      	lsls	r4, r7
 8001b02:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001b06:	3502      	adds	r5, #2
 8001b08:	4f2e      	ldr	r7, [pc, #184]	; (8001bc4 <HAL_GPIO_Init+0x1c4>)
 8001b0a:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0e:	684c      	ldr	r4, [r1, #4]
 8001b10:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001b14:	d039      	beq.n	8001b8a <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b16:	4d2f      	ldr	r5, [pc, #188]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001b18:	682c      	ldr	r4, [r5, #0]
 8001b1a:	431c      	orrs	r4, r3
 8001b1c:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1e:	684c      	ldr	r4, [r1, #4]
 8001b20:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001b24:	d037      	beq.n	8001b96 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b26:	4d2b      	ldr	r5, [pc, #172]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001b28:	686c      	ldr	r4, [r5, #4]
 8001b2a:	431c      	orrs	r4, r3
 8001b2c:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2e:	684c      	ldr	r4, [r1, #4]
 8001b30:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8001b34:	d035      	beq.n	8001ba2 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b36:	4d27      	ldr	r5, [pc, #156]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001b38:	68ac      	ldr	r4, [r5, #8]
 8001b3a:	431c      	orrs	r4, r3
 8001b3c:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3e:	684c      	ldr	r4, [r1, #4]
 8001b40:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001b44:	d033      	beq.n	8001bae <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b46:	4d23      	ldr	r5, [pc, #140]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001b48:	68ec      	ldr	r4, [r5, #12]
 8001b4a:	4323      	orrs	r3, r4
 8001b4c:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001b4e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b50:	680b      	ldr	r3, [r1, #0]
 8001b52:	fa33 f402 	lsrs.w	r4, r3, r2
 8001b56:	d030      	beq.n	8001bba <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8001b58:	2401      	movs	r4, #1
 8001b5a:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5c:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	d1f5      	bne.n	8001b4e <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8001b62:	684d      	ldr	r5, [r1, #4]
 8001b64:	2d12      	cmp	r5, #18
 8001b66:	d0b7      	beq.n	8001ad8 <HAL_GPIO_Init+0xd8>
 8001b68:	d894      	bhi.n	8001a94 <HAL_GPIO_Init+0x94>
 8001b6a:	2d02      	cmp	r5, #2
 8001b6c:	d0b1      	beq.n	8001ad2 <HAL_GPIO_Init+0xd2>
 8001b6e:	f67f af4c 	bls.w	8001a0a <HAL_GPIO_Init+0xa>
 8001b72:	2d03      	cmp	r5, #3
 8001b74:	d0b6      	beq.n	8001ae4 <HAL_GPIO_Init+0xe4>
 8001b76:	2d11      	cmp	r5, #17
 8001b78:	f47f af4c 	bne.w	8001a14 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b7c:	68ce      	ldr	r6, [r1, #12]
 8001b7e:	3604      	adds	r6, #4
          break;
 8001b80:	e748      	b.n	8001a14 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b82:	2401      	movs	r4, #1
 8001b84:	e7bc      	b.n	8001b00 <HAL_GPIO_Init+0x100>
 8001b86:	2402      	movs	r4, #2
 8001b88:	e7ba      	b.n	8001b00 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8a:	4d12      	ldr	r5, [pc, #72]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001b8c:	682c      	ldr	r4, [r5, #0]
 8001b8e:	ea24 0403 	bic.w	r4, r4, r3
 8001b92:	602c      	str	r4, [r5, #0]
 8001b94:	e7c3      	b.n	8001b1e <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b96:	4d0f      	ldr	r5, [pc, #60]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001b98:	686c      	ldr	r4, [r5, #4]
 8001b9a:	ea24 0403 	bic.w	r4, r4, r3
 8001b9e:	606c      	str	r4, [r5, #4]
 8001ba0:	e7c5      	b.n	8001b2e <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba2:	4d0c      	ldr	r5, [pc, #48]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001ba4:	68ac      	ldr	r4, [r5, #8]
 8001ba6:	ea24 0403 	bic.w	r4, r4, r3
 8001baa:	60ac      	str	r4, [r5, #8]
 8001bac:	e7c7      	b.n	8001b3e <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bae:	4d09      	ldr	r5, [pc, #36]	; (8001bd4 <HAL_GPIO_Init+0x1d4>)
 8001bb0:	68ec      	ldr	r4, [r5, #12]
 8001bb2:	ea24 0303 	bic.w	r3, r4, r3
 8001bb6:	60eb      	str	r3, [r5, #12]
 8001bb8:	e7c9      	b.n	8001b4e <HAL_GPIO_Init+0x14e>
  }
}
 8001bba:	b002      	add	sp, #8
 8001bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	10310000 	.word	0x10310000
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd8:	b912      	cbnz	r2, 8001be0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bda:	0409      	lsls	r1, r1, #16
 8001bdc:	6101      	str	r1, [r0, #16]
  }
}
 8001bde:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001be0:	6101      	str	r1, [r0, #16]
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001be8:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	4203      	tst	r3, r0
 8001bf0:	d100      	bne.n	8001bf4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001bf2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001bf6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf8:	f7ff fff4 	bl	8001be4 <HAL_GPIO_EXTI_Callback>
}
 8001bfc:	e7f9      	b.n	8001bf2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001bfe:	bf00      	nop
 8001c00:	40010400 	.word	0x40010400

08001c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c04:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <RCC_Delay+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <RCC_Delay+0x28>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	0a5b      	lsrs	r3, r3, #9
 8001c12:	fb00 f003 	mul.w	r0, r0, r3
 8001c16:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8001c18:	bf00      	nop
  }
  while (Delay --);
 8001c1a:	9b01      	ldr	r3, [sp, #4]
 8001c1c:	1e5a      	subs	r2, r3, #1
 8001c1e:	9201      	str	r2, [sp, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f9      	bne.n	8001c18 <RCC_Delay+0x14>
}
 8001c24:	b002      	add	sp, #8
 8001c26:	4770      	bx	lr
 8001c28:	200000d8 	.word	0x200000d8
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001c30:	2800      	cmp	r0, #0
 8001c32:	f000 81f5 	beq.w	8002020 <HAL_RCC_OscConfig+0x3f0>
{
 8001c36:	b570      	push	{r4, r5, r6, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3c:	6803      	ldr	r3, [r0, #0]
 8001c3e:	f013 0f01 	tst.w	r3, #1
 8001c42:	d02c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c44:	4bab      	ldr	r3, [pc, #684]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d01d      	beq.n	8001c8c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c50:	4ba8      	ldr	r3, [pc, #672]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d012      	beq.n	8001c82 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c62:	d041      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xb8>
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d155      	bne.n	8001d14 <HAL_RCC_OscConfig+0xe4>
 8001c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c6c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e037      	b.n	8001cf2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c82:	4b9c      	ldr	r3, [pc, #624]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c8a:	d0e7      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b99      	ldr	r3, [pc, #612]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_OscConfig+0x6e>
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 81c3 	beq.w	8002024 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	f013 0f02 	tst.w	r3, #2
 8001ca4:	d076      	beq.n	8001d94 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b93      	ldr	r3, [pc, #588]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f013 0f0c 	tst.w	r3, #12
 8001cae:	d05f      	beq.n	8001d70 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cb0:	4b90      	ldr	r3, [pc, #576]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d054      	beq.n	8001d66 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbc:	6923      	ldr	r3, [r4, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 808a 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <HAL_RCC_OscConfig+0x2c8>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cca:	f7ff f89b 	bl	8000e04 <HAL_GetTick>
 8001cce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f013 0f02 	tst.w	r3, #2
 8001cd8:	d175      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff f893 	bl	8000e04 <HAL_GetTick>
 8001cde:	1b40      	subs	r0, r0, r5
 8001ce0:	2802      	cmp	r0, #2
 8001ce2:	d9f5      	bls.n	8001cd0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	e1a0      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	4a82      	ldr	r2, [pc, #520]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001cea:	6813      	ldr	r3, [r2, #0]
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	b343      	cbz	r3, 8001d48 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f885 	bl	8000e04 <HAL_GetTick>
 8001cfa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfc:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d04:	d1cb      	bne.n	8001c9e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d06:	f7ff f87d 	bl	8000e04 <HAL_GetTick>
 8001d0a:	1b40      	subs	r0, r0, r5
 8001d0c:	2864      	cmp	r0, #100	; 0x64
 8001d0e:	d9f5      	bls.n	8001cfc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001d10:	2003      	movs	r0, #3
 8001d12:	e18a      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_OscConfig+0xfe>
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e7e1      	b.n	8001cf2 <HAL_RCC_OscConfig+0xc2>
 8001d2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d32:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e7d4      	b.n	8001cf2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001d48:	f7ff f85c 	bl	8000e04 <HAL_GetTick>
 8001d4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d56:	d0a2      	beq.n	8001c9e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f854 	bl	8000e04 <HAL_GetTick>
 8001d5c:	1b40      	subs	r0, r0, r5
 8001d5e:	2864      	cmp	r0, #100	; 0x64
 8001d60:	d9f5      	bls.n	8001d4e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001d62:	2003      	movs	r0, #3
 8001d64:	e161      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d6e:	d1a5      	bne.n	8001cbc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d70:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f013 0f02 	tst.w	r3, #2
 8001d78:	d004      	beq.n	8001d84 <HAL_RCC_OscConfig+0x154>
 8001d7a:	6923      	ldr	r3, [r4, #16]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
 8001d82:	e152      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	4a5b      	ldr	r2, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d8c:	6961      	ldr	r1, [r4, #20]
 8001d8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d92:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	f013 0f08 	tst.w	r3, #8
 8001d9a:	d032      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	69a3      	ldr	r3, [r4, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d05b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001da2:	4b56      	ldr	r3, [pc, #344]	; (8001efc <HAL_RCC_OscConfig+0x2cc>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001da8:	f7ff f82c 	bl	8000e04 <HAL_GetTick>
 8001dac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f013 0f02 	tst.w	r3, #2
 8001db6:	d121      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff f824 	bl	8000e04 <HAL_GetTick>
 8001dbc:	1b40      	subs	r0, r0, r5
 8001dbe:	2802      	cmp	r0, #2
 8001dc0:	d9f5      	bls.n	8001dae <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	e131      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001dce:	6961      	ldr	r1, [r4, #20]
 8001dd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e7dd      	b.n	8001d94 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001dd8:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x2c8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dde:	f7ff f811 	bl	8000e04 <HAL_GetTick>
 8001de2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f013 0f02 	tst.w	r3, #2
 8001dec:	d0d2      	beq.n	8001d94 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff f809 	bl	8000e04 <HAL_GetTick>
 8001df2:	1b40      	subs	r0, r0, r5
 8001df4:	2802      	cmp	r0, #2
 8001df6:	d9f5      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001df8:	2003      	movs	r0, #3
 8001dfa:	e116      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff ff01 	bl	8001c04 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	f013 0f04 	tst.w	r3, #4
 8001e08:	f000 8098 	beq.w	8001f3c <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e14:	d133      	bne.n	8001e7e <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e1e:	61da      	str	r2, [r3, #28]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e2a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <HAL_RCC_OscConfig+0x2d0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e34:	d025      	beq.n	8001e82 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e36:	68e3      	ldr	r3, [r4, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d036      	beq.n	8001eaa <HAL_RCC_OscConfig+0x27a>
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d14c      	bne.n	8001eda <HAL_RCC_OscConfig+0x2aa>
 8001e40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e44:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	621a      	str	r2, [r3, #32]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	621a      	str	r2, [r3, #32]
 8001e58:	e02c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_RCC_OscConfig+0x2cc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e60:	f7fe ffd0 	bl	8000e04 <HAL_GetTick>
 8001e64:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f013 0f02 	tst.w	r3, #2
 8001e6e:	d0c8      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7fe ffc8 	bl	8000e04 <HAL_GetTick>
 8001e74:	1b40      	subs	r0, r0, r5
 8001e76:	2802      	cmp	r0, #2
 8001e78:	d9f5      	bls.n	8001e66 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	e0d5      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2500      	movs	r5, #0
 8001e80:	e7d4      	b.n	8001e2c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_RCC_OscConfig+0x2d0>)
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001e8c:	f7fe ffba 	bl	8000e04 <HAL_GetTick>
 8001e90:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x2d0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e9a:	d1cc      	bne.n	8001e36 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7fe ffb2 	bl	8000e04 <HAL_GetTick>
 8001ea0:	1b80      	subs	r0, r0, r6
 8001ea2:	2864      	cmp	r0, #100	; 0x64
 8001ea4:	d9f5      	bls.n	8001e92 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	e0bf      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001eac:	6a13      	ldr	r3, [r2, #32]
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb4:	68e3      	ldr	r3, [r4, #12]
 8001eb6:	b37b      	cbz	r3, 8001f18 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8001eb8:	f7fe ffa4 	bl	8000e04 <HAL_GetTick>
 8001ebc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f013 0f02 	tst.w	r3, #2
 8001ec6:	d138      	bne.n	8001f3a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ff9c 	bl	8000e04 <HAL_GetTick>
 8001ecc:	1b80      	subs	r0, r0, r6
 8001ece:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ed2:	4298      	cmp	r0, r3
 8001ed4:	d9f3      	bls.n	8001ebe <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8001ed6:	2003      	movs	r0, #3
 8001ed8:	e0a7      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d012      	beq.n	8001f04 <HAL_RCC_OscConfig+0x2d4>
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_OscConfig+0x2c4>)
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	621a      	str	r2, [r3, #32]
 8001ee8:	6a1a      	ldr	r2, [r3, #32]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	621a      	str	r2, [r3, #32]
 8001ef0:	e7e0      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	42420000 	.word	0x42420000
 8001efc:	42420480 	.word	0x42420480
 8001f00:	40007000 	.word	0x40007000
 8001f04:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	f042 0204 	orr.w	r2, r2, #4
 8001f0c:	621a      	str	r2, [r3, #32]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	621a      	str	r2, [r3, #32]
 8001f16:	e7cd      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8001f18:	f7fe ff74 	bl	8000e04 <HAL_GetTick>
 8001f1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	f013 0f02 	tst.w	r3, #2
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe ff6c 	bl	8000e04 <HAL_GetTick>
 8001f2c:	1b80      	subs	r0, r0, r6
 8001f2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f32:	4298      	cmp	r0, r3
 8001f34:	d9f3      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8001f36:	2003      	movs	r0, #3
 8001f38:	e077      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8001f3a:	b9e5      	cbnz	r5, 8001f76 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3c:	69e3      	ldr	r3, [r4, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d072      	beq.n	8002028 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f42:	4a3d      	ldr	r2, [pc, #244]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001f44:	6852      	ldr	r2, [r2, #4]
 8001f46:	f002 020c 	and.w	r2, r2, #12
 8001f4a:	2a08      	cmp	r2, #8
 8001f4c:	d056      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d017      	beq.n	8001f82 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x40c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f58:	f7fe ff54 	bl	8000e04 <HAL_GetTick>
 8001f5c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f66:	d047      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe ff4c 	bl	8000e04 <HAL_GetTick>
 8001f6c:	1b00      	subs	r0, r0, r4
 8001f6e:	2802      	cmp	r0, #2
 8001f70:	d9f5      	bls.n	8001f5e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8001f72:	2003      	movs	r0, #3
 8001f74:	e059      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4a30      	ldr	r2, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001f78:	69d3      	ldr	r3, [r2, #28]
 8001f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	61d3      	str	r3, [r2, #28]
 8001f80:	e7dc      	b.n	8001f3c <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_RCC_OscConfig+0x40c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f88:	f7fe ff3c 	bl	8000e04 <HAL_GetTick>
 8001f8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f96:	d006      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe ff34 	bl	8000e04 <HAL_GetTick>
 8001f9c:	1b40      	subs	r0, r0, r5
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d9f5      	bls.n	8001f8e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	e041      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa6:	6a23      	ldr	r3, [r4, #32]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d01a      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fae:	4922      	ldr	r1, [pc, #136]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001fb0:	684b      	ldr	r3, [r1, #4]
 8001fb2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001fb6:	6a22      	ldr	r2, [r4, #32]
 8001fb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001fba:	4302      	orrs	r2, r0
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_RCC_OscConfig+0x40c>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fc6:	f7fe ff1d 	bl	8000e04 <HAL_GetTick>
 8001fca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe ff15 	bl	8000e04 <HAL_GetTick>
 8001fda:	1b00      	subs	r0, r0, r4
 8001fdc:	2802      	cmp	r0, #2
 8001fde:	d9f5      	bls.n	8001fcc <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	e022      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8001fe6:	6853      	ldr	r3, [r2, #4]
 8001fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001fec:	68a1      	ldr	r1, [r4, #8]
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	6053      	str	r3, [r2, #4]
 8001ff2:	e7dc      	b.n	8001fae <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	e016      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d016      	beq.n	800202e <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_RCC_OscConfig+0x408>)
 8002002:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002008:	6a22      	ldr	r2, [r4, #32]
 800200a:	4291      	cmp	r1, r2
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 800200e:	2001      	movs	r0, #1
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002012:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002016:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002018:	4293      	cmp	r3, r2
 800201a:	d00a      	beq.n	8002032 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 800201c:	2001      	movs	r0, #1
 800201e:	e004      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8002020:	2001      	movs	r0, #1
}
 8002022:	4770      	bx	lr
        return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002028:	2000      	movs	r0, #0
}
 800202a:	b002      	add	sp, #8
 800202c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800202e:	2001      	movs	r0, #1
 8002030:	e7fb      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002032:	2000      	movs	r0, #0
 8002034:	e7f9      	b.n	800202a <HAL_RCC_OscConfig+0x3fa>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	42420060 	.word	0x42420060

08002040 <HAL_RCC_GetSysClockFreq>:
{
 8002040:	b410      	push	{r4}
 8002042:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002044:	4c16      	ldr	r4, [pc, #88]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002046:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800204a:	f10d 0c18 	add.w	ip, sp, #24
 800204e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002052:	8a23      	ldrh	r3, [r4, #16]
 8002054:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x64>)
 800205a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800205c:	f003 020c 	and.w	r2, r3, #12
 8002060:	2a08      	cmp	r2, #8
 8002062:	d11a      	bne.n	800209a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002064:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002068:	4462      	add	r2, ip
 800206a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800206e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002072:	d105      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x68>)
 8002076:	fb00 f002 	mul.w	r0, r0, r2
}
 800207a:	b007      	add	sp, #28
 800207c:	bc10      	pop	{r4}
 800207e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x64>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002088:	4463      	add	r3, ip
 800208a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <HAL_RCC_GetSysClockFreq+0x6c>)
 8002090:	fb00 f002 	mul.w	r0, r0, r2
 8002094:	fbb0 f0f3 	udiv	r0, r0, r3
 8002098:	e7ef      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800209a:	4804      	ldr	r0, [pc, #16]	; (80020ac <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800209c:	e7ed      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x3a>
 800209e:	bf00      	nop
 80020a0:	08005df4 	.word	0x08005df4
 80020a4:	40021000 	.word	0x40021000
 80020a8:	003d0900 	.word	0x003d0900
 80020ac:	007a1200 	.word	0x007a1200

080020b0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80020b0:	2800      	cmp	r0, #0
 80020b2:	f000 80a3 	beq.w	80021fc <HAL_RCC_ClockConfig+0x14c>
{
 80020b6:	b570      	push	{r4, r5, r6, lr}
 80020b8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ba:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x154>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	428b      	cmp	r3, r1
 80020c4:	d20c      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_RCC_ClockConfig+0x154>)
 80020c8:	6813      	ldr	r3, [r2, #0]
 80020ca:	f023 0307 	bic.w	r3, r3, #7
 80020ce:	430b      	orrs	r3, r1
 80020d0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	428b      	cmp	r3, r1
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80020dc:	2001      	movs	r0, #1
}
 80020de:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	f013 0f02 	tst.w	r3, #2
 80020e6:	d017      	beq.n	8002118 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	f013 0f04 	tst.w	r3, #4
 80020ec:	d004      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ee:	4a46      	ldr	r2, [pc, #280]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 80020f0:	6853      	ldr	r3, [r2, #4]
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	f013 0f08 	tst.w	r3, #8
 80020fe:	d004      	beq.n	800210a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002100:	4a41      	ldr	r2, [pc, #260]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 8002102:	6853      	ldr	r3, [r2, #4]
 8002104:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002108:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210a:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 800210c:	6853      	ldr	r3, [r2, #4]
 800210e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002112:	68a0      	ldr	r0, [r4, #8]
 8002114:	4303      	orrs	r3, r0
 8002116:	6053      	str	r3, [r2, #4]
 8002118:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	f013 0f01 	tst.w	r3, #1
 8002120:	d031      	beq.n	8002186 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	6863      	ldr	r3, [r4, #4]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002128:	2b02      	cmp	r3, #2
 800212a:	d025      	beq.n	8002178 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	4a36      	ldr	r2, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	f012 0f02 	tst.w	r2, #2
 8002134:	d064      	beq.n	8002200 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4934      	ldr	r1, [pc, #208]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 8002138:	684a      	ldr	r2, [r1, #4]
 800213a:	f022 0203 	bic.w	r2, r2, #3
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002142:	f7fe fe5f 	bl	8000e04 <HAL_GetTick>
 8002146:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	6862      	ldr	r2, [r4, #4]
 8002152:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002156:	d016      	beq.n	8002186 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fe54 	bl	8000e04 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002162:	4298      	cmp	r0, r3
 8002164:	d9f0      	bls.n	8002148 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002166:	2003      	movs	r0, #3
 8002168:	e7b9      	b.n	80020de <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002172:	d1e0      	bne.n	8002136 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002174:	2001      	movs	r0, #1
 8002176:	e7b2      	b.n	80020de <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002178:	4a23      	ldr	r2, [pc, #140]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002180:	d1d9      	bne.n	8002136 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
 8002184:	e7ab      	b.n	80020de <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_RCC_ClockConfig+0x154>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	42ab      	cmp	r3, r5
 8002190:	d90c      	bls.n	80021ac <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_RCC_ClockConfig+0x154>)
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	f023 0307 	bic.w	r3, r3, #7
 800219a:	432b      	orrs	r3, r5
 800219c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	42ab      	cmp	r3, r5
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e798      	b.n	80020de <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	f013 0f04 	tst.w	r3, #4
 80021b2:	d006      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 80021b6:	6853      	ldr	r3, [r2, #4]
 80021b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021bc:	68e1      	ldr	r1, [r4, #12]
 80021be:	430b      	orrs	r3, r1
 80021c0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f013 0f08 	tst.w	r3, #8
 80021c8:	d007      	beq.n	80021da <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 80021cc:	6853      	ldr	r3, [r2, #4]
 80021ce:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021d2:	6921      	ldr	r1, [r4, #16]
 80021d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021d8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021da:	f7ff ff31 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x158>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x15c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	40d8      	lsrs	r0, r3
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_RCC_ClockConfig+0x160>)
 80021ee:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_ClockConfig+0x164>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f7fe fdc2 	bl	8000d7c <HAL_InitTick>
  return HAL_OK;
 80021f8:	2000      	movs	r0, #0
 80021fa:	e770      	b.n	80020de <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80021fc:	2001      	movs	r0, #1
}
 80021fe:	4770      	bx	lr
        return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
 8002202:	e76c      	b.n	80020de <HAL_RCC_ClockConfig+0x2e>
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	08005ed8 	.word	0x08005ed8
 8002210:	200000d8 	.word	0x200000d8
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetHCLKFreq>:
}
 8002218:	4b01      	ldr	r3, [pc, #4]	; (8002220 <HAL_RCC_GetHCLKFreq+0x8>)
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	200000d8 	.word	0x200000d8

08002224 <HAL_RCC_GetPCLK1Freq>:
{
 8002224:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002226:	f7ff fff7 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_RCC_GetPCLK1Freq+0x18>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002232:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002234:	5cd3      	ldrb	r3, [r2, r3]
}
 8002236:	40d8      	lsrs	r0, r3
 8002238:	bd08      	pop	{r3, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	08005ee8 	.word	0x08005ee8

08002244 <HAL_RCC_GetPCLK2Freq>:
{
 8002244:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002246:	f7ff ffe7 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_GetPCLK2Freq+0x18>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
}
 8002256:	40d8      	lsrs	r0, r3
 8002258:	bd08      	pop	{r3, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	08005ee8 	.word	0x08005ee8

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800226a:	6803      	ldr	r3, [r0, #0]
 800226c:	f013 0f01 	tst.w	r3, #1
 8002270:	d034      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800227a:	d148      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002284:	61da      	str	r2, [r3, #28]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002290:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f413 7f80 	tst.w	r3, #256	; 0x100
 800229a:	d03a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022a4:	d011      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x66>
 80022a6:	6862      	ldr	r2, [r4, #4]
 80022a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d00c      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b0:	4a2e      	ldr	r2, [pc, #184]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80022b2:	6a13      	ldr	r3, [r2, #32]
 80022b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022b8:	492e      	ldr	r1, [pc, #184]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80022ba:	2601      	movs	r6, #1
 80022bc:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022be:	2600      	movs	r6, #0
 80022c0:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022c2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022c4:	f013 0f01 	tst.w	r3, #1
 80022c8:	d137      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ca:	4a28      	ldr	r2, [pc, #160]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80022cc:	6a13      	ldr	r3, [r2, #32]
 80022ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d2:	6861      	ldr	r1, [r4, #4]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d8:	2d00      	cmp	r5, #0
 80022da:	d13f      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f013 0f02 	tst.w	r3, #2
 80022e2:	d006      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022e4:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80022e6:	6853      	ldr	r3, [r2, #4]
 80022e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022ec:	68a1      	ldr	r1, [r4, #8]
 80022ee:	430b      	orrs	r3, r1
 80022f0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	f013 0f10 	tst.w	r3, #16
 80022f8:	d035      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80022fc:	6853      	ldr	r3, [r2, #4]
 80022fe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002302:	68e1      	ldr	r1, [r4, #12]
 8002304:	430b      	orrs	r3, r1
 8002306:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002308:	2000      	movs	r0, #0
}
 800230a:	b002      	add	sp, #8
 800230c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2500      	movs	r5, #0
 8002310:	e7bf      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002314:	6813      	ldr	r3, [r2, #0]
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800231c:	f7fe fd72 	bl	8000e04 <HAL_GetTick>
 8002320:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f413 7f80 	tst.w	r3, #256	; 0x100
 800232a:	d1b7      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232c:	f7fe fd6a 	bl	8000e04 <HAL_GetTick>
 8002330:	1b80      	subs	r0, r0, r6
 8002332:	2864      	cmp	r0, #100	; 0x64
 8002334:	d9f5      	bls.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8002336:	2003      	movs	r0, #3
 8002338:	e7e7      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 800233a:	f7fe fd63 	bl	8000e04 <HAL_GetTick>
 800233e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f013 0f02 	tst.w	r3, #2
 8002348:	d1bf      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fd5b 	bl	8000e04 <HAL_GetTick>
 800234e:	1b80      	subs	r0, r0, r6
 8002350:	f241 3388 	movw	r3, #5000	; 0x1388
 8002354:	4298      	cmp	r0, r3
 8002356:	d9f3      	bls.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8002358:	2003      	movs	r0, #3
 800235a:	e7d6      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	69d3      	ldr	r3, [r2, #28]
 800235e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002362:	61d3      	str	r3, [r2, #28]
 8002364:	e7ba      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
 8002368:	e7cf      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
 8002374:	42420440 	.word	0x42420440

08002378 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002378:	b530      	push	{r4, r5, lr}
 800237a:	b087      	sub	sp, #28
 800237c:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800237e:	4c38      	ldr	r4, [pc, #224]	; (8002460 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8002380:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002384:	f10d 0c18 	add.w	ip, sp, #24
 8002388:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800238c:	8a23      	ldrh	r3, [r4, #16]
 800238e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002392:	2d02      	cmp	r5, #2
 8002394:	d050      	beq.n	8002438 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8002396:	2d10      	cmp	r5, #16
 8002398:	d003      	beq.n	80023a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 800239a:	2d01      	cmp	r5, #1
 800239c:	d02b      	beq.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 800239e:	2000      	movs	r0, #0
 80023a0:	e054      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80023a4:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80023ac:	d050      	beq.n	8002450 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ae:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80023b2:	a906      	add	r1, sp, #24
 80023b4:	440b      	add	r3, r1
 80023b6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ba:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80023be:	d016      	beq.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80023c8:	440b      	add	r3, r1
 80023ca:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80023d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d4:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023e0:	d134      	bne.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80023e2:	0040      	lsls	r0, r0, #1
 80023e4:	4b21      	ldr	r3, [pc, #132]	; (800246c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80023e6:	fba3 3000 	umull	r3, r0, r3, r0
 80023ea:	0840      	lsrs	r0, r0, #1
 80023ec:	e02e      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80023f0:	fb03 f000 	mul.w	r0, r3, r0
 80023f4:	e7f0      	b.n	80023d8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023fa:	f240 3202 	movw	r2, #770	; 0x302
 80023fe:	401a      	ands	r2, r3
 8002400:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8002404:	d026      	beq.n	8002454 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240e:	d004      	beq.n	800241a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002416:	2000      	movs	r0, #0
 8002418:	e018      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800241c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800241e:	f012 0f02 	tst.w	r2, #2
 8002422:	d0f5      	beq.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 8002424:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002428:	e010      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002432:	d112      	bne.n	800245a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002434:	2000      	movs	r0, #0
 8002436:	e009      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002438:	f7ff ff04 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002444:	3301      	adds	r3, #1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 800244c:	b007      	add	sp, #28
 800244e:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 8002450:	2000      	movs	r0, #0
 8002452:	e7fb      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 8002454:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002458:	e7f8      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 800245a:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 800245e:	e7f5      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8002460:	08005e08 	.word	0x08005e08
 8002464:	40021000 	.word	0x40021000
 8002468:	007a1200 	.word	0x007a1200
 800246c:	aaaaaaab 	.word	0xaaaaaaab
 8002470:	003d0900 	.word	0x003d0900

08002474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002474:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002476:	6a03      	ldr	r3, [r0, #32]
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002480:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002482:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002484:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002488:	680d      	ldr	r5, [r1, #0]
 800248a:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800248e:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002492:	688b      	ldr	r3, [r1, #8]
 8002494:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002496:	4d0d      	ldr	r5, [pc, #52]	; (80024cc <TIM_OC1_SetConfig+0x58>)
 8002498:	42a8      	cmp	r0, r5
 800249a:	d009      	beq.n	80024b0 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249c:	4d0b      	ldr	r5, [pc, #44]	; (80024cc <TIM_OC1_SetConfig+0x58>)
 800249e:	42a8      	cmp	r0, r5
 80024a0:	d00d      	beq.n	80024be <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024a4:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024a6:	684a      	ldr	r2, [r1, #4]
 80024a8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024aa:	6203      	str	r3, [r0, #32]
}
 80024ac:	bc70      	pop	{r4, r5, r6}
 80024ae:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80024b0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80024b4:	68cc      	ldr	r4, [r1, #12]
 80024b6:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	e7ee      	b.n	800249c <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80024c2:	694c      	ldr	r4, [r1, #20]
 80024c4:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c6:	698a      	ldr	r2, [r1, #24]
 80024c8:	4322      	orrs	r2, r4
 80024ca:	e7ea      	b.n	80024a2 <TIM_OC1_SetConfig+0x2e>
 80024cc:	40012c00 	.word	0x40012c00

080024d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024d0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d2:	6a03      	ldr	r3, [r0, #32]
 80024d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024dc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024de:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024e0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024e4:	680d      	ldr	r5, [r1, #0]
 80024e6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ec:	688d      	ldr	r5, [r1, #8]
 80024ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024f2:	4d0f      	ldr	r5, [pc, #60]	; (8002530 <TIM_OC3_SetConfig+0x60>)
 80024f4:	42a8      	cmp	r0, r5
 80024f6:	d009      	beq.n	800250c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f8:	4d0d      	ldr	r5, [pc, #52]	; (8002530 <TIM_OC3_SetConfig+0x60>)
 80024fa:	42a8      	cmp	r0, r5
 80024fc:	d00e      	beq.n	800251c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024fe:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002500:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002502:	684a      	ldr	r2, [r1, #4]
 8002504:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002506:	6203      	str	r3, [r0, #32]
}
 8002508:	bc30      	pop	{r4, r5}
 800250a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800250c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002510:	68cd      	ldr	r5, [r1, #12]
 8002512:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800251a:	e7ed      	b.n	80024f8 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800251c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002520:	694d      	ldr	r5, [r1, #20]
 8002522:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002526:	698d      	ldr	r5, [r1, #24]
 8002528:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800252c:	e7e7      	b.n	80024fe <TIM_OC3_SetConfig+0x2e>
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00

08002534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002536:	6a03      	ldr	r3, [r0, #32]
 8002538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800253c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002540:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002542:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002544:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002548:	680d      	ldr	r5, [r1, #0]
 800254a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800254e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002552:	688d      	ldr	r5, [r1, #8]
 8002554:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002558:	4d07      	ldr	r5, [pc, #28]	; (8002578 <TIM_OC4_SetConfig+0x44>)
 800255a:	42a8      	cmp	r0, r5
 800255c:	d006      	beq.n	800256c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800255e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002560:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002562:	684a      	ldr	r2, [r1, #4]
 8002564:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002566:	6203      	str	r3, [r0, #32]
}
 8002568:	bc30      	pop	{r4, r5}
 800256a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800256c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002570:	694d      	ldr	r5, [r1, #20]
 8002572:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002576:	e7f2      	b.n	800255e <TIM_OC4_SetConfig+0x2a>
 8002578:	40012c00 	.word	0x40012c00

0800257c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800257e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002580:	6a04      	ldr	r4, [r0, #32]
 8002582:	f024 0401 	bic.w	r4, r4, #1
 8002586:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002588:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800258a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800258e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002592:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002596:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002598:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800259a:	6203      	str	r3, [r0, #32]
}
 800259c:	bc10      	pop	{r4}
 800259e:	4770      	bx	lr

080025a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a2:	6a03      	ldr	r3, [r0, #32]
 80025a4:	f023 0310 	bic.w	r3, r3, #16
 80025a8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025aa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80025ac:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025ae:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025b2:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80025c0:	6203      	str	r3, [r0, #32]
}
 80025c2:	bc10      	pop	{r4}
 80025c4:	4770      	bx	lr

080025c6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025c6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025cc:	4319      	orrs	r1, r3
 80025ce:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d2:	6081      	str	r1, [r0, #8]
}
 80025d4:	4770      	bx	lr

080025d6 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d6:	6802      	ldr	r2, [r0, #0]
 80025d8:	68d3      	ldr	r3, [r2, #12]
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e0:	6802      	ldr	r2, [r0, #0]
 80025e2:	6893      	ldr	r3, [r2, #8]
 80025e4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d003      	beq.n	80025f4 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80025ec:	6813      	ldr	r3, [r2, #0]
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	2000      	movs	r0, #0
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_OC_MspInit>:
}
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_OnePulse_MspInit>:
}
 80025fa:	4770      	bx	lr

080025fc <HAL_TIM_PeriodElapsedCallback>:
}
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_OC_DelayElapsedCallback>:
}
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_IC_CaptureCallback>:
}
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_TriggerCallback>:
}
 8002604:	4770      	bx	lr

08002606 <HAL_TIM_IRQHandler>:
{
 8002606:	b510      	push	{r4, lr}
 8002608:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800260a:	6803      	ldr	r3, [r0, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	f012 0f02 	tst.w	r2, #2
 8002612:	d011      	beq.n	8002638 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	f012 0f02 	tst.w	r2, #2
 800261a:	d00d      	beq.n	8002638 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800261c:	f06f 0202 	mvn.w	r2, #2
 8002620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002622:	2301      	movs	r3, #1
 8002624:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002626:	6803      	ldr	r3, [r0, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f013 0f03 	tst.w	r3, #3
 800262e:	d070      	beq.n	8002712 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002630:	f7ff ffe6 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002634:	2300      	movs	r3, #0
 8002636:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	f012 0f04 	tst.w	r2, #4
 8002640:	d012      	beq.n	8002668 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	f012 0f04 	tst.w	r2, #4
 8002648:	d00e      	beq.n	8002668 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800264a:	f06f 0204 	mvn.w	r2, #4
 800264e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002650:	2302      	movs	r3, #2
 8002652:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f413 7f40 	tst.w	r3, #768	; 0x300
 800265c:	d05f      	beq.n	800271e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	4620      	mov	r0, r4
 8002660:	f7ff ffce 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002664:	2300      	movs	r3, #0
 8002666:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	f012 0f08 	tst.w	r2, #8
 8002670:	d012      	beq.n	8002698 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	f012 0f08 	tst.w	r2, #8
 8002678:	d00e      	beq.n	8002698 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800267a:	f06f 0208 	mvn.w	r2, #8
 800267e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002680:	2304      	movs	r3, #4
 8002682:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f013 0f03 	tst.w	r3, #3
 800268c:	d04e      	beq.n	800272c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff ffb6 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002694:	2300      	movs	r3, #0
 8002696:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	f012 0f10 	tst.w	r2, #16
 80026a0:	d012      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	f012 0f10 	tst.w	r2, #16
 80026a8:	d00e      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026aa:	f06f 0210 	mvn.w	r2, #16
 80026ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b0:	2308      	movs	r3, #8
 80026b2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80026bc:	d03d      	beq.n	800273a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff ff9e 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c4:	2300      	movs	r3, #0
 80026c6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	f012 0f01 	tst.w	r2, #1
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	f012 0f01 	tst.w	r2, #1
 80026d8:	d136      	bne.n	8002748 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026e2:	d003      	beq.n	80026ec <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026ea:	d134      	bne.n	8002756 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026fc:	d132      	bne.n	8002764 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	f012 0f20 	tst.w	r2, #32
 8002706:	d003      	beq.n	8002710 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	f012 0f20 	tst.w	r2, #32
 800270e:	d130      	bne.n	8002772 <HAL_TIM_IRQHandler+0x16c>
}
 8002710:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	f7ff ff74 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff ff73 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
 800271c:	e78a      	b.n	8002634 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff6d 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff ff6c 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
 800272a:	e79b      	b.n	8002664 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff ff66 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff ff65 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
 8002738:	e7ac      	b.n	8002694 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff ff5f 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff ff5e 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
 8002746:	e7bd      	b.n	80026c4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002748:	f06f 0201 	mvn.w	r2, #1
 800274c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff ff54 	bl	80025fc <HAL_TIM_PeriodElapsedCallback>
 8002754:	e7c1      	b.n	80026da <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002756:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800275a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800275c:	4620      	mov	r0, r4
 800275e:	f000 f9c5 	bl	8002aec <HAL_TIMEx_BreakCallback>
 8002762:	e7c3      	b.n	80026ec <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002764:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002768:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800276a:	4620      	mov	r0, r4
 800276c:	f7ff ff4a 	bl	8002604 <HAL_TIM_TriggerCallback>
 8002770:	e7c5      	b.n	80026fe <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002772:	f06f 0220 	mvn.w	r2, #32
 8002776:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002778:	4620      	mov	r0, r4
 800277a:	f000 f9b6 	bl	8002aea <HAL_TIMEx_CommutCallback>
}
 800277e:	e7c7      	b.n	8002710 <HAL_TIM_IRQHandler+0x10a>

08002780 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002780:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <TIM_Base_SetConfig+0x70>)
 8002784:	4290      	cmp	r0, r2
 8002786:	d00a      	beq.n	800279e <TIM_Base_SetConfig+0x1e>
 8002788:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0x1e>
 800278e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002792:	4290      	cmp	r0, r2
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0x1e>
 8002796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800279a:	4290      	cmp	r0, r2
 800279c:	d103      	bne.n	80027a6 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800279e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027a2:	684a      	ldr	r2, [r1, #4]
 80027a4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <TIM_Base_SetConfig+0x70>)
 80027a8:	4290      	cmp	r0, r2
 80027aa:	d00a      	beq.n	80027c2 <TIM_Base_SetConfig+0x42>
 80027ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x42>
 80027b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027b6:	4290      	cmp	r0, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x42>
 80027ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027be:	4290      	cmp	r0, r2
 80027c0:	d103      	bne.n	80027ca <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c6:	68ca      	ldr	r2, [r1, #12]
 80027c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ce:	694a      	ldr	r2, [r1, #20]
 80027d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80027d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d4:	688b      	ldr	r3, [r1, #8]
 80027d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80027d8:	680b      	ldr	r3, [r1, #0]
 80027da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <TIM_Base_SetConfig+0x70>)
 80027de:	4298      	cmp	r0, r3
 80027e0:	d002      	beq.n	80027e8 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80027e2:	2301      	movs	r3, #1
 80027e4:	6143      	str	r3, [r0, #20]
}
 80027e6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80027e8:	690b      	ldr	r3, [r1, #16]
 80027ea:	6303      	str	r3, [r0, #48]	; 0x30
 80027ec:	e7f9      	b.n	80027e2 <TIM_Base_SetConfig+0x62>
 80027ee:	bf00      	nop
 80027f0:	40012c00 	.word	0x40012c00

080027f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80027f4:	b1a8      	cbz	r0, 8002822 <HAL_TIM_Base_Init+0x2e>
{
 80027f6:	b510      	push	{r4, lr}
 80027f8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027fe:	b15b      	cbz	r3, 8002818 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002806:	1d21      	adds	r1, r4, #4
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	f7ff ffb9 	bl	8002780 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800280e:	2301      	movs	r3, #1
 8002810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002814:	2000      	movs	r0, #0
}
 8002816:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002818:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800281c:	f003 f8cc 	bl	80059b8 <HAL_TIM_Base_MspInit>
 8002820:	e7ee      	b.n	8002800 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
}
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002826:	b1a8      	cbz	r0, 8002854 <HAL_TIM_OC_Init+0x2e>
{
 8002828:	b510      	push	{r4, lr}
 800282a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800282c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002830:	b15b      	cbz	r3, 800284a <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002832:	2302      	movs	r3, #2
 8002834:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002838:	1d21      	adds	r1, r4, #4
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	f7ff ffa0 	bl	8002780 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002840:	2301      	movs	r3, #1
 8002842:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002846:	2000      	movs	r0, #0
}
 8002848:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800284a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800284e:	f7ff fed3 	bl	80025f8 <HAL_TIM_OC_MspInit>
 8002852:	e7ee      	b.n	8002832 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8002854:	2001      	movs	r0, #1
}
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8002858:	b1f8      	cbz	r0, 800289a <HAL_TIM_OnePulse_Init+0x42>
{
 800285a:	b538      	push	{r3, r4, r5, lr}
 800285c:	4604      	mov	r4, r0
 800285e:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8002860:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002864:	b1a3      	cbz	r3, 8002890 <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286c:	1d21      	adds	r1, r4, #4
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	f7ff ff86 	bl	8002780 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	6813      	ldr	r3, [r2, #0]
 8002878:	f023 0308 	bic.w	r3, r3, #8
 800287c:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	6813      	ldr	r3, [r2, #0]
 8002882:	432b      	orrs	r3, r5
 8002884:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002886:	2301      	movs	r3, #1
 8002888:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800288c:	2000      	movs	r0, #0
}
 800288e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002890:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8002894:	f7ff feb1 	bl	80025fa <HAL_TIM_OnePulse_MspInit>
 8002898:	e7e5      	b.n	8002866 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 800289a:	2001      	movs	r0, #1
}
 800289c:	4770      	bx	lr
	...

080028a0 <TIM_OC2_SetConfig>:
{
 80028a0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a2:	6a03      	ldr	r3, [r0, #32]
 80028a4:	f023 0310 	bic.w	r3, r3, #16
 80028a8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80028aa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028ac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028ae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b4:	680d      	ldr	r5, [r1, #0]
 80028b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80028ba:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028be:	688d      	ldr	r5, [r1, #8]
 80028c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028c4:	4d0e      	ldr	r5, [pc, #56]	; (8002900 <TIM_OC2_SetConfig+0x60>)
 80028c6:	42a8      	cmp	r0, r5
 80028c8:	d009      	beq.n	80028de <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ca:	4d0d      	ldr	r5, [pc, #52]	; (8002900 <TIM_OC2_SetConfig+0x60>)
 80028cc:	42a8      	cmp	r0, r5
 80028ce:	d00e      	beq.n	80028ee <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80028d0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80028d2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80028d4:	684a      	ldr	r2, [r1, #4]
 80028d6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80028d8:	6203      	str	r3, [r0, #32]
}
 80028da:	bc30      	pop	{r4, r5}
 80028dc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80028de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028e2:	68cd      	ldr	r5, [r1, #12]
 80028e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80028e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ec:	e7ed      	b.n	80028ca <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ee:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028f2:	694d      	ldr	r5, [r1, #20]
 80028f4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028f8:	698d      	ldr	r5, [r1, #24]
 80028fa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80028fe:	e7e7      	b.n	80028d0 <TIM_OC2_SetConfig+0x30>
 8002900:	40012c00 	.word	0x40012c00

08002904 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002904:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d028      	beq.n	800295e <HAL_TIM_OC_ConfigChannel+0x5a>
{
 800290c:	b510      	push	{r4, lr}
 800290e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002910:	2301      	movs	r3, #1
 8002912:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800291c:	2a0c      	cmp	r2, #12
 800291e:	d80b      	bhi.n	8002938 <HAL_TIM_OC_ConfigChannel+0x34>
 8002920:	e8df f002 	tbb	[pc, r2]
 8002924:	0a0a0a07 	.word	0x0a0a0a07
 8002928:	0a0a0a11 	.word	0x0a0a0a11
 800292c:	0a0a0a15 	.word	0x0a0a0a15
 8002930:	19          	.byte	0x19
 8002931:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002932:	6800      	ldr	r0, [r0, #0]
 8002934:	f7ff fd9e 	bl	8002474 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002938:	2301      	movs	r3, #1
 800293a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800293e:	2000      	movs	r0, #0
 8002940:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002944:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002946:	6800      	ldr	r0, [r0, #0]
 8002948:	f7ff ffaa 	bl	80028a0 <TIM_OC2_SetConfig>
      break;
 800294c:	e7f4      	b.n	8002938 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294e:	6800      	ldr	r0, [r0, #0]
 8002950:	f7ff fdbe 	bl	80024d0 <TIM_OC3_SetConfig>
      break;
 8002954:	e7f0      	b.n	8002938 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002956:	6800      	ldr	r0, [r0, #0]
 8002958:	f7ff fdec 	bl	8002534 <TIM_OC4_SetConfig>
      break;
 800295c:	e7ec      	b.n	8002938 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 800295e:	2002      	movs	r0, #2
}
 8002960:	4770      	bx	lr

08002962 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002962:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002964:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002966:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800296e:	430b      	orrs	r3, r1
 8002970:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002972:	6083      	str	r3, [r0, #8]
}
 8002974:	bc10      	pop	{r4}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002978:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d066      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0xd6>
{
 8002980:	b510      	push	{r4, lr}
 8002982:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002984:	2301      	movs	r3, #1
 8002986:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002990:	6802      	ldr	r2, [r0, #0]
 8002992:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002994:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002998:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800299c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800299e:	680b      	ldr	r3, [r1, #0]
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d04a      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0xc2>
 80029a4:	d913      	bls.n	80029ce <HAL_TIM_ConfigClockSource+0x56>
 80029a6:	2b60      	cmp	r3, #96	; 0x60
 80029a8:	d03d      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0xae>
 80029aa:	d91e      	bls.n	80029ea <HAL_TIM_ConfigClockSource+0x72>
 80029ac:	2b70      	cmp	r3, #112	; 0x70
 80029ae:	d028      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x8a>
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b4:	d130      	bne.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80029b6:	68cb      	ldr	r3, [r1, #12]
 80029b8:	684a      	ldr	r2, [r1, #4]
 80029ba:	6889      	ldr	r1, [r1, #8]
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	f7ff ffd0 	bl	8002962 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	6893      	ldr	r3, [r2, #8]
 80029c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ca:	6093      	str	r3, [r2, #8]
      break;
 80029cc:	e024      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d006      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0x68>
 80029d2:	d904      	bls.n	80029de <HAL_TIM_ConfigClockSource+0x66>
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d003      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0x68>
 80029d8:	2b30      	cmp	r3, #48	; 0x30
 80029da:	d001      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0x68>
 80029dc:	e01c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
 80029de:	b9db      	cbnz	r3, 8002a18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e0:	4619      	mov	r1, r3
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	f7ff fdef 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 80029e8:	e016      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80029ea:	2b50      	cmp	r3, #80	; 0x50
 80029ec:	d114      	bne.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	68ca      	ldr	r2, [r1, #12]
 80029f0:	6849      	ldr	r1, [r1, #4]
 80029f2:	6800      	ldr	r0, [r0, #0]
 80029f4:	f7ff fdc2 	bl	800257c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f8:	2150      	movs	r1, #80	; 0x50
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	f7ff fde3 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e00a      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002a02:	68cb      	ldr	r3, [r1, #12]
 8002a04:	684a      	ldr	r2, [r1, #4]
 8002a06:	6889      	ldr	r1, [r1, #8]
 8002a08:	6800      	ldr	r0, [r0, #0]
 8002a0a:	f7ff ffaa 	bl	8002962 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002a16:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002a24:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a26:	68ca      	ldr	r2, [r1, #12]
 8002a28:	6849      	ldr	r1, [r1, #4]
 8002a2a:	6800      	ldr	r0, [r0, #0]
 8002a2c:	f7ff fdb8 	bl	80025a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a30:	2160      	movs	r1, #96	; 0x60
 8002a32:	6820      	ldr	r0, [r4, #0]
 8002a34:	f7ff fdc7 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 8002a38:	e7ee      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3a:	68ca      	ldr	r2, [r1, #12]
 8002a3c:	6849      	ldr	r1, [r1, #4]
 8002a3e:	6800      	ldr	r0, [r0, #0]
 8002a40:	f7ff fd9c 	bl	800257c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a44:	2140      	movs	r1, #64	; 0x40
 8002a46:	6820      	ldr	r0, [r4, #0]
 8002a48:	f7ff fdbd 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e7e4      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8002a4e:	2002      	movs	r0, #2
}
 8002a50:	4770      	bx	lr

08002a52 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d01c      	beq.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002a5a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002a5c:	2601      	movs	r6, #1
 8002a5e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a68:	6802      	ldr	r2, [r0, #0]
 8002a6a:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a6c:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a6e:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a72:	680c      	ldr	r4, [r1, #0]
 8002a74:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a76:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a7a:	684b      	ldr	r3, [r1, #4]
 8002a7c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a7e:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a80:	6802      	ldr	r2, [r0, #0]
 8002a82:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002a8e:	4618      	mov	r0, r3
}
 8002a90:	bc70      	pop	{r4, r5, r6}
 8002a92:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a94:	2002      	movs	r0, #2
}
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d022      	beq.n	8002ae6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002aa6:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	688a      	ldr	r2, [r1, #8]
 8002aae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab4:	684a      	ldr	r2, [r1, #4]
 8002ab6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002abc:	680a      	ldr	r2, [r1, #0]
 8002abe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac4:	690a      	ldr	r2, [r1, #16]
 8002ac6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002acc:	694a      	ldr	r2, [r1, #20]
 8002ace:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ad4:	69ca      	ldr	r2, [r1, #28]
 8002ad6:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ad8:	6802      	ldr	r2, [r0, #0]
 8002ada:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002adc:	2300      	movs	r3, #0
 8002ade:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002ae6:	2002      	movs	r0, #2
}
 8002ae8:	4770      	bx	lr

08002aea <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aea:	4770      	bx	lr

08002aec <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aec:	4770      	bx	lr

08002aee <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aee:	6802      	ldr	r2, [r0, #0]
 8002af0:	68d3      	ldr	r3, [r2, #12]
 8002af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002af6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af8:	6802      	ldr	r2, [r0, #0]
 8002afa:	6953      	ldr	r3, [r2, #20]
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b02:	2320      	movs	r3, #32
 8002b04:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002b08:	4770      	bx	lr

08002b0a <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b0a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b21      	cmp	r3, #33	; 0x21
 8002b12:	d12a      	bne.n	8002b6a <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b14:	6883      	ldr	r3, [r0, #8]
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1a:	d016      	beq.n	8002b4a <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b1c:	6a03      	ldr	r3, [r0, #32]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	6202      	str	r2, [r0, #32]
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b28:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002b30:	b9eb      	cbnz	r3, 8002b6e <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b32:	6802      	ldr	r2, [r0, #0]
 8002b34:	68d3      	ldr	r3, [r2, #12]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3a:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b3c:	6802      	ldr	r2, [r0, #0]
 8002b3e:	68d3      	ldr	r3, [r2, #12]
 8002b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b44:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8002b46:	2000      	movs	r0, #0
 8002b48:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b4a:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	6802      	ldr	r2, [r0, #0]
 8002b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b54:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b56:	6903      	ldr	r3, [r0, #16]
 8002b58:	b91b      	cbnz	r3, 8002b62 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8002b5a:	6a03      	ldr	r3, [r0, #32]
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	6203      	str	r3, [r0, #32]
 8002b60:	e7e2      	b.n	8002b28 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8002b62:	6a03      	ldr	r3, [r0, #32]
 8002b64:	3301      	adds	r3, #1
 8002b66:	6203      	str	r3, [r0, #32]
 8002b68:	e7de      	b.n	8002b28 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	4770      	bx	lr
    return HAL_OK;
 8002b6e:	2000      	movs	r0, #0
  }
}
 8002b70:	4770      	bx	lr
	...

08002b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	6913      	ldr	r3, [r2, #16]
 8002b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b80:	68c1      	ldr	r1, [r0, #12]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b86:	6883      	ldr	r3, [r0, #8]
 8002b88:	6902      	ldr	r2, [r0, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	6942      	ldr	r2, [r0, #20]
 8002b8e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002b90:	6801      	ldr	r1, [r0, #0]
 8002b92:	68cb      	ldr	r3, [r1, #12]
 8002b94:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b98:	f023 030c 	bic.w	r3, r3, #12
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ba0:	6802      	ldr	r2, [r0, #0]
 8002ba2:	6953      	ldr	r3, [r2, #20]
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	6981      	ldr	r1, [r0, #24]
 8002baa:	430b      	orrs	r3, r1
 8002bac:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002bae:	6802      	ldr	r2, [r0, #0]
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <UART_SetConfig+0xc4>)
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d01f      	beq.n	8002bf6 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bb6:	f7ff fb35 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bc2:	6863      	ldr	r3, [r4, #4]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bca:	4d1c      	ldr	r5, [pc, #112]	; (8002c3c <UART_SetConfig+0xc8>)
 8002bcc:	fba5 3200 	umull	r3, r2, r5, r0
 8002bd0:	0951      	lsrs	r1, r2, #5
 8002bd2:	2264      	movs	r2, #100	; 0x64
 8002bd4:	fb02 0211 	mls	r2, r2, r1, r0
 8002bd8:	0113      	lsls	r3, r2, #4
 8002bda:	3332      	adds	r3, #50	; 0x32
 8002bdc:	fba5 2303 	umull	r2, r3, r5, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002be6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	6821      	ldr	r1, [r4, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bf6:	f7ff fb25 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c02:	6863      	ldr	r3, [r4, #4]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c0a:	4d0c      	ldr	r5, [pc, #48]	; (8002c3c <UART_SetConfig+0xc8>)
 8002c0c:	fba5 3200 	umull	r3, r2, r5, r0
 8002c10:	0951      	lsrs	r1, r2, #5
 8002c12:	2264      	movs	r2, #100	; 0x64
 8002c14:	fb02 0211 	mls	r2, r2, r1, r0
 8002c18:	0113      	lsls	r3, r2, #4
 8002c1a:	3332      	adds	r3, #50	; 0x32
 8002c1c:	fba5 2303 	umull	r2, r3, r5, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c26:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	6821      	ldr	r1, [r4, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
 8002c34:	e7de      	b.n	8002bf4 <UART_SetConfig+0x80>
 8002c36:	bf00      	nop
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	51eb851f 	.word	0x51eb851f

08002c40 <HAL_UART_Init>:
  if (huart == NULL)
 8002c40:	b358      	cbz	r0, 8002c9a <HAL_UART_Init+0x5a>
{
 8002c42:	b510      	push	{r4, lr}
 8002c44:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c4a:	b30b      	cbz	r3, 8002c90 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c4c:	2324      	movs	r3, #36	; 0x24
 8002c4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	68d3      	ldr	r3, [r2, #12]
 8002c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff ff89 	bl	8002b74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	6913      	ldr	r3, [r2, #16]
 8002c66:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c6a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6c:	6822      	ldr	r2, [r4, #0]
 8002c6e:	6953      	ldr	r3, [r2, #20]
 8002c70:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c74:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	68d3      	ldr	r3, [r2, #12]
 8002c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c7e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	2000      	movs	r0, #0
 8002c82:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c84:	2320      	movs	r3, #32
 8002c86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002c8e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c90:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c94:	f002 feb8 	bl	8005a08 <HAL_UART_MspInit>
 8002c98:	e7d8      	b.n	8002c4c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002c9a:	2001      	movs	r0, #1
}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002c9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d116      	bne.n	8002cd6 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8002ca8:	b1b9      	cbz	r1, 8002cda <HAL_UART_Transmit_IT+0x3c>
 8002caa:	b1c2      	cbz	r2, 8002cde <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8002cac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d016      	beq.n	8002ce2 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8002cb4:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002cb6:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cb8:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbe:	2221      	movs	r2, #33	; 0x21
 8002cc0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002cc4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002cc8:	6801      	ldr	r1, [r0, #0]
 8002cca:	68ca      	ldr	r2, [r1, #12]
 8002ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cd0:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	4770      	bx	lr
    return HAL_BUSY;
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	4770      	bx	lr
      return HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
 8002cdc:	4770      	bx	lr
 8002cde:	2001      	movs	r0, #1
 8002ce0:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002ce2:	2002      	movs	r0, #2
}
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_UART_TxCpltCallback>:
}
 8002ce6:	4770      	bx	lr

08002ce8 <UART_EndTransmit_IT>:
{
 8002ce8:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cea:	6801      	ldr	r1, [r0, #0]
 8002cec:	68cb      	ldr	r3, [r1, #12]
 8002cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf2:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002cfa:	f7ff fff4 	bl	8002ce6 <HAL_UART_TxCpltCallback>
}
 8002cfe:	2000      	movs	r0, #0
 8002d00:	bd08      	pop	{r3, pc}

08002d02 <HAL_UART_RxCpltCallback>:
}
 8002d02:	4770      	bx	lr

08002d04 <UART_Receive_IT>:
{
 8002d04:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d06:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b22      	cmp	r3, #34	; 0x22
 8002d0e:	d145      	bne.n	8002d9c <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d10:	6883      	ldr	r3, [r0, #8]
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d16:	d00e      	beq.n	8002d36 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d18:	6903      	ldr	r3, [r0, #16]
 8002d1a:	bb03      	cbnz	r3, 8002d5e <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d1c:	6803      	ldr	r3, [r0, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d22:	1c59      	adds	r1, r3, #1
 8002d24:	6281      	str	r1, [r0, #40]	; 0x28
 8002d26:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002d28:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002d30:	b1f3      	cbz	r3, 8002d70 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8002d32:	2000      	movs	r0, #0
 8002d34:	e033      	b.n	8002d9e <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002d36:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d38:	6903      	ldr	r3, [r0, #16]
 8002d3a:	b943      	cbnz	r3, 8002d4e <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d44:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002d46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d48:	3302      	adds	r3, #2
 8002d4a:	6283      	str	r3, [r0, #40]	; 0x28
 8002d4c:	e7ec      	b.n	8002d28 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d4e:	6803      	ldr	r3, [r0, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002d56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d58:	3301      	adds	r3, #1
 8002d5a:	6283      	str	r3, [r0, #40]	; 0x28
 8002d5c:	e7e4      	b.n	8002d28 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d5e:	6803      	ldr	r3, [r0, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002d64:	1c51      	adds	r1, r2, #1
 8002d66:	6281      	str	r1, [r0, #40]	; 0x28
 8002d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d6c:	7013      	strb	r3, [r2, #0]
 8002d6e:	e7db      	b.n	8002d28 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d70:	6802      	ldr	r2, [r0, #0]
 8002d72:	68d3      	ldr	r3, [r2, #12]
 8002d74:	f023 0320 	bic.w	r3, r3, #32
 8002d78:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d7a:	6802      	ldr	r2, [r0, #0]
 8002d7c:	68d3      	ldr	r3, [r2, #12]
 8002d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d82:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d84:	6802      	ldr	r2, [r0, #0]
 8002d86:	6953      	ldr	r3, [r2, #20]
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002d94:	f7ff ffb5 	bl	8002d02 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002d98:	2000      	movs	r0, #0
 8002d9a:	e000      	b.n	8002d9e <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8002d9c:	2002      	movs	r0, #2
}
 8002d9e:	bd08      	pop	{r3, pc}

08002da0 <HAL_UART_ErrorCallback>:
}
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_UART_IRQHandler>:
{
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002da8:	6802      	ldr	r2, [r0, #0]
 8002daa:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dac:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dae:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002db0:	f013 000f 	ands.w	r0, r3, #15
 8002db4:	d105      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	f013 0f20 	tst.w	r3, #32
 8002dba:	d002      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x1e>
 8002dbc:	f011 0f20 	tst.w	r1, #32
 8002dc0:	d153      	bne.n	8002e6a <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d067      	beq.n	8002e96 <HAL_UART_IRQHandler+0xf2>
 8002dc6:	f012 0201 	ands.w	r2, r2, #1
 8002dca:	d102      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x2e>
 8002dcc:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002dd0:	d061      	beq.n	8002e96 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd2:	f013 0f01 	tst.w	r3, #1
 8002dd6:	d006      	beq.n	8002de6 <HAL_UART_IRQHandler+0x42>
 8002dd8:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002ddc:	d003      	beq.n	8002de6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002de0:	f040 0001 	orr.w	r0, r0, #1
 8002de4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de6:	f013 0f04 	tst.w	r3, #4
 8002dea:	d004      	beq.n	8002df6 <HAL_UART_IRQHandler+0x52>
 8002dec:	b11a      	cbz	r2, 8002df6 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002df0:	f040 0002 	orr.w	r0, r0, #2
 8002df4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df6:	f013 0f02 	tst.w	r3, #2
 8002dfa:	d004      	beq.n	8002e06 <HAL_UART_IRQHandler+0x62>
 8002dfc:	b11a      	cbz	r2, 8002e06 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dfe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e00:	f040 0004 	orr.w	r0, r0, #4
 8002e04:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e06:	f013 0f08 	tst.w	r3, #8
 8002e0a:	d004      	beq.n	8002e16 <HAL_UART_IRQHandler+0x72>
 8002e0c:	b11a      	cbz	r2, 8002e16 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e10:	f042 0208 	orr.w	r2, r2, #8
 8002e14:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e18:	2a00      	cmp	r2, #0
 8002e1a:	d048      	beq.n	8002eae <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e1c:	f013 0f20 	tst.w	r3, #32
 8002e20:	d002      	beq.n	8002e28 <HAL_UART_IRQHandler+0x84>
 8002e22:	f011 0f20 	tst.w	r1, #32
 8002e26:	d124      	bne.n	8002e72 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e32:	f012 0f08 	tst.w	r2, #8
 8002e36:	d100      	bne.n	8002e3a <HAL_UART_IRQHandler+0x96>
 8002e38:	b33b      	cbz	r3, 8002e8a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff fe57 	bl	8002aee <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e48:	d01b      	beq.n	8002e82 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e50:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002e52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e54:	b18b      	cbz	r3, 8002e7a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e56:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <HAL_UART_IRQHandler+0x11c>)
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e5a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e5c:	f7fe fc28 	bl	80016b0 <HAL_DMA_Abort_IT>
 8002e60:	b328      	cbz	r0, 8002eae <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e62:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e66:	4798      	blx	r3
 8002e68:	e021      	b.n	8002eae <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7ff ff4a 	bl	8002d04 <UART_Receive_IT>
      return;
 8002e70:	e01d      	b.n	8002eae <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7ff ff46 	bl	8002d04 <UART_Receive_IT>
 8002e78:	e7d6      	b.n	8002e28 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff ff90 	bl	8002da0 <HAL_UART_ErrorCallback>
 8002e80:	e015      	b.n	8002eae <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ff8c 	bl	8002da0 <HAL_UART_ErrorCallback>
 8002e88:	e011      	b.n	8002eae <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff ff88 	bl	8002da0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002e94:	e00b      	b.n	8002eae <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xfe>
 8002e9c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ea0:	d106      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ea2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_IRQHandler+0x10a>
 8002ea8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002eac:	d104      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x114>
}
 8002eae:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fe2a 	bl	8002b0a <UART_Transmit_IT>
    return;
 8002eb6:	e7fa      	b.n	8002eae <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f7ff ff15 	bl	8002ce8 <UART_EndTransmit_IT>
    return;
 8002ebe:	e7f6      	b.n	8002eae <HAL_UART_IRQHandler+0x10a>
 8002ec0:	08002ec5 	.word	0x08002ec5

08002ec4 <UART_DMAAbortOnError>:
{
 8002ec4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ecc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002ece:	f7ff ff67 	bl	8002da0 <HAL_UART_ErrorCallback>
}
 8002ed2:	bd08      	pop	{r3, pc}

08002ed4 <simple_delay_ms>:



void simple_delay_ms(const uint16_t ms)
{
  uint32_t i = ms * 7200;
 8002ed4:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002ed8:	fb03 f000 	mul.w	r0, r3, r0
  while (i-- > 0) {
 8002edc:	e001      	b.n	8002ee2 <simple_delay_ms+0xe>
    asm("nop");
 8002ede:	bf00      	nop
  while (i-- > 0) {
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	1e43      	subs	r3, r0, #1
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d1fa      	bne.n	8002ede <simple_delay_ms+0xa>
  }
}
 8002ee8:	4770      	bx	lr

08002eea <simple_delay_us>:

void simple_delay_us(const uint16_t us)
{
  uint16_t i = us * 7;
 8002eea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002eee:	b280      	uxth	r0, r0
  while (i-- > 0) {
 8002ef0:	e001      	b.n	8002ef6 <simple_delay_us+0xc>
    asm("nop");
 8002ef2:	bf00      	nop
  while (i-- > 0) {
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	1e43      	subs	r3, r0, #1
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d1f9      	bne.n	8002ef2 <simple_delay_us+0x8>
  }
}
 8002efe:	4770      	bx	lr

08002f00 <crc8>:
 *      Author: kowma
 */
#include "main.h"
#include "ds18b20.h"

unsigned char crc8(void const *mem, size_t len) {
 8002f00:	b430      	push	{r4, r5}
	uint8_t crc = 0;
 8002f02:	2200      	movs	r2, #0
	unsigned char const *data = mem;

		while (len--) {
 8002f04:	e010      	b.n	8002f28 <crc8+0x28>
			uint8_t inbyte = *data++;
			for (uint8_t i = 8; i; i--) {
				uint8_t mix = (crc ^ inbyte) & 0x01;
				crc >>= 1;
				if (mix) crc ^= 0x8C;
				inbyte >>= 1;
 8002f06:	0840      	lsrs	r0, r0, #1
			for (uint8_t i = 8; i; i--) {
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	b153      	cbz	r3, 8002f24 <crc8+0x24>
				uint8_t mix = (crc ^ inbyte) & 0x01;
 8002f0e:	ea82 0100 	eor.w	r1, r2, r0
				if (mix) crc ^= 0x8C;
 8002f12:	f011 0f01 	tst.w	r1, #1
 8002f16:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8002f1a:	d0f4      	beq.n	8002f06 <crc8+0x6>
 8002f1c:	f082 028c 	eor.w	r2, r2, #140	; 0x8c
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	e7f0      	b.n	8002f06 <crc8+0x6>
			uint8_t inbyte = *data++;
 8002f24:	4628      	mov	r0, r5
		while (len--) {
 8002f26:	4621      	mov	r1, r4
 8002f28:	1e4c      	subs	r4, r1, #1
 8002f2a:	b119      	cbz	r1, 8002f34 <crc8+0x34>
			uint8_t inbyte = *data++;
 8002f2c:	1c45      	adds	r5, r0, #1
 8002f2e:	7800      	ldrb	r0, [r0, #0]
			for (uint8_t i = 8; i; i--) {
 8002f30:	2308      	movs	r3, #8
 8002f32:	e7eb      	b.n	8002f0c <crc8+0xc>
			}
		}
		return crc;
}
 8002f34:	4610      	mov	r0, r2
 8002f36:	bc30      	pop	{r4, r5}
 8002f38:	4770      	bx	lr
	...

08002f3c <oneWire_direction_set>:
}scratchpad[MAX_DS18B20_SENSORS_AMOUNT];



void oneWire_direction_set(uint8_t direction)
{
 8002f3c:	b500      	push	{lr}
 8002f3e:	b085      	sub	sp, #20
	GPIO_InitTypeDef	GPIO_InitStruct;
	if(direction == ONE_WIRE_BUS_INPUT)
 8002f40:	2801      	cmp	r0, #1
 8002f42:	d004      	beq.n	8002f4e <oneWire_direction_set+0x12>
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin ;// Pin for 1-Wire bus
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
	}
	else if(direction ==  ONE_WIRE_BUS_OUTPUT)
 8002f44:	2802      	cmp	r0, #2
 8002f46:	d00f      	beq.n	8002f68 <oneWire_direction_set+0x2c>
	else
	{
		// error
	}

}
 8002f48:	b005      	add	sp, #20
 8002f4a:	f85d fb04 	ldr.w	pc, [sp], #4
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002f52:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002f54:	2301      	movs	r3, #1
 8002f56:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin ;// Pin for 1-Wire bus
 8002f58:	a904      	add	r1, sp, #16
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8002f60:	4808      	ldr	r0, [pc, #32]	; (8002f84 <oneWire_direction_set+0x48>)
 8002f62:	f7fe fd4d 	bl	8001a00 <HAL_GPIO_Init>
 8002f66:	e7ef      	b.n	8002f48 <oneWire_direction_set+0xc>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8002f68:	2311      	movs	r3, #17
 8002f6a:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002f70:	2301      	movs	r3, #1
 8002f72:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin; // Pin for 1-Wire bus
 8002f74:	a904      	add	r1, sp, #16
 8002f76:	2308      	movs	r3, #8
 8002f78:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8002f7c:	4801      	ldr	r0, [pc, #4]	; (8002f84 <oneWire_direction_set+0x48>)
 8002f7e:	f7fe fd3f 	bl	8001a00 <HAL_GPIO_Init>
}
 8002f82:	e7e1      	b.n	8002f48 <oneWire_direction_set+0xc>
 8002f84:	40010800 	.word	0x40010800

08002f88 <oneWire_init>:

uint8_t oneWire_init(void)
{
 8002f88:	b510      	push	{r4, lr}
	uint8_t i;
	//TIM2->CR1 |= (1<<3); //OPM
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	f7ff ffd6 	bl	8002f3c <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8002f90:	4c0d      	ldr	r4, [pc, #52]	; (8002fc8 <oneWire_init+0x40>)
 8002f92:	68e3      	ldr	r3, [r4, #12]
 8002f94:	f023 0308 	bic.w	r3, r3, #8
 8002f98:	60e3      	str	r3, [r4, #12]
	simple_delay_us(500);
 8002f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f9e:	f7ff ffa4 	bl	8002eea <simple_delay_us>

	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7ff ffca 	bl	8002f3c <oneWire_direction_set>
	simple_delay_us(70);
 8002fa8:	2046      	movs	r0, #70	; 0x46
 8002faa:	f7ff ff9e 	bl	8002eea <simple_delay_us>

	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin) // if 0 - then there is devices on bus
 8002fae:	68a3      	ldr	r3, [r4, #8]
 8002fb0:	f013 0f08 	tst.w	r3, #8
 8002fb4:	d106      	bne.n	8002fc4 <oneWire_init+0x3c>
	{
		i = ONE_WIRE_PRESENCE_FAIL;
	}
	else i = ONE_WIRE_PRESENCE_SUCCESS;
 8002fb6:	2401      	movs	r4, #1
	simple_delay_us(410);
 8002fb8:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002fbc:	f7ff ff95 	bl	8002eea <simple_delay_us>
	return i;
}
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	bd10      	pop	{r4, pc}
		i = ONE_WIRE_PRESENCE_FAIL;
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	e7f7      	b.n	8002fb8 <oneWire_init+0x30>
 8002fc8:	40010800 	.word	0x40010800

08002fcc <oneWire_writeBit>:

void oneWire_writeBit(uint8_t value)
{
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4604      	mov	r4, r0
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin; // todo check
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <oneWire_writeBit+0x40>)
 8002fd2:	68d3      	ldr	r3, [r2, #12]
 8002fd4:	f023 0308 	bic.w	r3, r3, #8
 8002fd8:	60d3      	str	r3, [r2, #12]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f7ff ffae 	bl	8002f3c <oneWire_direction_set>
	if(value)
 8002fe0:	b94c      	cbnz	r4, 8002ff6 <oneWire_writeBit+0x2a>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
		simple_delay_us(64);
	}
	else
	{
		simple_delay_us(60);
 8002fe2:	203c      	movs	r0, #60	; 0x3c
 8002fe4:	f7ff ff81 	bl	8002eea <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7ff ffa7 	bl	8002f3c <oneWire_direction_set>
		simple_delay_us(10);
 8002fee:	200a      	movs	r0, #10
 8002ff0:	f7ff ff7b 	bl	8002eea <simple_delay_us>
	}
}
 8002ff4:	bd10      	pop	{r4, pc}
		simple_delay_us(6);
 8002ff6:	2006      	movs	r0, #6
 8002ff8:	f7ff ff77 	bl	8002eea <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7ff ff9d 	bl	8002f3c <oneWire_direction_set>
		simple_delay_us(64);
 8003002:	2040      	movs	r0, #64	; 0x40
 8003004:	f7ff ff71 	bl	8002eea <simple_delay_us>
 8003008:	e7f4      	b.n	8002ff4 <oneWire_writeBit+0x28>
 800300a:	bf00      	nop
 800300c:	40010800 	.word	0x40010800

08003010 <oneWire_writeByte>:
void oneWire_writeByte(uint8_t byte)
{
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4605      	mov	r5, r0
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8003014:	2002      	movs	r0, #2
 8003016:	f7ff ff91 	bl	8002f3c <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 800301a:	4a08      	ldr	r2, [pc, #32]	; (800303c <oneWire_writeByte+0x2c>)
 800301c:	68d3      	ldr	r3, [r2, #12]
 800301e:	f023 0308 	bic.w	r3, r3, #8
 8003022:	60d3      	str	r3, [r2, #12]
	for(uint8_t i=0; i<8; i++){
 8003024:	2400      	movs	r4, #0
 8003026:	e006      	b.n	8003036 <oneWire_writeByte+0x26>
		oneWire_writeBit(byte & 1<<i);
 8003028:	2001      	movs	r0, #1
 800302a:	40a0      	lsls	r0, r4
 800302c:	4028      	ands	r0, r5
 800302e:	f7ff ffcd 	bl	8002fcc <oneWire_writeBit>
	for(uint8_t i=0; i<8; i++){
 8003032:	3401      	adds	r4, #1
 8003034:	b2e4      	uxtb	r4, r4
 8003036:	2c07      	cmp	r4, #7
 8003038:	d9f6      	bls.n	8003028 <oneWire_writeByte+0x18>
	}
}
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	40010800 	.word	0x40010800

08003040 <oneWire_readbit>:

uint8_t oneWire_readbit(void)
{
 8003040:	b510      	push	{r4, lr}
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8003042:	2002      	movs	r0, #2
 8003044:	f7ff ff7a 	bl	8002f3c <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8003048:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <oneWire_readbit+0x40>)
 800304a:	68e3      	ldr	r3, [r4, #12]
 800304c:	f023 0308 	bic.w	r3, r3, #8
 8003050:	60e3      	str	r3, [r4, #12]
	simple_delay_us(2);
 8003052:	2002      	movs	r0, #2
 8003054:	f7ff ff49 	bl	8002eea <simple_delay_us>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8003058:	2001      	movs	r0, #1
 800305a:	f7ff ff6f 	bl	8002f3c <oneWire_direction_set>
	simple_delay_us(10);
 800305e:	200a      	movs	r0, #10
 8003060:	f7ff ff43 	bl	8002eea <simple_delay_us>
	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin)
 8003064:	68a3      	ldr	r3, [r4, #8]
 8003066:	f013 0f08 	tst.w	r3, #8
 800306a:	d104      	bne.n	8003076 <oneWire_readbit+0x36>
	{
		simple_delay_us(60);
		return 1;
	}
	else{
		simple_delay_us(60);
 800306c:	203c      	movs	r0, #60	; 0x3c
 800306e:	f7ff ff3c 	bl	8002eea <simple_delay_us>
		return 0;
 8003072:	2000      	movs	r0, #0
	}
}
 8003074:	bd10      	pop	{r4, pc}
		simple_delay_us(60);
 8003076:	203c      	movs	r0, #60	; 0x3c
 8003078:	f7ff ff37 	bl	8002eea <simple_delay_us>
		return 1;
 800307c:	2001      	movs	r0, #1
 800307e:	e7f9      	b.n	8003074 <oneWire_readbit+0x34>
 8003080:	40010800 	.word	0x40010800

08003084 <write_data_to_struct>:
	return devices_counter;
}

void write_data_to_struct(uint8_t bit_cnt, uint8_t bit_data, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 8003084:	2807      	cmp	r0, #7
 8003086:	d80e      	bhi.n	80030a6 <write_data_to_struct+0x22>
	{
		 if(bit_data) rom_address[deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 8003088:	2900      	cmp	r1, #0
 800308a:	d040      	beq.n	800310e <write_data_to_struct+0x8a>
{
 800308c:	b410      	push	{r4}
		 if(bit_data) rom_address[deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 800308e:	4c20      	ldr	r4, [pc, #128]	; (8003110 <write_data_to_struct+0x8c>)
 8003090:	f814 3032 	ldrb.w	r3, [r4, r2, lsl #3]
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f000 	lsl.w	r0, r1, r0
 800309a:	4318      	orrs	r0, r3
 800309c:	b2c0      	uxtb	r0, r0
 800309e:	f804 0032 	strb.w	r0, [r4, r2, lsl #3]
	}
	else if( bit_cnt >= 56) // CRC
	{
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
	}
}
 80030a2:	bc10      	pop	{r4}
 80030a4:	4770      	bx	lr
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 80030a6:	f1a0 0308 	sub.w	r3, r0, #8
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b1f      	cmp	r3, #31
 80030ae:	d80d      	bhi.n	80030cc <write_data_to_struct+0x48>
		if(bit_data) rom_address[deviceNo].ROM_NO_FIRST_HALF |= (1 << (bit_cnt - 8));
 80030b0:	b369      	cbz	r1, 800310e <write_data_to_struct+0x8a>
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <write_data_to_struct+0x8c>)
 80030b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80030b8:	f8d2 3001 	ldr.w	r3, [r2, #1]
 80030bc:	f1a0 0108 	sub.w	r1, r0, #8
 80030c0:	2001      	movs	r0, #1
 80030c2:	4088      	lsls	r0, r1
 80030c4:	4318      	orrs	r0, r3
 80030c6:	f8c2 0001 	str.w	r0, [r2, #1]
 80030ca:	4770      	bx	lr
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) )  // Serial no first half
 80030cc:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d80c      	bhi.n	80030f0 <write_data_to_struct+0x6c>
		if(bit_data) rom_address[deviceNo].ROM_NO_SECOUND_HALF |= (1 << (bit_cnt - 40 ));
 80030d6:	b1d1      	cbz	r1, 800310e <write_data_to_struct+0x8a>
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <write_data_to_struct+0x8c>)
 80030da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80030de:	f8b2 1005 	ldrh.w	r1, [r2, #5]
 80030e2:	3828      	subs	r0, #40	; 0x28
 80030e4:	2301      	movs	r3, #1
 80030e6:	4083      	lsls	r3, r0
 80030e8:	430b      	orrs	r3, r1
 80030ea:	f8a2 3005 	strh.w	r3, [r2, #5]
 80030ee:	4770      	bx	lr
	else if( bit_cnt >= 56) // CRC
 80030f0:	2837      	cmp	r0, #55	; 0x37
 80030f2:	d90c      	bls.n	800310e <write_data_to_struct+0x8a>
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
 80030f4:	b159      	cbz	r1, 800310e <write_data_to_struct+0x8a>
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <write_data_to_struct+0x8c>)
 80030f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80030fc:	79d3      	ldrb	r3, [r2, #7]
 80030fe:	3838      	subs	r0, #56	; 0x38
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f000 	lsl.w	r0, r1, r0
 8003106:	4303      	orrs	r3, r0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	71d3      	strb	r3, [r2, #7]
}
 800310c:	4770      	bx	lr
 800310e:	4770      	bx	lr
 8003110:	20000a88 	.word	0x20000a88

08003114 <read_address_bit_form_struct>:
//	}
//}

uint8_t read_address_bit_form_struct(uint8_t bit_cnt, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 8003114:	2807      	cmp	r0, #7
 8003116:	d918      	bls.n	800314a <read_address_bit_form_struct+0x36>
	{
		 return ((rom_address[deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8003118:	f1a0 0308 	sub.w	r3, r0, #8
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b1f      	cmp	r3, #31
 8003120:	d91e      	bls.n	8003160 <read_address_bit_form_struct+0x4c>
	{
		return ((rom_address[deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) ) // Serial no first half
 8003122:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b0f      	cmp	r3, #15
 800312a:	d927      	bls.n	800317c <read_address_bit_form_struct+0x68>
	{
		return ((rom_address[deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
	}
	else if( bit_cnt >= 56) // CRC
 800312c:	2837      	cmp	r0, #55	; 0x37
 800312e:	d933      	bls.n	8003198 <read_address_bit_form_struct+0x84>
	{
		return ((rom_address[deviceNo].ROM_CRC & (1 << (bit_cnt - 56) )) > 0) ;
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <read_address_bit_form_struct+0x88>)
 8003132:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003136:	79ca      	ldrb	r2, [r1, #7]
 8003138:	3838      	subs	r0, #56	; 0x38
 800313a:	2301      	movs	r3, #1
 800313c:	fa03 f000 	lsl.w	r0, r3, r0
 8003140:	4202      	tst	r2, r0
 8003142:	bf14      	ite	ne
 8003144:	4618      	movne	r0, r3
 8003146:	2000      	moveq	r0, #0
 8003148:	4770      	bx	lr
		 return ((rom_address[deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <read_address_bit_form_struct+0x88>)
 800314c:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
 8003150:	2301      	movs	r3, #1
 8003152:	fa03 f000 	lsl.w	r0, r3, r0
 8003156:	4202      	tst	r2, r0
 8003158:	bf14      	ite	ne
 800315a:	4618      	movne	r0, r3
 800315c:	2000      	moveq	r0, #0
 800315e:	4770      	bx	lr
		return ((rom_address[deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
 8003160:	4b0e      	ldr	r3, [pc, #56]	; (800319c <read_address_bit_form_struct+0x88>)
 8003162:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003166:	f8d1 2001 	ldr.w	r2, [r1, #1]
 800316a:	3808      	subs	r0, #8
 800316c:	2301      	movs	r3, #1
 800316e:	fa03 f000 	lsl.w	r0, r3, r0
 8003172:	4202      	tst	r2, r0
 8003174:	bf14      	ite	ne
 8003176:	4618      	movne	r0, r3
 8003178:	2000      	moveq	r0, #0
 800317a:	4770      	bx	lr
		return ((rom_address[deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <read_address_bit_form_struct+0x88>)
 800317e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003182:	f8b1 2005 	ldrh.w	r2, [r1, #5]
 8003186:	3828      	subs	r0, #40	; 0x28
 8003188:	2301      	movs	r3, #1
 800318a:	fa03 f000 	lsl.w	r0, r3, r0
 800318e:	4202      	tst	r2, r0
 8003190:	bf14      	ite	ne
 8003192:	4618      	movne	r0, r3
 8003194:	2000      	moveq	r0, #0
 8003196:	4770      	bx	lr
	}
	else // not used // TODO add asset
	{
		return 0;
 8003198:	2000      	movs	r0, #0
	}

}
 800319a:	4770      	bx	lr
 800319c:	20000a88 	.word	0x20000a88

080031a0 <ds18b20_check_crc>:
//	}
//}


uint8_t ds18b20_check_crc(uint8_t DS18B20_sensor_no)
{
 80031a0:	b510      	push	{r4, lr}
	uint8_t sensor_crc;
	sensor_crc = crc8(&rom_address[DS18B20_sensor_no], 7);
 80031a2:	4c07      	ldr	r4, [pc, #28]	; (80031c0 <ds18b20_check_crc+0x20>)
 80031a4:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 80031a8:	2107      	movs	r1, #7
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7ff fea8 	bl	8002f00 <crc8>
	if(sensor_crc == rom_address[DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 80031b0:	79e3      	ldrb	r3, [r4, #7]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4283      	cmp	r3, r0
 80031b6:	d001      	beq.n	80031bc <ds18b20_check_crc+0x1c>
	else return DS18B20_CRC_ACK_FAIL;
 80031b8:	2000      	movs	r0, #0

}
 80031ba:	bd10      	pop	{r4, pc}
	if(sensor_crc == rom_address[DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 80031bc:	2001      	movs	r0, #1
 80031be:	e7fc      	b.n	80031ba <ds18b20_check_crc+0x1a>
 80031c0:	20000a88 	.word	0x20000a88

080031c4 <ds18b20_search_rom>:
/***
 * searching algorithm based on :
 * https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/187.html
 */
uint8_t ds18b20_search_rom(void)
{
 80031c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
	uint8_t lastDiscrepancy = 0, searchDirection = 0, lastZero = 0; // może byc 0 bo na pierwszych 8 pozycjach zapisana jest rodzina urządzeń
 80031c8:	f04f 0900 	mov.w	r9, #0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
 80031cc:	464f      	mov	r7, r9
	do{
		if(oneWire_init() == ONE_WIRE_PRESENCE_FAIL) return ROM_SARCHING_ERROR;
 80031ce:	f7ff fedb 	bl	8002f88 <oneWire_init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d05a      	beq.n	800328e <ds18b20_search_rom+0xca>

		// there is at least one sensor - someone send presensce ack
		oneWire_writeByte(0xF0);
 80031d8:	20f0      	movs	r0, #240	; 0xf0
 80031da:	f7ff ff19 	bl	8003010 <oneWire_writeByte>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 80031de:	f04f 0800 	mov.w	r8, #0
 80031e2:	4644      	mov	r4, r8
 80031e4:	e016      	b.n	8003214 <ds18b20_search_rom+0x50>
			}
			else{
				return ROM_SARCHING_ERROR;
			}
		}
		lastDiscrepancy = lastZero;
 80031e6:	46c1      	mov	r9, r8
 80031e8:	e7f1      	b.n	80031ce <ds18b20_search_rom+0xa>
					searchDirection = read_address_bit_form_struct(bit_counter, devices_counter-1);
 80031ea:	1e79      	subs	r1, r7, #1
 80031ec:	b2c9      	uxtb	r1, r1
 80031ee:	4620      	mov	r0, r4
 80031f0:	f7ff ff90 	bl	8003114 <read_address_bit_form_struct>
 80031f4:	4606      	mov	r6, r0
 80031f6:	e01d      	b.n	8003234 <ds18b20_search_rom+0x70>
					searchDirection = 1;
 80031f8:	2601      	movs	r6, #1
 80031fa:	e01b      	b.n	8003234 <ds18b20_search_rom+0x70>
			else if( true_bit != complement_bit)
 80031fc:	42b5      	cmp	r5, r6
 80031fe:	d045      	beq.n	800328c <ds18b20_search_rom+0xc8>
				write_data_to_struct(bit_counter, true_bit, devices_counter);
 8003200:	463a      	mov	r2, r7
 8003202:	4629      	mov	r1, r5
 8003204:	4620      	mov	r0, r4
 8003206:	f7ff ff3d 	bl	8003084 <write_data_to_struct>
				oneWire_writeBit(true_bit);
 800320a:	4628      	mov	r0, r5
 800320c:	f7ff fede 	bl	8002fcc <oneWire_writeBit>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 8003210:	3401      	adds	r4, #1
 8003212:	b2e4      	uxtb	r4, r4
 8003214:	2c3f      	cmp	r4, #63	; 0x3f
 8003216:	d81c      	bhi.n	8003252 <ds18b20_search_rom+0x8e>
			true_bit = oneWire_readbit();
 8003218:	f7ff ff12 	bl	8003040 <oneWire_readbit>
 800321c:	4605      	mov	r5, r0
			complement_bit = oneWire_readbit();
 800321e:	f7ff ff0f 	bl	8003040 <oneWire_readbit>
 8003222:	4606      	mov	r6, r0
			if( ( true_bit ==  0 ) && (complement_bit == 0) ) {
 8003224:	2d00      	cmp	r5, #0
 8003226:	d1e9      	bne.n	80031fc <ds18b20_search_rom+0x38>
 8003228:	2800      	cmp	r0, #0
 800322a:	d1e7      	bne.n	80031fc <ds18b20_search_rom+0x38>
				if((bit_counter + 1) ==  lastDiscrepancy)
 800322c:	1c63      	adds	r3, r4, #1
 800322e:	454b      	cmp	r3, r9
 8003230:	d0e2      	beq.n	80031f8 <ds18b20_search_rom+0x34>
				else if((bit_counter + 1) > lastDiscrepancy )
 8003232:	ddda      	ble.n	80031ea <ds18b20_search_rom+0x26>
				oneWire_writeBit(searchDirection);
 8003234:	4630      	mov	r0, r6
 8003236:	f7ff fec9 	bl	8002fcc <oneWire_writeBit>
				write_data_to_struct(bit_counter, searchDirection, devices_counter);
 800323a:	463a      	mov	r2, r7
 800323c:	4631      	mov	r1, r6
 800323e:	4620      	mov	r0, r4
 8003240:	f7ff ff20 	bl	8003084 <write_data_to_struct>
				searchDirection ? (lastZero = lastZero) : (lastZero = bit_counter+1);
 8003244:	2e00      	cmp	r6, #0
 8003246:	d1e3      	bne.n	8003210 <ds18b20_search_rom+0x4c>
 8003248:	f104 0801 	add.w	r8, r4, #1
 800324c:	fa5f f888 	uxtb.w	r8, r8
 8003250:	e7de      	b.n	8003210 <ds18b20_search_rom+0x4c>
		lastZero = 0;
		if(lastDiscrepancy != 0)
 8003252:	f1b8 0f00 	cmp.w	r8, #0
 8003256:	d001      	beq.n	800325c <ds18b20_search_rom+0x98>
		{
			devices_counter++  ;
 8003258:	3701      	adds	r7, #1
 800325a:	b2ff      	uxtb	r7, r7
		}

	}while(lastDiscrepancy != 0);
 800325c:	f1b8 0f00 	cmp.w	r8, #0
 8003260:	d1c1      	bne.n	80031e6 <ds18b20_search_rom+0x22>

	ds18b20_sensors_amount = devices_counter + 1; //counter from 0 to device amount - 1
 8003262:	1c7b      	adds	r3, r7, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <ds18b20_search_rom+0xd0>)
 8003268:	7013      	strb	r3, [r2, #0]


	// check CRC codes ..

	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <ds18b20_search_rom+0xd0>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	4543      	cmp	r3, r8
 8003272:	d909      	bls.n	8003288 <ds18b20_search_rom+0xc4>
	{
		if(ds18b20_check_crc(founded_sensor_no) == DS18B20_CRC_ACK_FAIL)
 8003274:	4640      	mov	r0, r8
 8003276:	f7ff ff93 	bl	80031a0 <ds18b20_check_crc>
 800327a:	4603      	mov	r3, r0
 800327c:	b138      	cbz	r0, 800328e <ds18b20_search_rom+0xca>
	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 800327e:	f108 0801 	add.w	r8, r8, #1
 8003282:	fa5f f888 	uxtb.w	r8, r8
 8003286:	e7f0      	b.n	800326a <ds18b20_search_rom+0xa6>
		{
			return DS18B20_CRC_ACK_FAIL;
		}
	}
	return ROM_SARCHING_OK;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <ds18b20_search_rom+0xca>
				return ROM_SARCHING_ERROR;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003294:	2000052c 	.word	0x2000052c

08003298 <ds18b20_initalize>:
	}
	*(temperature_str_hex++) = '\0';
}

void ds18b20_initalize(void)
{
 8003298:	b508      	push	{r3, lr}
	ds18b20_search_rom();
 800329a:	f7ff ff93 	bl	80031c4 <ds18b20_search_rom>
	HC_status.ds18b20_amount = ds18b20_sensors_amount;
 800329e:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <ds18b20_initalize+0x10>)
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	4b02      	ldr	r3, [pc, #8]	; (80032ac <ds18b20_initalize+0x14>)
 80032a4:	701a      	strb	r2, [r3, #0]
}
 80032a6:	bd08      	pop	{r3, pc}
 80032a8:	2000052c 	.word	0x2000052c
 80032ac:	20000598 	.word	0x20000598

080032b0 <EE_VerifyPageFullyErased>:
{
  uint32_t readstatus = 1;
  uint16_t addressvalue = 0x5555;

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <EE_VerifyPageFullyErased+0x20>)
 80032b2:	4298      	cmp	r0, r3
 80032b4:	d807      	bhi.n	80032c6 <EE_VerifyPageFullyErased+0x16>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 80032b6:	8803      	ldrh	r3, [r0, #0]
 80032b8:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 80032ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032be:	4293      	cmp	r3, r2
 80032c0:	d103      	bne.n	80032ca <EE_VerifyPageFullyErased+0x1a>
      readstatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 80032c2:	3004      	adds	r0, #4
 80032c4:	e7f4      	b.n	80032b0 <EE_VerifyPageFullyErased>
  uint32_t readstatus = 1;
 80032c6:	2001      	movs	r0, #1
 80032c8:	4770      	bx	lr
      readstatus = 0;
 80032ca:	2000      	movs	r0, #0
  }

  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	0801fbff 	.word	0x0801fbff

080032d4 <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <EE_FindValidPage+0x48>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <EE_FindValidPage+0x4c>)
 80032dc:	8812      	ldrh	r2, [r2, #0]
 80032de:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 80032e0:	b188      	cbz	r0, 8003306 <EE_FindValidPage+0x32>
 80032e2:	2801      	cmp	r0, #1
 80032e4:	d113      	bne.n	800330e <EE_FindValidPage+0x3a>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 80032e6:	b93a      	cbnz	r2, 80032f8 <EE_FindValidPage+0x24>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 80032e8:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80032ec:	428b      	cmp	r3, r1
 80032ee:	d001      	beq.n	80032f4 <EE_FindValidPage+0x20>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80032f0:	2301      	movs	r3, #1
 80032f2:	e00d      	b.n	8003310 <EE_FindValidPage+0x3c>
          return PAGE0;         /* Page0 valid */
 80032f4:	4613      	mov	r3, r2
 80032f6:	e00b      	b.n	8003310 <EE_FindValidPage+0x3c>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 80032f8:	b963      	cbnz	r3, 8003314 <EE_FindValidPage+0x40>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 80032fa:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80032fe:	428a      	cmp	r2, r1
 8003300:	d106      	bne.n	8003310 <EE_FindValidPage+0x3c>
        {
          return PAGE1;         /* Page1 valid */
 8003302:	2301      	movs	r3, #1
 8003304:	e004      	b.n	8003310 <EE_FindValidPage+0x3c>
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8003306:	b11b      	cbz	r3, 8003310 <EE_FindValidPage+0x3c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8003308:	b932      	cbnz	r2, 8003318 <EE_FindValidPage+0x44>
      {
        return PAGE1;           /* Page1 valid */
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <EE_FindValidPage+0x3c>
      {
        return NO_VALID_PAGE ;  /* No valid Page */
      }

    default:
      return PAGE0;             /* Page0 valid */
 800330e:	2300      	movs	r3, #0
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	4770      	bx	lr
        return NO_VALID_PAGE;   /* No valid Page */
 8003314:	23ab      	movs	r3, #171	; 0xab
 8003316:	e7fb      	b.n	8003310 <EE_FindValidPage+0x3c>
        return NO_VALID_PAGE ;  /* No valid Page */
 8003318:	23ab      	movs	r3, #171	; 0xab
 800331a:	e7f9      	b.n	8003310 <EE_FindValidPage+0x3c>
 800331c:	0801f800 	.word	0x0801f800
 8003320:	0801fc00 	.word	0x0801fc00

08003324 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4605      	mov	r5, r0
 8003328:	460e      	mov	r6, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint16_t validpage = PAGE0;
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800332a:	2001      	movs	r0, #1
 800332c:	f7ff ffd2 	bl	80032d4 <EE_FindValidPage>

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8003330:	28ab      	cmp	r0, #171	; 0xab
 8003332:	d021      	beq.n	8003378 <EE_VerifyPageFullWriteVariable+0x54>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8003334:	f500 3400 	add.w	r4, r0, #131072	; 0x20000
 8003338:	347e      	adds	r4, #126	; 0x7e
 800333a:	02a4      	lsls	r4, r4, #10

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	480f      	ldr	r0, [pc, #60]	; (800337c <EE_VerifyPageFullWriteVariable+0x58>)
 8003340:	eb00 2083 	add.w	r0, r0, r3, lsl #10

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8003344:	4284      	cmp	r4, r0
 8003346:	d216      	bcs.n	8003376 <EE_VerifyPageFullWriteVariable+0x52>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d001      	beq.n	8003354 <EE_VerifyPageFullWriteVariable+0x30>
      return flashstatus;
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8003350:	3404      	adds	r4, #4
 8003352:	e7f7      	b.n	8003344 <EE_VerifyPageFullWriteVariable+0x20>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 8003354:	b2b2      	uxth	r2, r6
 8003356:	2300      	movs	r3, #0
 8003358:	4621      	mov	r1, r4
 800335a:	2001      	movs	r0, #1
 800335c:	f7fe fa8c 	bl	8001878 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8003360:	b108      	cbz	r0, 8003366 <EE_VerifyPageFullWriteVariable+0x42>
        return flashstatus;
 8003362:	b280      	uxth	r0, r0
 8003364:	e008      	b.n	8003378 <EE_VerifyPageFullWriteVariable+0x54>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 8003366:	b2aa      	uxth	r2, r5
 8003368:	2300      	movs	r3, #0
 800336a:	1ca1      	adds	r1, r4, #2
 800336c:	2001      	movs	r0, #1
 800336e:	f7fe fa83 	bl	8001878 <HAL_FLASH_Program>
      return flashstatus;
 8003372:	b280      	uxth	r0, r0
 8003374:	e000      	b.n	8003378 <EE_VerifyPageFullWriteVariable+0x54>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8003376:	2080      	movs	r0, #128	; 0x80
}
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	bf00      	nop
 800337c:	0801f7ff 	.word	0x0801f7ff

08003380 <EE_ReadVariable>:
{
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	4604      	mov	r4, r0
 8003384:	460d      	mov	r5, r1
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003386:	2000      	movs	r0, #0
 8003388:	f7ff ffa4 	bl	80032d4 <EE_FindValidPage>
  if (validpage == NO_VALID_PAGE)
 800338c:	28ab      	cmp	r0, #171	; 0xab
 800338e:	d016      	beq.n	80033be <EE_ReadVariable+0x3e>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8003390:	f500 3200 	add.w	r2, r0, #131072	; 0x20000
 8003394:	327e      	adds	r2, #126	; 0x7e
 8003396:	0292      	lsls	r2, r2, #10
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	4809      	ldr	r0, [pc, #36]	; (80033c0 <EE_ReadVariable+0x40>)
 800339c:	eb00 2083 	add.w	r0, r0, r3, lsl #10
  while (address > (PageStartAddress + 2))
 80033a0:	1c93      	adds	r3, r2, #2
 80033a2:	4283      	cmp	r3, r0
 80033a4:	d20a      	bcs.n	80033bc <EE_ReadVariable+0x3c>
    addressvalue = (*(__IO uint16_t*)address);
 80033a6:	8803      	ldrh	r3, [r0, #0]
 80033a8:	b29b      	uxth	r3, r3
    if (addressvalue == VirtAddress)
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	d001      	beq.n	80033b2 <EE_ReadVariable+0x32>
      address = address - 4;
 80033ae:	3804      	subs	r0, #4
 80033b0:	e7f6      	b.n	80033a0 <EE_ReadVariable+0x20>
      *Data = (*(__IO uint16_t*)(address - 2));
 80033b2:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 80033b6:	802b      	strh	r3, [r5, #0]
      readstatus = 0;
 80033b8:	2000      	movs	r0, #0
      break;
 80033ba:	e000      	b.n	80033be <EE_ReadVariable+0x3e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 80033bc:	2001      	movs	r0, #1
}
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	0801f7fe 	.word	0x0801f7fe

080033c4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80033c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	4605      	mov	r5, r0
 80033cc:	460f      	mov	r7, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 80033ce:	2000      	movs	r0, #0
 80033d0:	9005      	str	r0, [sp, #20]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80033d2:	f7ff ff7f 	bl	80032d4 <EE_FindValidPage>

  if (validpage == PAGE1)       /* Page1 valid */
 80033d6:	2801      	cmp	r0, #1
 80033d8:	d011      	beq.n	80033fe <EE_PageTransfer+0x3a>
    newpageaddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 80033da:	2800      	cmp	r0, #0
 80033dc:	d14b      	bne.n	8003476 <EE_PageTransfer+0xb2>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 80033de:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003480 <EE_PageTransfer+0xbc>
    newpageaddress = PAGE1_BASE_ADDRESS;
 80033e2:	4e26      	ldr	r6, [pc, #152]	; (800347c <EE_PageTransfer+0xb8>)
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);
 80033e4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80033e8:	2300      	movs	r3, #0
 80033ea:	4631      	mov	r1, r6
 80033ec:	2001      	movs	r0, #1
 80033ee:	f7fe fa43 	bl	8001878 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80033f2:	b140      	cbz	r0, 8003406 <EE_PageTransfer+0x42>
  {
    return flashstatus;
 80033f4:	b284      	uxth	r4, r0



  /* Return last operation flash status */
  return flashstatus;
}
 80033f6:	4620      	mov	r0, r4
 80033f8:	b006      	add	sp, #24
 80033fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    oldpageid = PAGE1_ID;
 80033fe:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800347c <EE_PageTransfer+0xb8>
    newpageaddress = PAGE0_BASE_ADDRESS;
 8003402:	4e1f      	ldr	r6, [pc, #124]	; (8003480 <EE_PageTransfer+0xbc>)
 8003404:	e7ee      	b.n	80033e4 <EE_PageTransfer+0x20>
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003406:	4639      	mov	r1, r7
 8003408:	4628      	mov	r0, r5
 800340a:	f7ff ff8b 	bl	8003324 <EE_VerifyPageFullWriteVariable>
  if (eepromstatus != HAL_OK)
 800340e:	4604      	mov	r4, r0
 8003410:	b110      	cbz	r0, 8003418 <EE_PageTransfer+0x54>
 8003412:	e7f0      	b.n	80033f6 <EE_PageTransfer+0x32>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8003414:	3401      	adds	r4, #1
 8003416:	b2a4      	uxth	r4, r4
 8003418:	2c08      	cmp	r4, #8
 800341a:	d814      	bhi.n	8003446 <EE_PageTransfer+0x82>
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <EE_PageTransfer+0xc0>)
 800341e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003422:	42a8      	cmp	r0, r5
 8003424:	d0f6      	beq.n	8003414 <EE_PageTransfer+0x50>
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8003426:	4918      	ldr	r1, [pc, #96]	; (8003488 <EE_PageTransfer+0xc4>)
 8003428:	f7ff ffaa 	bl	8003380 <EE_ReadVariable>
      if (readstatus != 0x1)
 800342c:	2801      	cmp	r0, #1
 800342e:	d0f1      	beq.n	8003414 <EE_PageTransfer+0x50>
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <EE_PageTransfer+0xc4>)
 8003432:	8819      	ldrh	r1, [r3, #0]
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <EE_PageTransfer+0xc0>)
 8003436:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800343a:	f7ff ff73 	bl	8003324 <EE_VerifyPageFullWriteVariable>
        if (eepromstatus != HAL_OK)
 800343e:	2800      	cmp	r0, #0
 8003440:	d0e8      	beq.n	8003414 <EE_PageTransfer+0x50>
          return eepromstatus;
 8003442:	4604      	mov	r4, r0
 8003444:	e7d7      	b.n	80033f6 <EE_PageTransfer+0x32>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003446:	2300      	movs	r3, #0
 8003448:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 800344a:	f8cd 800c 	str.w	r8, [sp, #12]
  s_eraseinit.NbPages     = 1;
 800344e:	2301      	movs	r3, #1
 8003450:	9304      	str	r3, [sp, #16]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003452:	a905      	add	r1, sp, #20
 8003454:	a801      	add	r0, sp, #4
 8003456:	f7fe fa81 	bl	800195c <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 800345a:	b108      	cbz	r0, 8003460 <EE_PageTransfer+0x9c>
    return flashstatus;
 800345c:	b284      	uxth	r4, r0
 800345e:	e7ca      	b.n	80033f6 <EE_PageTransfer+0x32>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);
 8003460:	2200      	movs	r2, #0
 8003462:	2300      	movs	r3, #0
 8003464:	4631      	mov	r1, r6
 8003466:	2001      	movs	r0, #1
 8003468:	f7fe fa06 	bl	8001878 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 800346c:	b908      	cbnz	r0, 8003472 <EE_PageTransfer+0xae>
  return flashstatus;
 800346e:	b284      	uxth	r4, r0
 8003470:	e7c1      	b.n	80033f6 <EE_PageTransfer+0x32>
    return flashstatus;
 8003472:	b284      	uxth	r4, r0
 8003474:	e7bf      	b.n	80033f6 <EE_PageTransfer+0x32>
    return NO_VALID_PAGE;       /* No valid Page */
 8003476:	24ab      	movs	r4, #171	; 0xab
 8003478:	e7bd      	b.n	80033f6 <EE_PageTransfer+0x32>
 800347a:	bf00      	nop
 800347c:	0801fc00 	.word	0x0801fc00
 8003480:	0801f800 	.word	0x0801f800
 8003484:	200000d0 	.word	0x200000d0
 8003488:	2000052e 	.word	0x2000052e

0800348c <EE_WriteVariable>:
{
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4604      	mov	r4, r0
 8003490:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003492:	f7ff ff47 	bl	8003324 <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 8003496:	2880      	cmp	r0, #128	; 0x80
 8003498:	d000      	beq.n	800349c <EE_WriteVariable+0x10>
}
 800349a:	bd38      	pop	{r3, r4, r5, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 800349c:	4629      	mov	r1, r5
 800349e:	4620      	mov	r0, r4
 80034a0:	f7ff ff90 	bl	80033c4 <EE_PageTransfer>
 80034a4:	e7f9      	b.n	800349a <EE_WriteVariable+0xe>
	...

080034a8 <EE_Format>:
{
 80034a8:	b510      	push	{r4, lr}
 80034aa:	b086      	sub	sp, #24
  uint32_t page_error = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	9305      	str	r3, [sp, #20]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80034b0:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 80034b2:	4812      	ldr	r0, [pc, #72]	; (80034fc <EE_Format+0x54>)
 80034b4:	9003      	str	r0, [sp, #12]
  s_eraseinit.NbPages     = 1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	9304      	str	r3, [sp, #16]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80034ba:	f7ff fef9 	bl	80032b0 <EE_VerifyPageFullyErased>
 80034be:	b928      	cbnz	r0, 80034cc <EE_Format+0x24>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80034c0:	a905      	add	r1, sp, #20
 80034c2:	a801      	add	r0, sp, #4
 80034c4:	f7fe fa4a 	bl	800195c <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 80034c8:	4604      	mov	r4, r0
 80034ca:	b938      	cbnz	r0, 80034dc <EE_Format+0x34>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2300      	movs	r3, #0
 80034d0:	490a      	ldr	r1, [pc, #40]	; (80034fc <EE_Format+0x54>)
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7fe f9d0 	bl	8001878 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 80034d8:	4604      	mov	r4, r0
 80034da:	b110      	cbz	r0, 80034e2 <EE_Format+0x3a>
}
 80034dc:	4620      	mov	r0, r4
 80034de:	b006      	add	sp, #24
 80034e0:	bd10      	pop	{r4, pc}
  s_eraseinit.PageAddress = PAGE1_ID;
 80034e2:	4807      	ldr	r0, [pc, #28]	; (8003500 <EE_Format+0x58>)
 80034e4:	9003      	str	r0, [sp, #12]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80034e6:	f7ff fee3 	bl	80032b0 <EE_VerifyPageFullyErased>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d1f6      	bne.n	80034dc <EE_Format+0x34>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80034ee:	a905      	add	r1, sp, #20
 80034f0:	a801      	add	r0, sp, #4
 80034f2:	f7fe fa33 	bl	800195c <HAL_FLASHEx_Erase>
 80034f6:	4604      	mov	r4, r0
 80034f8:	e7f0      	b.n	80034dc <EE_Format+0x34>
 80034fa:	bf00      	nop
 80034fc:	0801f800 	.word	0x0801f800
 8003500:	0801fc00 	.word	0x0801fc00

08003504 <EE_Init>:
{
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	b087      	sub	sp, #28
  uint32_t page_error = 0;
 8003508:	2200      	movs	r2, #0
 800350a:	9205      	str	r2, [sp, #20]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800350c:	4b8f      	ldr	r3, [pc, #572]	; (800374c <EE_Init+0x248>)
 800350e:	881e      	ldrh	r6, [r3, #0]
 8003510:	b2b6      	uxth	r6, r6
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003512:	498f      	ldr	r1, [pc, #572]	; (8003750 <EE_Init+0x24c>)
 8003514:	880d      	ldrh	r5, [r1, #0]
 8003516:	b2ad      	uxth	r5, r5
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003518:	9201      	str	r2, [sp, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 800351a:	9303      	str	r3, [sp, #12]
  s_eraseinit.NbPages     = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	9304      	str	r3, [sp, #16]
  switch (pagestatus0)
 8003520:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8003524:	429e      	cmp	r6, r3
 8003526:	d040      	beq.n	80035aa <EE_Init+0xa6>
 8003528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800352c:	429e      	cmp	r6, r3
 800352e:	d00b      	beq.n	8003548 <EE_Init+0x44>
 8003530:	2e00      	cmp	r6, #0
 8003532:	f000 809d 	beq.w	8003670 <EE_Init+0x16c>
      flashstatus = EE_Format();
 8003536:	f7ff ffb7 	bl	80034a8 <EE_Format>
      if (flashstatus != HAL_OK)
 800353a:	2800      	cmp	r0, #0
 800353c:	f000 8104 	beq.w	8003748 <EE_Init+0x244>
        return flashstatus;
 8003540:	b285      	uxth	r5, r0
}
 8003542:	4628      	mov	r0, r5
 8003544:	b007      	add	sp, #28
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8003548:	b155      	cbz	r5, 8003560 <EE_Init+0x5c>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800354a:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 800354e:	429d      	cmp	r5, r3
 8003550:	d015      	beq.n	800357e <EE_Init+0x7a>
        flashstatus = EE_Format();
 8003552:	f7ff ffa9 	bl	80034a8 <EE_Format>
        if (flashstatus != HAL_OK)
 8003556:	2800      	cmp	r0, #0
 8003558:	f000 80ee 	beq.w	8003738 <EE_Init+0x234>
          return flashstatus;
 800355c:	b285      	uxth	r5, r0
 800355e:	e7f0      	b.n	8003542 <EE_Init+0x3e>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003560:	487a      	ldr	r0, [pc, #488]	; (800374c <EE_Init+0x248>)
 8003562:	f7ff fea5 	bl	80032b0 <EE_VerifyPageFullyErased>
 8003566:	4604      	mov	r4, r0
 8003568:	2800      	cmp	r0, #0
 800356a:	d1ea      	bne.n	8003542 <EE_Init+0x3e>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800356c:	a905      	add	r1, sp, #20
 800356e:	a801      	add	r0, sp, #4
 8003570:	f7fe f9f4 	bl	800195c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003574:	2800      	cmp	r0, #0
 8003576:	f000 80db 	beq.w	8003730 <EE_Init+0x22c>
            return flashstatus;
 800357a:	b285      	uxth	r5, r0
 800357c:	e7e1      	b.n	8003542 <EE_Init+0x3e>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800357e:	4873      	ldr	r0, [pc, #460]	; (800374c <EE_Init+0x248>)
 8003580:	f7ff fe96 	bl	80032b0 <EE_VerifyPageFullyErased>
 8003584:	b920      	cbnz	r0, 8003590 <EE_Init+0x8c>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003586:	a905      	add	r1, sp, #20
 8003588:	a801      	add	r0, sp, #4
 800358a:	f7fe f9e7 	bl	800195c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 800358e:	b950      	cbnz	r0, 80035a6 <EE_Init+0xa2>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8003590:	2200      	movs	r2, #0
 8003592:	2300      	movs	r3, #0
 8003594:	496e      	ldr	r1, [pc, #440]	; (8003750 <EE_Init+0x24c>)
 8003596:	2001      	movs	r0, #1
 8003598:	f7fe f96e 	bl	8001878 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800359c:	2800      	cmp	r0, #0
 800359e:	f000 80c9 	beq.w	8003734 <EE_Init+0x230>
          return flashstatus;
 80035a2:	b285      	uxth	r5, r0
 80035a4:	e7cd      	b.n	8003542 <EE_Init+0x3e>
            return flashstatus;
 80035a6:	b285      	uxth	r5, r0
 80035a8:	e7cb      	b.n	8003542 <EE_Init+0x3e>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80035aa:	b35d      	cbz	r5, 8003604 <EE_Init+0x100>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 80035ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035b0:	429d      	cmp	r5, r3
 80035b2:	d047      	beq.n	8003644 <EE_Init+0x140>
        flashstatus = EE_Format();
 80035b4:	f7ff ff78 	bl	80034a8 <EE_Format>
        if (flashstatus != HAL_OK)
 80035b8:	2800      	cmp	r0, #0
 80035ba:	f000 80c3 	beq.w	8003744 <EE_Init+0x240>
          return flashstatus;
 80035be:	b285      	uxth	r5, r0
 80035c0:	e7bf      	b.n	8003542 <EE_Init+0x3e>
            x = varidx;
 80035c2:	b227      	sxth	r7, r4
 80035c4:	e00c      	b.n	80035e0 <EE_Init+0xdc>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80035c6:	3401      	adds	r4, #1
 80035c8:	b2a4      	uxth	r4, r4
 80035ca:	2c08      	cmp	r4, #8
 80035cc:	d81e      	bhi.n	800360c <EE_Init+0x108>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80035ce:	4b61      	ldr	r3, [pc, #388]	; (8003754 <EE_Init+0x250>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4626      	mov	r6, r4
 80035d6:	4a60      	ldr	r2, [pc, #384]	; (8003758 <EE_Init+0x254>)
 80035d8:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80035dc:	4283      	cmp	r3, r0
 80035de:	d0f0      	beq.n	80035c2 <EE_Init+0xbe>
          if (varidx != x)
 80035e0:	42be      	cmp	r6, r7
 80035e2:	d0f0      	beq.n	80035c6 <EE_Init+0xc2>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80035e4:	495d      	ldr	r1, [pc, #372]	; (800375c <EE_Init+0x258>)
 80035e6:	f7ff fecb 	bl	8003380 <EE_ReadVariable>
            if (readstatus != 0x1)
 80035ea:	2801      	cmp	r0, #1
 80035ec:	d0eb      	beq.n	80035c6 <EE_Init+0xc2>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80035ee:	4b5b      	ldr	r3, [pc, #364]	; (800375c <EE_Init+0x258>)
 80035f0:	8819      	ldrh	r1, [r3, #0]
 80035f2:	4b59      	ldr	r3, [pc, #356]	; (8003758 <EE_Init+0x254>)
 80035f4:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 80035f8:	f7ff fe94 	bl	8003324 <EE_VerifyPageFullWriteVariable>
              if (eepromstatus != HAL_OK)
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d0e2      	beq.n	80035c6 <EE_Init+0xc2>
                return eepromstatus;
 8003600:	4605      	mov	r5, r0
 8003602:	e79e      	b.n	8003542 <EE_Init+0x3e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8003604:	462c      	mov	r4, r5
  int16_t x = -1;
 8003606:	f04f 37ff 	mov.w	r7, #4294967295
 800360a:	e7de      	b.n	80035ca <EE_Init+0xc6>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800360c:	2200      	movs	r2, #0
 800360e:	2300      	movs	r3, #0
 8003610:	494e      	ldr	r1, [pc, #312]	; (800374c <EE_Init+0x248>)
 8003612:	2001      	movs	r0, #1
 8003614:	f7fe f930 	bl	8001878 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8003618:	b108      	cbz	r0, 800361e <EE_Init+0x11a>
          return flashstatus;
 800361a:	b285      	uxth	r5, r0
 800361c:	e791      	b.n	8003542 <EE_Init+0x3e>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800361e:	2300      	movs	r3, #0
 8003620:	9301      	str	r3, [sp, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8003622:	484b      	ldr	r0, [pc, #300]	; (8003750 <EE_Init+0x24c>)
 8003624:	9003      	str	r0, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800362a:	f7ff fe41 	bl	80032b0 <EE_VerifyPageFullyErased>
 800362e:	4604      	mov	r4, r0
 8003630:	2800      	cmp	r0, #0
 8003632:	d186      	bne.n	8003542 <EE_Init+0x3e>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003634:	a905      	add	r1, sp, #20
 8003636:	a801      	add	r0, sp, #4
 8003638:	f7fe f990 	bl	800195c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 800363c:	2800      	cmp	r0, #0
 800363e:	d07d      	beq.n	800373c <EE_Init+0x238>
            return flashstatus;
 8003640:	b285      	uxth	r5, r0
 8003642:	e77e      	b.n	8003542 <EE_Init+0x3e>
        s_eraseinit.PageAddress = PAGE1_ID;
 8003644:	4842      	ldr	r0, [pc, #264]	; (8003750 <EE_Init+0x24c>)
 8003646:	9003      	str	r0, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003648:	f7ff fe32 	bl	80032b0 <EE_VerifyPageFullyErased>
 800364c:	b920      	cbnz	r0, 8003658 <EE_Init+0x154>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800364e:	a905      	add	r1, sp, #20
 8003650:	a801      	add	r0, sp, #4
 8003652:	f7fe f983 	bl	800195c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003656:	b948      	cbnz	r0, 800366c <EE_Init+0x168>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003658:	2200      	movs	r2, #0
 800365a:	2300      	movs	r3, #0
 800365c:	493b      	ldr	r1, [pc, #236]	; (800374c <EE_Init+0x248>)
 800365e:	2001      	movs	r0, #1
 8003660:	f7fe f90a 	bl	8001878 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8003664:	2800      	cmp	r0, #0
 8003666:	d06b      	beq.n	8003740 <EE_Init+0x23c>
          return flashstatus;
 8003668:	b285      	uxth	r5, r0
 800366a:	e76a      	b.n	8003542 <EE_Init+0x3e>
            return flashstatus;
 800366c:	b285      	uxth	r5, r0
 800366e:	e768      	b.n	8003542 <EE_Init+0x3e>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8003670:	b13d      	cbz	r5, 8003682 <EE_Init+0x17e>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8003672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003676:	429d      	cmp	r5, r3
 8003678:	d00a      	beq.n	8003690 <EE_Init+0x18c>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800367a:	4634      	mov	r4, r6
  int16_t x = -1;
 800367c:	f04f 37ff 	mov.w	r7, #4294967295
 8003680:	e01b      	b.n	80036ba <EE_Init+0x1b6>
        flashstatus = EE_Format();
 8003682:	f7ff ff11 	bl	80034a8 <EE_Format>
        if (flashstatus != HAL_OK)
 8003686:	2800      	cmp	r0, #0
 8003688:	f43f af5b 	beq.w	8003542 <EE_Init+0x3e>
          return flashstatus;
 800368c:	b285      	uxth	r5, r0
 800368e:	e758      	b.n	8003542 <EE_Init+0x3e>
        s_eraseinit.PageAddress = PAGE1_ID;
 8003690:	482f      	ldr	r0, [pc, #188]	; (8003750 <EE_Init+0x24c>)
 8003692:	9003      	str	r0, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003694:	f7ff fe0c 	bl	80032b0 <EE_VerifyPageFullyErased>
 8003698:	4605      	mov	r5, r0
 800369a:	b108      	cbz	r0, 80036a0 <EE_Init+0x19c>
  return HAL_OK;
 800369c:	4635      	mov	r5, r6
 800369e:	e750      	b.n	8003542 <EE_Init+0x3e>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80036a0:	a905      	add	r1, sp, #20
 80036a2:	a801      	add	r0, sp, #4
 80036a4:	f7fe f95a 	bl	800195c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80036a8:	2800      	cmp	r0, #0
 80036aa:	f43f af4a 	beq.w	8003542 <EE_Init+0x3e>
            return flashstatus;
 80036ae:	b285      	uxth	r5, r0
 80036b0:	e747      	b.n	8003542 <EE_Init+0x3e>
            x = varidx;
 80036b2:	b227      	sxth	r7, r4
 80036b4:	e00c      	b.n	80036d0 <EE_Init+0x1cc>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80036b6:	3401      	adds	r4, #1
 80036b8:	b2a4      	uxth	r4, r4
 80036ba:	2c08      	cmp	r4, #8
 80036bc:	d81a      	bhi.n	80036f4 <EE_Init+0x1f0>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <EE_Init+0x25c>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4625      	mov	r5, r4
 80036c6:	4a24      	ldr	r2, [pc, #144]	; (8003758 <EE_Init+0x254>)
 80036c8:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80036cc:	4283      	cmp	r3, r0
 80036ce:	d0f0      	beq.n	80036b2 <EE_Init+0x1ae>
          if (varidx != x)
 80036d0:	42bd      	cmp	r5, r7
 80036d2:	d0f0      	beq.n	80036b6 <EE_Init+0x1b2>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80036d4:	4921      	ldr	r1, [pc, #132]	; (800375c <EE_Init+0x258>)
 80036d6:	f7ff fe53 	bl	8003380 <EE_ReadVariable>
            if (readstatus != 0x1)
 80036da:	2801      	cmp	r0, #1
 80036dc:	d0eb      	beq.n	80036b6 <EE_Init+0x1b2>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <EE_Init+0x258>)
 80036e0:	8819      	ldrh	r1, [r3, #0]
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <EE_Init+0x254>)
 80036e4:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80036e8:	f7ff fe1c 	bl	8003324 <EE_VerifyPageFullWriteVariable>
              if (eepromstatus != HAL_OK)
 80036ec:	4605      	mov	r5, r0
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d0e1      	beq.n	80036b6 <EE_Init+0x1b2>
 80036f2:	e726      	b.n	8003542 <EE_Init+0x3e>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2300      	movs	r3, #0
 80036f8:	4915      	ldr	r1, [pc, #84]	; (8003750 <EE_Init+0x24c>)
 80036fa:	2001      	movs	r0, #1
 80036fc:	f7fe f8bc 	bl	8001878 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8003700:	b108      	cbz	r0, 8003706 <EE_Init+0x202>
          return flashstatus;
 8003702:	b285      	uxth	r5, r0
 8003704:	e71d      	b.n	8003542 <EE_Init+0x3e>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003706:	2300      	movs	r3, #0
 8003708:	9301      	str	r3, [sp, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 800370a:	4810      	ldr	r0, [pc, #64]	; (800374c <EE_Init+0x248>)
 800370c:	9003      	str	r0, [sp, #12]
        s_eraseinit.NbPages     = 1;
 800370e:	2301      	movs	r3, #1
 8003710:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003712:	f7ff fdcd 	bl	80032b0 <EE_VerifyPageFullyErased>
 8003716:	4605      	mov	r5, r0
 8003718:	b108      	cbz	r0, 800371e <EE_Init+0x21a>
  return HAL_OK;
 800371a:	4635      	mov	r5, r6
 800371c:	e711      	b.n	8003542 <EE_Init+0x3e>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800371e:	a905      	add	r1, sp, #20
 8003720:	a801      	add	r0, sp, #4
 8003722:	f7fe f91b 	bl	800195c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003726:	2800      	cmp	r0, #0
 8003728:	f43f af0b 	beq.w	8003542 <EE_Init+0x3e>
            return flashstatus;
 800372c:	b285      	uxth	r5, r0
 800372e:	e708      	b.n	8003542 <EE_Init+0x3e>
  return HAL_OK;
 8003730:	4625      	mov	r5, r4
 8003732:	e706      	b.n	8003542 <EE_Init+0x3e>
 8003734:	2500      	movs	r5, #0
 8003736:	e704      	b.n	8003542 <EE_Init+0x3e>
 8003738:	2500      	movs	r5, #0
 800373a:	e702      	b.n	8003542 <EE_Init+0x3e>
 800373c:	4625      	mov	r5, r4
 800373e:	e700      	b.n	8003542 <EE_Init+0x3e>
 8003740:	2500      	movs	r5, #0
 8003742:	e6fe      	b.n	8003542 <EE_Init+0x3e>
 8003744:	2500      	movs	r5, #0
 8003746:	e6fc      	b.n	8003542 <EE_Init+0x3e>
 8003748:	2500      	movs	r5, #0
 800374a:	e6fa      	b.n	8003542 <EE_Init+0x3e>
 800374c:	0801f800 	.word	0x0801f800
 8003750:	0801fc00 	.word	0x0801fc00
 8003754:	0801f806 	.word	0x0801f806
 8003758:	200000d0 	.word	0x200000d0
 800375c:	2000052e 	.word	0x2000052e
 8003760:	0801fc06 	.word	0x0801fc06

08003764 <rom_wite_mem1_data>:
		rom_wite_PID_data(100,100,100);
	}
}

void rom_wite_mem1_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4604      	mov	r4, r0
 8003768:	460d      	mov	r5, r1
	rom_mem.rom_str.memory1_temp = (uint16_t) ui_temp*10;
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f7fd f945 	bl	80009fc <__aeabi_d2uiz>
 8003772:	b280      	uxth	r0, r0
 8003774:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003778:	0041      	lsls	r1, r0, #1
 800377a:	b289      	uxth	r1, r1
 800377c:	4e08      	ldr	r6, [pc, #32]	; (80037a0 <rom_wite_mem1_data+0x3c>)
 800377e:	8071      	strh	r1, [r6, #2]
	rom_mem.rom_str.memory1_time = ui_time_hours*100 + ui_time_minutes;
 8003780:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003784:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003788:	00a3      	lsls	r3, r4, #2
 800378a:	441d      	add	r5, r3
 800378c:	8035      	strh	r5, [r6, #0]
	EE_WriteVariable(EE_VADDR_MEM1_TEMP, rom_mem.rom_str.memory1_temp);
 800378e:	2002      	movs	r0, #2
 8003790:	f7ff fe7c 	bl	800348c <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM1_TIME, rom_mem.rom_str.memory1_time);
 8003794:	8831      	ldrh	r1, [r6, #0]
 8003796:	2001      	movs	r0, #1
 8003798:	f7ff fe78 	bl	800348c <EE_WriteVariable>
}
 800379c:	bd70      	pop	{r4, r5, r6, pc}
 800379e:	bf00      	nop
 80037a0:	20000ac8 	.word	0x20000ac8

080037a4 <rom_wite_mem2_data>:
void rom_wite_mem2_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4604      	mov	r4, r0
 80037a8:	460d      	mov	r5, r1
	rom_mem.rom_str.memory2_temp = (uint16_t) ui_temp*10;
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f7fd f925 	bl	80009fc <__aeabi_d2uiz>
 80037b2:	b280      	uxth	r0, r0
 80037b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037b8:	0041      	lsls	r1, r0, #1
 80037ba:	b289      	uxth	r1, r1
 80037bc:	4e08      	ldr	r6, [pc, #32]	; (80037e0 <rom_wite_mem2_data+0x3c>)
 80037be:	80f1      	strh	r1, [r6, #6]
	rom_mem.rom_str.memory2_time = ui_time_hours*100 + ui_time_minutes;
 80037c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80037c4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80037c8:	00a3      	lsls	r3, r4, #2
 80037ca:	441d      	add	r5, r3
 80037cc:	80b5      	strh	r5, [r6, #4]
	EE_WriteVariable(EE_VADDR_MEM2_TEMP, rom_mem.rom_str.memory2_temp);
 80037ce:	2004      	movs	r0, #4
 80037d0:	f7ff fe5c 	bl	800348c <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM2_TIME, rom_mem.rom_str.memory2_time);
 80037d4:	88b1      	ldrh	r1, [r6, #4]
 80037d6:	2003      	movs	r0, #3
 80037d8:	f7ff fe58 	bl	800348c <EE_WriteVariable>
}
 80037dc:	bd70      	pop	{r4, r5, r6, pc}
 80037de:	bf00      	nop
 80037e0:	20000ac8 	.word	0x20000ac8

080037e4 <rom_wite_mem3_data>:
void rom_wite_mem3_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	4604      	mov	r4, r0
 80037e8:	460d      	mov	r5, r1
	rom_mem.rom_str.memory3_temp = (uint16_t) ui_temp*10;
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fd f905 	bl	80009fc <__aeabi_d2uiz>
 80037f2:	b280      	uxth	r0, r0
 80037f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037f8:	0041      	lsls	r1, r0, #1
 80037fa:	b289      	uxth	r1, r1
 80037fc:	4e08      	ldr	r6, [pc, #32]	; (8003820 <rom_wite_mem3_data+0x3c>)
 80037fe:	8171      	strh	r1, [r6, #10]
	rom_mem.rom_str.memory3_time = ui_time_hours*100 + ui_time_minutes;
 8003800:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003804:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003808:	00a3      	lsls	r3, r4, #2
 800380a:	441d      	add	r5, r3
 800380c:	8135      	strh	r5, [r6, #8]
	EE_WriteVariable(EE_VADDR_MEM3_TEMP, rom_mem.rom_str.memory3_temp);
 800380e:	2006      	movs	r0, #6
 8003810:	f7ff fe3c 	bl	800348c <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM3_TIME, rom_mem.rom_str.memory3_time);
 8003814:	8931      	ldrh	r1, [r6, #8]
 8003816:	2005      	movs	r0, #5
 8003818:	f7ff fe38 	bl	800348c <EE_WriteVariable>
}
 800381c:	bd70      	pop	{r4, r5, r6, pc}
 800381e:	bf00      	nop
 8003820:	20000ac8 	.word	0x20000ac8

08003824 <rom_wite_PID_data>:
void rom_wite_PID_data(uint8_t P, uint8_t I, uint8_t D){
 8003824:	b510      	push	{r4, lr}
	rom_mem.rom_str.PID_P = P;
 8003826:	4c08      	ldr	r4, [pc, #32]	; (8003848 <rom_wite_PID_data+0x24>)
 8003828:	81a0      	strh	r0, [r4, #12]
	rom_mem.rom_str.PID_I = I;
 800382a:	81e1      	strh	r1, [r4, #14]
	rom_mem.rom_str.PID_D = D;
 800382c:	8222      	strh	r2, [r4, #16]
	EE_WriteVariable(EE_VADDR_PID_P, rom_mem.rom_str.PID_P);
 800382e:	4601      	mov	r1, r0
 8003830:	2007      	movs	r0, #7
 8003832:	f7ff fe2b 	bl	800348c <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_PID_I, rom_mem.rom_str.PID_I);
 8003836:	89e1      	ldrh	r1, [r4, #14]
 8003838:	2008      	movs	r0, #8
 800383a:	f7ff fe27 	bl	800348c <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_PID_D, rom_mem.rom_str.PID_D);
 800383e:	8a21      	ldrh	r1, [r4, #16]
 8003840:	2009      	movs	r0, #9
 8003842:	f7ff fe23 	bl	800348c <EE_WriteVariable>
}
 8003846:	bd10      	pop	{r4, pc}
 8003848:	20000ac8 	.word	0x20000ac8
 800384c:	00000000 	.word	0x00000000

08003850 <rom_value_init>:
{
 8003850:	b510      	push	{r4, lr}
	for(uint8_t addr = 0; addr  < NB_OF_VAR ; addr++)
 8003852:	2400      	movs	r4, #0
 8003854:	e008      	b.n	8003868 <rom_value_init+0x18>
		EE_ReadVariable(addr, &rom_mem.rom_table[addr-1]);
 8003856:	1e61      	subs	r1, r4, #1
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <rom_value_init+0xa8>)
 800385a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800385e:	4620      	mov	r0, r4
 8003860:	f7ff fd8e 	bl	8003380 <EE_ReadVariable>
	for(uint8_t addr = 0; addr  < NB_OF_VAR ; addr++)
 8003864:	3401      	adds	r4, #1
 8003866:	b2e4      	uxtb	r4, r4
 8003868:	2c08      	cmp	r4, #8
 800386a:	d9f4      	bls.n	8003856 <rom_value_init+0x6>
	if( (rom_mem.rom_str.memory1_temp == 0) && (rom_mem.rom_str.memory1_time == 0) )
 800386c:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <rom_value_init+0xa8>)
 800386e:	885b      	ldrh	r3, [r3, #2]
 8003870:	b913      	cbnz	r3, 8003878 <rom_value_init+0x28>
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <rom_value_init+0xa8>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b19b      	cbz	r3, 80038a0 <rom_value_init+0x50>
	if( (rom_mem.rom_str.memory2_temp == 0) && (rom_mem.rom_str.memory2_time == 0) )
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <rom_value_init+0xa8>)
 800387a:	88db      	ldrh	r3, [r3, #6]
 800387c:	b913      	cbnz	r3, 8003884 <rom_value_init+0x34>
 800387e:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <rom_value_init+0xa8>)
 8003880:	889b      	ldrh	r3, [r3, #4]
 8003882:	b1ab      	cbz	r3, 80038b0 <rom_value_init+0x60>
	if((rom_mem.rom_str.memory3_temp == 0) && (rom_mem.rom_str.memory3_time == 0))
 8003884:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <rom_value_init+0xa8>)
 8003886:	895b      	ldrh	r3, [r3, #10]
 8003888:	b913      	cbnz	r3, 8003890 <rom_value_init+0x40>
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <rom_value_init+0xa8>)
 800388c:	891b      	ldrh	r3, [r3, #8]
 800388e:	b1bb      	cbz	r3, 80038c0 <rom_value_init+0x70>
	if((rom_mem.rom_str.PID_P + rom_mem.rom_str.PID_I + rom_mem.rom_str.PID_D) == 0 )
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <rom_value_init+0xa8>)
 8003892:	8993      	ldrh	r3, [r2, #12]
 8003894:	89d1      	ldrh	r1, [r2, #14]
 8003896:	440b      	add	r3, r1
 8003898:	8a12      	ldrh	r2, [r2, #16]
 800389a:	42d3      	cmn	r3, r2
 800389c:	d018      	beq.n	80038d0 <rom_value_init+0x80>
}
 800389e:	bd10      	pop	{r4, pc}
		rom_wite_mem1_data(11,11, 31.1);
 80038a0:	a30f      	add	r3, pc, #60	; (adr r3, 80038e0 <rom_value_init+0x90>)
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	210b      	movs	r1, #11
 80038a8:	4608      	mov	r0, r1
 80038aa:	f7ff ff5b 	bl	8003764 <rom_wite_mem1_data>
 80038ae:	e7e3      	b.n	8003878 <rom_value_init+0x28>
		rom_wite_mem2_data(22,22, 32.2);
 80038b0:	a30d      	add	r3, pc, #52	; (adr r3, 80038e8 <rom_value_init+0x98>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	2116      	movs	r1, #22
 80038b8:	4608      	mov	r0, r1
 80038ba:	f7ff ff73 	bl	80037a4 <rom_wite_mem2_data>
 80038be:	e7e1      	b.n	8003884 <rom_value_init+0x34>
		rom_wite_mem3_data(33,33, 33.3);
 80038c0:	a30b      	add	r3, pc, #44	; (adr r3, 80038f0 <rom_value_init+0xa0>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	2121      	movs	r1, #33	; 0x21
 80038c8:	4608      	mov	r0, r1
 80038ca:	f7ff ff8b 	bl	80037e4 <rom_wite_mem3_data>
 80038ce:	e7df      	b.n	8003890 <rom_value_init+0x40>
		rom_wite_PID_data(100,100,100);
 80038d0:	2264      	movs	r2, #100	; 0x64
 80038d2:	4611      	mov	r1, r2
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7ff ffa5 	bl	8003824 <rom_wite_PID_data>
}
 80038da:	e7e0      	b.n	800389e <rom_value_init+0x4e>
 80038dc:	f3af 8000 	nop.w
 80038e0:	9999999a 	.word	0x9999999a
 80038e4:	403f1999 	.word	0x403f1999
 80038e8:	9999999a 	.word	0x9999999a
 80038ec:	40401999 	.word	0x40401999
 80038f0:	66666666 	.word	0x66666666
 80038f4:	4040a666 	.word	0x4040a666
 80038f8:	20000ac8 	.word	0x20000ac8

080038fc <rom_get_temp>:
	EE_WriteVariable(EE_VADDR_MEM3_TEMP, rom_mem.rom_str.memory3_temp);
	EE_WriteVariable(EE_VADDR_MEM3_TEMP, rom_mem.rom_str.memory3_time);
}

double rom_get_temp(uint8_t mem_no)
{
 80038fc:	b508      	push	{r3, lr}
	if(mem_no == 1)
 80038fe:	2801      	cmp	r0, #1
 8003900:	d006      	beq.n	8003910 <rom_get_temp+0x14>
	{
		return ((double)rom_mem.rom_str.memory1_temp)/10;
	}
	else if(mem_no == 2)
 8003902:	2802      	cmp	r0, #2
 8003904:	d00d      	beq.n	8003922 <rom_get_temp+0x26>
	{
		return ((double)rom_mem.rom_str.memory2_temp)/10;
	}
	else if(mem_no == 3)
 8003906:	2803      	cmp	r0, #3
 8003908:	d014      	beq.n	8003934 <rom_get_temp+0x38>
	{
		return ((double)rom_mem.rom_str.memory3_temp)/10;
	}
	else
	{
		return -1;
 800390a:	2000      	movs	r0, #0
 800390c:	490e      	ldr	r1, [pc, #56]	; (8003948 <rom_get_temp+0x4c>)
 800390e:	e007      	b.n	8003920 <rom_get_temp+0x24>
		return ((double)rom_mem.rom_str.memory1_temp)/10;
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <rom_get_temp+0x50>)
 8003912:	8858      	ldrh	r0, [r3, #2]
 8003914:	f7fc fd5e 	bl	80003d4 <__aeabi_ui2d>
 8003918:	2200      	movs	r2, #0
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <rom_get_temp+0x54>)
 800391c:	f7fc fefe 	bl	800071c <__aeabi_ddiv>
	}
}
 8003920:	bd08      	pop	{r3, pc}
		return ((double)rom_mem.rom_str.memory2_temp)/10;
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <rom_get_temp+0x50>)
 8003924:	88d8      	ldrh	r0, [r3, #6]
 8003926:	f7fc fd55 	bl	80003d4 <__aeabi_ui2d>
 800392a:	2200      	movs	r2, #0
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <rom_get_temp+0x54>)
 800392e:	f7fc fef5 	bl	800071c <__aeabi_ddiv>
 8003932:	e7f5      	b.n	8003920 <rom_get_temp+0x24>
		return ((double)rom_mem.rom_str.memory3_temp)/10;
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <rom_get_temp+0x50>)
 8003936:	8958      	ldrh	r0, [r3, #10]
 8003938:	f7fc fd4c 	bl	80003d4 <__aeabi_ui2d>
 800393c:	2200      	movs	r2, #0
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <rom_get_temp+0x54>)
 8003940:	f7fc feec 	bl	800071c <__aeabi_ddiv>
 8003944:	e7ec      	b.n	8003920 <rom_get_temp+0x24>
 8003946:	bf00      	nop
 8003948:	bff00000 	.word	0xbff00000
 800394c:	20000ac8 	.word	0x20000ac8
 8003950:	40240000 	.word	0x40240000

08003954 <rom_get_time_hours>:
uint8_t rom_get_time_hours(uint8_t mem_no)
{
	if(mem_no == 1)
 8003954:	2801      	cmp	r0, #1
 8003956:	d00b      	beq.n	8003970 <rom_get_time_hours+0x1c>
	{
		return (uint8_t)(rom_mem.rom_str.memory1_time/100);
	}
	else if(mem_no == 2)
 8003958:	2802      	cmp	r0, #2
 800395a:	d011      	beq.n	8003980 <rom_get_time_hours+0x2c>
	{
		return (uint8_t)(rom_mem.rom_str.memory2_time/100);
	}
	else if(mem_no == 3)
 800395c:	2803      	cmp	r0, #3
 800395e:	d117      	bne.n	8003990 <rom_get_time_hours+0x3c>
	{
		return (uint8_t)(rom_mem.rom_str.memory3_time/100);
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <rom_get_time_hours+0x40>)
 8003962:	8918      	ldrh	r0, [r3, #8]
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <rom_get_time_hours+0x44>)
 8003966:	fba3 3000 	umull	r3, r0, r3, r0
 800396a:	f3c0 1047 	ubfx	r0, r0, #5, #8
 800396e:	4770      	bx	lr
		return (uint8_t)(rom_mem.rom_str.memory1_time/100);
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <rom_get_time_hours+0x40>)
 8003972:	8818      	ldrh	r0, [r3, #0]
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <rom_get_time_hours+0x44>)
 8003976:	fba3 3000 	umull	r3, r0, r3, r0
 800397a:	f3c0 1047 	ubfx	r0, r0, #5, #8
 800397e:	4770      	bx	lr
		return (uint8_t)(rom_mem.rom_str.memory2_time/100);
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <rom_get_time_hours+0x40>)
 8003982:	8898      	ldrh	r0, [r3, #4]
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <rom_get_time_hours+0x44>)
 8003986:	fba3 3000 	umull	r3, r0, r3, r0
 800398a:	f3c0 1047 	ubfx	r0, r0, #5, #8
 800398e:	4770      	bx	lr
	}
	else
	{
		return 254;
 8003990:	20fe      	movs	r0, #254	; 0xfe
	}
}
 8003992:	4770      	bx	lr
 8003994:	20000ac8 	.word	0x20000ac8
 8003998:	51eb851f 	.word	0x51eb851f

0800399c <rom_get_time_minutes>:

uint8_t rom_get_time_minutes(uint8_t mem_no)
{
	if(mem_no == 1)
 800399c:	2801      	cmp	r0, #1
 800399e:	d00e      	beq.n	80039be <rom_get_time_minutes+0x22>
	{
		return (uint8_t)(rom_mem.rom_str.memory1_time%100);
	}
	else if(mem_no == 2)
 80039a0:	2802      	cmp	r0, #2
 80039a2:	d017      	beq.n	80039d4 <rom_get_time_minutes+0x38>
	{
		return (uint8_t)(rom_mem.rom_str.memory2_time%100);
	}
	else if(mem_no == 3)
 80039a4:	2803      	cmp	r0, #3
 80039a6:	d120      	bne.n	80039ea <rom_get_time_minutes+0x4e>
	{
		return (uint8_t)(rom_mem.rom_str.memory3_time%100);
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <rom_get_time_minutes+0x54>)
 80039aa:	891b      	ldrh	r3, [r3, #8]
 80039ac:	4811      	ldr	r0, [pc, #68]	; (80039f4 <rom_get_time_minutes+0x58>)
 80039ae:	fba0 2003 	umull	r2, r0, r0, r3
 80039b2:	0940      	lsrs	r0, r0, #5
 80039b4:	2264      	movs	r2, #100	; 0x64
 80039b6:	fb02 3010 	mls	r0, r2, r0, r3
 80039ba:	b2c0      	uxtb	r0, r0
 80039bc:	4770      	bx	lr
		return (uint8_t)(rom_mem.rom_str.memory1_time%100);
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <rom_get_time_minutes+0x54>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	480c      	ldr	r0, [pc, #48]	; (80039f4 <rom_get_time_minutes+0x58>)
 80039c4:	fba0 2003 	umull	r2, r0, r0, r3
 80039c8:	0940      	lsrs	r0, r0, #5
 80039ca:	2264      	movs	r2, #100	; 0x64
 80039cc:	fb02 3010 	mls	r0, r2, r0, r3
 80039d0:	b2c0      	uxtb	r0, r0
 80039d2:	4770      	bx	lr
		return (uint8_t)(rom_mem.rom_str.memory2_time%100);
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <rom_get_time_minutes+0x54>)
 80039d6:	889b      	ldrh	r3, [r3, #4]
 80039d8:	4806      	ldr	r0, [pc, #24]	; (80039f4 <rom_get_time_minutes+0x58>)
 80039da:	fba0 2003 	umull	r2, r0, r0, r3
 80039de:	0940      	lsrs	r0, r0, #5
 80039e0:	2264      	movs	r2, #100	; 0x64
 80039e2:	fb02 3010 	mls	r0, r2, r0, r3
 80039e6:	b2c0      	uxtb	r0, r0
 80039e8:	4770      	bx	lr
	}
	else
	{
		return 254;
 80039ea:	20fe      	movs	r0, #254	; 0xfe
	}
}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000ac8 	.word	0x20000ac8
 80039f4:	51eb851f 	.word	0x51eb851f

080039f8 <LCD_Data_Bus_Input>:
//
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void LCD_Data_Bus_Input(void){
	GPIOB->CRL &= 0x0000ffff;
 80039f8:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <LCD_Data_Bus_Input+0x18>)
 80039fa:	6813      	ldr	r3, [r2, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x88880000; // TODO zmiana na 4 piny
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8003a06:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 8003a0a:	6013      	str	r3, [r2, #0]
}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40010c00 	.word	0x40010c00

08003a14 <LCD_Data_Bus_Output>:
void LCD_Data_Bus_Output(void){
	GPIOB->CRL &= 0x0000ffff;
 8003a14:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <LCD_Data_Bus_Output+0x18>)
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x77770000; // TODO zmiana na 4 piny
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	f043 43ee 	orr.w	r3, r3, #1996488704	; 0x77000000
 8003a22:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010c00 	.word	0x40010c00

08003a30 <_LCD_Send_Half>:

void _LCD_Send_Half(uint8_t half_byte)
{
 8003a30:	b538      	push	{r3, r4, r5, lr}
	half_byte = (half_byte & 0x0f);
 8003a32:	f000 050f 	and.w	r5, r0, #15
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003a36:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <_LCD_Send_Half+0x3c>)
 8003a38:	68e3      	ldr	r3, [r4, #12]
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	60e3      	str	r3, [r4, #12]
	simple_delay_us(8);
 8003a40:	2008      	movs	r0, #8
 8003a42:	f7ff fa52 	bl	8002eea <simple_delay_us>
	// TODO zmiana na 4 piny
	LCD_D0_GPIO_Port->ODR &= 0xff0f;
 8003a46:	68e3      	ldr	r3, [r4, #12]
 8003a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	60e3      	str	r3, [r4, #12]
	LCD_D0_GPIO_Port->ODR |= (half_byte << 4);
 8003a52:	68e0      	ldr	r0, [r4, #12]
 8003a54:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8003a58:	60e0      	str	r0, [r4, #12]

	simple_delay_us(8);
 8003a5a:	2008      	movs	r0, #8
 8003a5c:	f7ff fa45 	bl	8002eea <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003a60:	68e3      	ldr	r3, [r4, #12]
 8003a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a66:	60e3      	str	r3, [r4, #12]
}
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40010c00 	.word	0x40010c00

08003a70 <_LCD_Write>:


void _LCD_Write(uint8_t data){
 8003a70:	b510      	push	{r4, lr}
 8003a72:	4604      	mov	r4, r0
	LCD_Data_Bus_Output();
 8003a74:	f7ff ffce 	bl	8003a14 <LCD_Data_Bus_Output>

	LCD_RW_GPIO_Port->ODR &= ~LCD_RW_Pin;
 8003a78:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <_LCD_Write+0x20>)
 8003a7a:	68d3      	ldr	r3, [r2, #12]
 8003a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a80:	60d3      	str	r3, [r2, #12]

	_LCD_Send_Half(data >> 4);
 8003a82:	0920      	lsrs	r0, r4, #4
 8003a84:	f7ff ffd4 	bl	8003a30 <_LCD_Send_Half>
	_LCD_Send_Half(data);
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff ffd1 	bl	8003a30 <_LCD_Send_Half>
}
 8003a8e:	bd10      	pop	{r4, pc}
 8003a90:	40010c00 	.word	0x40010c00

08003a94 <_LCD_Read_Half>:
//
// Funkcja odczytu bajtu z wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
uint8_t _LCD_Read_Half()
{
 8003a94:	b538      	push	{r3, r4, r5, lr}
	uint8_t tmp = 0;
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003a96:	4c09      	ldr	r4, [pc, #36]	; (8003abc <_LCD_Read_Half+0x28>)
 8003a98:	68e3      	ldr	r3, [r4, #12]
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	60e3      	str	r3, [r4, #12]
	simple_delay_us(8);
 8003aa0:	2008      	movs	r0, #8
 8003aa2:	f7ff fa22 	bl	8002eea <simple_delay_us>
	tmp = (uint8_t) (LCD_D0_GPIO_Port->IDR & 0x00f0);
 8003aa6:	68a5      	ldr	r5, [r4, #8]
 8003aa8:	b2ed      	uxtb	r5, r5
	tmp = tmp >> 4;
	simple_delay_us(8);
 8003aaa:	2008      	movs	r0, #8
 8003aac:	f7ff fa1d 	bl	8002eea <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003ab0:	68e3      	ldr	r3, [r4, #12]
 8003ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab6:	60e3      	str	r3, [r4, #12]
	return tmp;
}
 8003ab8:	0928      	lsrs	r0, r5, #4
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	40010c00 	.word	0x40010c00

08003ac0 <_LCD_Read>:



uint8_t _LCD_Read(void){
 8003ac0:	b510      	push	{r4, lr}
	uint8_t tmp = 0;

	LCD_Data_Bus_Input();
 8003ac2:	f7ff ff99 	bl	80039f8 <LCD_Data_Bus_Input>
	LCD_RW_GPIO_Port->ODR |= LCD_RW_Pin;
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <_LCD_Read+0x34>)
 8003ac8:	68d3      	ldr	r3, [r2, #12]
 8003aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ace:	60d3      	str	r3, [r2, #12]
	//LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
	simple_delay_us(8);
 8003ad0:	2008      	movs	r0, #8
 8003ad2:	f7ff fa0a 	bl	8002eea <simple_delay_us>
	tmp |= ((_LCD_Read_Half() << 4) & 0xf0);
 8003ad6:	f7ff ffdd 	bl	8003a94 <_LCD_Read_Half>
 8003ada:	0100      	lsls	r0, r0, #4
 8003adc:	b244      	sxtb	r4, r0
	tmp |= (_LCD_Read_Half() & 0x0f);
 8003ade:	f7ff ffd9 	bl	8003a94 <_LCD_Read_Half>
 8003ae2:	f000 000f 	and.w	r0, r0, #15
 8003ae6:	4304      	orrs	r4, r0
 8003ae8:	b2e4      	uxtb	r4, r4

	simple_delay_us(8);
 8003aea:	2008      	movs	r0, #8
 8003aec:	f7ff f9fd 	bl	8002eea <simple_delay_us>
	//LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
	return tmp;
}
 8003af0:	4620      	mov	r0, r4
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	40010c00 	.word	0x40010c00

08003af8 <LCD_ReadStatus>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
uint8_t LCD_ReadStatus(void){ // TODO zmian na 4 piny
 8003af8:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003afa:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <LCD_ReadStatus+0x18>)
 8003afc:	68d3      	ldr	r3, [r2, #12]
 8003afe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b02:	60d3      	str	r3, [r2, #12]
	simple_delay_us(8);
 8003b04:	2008      	movs	r0, #8
 8003b06:	f7ff f9f0 	bl	8002eea <simple_delay_us>
	return _LCD_Read();
 8003b0a:	f7ff ffd9 	bl	8003ac0 <_LCD_Read>
}
 8003b0e:	bd08      	pop	{r3, pc}
 8003b10:	40010800 	.word	0x40010800

08003b14 <LCD_WriteCommand>:
void LCD_WriteCommand(uint8_t command){
 8003b14:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <LCD_WriteCommand+0x24>)
 8003b18:	68d3      	ldr	r3, [r2, #12]
 8003b1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b1e:	60d3      	str	r3, [r2, #12]
	_LCD_Write(command);
 8003b20:	f7ff ffa6 	bl	8003a70 <_LCD_Write>
	simple_delay_us(8);
 8003b24:	2008      	movs	r0, #8
 8003b26:	f7ff f9e0 	bl	8002eea <simple_delay_us>
	while(LCD_ReadStatus() & 0x80);
 8003b2a:	f7ff ffe5 	bl	8003af8 <LCD_ReadStatus>
 8003b2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b32:	d1fa      	bne.n	8003b2a <LCD_WriteCommand+0x16>
}
 8003b34:	bd08      	pop	{r3, pc}
 8003b36:	bf00      	nop
 8003b38:	40010800 	.word	0x40010800

08003b3c <LCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(uint8_t data){
 8003b3c:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <LCD_WriteData+0x18>)
 8003b40:	68d3      	ldr	r3, [r2, #12]
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	60d3      	str	r3, [r2, #12]
	_LCD_Write(data);
 8003b48:	f7ff ff92 	bl	8003a70 <_LCD_Write>
	simple_delay_us(15);
 8003b4c:	200f      	movs	r0, #15
 8003b4e:	f7ff f9cc 	bl	8002eea <simple_delay_us>
	//while(LCD_ReadStatus() & 0x80);
}
 8003b52:	bd08      	pop	{r3, pc}
 8003b54:	40010800 	.word	0x40010800

08003b58 <LCD_GoTo>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja ustawienia współrzędnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(uint8_t x, uint8_t y){
 8003b58:	b508      	push	{r3, lr}
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8003b5a:	eb00 1081 	add.w	r0, r0, r1, lsl #6
 8003b5e:	b240      	sxtb	r0, r0
 8003b60:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003b64:	b2c0      	uxtb	r0, r0
 8003b66:	f7ff ffd5 	bl	8003b14 <LCD_WriteCommand>
}
 8003b6a:	bd08      	pop	{r3, pc}

08003b6c <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 8003b6c:	b510      	push	{r4, lr}


	LCD_Data_Bus_Output();
 8003b6e:	f7ff ff51 	bl	8003a14 <LCD_Data_Bus_Output>
	simple_delay_ms(15);
 8003b72:	200f      	movs	r0, #15
 8003b74:	f7ff f9ae 	bl	8002ed4 <simple_delay_ms>
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <LCD_Initalize+0x98>)
 8003b7a:	68d3      	ldr	r3, [r2, #12]
 8003b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b80:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003b82:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <LCD_Initalize+0x9c>)
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b8a:	60da      	str	r2, [r3, #12]
	LCD_RW_GPIO_Port->ODR  &= ~LCD_RW_Pin;
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b92:	60da      	str	r2, [r3, #12]

	for(uint8_t i = 0; i < 3; i++){
 8003b94:	2400      	movs	r4, #0
 8003b96:	e017      	b.n	8003bc8 <LCD_Initalize+0x5c>
		LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <LCD_Initalize+0x9c>)
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba0:	60da      	str	r2, [r3, #12]
		LCD_D0_GPIO_Port->ODR &= 0xff0f;
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ba8:	0412      	lsls	r2, r2, #16
 8003baa:	0c12      	lsrs	r2, r2, #16
 8003bac:	60da      	str	r2, [r3, #12]
		LCD_D0_GPIO_Port->ODR |=  0x0030;
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003bb4:	60da      	str	r2, [r3, #12]
		LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bbc:	60da      	str	r2, [r3, #12]
		simple_delay_ms(5);
 8003bbe:	2005      	movs	r0, #5
 8003bc0:	f7ff f988 	bl	8002ed4 <simple_delay_ms>
	for(uint8_t i = 0; i < 3; i++){
 8003bc4:	3401      	adds	r4, #1
 8003bc6:	b2e4      	uxtb	r4, r4
 8003bc8:	2c02      	cmp	r4, #2
 8003bca:	d9e5      	bls.n	8003b98 <LCD_Initalize+0x2c>
	  }

	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT);
 8003bcc:	2028      	movs	r0, #40	; 0x28
 8003bce:	f7ff ffa1 	bl	8003b14 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f7ff f97e 	bl	8002ed4 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8003bd8:	2008      	movs	r0, #8
 8003bda:	f7ff ff9b 	bl	8003b14 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003bde:	2001      	movs	r0, #1
 8003be0:	f7ff f978 	bl	8002ed4 <simple_delay_ms>
	LCD_WriteCommand(HD44780_CLEAR);
 8003be4:	2001      	movs	r0, #1
 8003be6:	f7ff ff95 	bl	8003b14 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003bea:	2001      	movs	r0, #1
 8003bec:	f7ff f972 	bl	8002ed4 <simple_delay_ms>
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 8003bf0:	2006      	movs	r0, #6
 8003bf2:	f7ff ff8f 	bl	8003b14 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f7ff f96c 	bl	8002ed4 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 8003bfc:	200c      	movs	r0, #12
 8003bfe:	f7ff ff89 	bl	8003b14 <LCD_WriteCommand>

}
 8003c02:	bd10      	pop	{r4, pc}
 8003c04:	40010800 	.word	0x40010800
 8003c08:	40010c00 	.word	0x40010c00

08003c0c <lcd_buf_go_to>:


void lcd_buf_go_to(uint8_t buf_x, uint8_t buf_y )
{
	write_buf_x_pos = buf_x;
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <lcd_buf_go_to+0xc>)
 8003c0e:	7018      	strb	r0, [r3, #0]
	write_buf_y_pos = buf_y;
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <lcd_buf_go_to+0x10>)
 8003c12:	7019      	strb	r1, [r3, #0]
}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000530 	.word	0x20000530
 8003c1c:	20000531 	.word	0x20000531

08003c20 <lcd_char>:


void lcd_char(char c)
{
	lcd_buf[write_buf_y_pos][write_buf_x_pos] = c;
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <lcd_char+0x18>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <lcd_char+0x1c>)
 8003c26:	7811      	ldrb	r1, [r2, #0]
 8003c28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c2c:	009a      	lsls	r2, r3, #2
 8003c2e:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <lcd_char+0x20>)
 8003c30:	4413      	add	r3, r2
 8003c32:	5458      	strb	r0, [r3, r1]
}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000531 	.word	0x20000531
 8003c3c:	20000530 	.word	0x20000530
 8003c40:	20000570 	.word	0x20000570

08003c44 <lcd_buf_clear>:


void lcd_buf_clear(void)
{
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 8003c44:	2000      	movs	r0, #0
 8003c46:	e00c      	b.n	8003c62 <lcd_buf_clear+0x1e>
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
		{
			lcd_buf[iy][ix] = ' ';
 8003c48:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003c4c:	0091      	lsls	r1, r2, #2
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <lcd_buf_clear+0x28>)
 8003c50:	440a      	add	r2, r1
 8003c52:	2120      	movs	r1, #32
 8003c54:	54d1      	strb	r1, [r2, r3]
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 8003c56:	3301      	adds	r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b13      	cmp	r3, #19
 8003c5c:	d9f4      	bls.n	8003c48 <lcd_buf_clear+0x4>
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 8003c5e:	3001      	adds	r0, #1
 8003c60:	b2c0      	uxtb	r0, r0
 8003c62:	2801      	cmp	r0, #1
 8003c64:	d801      	bhi.n	8003c6a <lcd_buf_clear+0x26>
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	e7f7      	b.n	8003c5a <lcd_buf_clear+0x16>
		}
	}
}
 8003c6a:	4770      	bx	lr
 8003c6c:	20000570 	.word	0x20000570

08003c70 <lcd_buf_write_text>:


void lcd_buf_write_text(char * text)
{
	while(*text)
 8003c70:	7803      	ldrb	r3, [r0, #0]
 8003c72:	b19b      	cbz	r3, 8003c9c <lcd_buf_write_text+0x2c>
{
 8003c74:	b410      	push	{r4}
	{
		lcd_buf[write_buf_y_pos][write_buf_x_pos++] = *text++;
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <lcd_buf_write_text+0x30>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	490a      	ldr	r1, [pc, #40]	; (8003ca4 <lcd_buf_write_text+0x34>)
 8003c7c:	780a      	ldrb	r2, [r1, #0]
 8003c7e:	1c54      	adds	r4, r2, #1
 8003c80:	700c      	strb	r4, [r1, #0]
 8003c82:	7804      	ldrb	r4, [r0, #0]
 8003c84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c88:	0099      	lsls	r1, r3, #2
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <lcd_buf_write_text+0x38>)
 8003c8c:	440b      	add	r3, r1
 8003c8e:	549c      	strb	r4, [r3, r2]
 8003c90:	3001      	adds	r0, #1
	while(*text)
 8003c92:	7803      	ldrb	r3, [r0, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ee      	bne.n	8003c76 <lcd_buf_write_text+0x6>
	}
}
 8003c98:	bc10      	pop	{r4}
 8003c9a:	4770      	bx	lr
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000531 	.word	0x20000531
 8003ca4:	20000530 	.word	0x20000530
 8003ca8:	20000570 	.word	0x20000570

08003cac <lcd_circle_bufer_refresh>:
		}
		x++;
	}
}
void lcd_circle_bufer_refresh()
{
 8003cac:	b538      	push	{r3, r4, r5, lr}
	static uint8_t xc = 0, yc = 0;
	LCD_GoTo(xc,yc);
 8003cae:	4d11      	ldr	r5, [pc, #68]	; (8003cf4 <lcd_circle_bufer_refresh+0x48>)
 8003cb0:	4c11      	ldr	r4, [pc, #68]	; (8003cf8 <lcd_circle_bufer_refresh+0x4c>)
 8003cb2:	7829      	ldrb	r1, [r5, #0]
 8003cb4:	7820      	ldrb	r0, [r4, #0]
 8003cb6:	f7ff ff4f 	bl	8003b58 <LCD_GoTo>
	LCD_WriteData(lcd_buf[yc][xc]);
 8003cba:	782b      	ldrb	r3, [r5, #0]
 8003cbc:	7821      	ldrb	r1, [r4, #0]
 8003cbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cc2:	009a      	lsls	r2, r3, #2
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <lcd_circle_bufer_refresh+0x50>)
 8003cc6:	4413      	add	r3, r2
 8003cc8:	5c58      	ldrb	r0, [r3, r1]
 8003cca:	f7ff ff37 	bl	8003b3c <LCD_WriteData>
	if(++xc == 20)
 8003cce:	7823      	ldrb	r3, [r4, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	7023      	strb	r3, [r4, #0]
 8003cd6:	2b14      	cmp	r3, #20
 8003cd8:	d000      	beq.n	8003cdc <lcd_circle_bufer_refresh+0x30>
		if(++yc == 2)
		{
			 yc = 0;
		}
	}
}
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
		xc = 0;
 8003cdc:	2200      	movs	r2, #0
 8003cde:	7022      	strb	r2, [r4, #0]
		if(++yc == 2)
 8003ce0:	782b      	ldrb	r3, [r5, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	702b      	strb	r3, [r5, #0]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d1f6      	bne.n	8003cda <lcd_circle_bufer_refresh+0x2e>
			 yc = 0;
 8003cec:	2200      	movs	r2, #0
 8003cee:	702a      	strb	r2, [r5, #0]
}
 8003cf0:	e7f3      	b.n	8003cda <lcd_circle_bufer_refresh+0x2e>
 8003cf2:	bf00      	nop
 8003cf4:	20000533 	.word	0x20000533
 8003cf8:	20000532 	.word	0x20000532
 8003cfc:	20000570 	.word	0x20000570

08003d00 <ntc_TEMP_SENS_calc>:
	}
	return (temp_sens_avg/5);
}

void ntc_TEMP_SENS_calc(void)
{
 8003d00:	b510      	push	{r4, lr}
	static uint8_t probe_counter;
	if(probe_counter++ > 5 ) probe_counter=0;
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <ntc_TEMP_SENS_calc+0x78>)
 8003d04:	7813      	ldrb	r3, [r2, #0]
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	7011      	strb	r1, [r2, #0]
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d902      	bls.n	8003d14 <ntc_TEMP_SENS_calc+0x14>
 8003d0e:	4613      	mov	r3, r2
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
	ntc_analog_temp[probe_counter].TEMP_SENS_temperature = (((V25 * 1000.0 - (double)adc_value[3] * 0.8) / AVGSLOPE) + 25.0);
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <ntc_TEMP_SENS_calc+0x7c>)
 8003d16:	88d8      	ldrh	r0, [r3, #6]
 8003d18:	f7fc fb5c 	bl	80003d4 <__aeabi_ui2d>
 8003d1c:	a310      	add	r3, pc, #64	; (adr r3, 8003d60 <ntc_TEMP_SENS_calc+0x60>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fbd1 	bl	80004c8 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	a10f      	add	r1, pc, #60	; (adr r1, 8003d68 <ntc_TEMP_SENS_calc+0x68>)
 8003d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d30:	f7fc fa12 	bl	8000158 <__aeabi_dsub>
 8003d34:	a30e      	add	r3, pc, #56	; (adr r3, 8003d70 <ntc_TEMP_SENS_calc+0x70>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f7fc fcef 	bl	800071c <__aeabi_ddiv>
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <ntc_TEMP_SENS_calc+0x78>)
 8003d40:	781c      	ldrb	r4, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <ntc_TEMP_SENS_calc+0x80>)
 8003d46:	f7fc fa09 	bl	800015c <__adddf3>
 8003d4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003d4e:	0122      	lsls	r2, r4, #4
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <ntc_TEMP_SENS_calc+0x84>)
 8003d52:	4413      	add	r3, r2
 8003d54:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
}
 8003d58:	bd10      	pop	{r4, pc}
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w
 8003d60:	9999999a 	.word	0x9999999a
 8003d64:	3fe99999 	.word	0x3fe99999
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	40965800 	.word	0x40965800
 8003d70:	33333333 	.word	0x33333333
 8003d74:	40113333 	.word	0x40113333
 8003d78:	20000534 	.word	0x20000534
 8003d7c:	200007b0 	.word	0x200007b0
 8003d80:	40390000 	.word	0x40390000
 8003d84:	20000ae0 	.word	0x20000ae0

08003d88 <ntc_analog_sensors_calc>:


// ze względu na szybkość obliczeń wykoanano aproksymacje wielomianową przedziałami
// dokumentacja znajduje sie w pliku ln_aprox.m
void ntc_analog_sensors_calc(uint8_t no_sensor)
{
 8003d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static uint8_t probe_s0,probe_s1,probe_s2;
	uint8_t probe =0;
	if(probe_s0 >= 5) probe_s0 = 0;
 8003d8c:	4ba8      	ldr	r3, [pc, #672]	; (8004030 <ntc_analog_sensors_calc+0x2a8>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d902      	bls.n	8003d9a <ntc_analog_sensors_calc+0x12>
 8003d94:	4ba6      	ldr	r3, [pc, #664]	; (8004030 <ntc_analog_sensors_calc+0x2a8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
	if(probe_s1 >= 5) probe_s1 = 0;
 8003d9a:	4ba6      	ldr	r3, [pc, #664]	; (8004034 <ntc_analog_sensors_calc+0x2ac>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d902      	bls.n	8003da8 <ntc_analog_sensors_calc+0x20>
 8003da2:	4ba4      	ldr	r3, [pc, #656]	; (8004034 <ntc_analog_sensors_calc+0x2ac>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
	if(probe_s2 >= 5) probe_s2 = 0;
 8003da8:	4ba3      	ldr	r3, [pc, #652]	; (8004038 <ntc_analog_sensors_calc+0x2b0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d902      	bls.n	8003db6 <ntc_analog_sensors_calc+0x2e>
 8003db0:	4ba1      	ldr	r3, [pc, #644]	; (8004038 <ntc_analog_sensors_calc+0x2b0>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]

	if(no_sensor == 0 ) probe = probe_s0;
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d156      	bne.n	8003e68 <ntc_analog_sensors_calc+0xe0>
 8003dba:	4b9d      	ldr	r3, [pc, #628]	; (8004030 <ntc_analog_sensors_calc+0x2a8>)
 8003dbc:	781d      	ldrb	r5, [r3, #0]
	if(no_sensor == 1 ) probe = probe_s1;
 8003dbe:	2801      	cmp	r0, #1
 8003dc0:	d054      	beq.n	8003e6c <ntc_analog_sensors_calc+0xe4>
	if(no_sensor == 2 ) probe = probe_s2;
 8003dc2:	2802      	cmp	r0, #2
 8003dc4:	d055      	beq.n	8003e72 <ntc_analog_sensors_calc+0xea>

	const double V_DD = 3.32;
	const uint16_t R_divide = 33000;
	uint8_t iterator = 0;

	if(adc_value[no_sensor] == 0) return ;
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	4b9c      	ldr	r3, [pc, #624]	; (800403c <ntc_analog_sensors_calc+0x2b4>)
 8003dca:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 83ed 	beq.w	80045ae <ntc_analog_sensors_calc+0x826>
 8003dd4:	4607      	mov	r7, r0
	ntc_analog_temp[probe].NTC_voltage[no_sensor] = adc_value[no_sensor] * V_DD / 4095;
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc fb0c 	bl	80003f4 <__aeabi_i2d>
 8003ddc:	a388      	add	r3, pc, #544	; (adr r3, 8004000 <ntc_analog_sensors_calc+0x278>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f7fc fb71 	bl	80004c8 <__aeabi_dmul>
 8003de6:	462c      	mov	r4, r5
 8003de8:	a387      	add	r3, pc, #540	; (adr r3, 8004008 <ntc_analog_sensors_calc+0x280>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fc95 	bl	800071c <__aeabi_ddiv>
 8003df2:	f8df a254 	ldr.w	sl, [pc, #596]	; 8004048 <ntc_analog_sensors_calc+0x2c0>
 8003df6:	00ab      	lsls	r3, r5, #2
 8003df8:	442b      	add	r3, r5
 8003dfa:	005d      	lsls	r5, r3, #1
 8003dfc:	4435      	add	r5, r6
 8003dfe:	1ceb      	adds	r3, r5, #3
 8003e00:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8003e04:	e9c3 0100 	strd	r0, r1, [r3]
	ntc_analog_temp[probe].NTC_resistance[no_sensor] = R_divide * V_DD / ntc_analog_temp[probe].NTC_voltage[no_sensor] - R_divide;
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	a180      	add	r1, pc, #512	; (adr r1, 8004010 <ntc_analog_sensors_calc+0x288>)
 8003e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e12:	f7fc fc83 	bl	800071c <__aeabi_ddiv>
 8003e16:	a380      	add	r3, pc, #512	; (adr r3, 8004018 <ntc_analog_sensors_calc+0x290>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc f99c 	bl	8000158 <__aeabi_dsub>
 8003e20:	4680      	mov	r8, r0
 8003e22:	4689      	mov	r9, r1
 8003e24:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8003e28:	e9c5 8900 	strd	r8, r9, [r5]

	if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 100 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 1000)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4b84      	ldr	r3, [pc, #528]	; (8004040 <ntc_analog_sensors_calc+0x2b8>)
 8003e30:	f7fc fdda 	bl	80009e8 <__aeabi_dcmpgt>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d05e      	beq.n	8003ef6 <ntc_analog_sensors_calc+0x16e>
 8003e38:	2200      	movs	r2, #0
 8003e3a:	4b82      	ldr	r3, [pc, #520]	; (8004044 <ntc_analog_sensors_calc+0x2bc>)
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	4649      	mov	r1, r9
 8003e40:	f7fc fdbe 	bl	80009c0 <__aeabi_dcmple>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d056      	beq.n	8003ef6 <ntc_analog_sensors_calc+0x16e>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 8003e48:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003e4c:	0053      	lsls	r3, r2, #1
 8003e4e:	4433      	add	r3, r6
 8003e50:	3306      	adds	r3, #6
 8003e52:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8003e56:	2000      	movs	r0, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a1)/4;
 8003e5e:	f04f 0a04 	mov.w	sl, #4
	uint8_t iterator = 0;
 8003e62:	f04f 0b00 	mov.w	fp, #0
 8003e66:	e042      	b.n	8003eee <ntc_analog_sensors_calc+0x166>
	uint8_t probe =0;
 8003e68:	2500      	movs	r5, #0
 8003e6a:	e7a8      	b.n	8003dbe <ntc_analog_sensors_calc+0x36>
	if(no_sensor == 1 ) probe = probe_s1;
 8003e6c:	4b71      	ldr	r3, [pc, #452]	; (8004034 <ntc_analog_sensors_calc+0x2ac>)
 8003e6e:	781d      	ldrb	r5, [r3, #0]
 8003e70:	e7a7      	b.n	8003dc2 <ntc_analog_sensors_calc+0x3a>
	if(no_sensor == 2 ) probe = probe_s2;
 8003e72:	4b71      	ldr	r3, [pc, #452]	; (8004038 <ntc_analog_sensors_calc+0x2b0>)
 8003e74:	781d      	ldrb	r5, [r3, #0]
 8003e76:	e7a6      	b.n	8003dc6 <ntc_analog_sensors_calc+0x3e>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 8003e78:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003e7c:	0053      	lsls	r3, r2, #1
 8003e7e:	4433      	add	r3, r6
 8003e80:	4a71      	ldr	r2, [pc, #452]	; (8004048 <ntc_analog_sensors_calc+0x2c0>)
 8003e82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e8a:	f7fc fac5 	bl	8000418 <__aeabi_f2d>
 8003e8e:	4642      	mov	r2, r8
 8003e90:	464b      	mov	r3, r9
 8003e92:	f7fc fb19 	bl	80004c8 <__aeabi_dmul>
 8003e96:	f7fc fdd1 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003e9a:	3501      	adds	r5, #1
 8003e9c:	b2ed      	uxtb	r5, r5
 8003e9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003ea2:	429d      	cmp	r5, r3
 8003ea4:	dbe8      	blt.n	8003e78 <ntc_analog_sensors_calc+0xf0>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a1[iterator++]*power;
 8003ea6:	f10b 0501 	add.w	r5, fp, #1
 8003eaa:	b2ed      	uxtb	r5, r5
 8003eac:	4601      	mov	r1, r0
 8003eae:	4b67      	ldr	r3, [pc, #412]	; (800404c <ntc_analog_sensors_calc+0x2c4>)
 8003eb0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003eb4:	f7fc fe12 	bl	8000adc <__aeabi_fmul>
 8003eb8:	f7fc faae 	bl	8000418 <__aeabi_f2d>
 8003ebc:	00a2      	lsls	r2, r4, #2
 8003ebe:	4422      	add	r2, r4
 8003ec0:	0053      	lsls	r3, r2, #1
 8003ec2:	4433      	add	r3, r6
 8003ec4:	3306      	adds	r3, #6
 8003ec6:	4a60      	ldr	r2, [pc, #384]	; (8004048 <ntc_analog_sensors_calc+0x2c0>)
 8003ec8:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003ed4:	f7fc f942 	bl	800015c <__adddf3>
 8003ed8:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 8003edc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f1ba 0f00 	cmp.w	sl, #0
 8003ee6:	f000 8359 	beq.w	800459c <ntc_analog_sensors_calc+0x814>
 8003eea:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a1[iterator++]*power;
 8003eec:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003eee:	2500      	movs	r5, #0
			float power = 1;
 8003ef0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003ef4:	e7d3      	b.n	8003e9e <ntc_analog_sensors_calc+0x116>
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 1000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 5000)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4b52      	ldr	r3, [pc, #328]	; (8004044 <ntc_analog_sensors_calc+0x2bc>)
 8003efa:	4640      	mov	r0, r8
 8003efc:	4649      	mov	r1, r9
 8003efe:	f7fc fd73 	bl	80009e8 <__aeabi_dcmpgt>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d058      	beq.n	8003fb8 <ntc_analog_sensors_calc+0x230>
 8003f06:	a346      	add	r3, pc, #280	; (adr r3, 8004020 <ntc_analog_sensors_calc+0x298>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	4649      	mov	r1, r9
 8003f10:	f7fc fd56 	bl	80009c0 <__aeabi_dcmple>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d04f      	beq.n	8003fb8 <ntc_analog_sensors_calc+0x230>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 8003f18:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003f1c:	0053      	lsls	r3, r2, #1
 8003f1e:	443b      	add	r3, r7
 8003f20:	3306      	adds	r3, #6
 8003f22:	4a49      	ldr	r2, [pc, #292]	; (8004048 <ntc_analog_sensors_calc+0x2c0>)
 8003f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f28:	2000      	movs	r0, #0
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a2)/4;
 8003f30:	f04f 0a04 	mov.w	sl, #4
	uint8_t iterator = 0;
 8003f34:	f04f 0b00 	mov.w	fp, #0
 8003f38:	e03a      	b.n	8003fb0 <ntc_analog_sensors_calc+0x228>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 8003f3a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003f3e:	0053      	lsls	r3, r2, #1
 8003f40:	4433      	add	r3, r6
 8003f42:	4a41      	ldr	r2, [pc, #260]	; (8004048 <ntc_analog_sensors_calc+0x2c0>)
 8003f44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f4c:	f7fc fa64 	bl	8000418 <__aeabi_f2d>
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	f7fc fab8 	bl	80004c8 <__aeabi_dmul>
 8003f58:	f7fc fd70 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	b2ed      	uxtb	r5, r5
 8003f60:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003f64:	429d      	cmp	r5, r3
 8003f66:	dbe8      	blt.n	8003f3a <ntc_analog_sensors_calc+0x1b2>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a2[iterator++]*power;
 8003f68:	f10b 0501 	add.w	r5, fp, #1
 8003f6c:	b2ed      	uxtb	r5, r5
 8003f6e:	4601      	mov	r1, r0
 8003f70:	4b37      	ldr	r3, [pc, #220]	; (8004050 <ntc_analog_sensors_calc+0x2c8>)
 8003f72:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003f76:	f7fc fdb1 	bl	8000adc <__aeabi_fmul>
 8003f7a:	f7fc fa4d 	bl	8000418 <__aeabi_f2d>
 8003f7e:	00a2      	lsls	r2, r4, #2
 8003f80:	4422      	add	r2, r4
 8003f82:	0053      	lsls	r3, r2, #1
 8003f84:	4433      	add	r3, r6
 8003f86:	3306      	adds	r3, #6
 8003f88:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <ntc_analog_sensors_calc+0x2c0>)
 8003f8a:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003f96:	f7fc f8e1 	bl	800015c <__adddf3>
 8003f9a:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 8003f9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f1ba 0f00 	cmp.w	sl, #0
 8003fa8:	f000 82f8 	beq.w	800459c <ntc_analog_sensors_calc+0x814>
 8003fac:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a2[iterator++]*power;
 8003fae:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003fb0:	2500      	movs	r5, #0
			float power = 1;
 8003fb2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003fb6:	e7d3      	b.n	8003f60 <ntc_analog_sensors_calc+0x1d8>
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 5000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 10000)
 8003fb8:	a319      	add	r3, pc, #100	; (adr r3, 8004020 <ntc_analog_sensors_calc+0x298>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	f7fc fd11 	bl	80009e8 <__aeabi_dcmpgt>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	f000 8083 	beq.w	80040d2 <ntc_analog_sensors_calc+0x34a>
 8003fcc:	a316      	add	r3, pc, #88	; (adr r3, 8004028 <ntc_analog_sensors_calc+0x2a0>)
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	f7fc fcf3 	bl	80009c0 <__aeabi_dcmple>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d079      	beq.n	80040d2 <ntc_analog_sensors_calc+0x34a>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 8003fde:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003fe2:	0053      	lsls	r3, r2, #1
 8003fe4:	443b      	add	r3, r7
 8003fe6:	3306      	adds	r3, #6
 8003fe8:	4a17      	ldr	r2, [pc, #92]	; (8004048 <ntc_analog_sensors_calc+0x2c0>)
 8003fea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fee:	2000      	movs	r0, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a3)/4;
 8003ff6:	f04f 0a04 	mov.w	sl, #4
	uint8_t iterator = 0;
 8003ffa:	f04f 0b00 	mov.w	fp, #0
 8003ffe:	e064      	b.n	80040ca <ntc_analog_sensors_calc+0x342>
 8004000:	28f5c28f 	.word	0x28f5c28f
 8004004:	400a8f5c 	.word	0x400a8f5c
 8004008:	00000000 	.word	0x00000000
 800400c:	40affe00 	.word	0x40affe00
 8004010:	00000000 	.word	0x00000000
 8004014:	40fabf80 	.word	0x40fabf80
 8004018:	00000000 	.word	0x00000000
 800401c:	40e01d00 	.word	0x40e01d00
 8004020:	00000000 	.word	0x00000000
 8004024:	40b38800 	.word	0x40b38800
 8004028:	00000000 	.word	0x00000000
 800402c:	40c38800 	.word	0x40c38800
 8004030:	20000535 	.word	0x20000535
 8004034:	20000536 	.word	0x20000536
 8004038:	20000537 	.word	0x20000537
 800403c:	200007b0 	.word	0x200007b0
 8004040:	40590000 	.word	0x40590000
 8004044:	408f4000 	.word	0x408f4000
 8004048:	20000ae0 	.word	0x20000ae0
 800404c:	20000008 	.word	0x20000008
 8004050:	20000018 	.word	0x20000018
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 8004054:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004058:	0053      	lsls	r3, r2, #1
 800405a:	4433      	add	r3, r6
 800405c:	4ab8      	ldr	r2, [pc, #736]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 800405e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004062:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004066:	f7fc f9d7 	bl	8000418 <__aeabi_f2d>
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	f7fc fa2b 	bl	80004c8 <__aeabi_dmul>
 8004072:	f7fc fce3 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004076:	3501      	adds	r5, #1
 8004078:	b2ed      	uxtb	r5, r5
 800407a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800407e:	429d      	cmp	r5, r3
 8004080:	dbe8      	blt.n	8004054 <ntc_analog_sensors_calc+0x2cc>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a3[iterator++]*power;
 8004082:	f10b 0501 	add.w	r5, fp, #1
 8004086:	b2ed      	uxtb	r5, r5
 8004088:	4601      	mov	r1, r0
 800408a:	4bae      	ldr	r3, [pc, #696]	; (8004344 <ntc_analog_sensors_calc+0x5bc>)
 800408c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004090:	f7fc fd24 	bl	8000adc <__aeabi_fmul>
 8004094:	f7fc f9c0 	bl	8000418 <__aeabi_f2d>
 8004098:	00a2      	lsls	r2, r4, #2
 800409a:	4422      	add	r2, r4
 800409c:	0053      	lsls	r3, r2, #1
 800409e:	4433      	add	r3, r6
 80040a0:	3306      	adds	r3, #6
 80040a2:	4aa7      	ldr	r2, [pc, #668]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 80040a4:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	e9d8 0100 	ldrd	r0, r1, [r8]
 80040b0:	f7fc f854 	bl	800015c <__adddf3>
 80040b4:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 80040b8:	f10a 33ff 	add.w	r3, sl, #4294967295
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f1ba 0f00 	cmp.w	sl, #0
 80040c2:	f000 826b 	beq.w	800459c <ntc_analog_sensors_calc+0x814>
 80040c6:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a3[iterator++]*power;
 80040c8:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80040ca:	2500      	movs	r5, #0
			float power = 1;
 80040cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80040d0:	e7d3      	b.n	800407a <ntc_analog_sensors_calc+0x2f2>
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 10000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 12000)
 80040d2:	a393      	add	r3, pc, #588	; (adr r3, 8004320 <ntc_analog_sensors_calc+0x598>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	f7fc fc84 	bl	80009e8 <__aeabi_dcmpgt>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d058      	beq.n	8004196 <ntc_analog_sensors_calc+0x40e>
 80040e4:	a390      	add	r3, pc, #576	; (adr r3, 8004328 <ntc_analog_sensors_calc+0x5a0>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	4640      	mov	r0, r8
 80040ec:	4649      	mov	r1, r9
 80040ee:	f7fc fc67 	bl	80009c0 <__aeabi_dcmple>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d04f      	beq.n	8004196 <ntc_analog_sensors_calc+0x40e>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 80040f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80040fa:	0053      	lsls	r3, r2, #1
 80040fc:	443b      	add	r3, r7
 80040fe:	3306      	adds	r3, #6
 8004100:	4a8f      	ldr	r2, [pc, #572]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 8004102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004106:	2000      	movs	r0, #0
 8004108:	2100      	movs	r1, #0
 800410a:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a4)/4;
 800410e:	f04f 0a04 	mov.w	sl, #4
	uint8_t iterator = 0;
 8004112:	f04f 0b00 	mov.w	fp, #0
 8004116:	e03a      	b.n	800418e <ntc_analog_sensors_calc+0x406>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 8004118:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800411c:	0053      	lsls	r3, r2, #1
 800411e:	4433      	add	r3, r6
 8004120:	4a87      	ldr	r2, [pc, #540]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 8004122:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004126:	e9d3 8900 	ldrd	r8, r9, [r3]
 800412a:	f7fc f975 	bl	8000418 <__aeabi_f2d>
 800412e:	4642      	mov	r2, r8
 8004130:	464b      	mov	r3, r9
 8004132:	f7fc f9c9 	bl	80004c8 <__aeabi_dmul>
 8004136:	f7fc fc81 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800413a:	3501      	adds	r5, #1
 800413c:	b2ed      	uxtb	r5, r5
 800413e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004142:	429d      	cmp	r5, r3
 8004144:	dbe8      	blt.n	8004118 <ntc_analog_sensors_calc+0x390>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a4[iterator++]*power;
 8004146:	f10b 0501 	add.w	r5, fp, #1
 800414a:	b2ed      	uxtb	r5, r5
 800414c:	4601      	mov	r1, r0
 800414e:	4b7e      	ldr	r3, [pc, #504]	; (8004348 <ntc_analog_sensors_calc+0x5c0>)
 8004150:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004154:	f7fc fcc2 	bl	8000adc <__aeabi_fmul>
 8004158:	f7fc f95e 	bl	8000418 <__aeabi_f2d>
 800415c:	00a2      	lsls	r2, r4, #2
 800415e:	4422      	add	r2, r4
 8004160:	0053      	lsls	r3, r2, #1
 8004162:	4433      	add	r3, r6
 8004164:	3306      	adds	r3, #6
 8004166:	4a76      	ldr	r2, [pc, #472]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 8004168:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	e9d8 0100 	ldrd	r0, r1, [r8]
 8004174:	f7fb fff2 	bl	800015c <__adddf3>
 8004178:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 800417c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f1ba 0f00 	cmp.w	sl, #0
 8004186:	f000 8209 	beq.w	800459c <ntc_analog_sensors_calc+0x814>
 800418a:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a4[iterator++]*power;
 800418c:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800418e:	2500      	movs	r5, #0
			float power = 1;
 8004190:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004194:	e7d3      	b.n	800413e <ntc_analog_sensors_calc+0x3b6>
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 12000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 20000)
 8004196:	a364      	add	r3, pc, #400	; (adr r3, 8004328 <ntc_analog_sensors_calc+0x5a0>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	4640      	mov	r0, r8
 800419e:	4649      	mov	r1, r9
 80041a0:	f7fc fc22 	bl	80009e8 <__aeabi_dcmpgt>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d058      	beq.n	800425a <ntc_analog_sensors_calc+0x4d2>
 80041a8:	a361      	add	r3, pc, #388	; (adr r3, 8004330 <ntc_analog_sensors_calc+0x5a8>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	4640      	mov	r0, r8
 80041b0:	4649      	mov	r1, r9
 80041b2:	f7fc fc05 	bl	80009c0 <__aeabi_dcmple>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d04f      	beq.n	800425a <ntc_analog_sensors_calc+0x4d2>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 80041ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80041be:	0053      	lsls	r3, r2, #1
 80041c0:	443b      	add	r3, r7
 80041c2:	3306      	adds	r3, #6
 80041c4:	4a5e      	ldr	r2, [pc, #376]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 80041c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041ca:	2000      	movs	r0, #0
 80041cc:	2100      	movs	r1, #0
 80041ce:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a5)/4;
 80041d2:	f04f 0a04 	mov.w	sl, #4
	uint8_t iterator = 0;
 80041d6:	f04f 0b00 	mov.w	fp, #0
 80041da:	e03a      	b.n	8004252 <ntc_analog_sensors_calc+0x4ca>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 80041dc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80041e0:	0053      	lsls	r3, r2, #1
 80041e2:	4433      	add	r3, r6
 80041e4:	4a56      	ldr	r2, [pc, #344]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 80041e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041ee:	f7fc f913 	bl	8000418 <__aeabi_f2d>
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	f7fc f967 	bl	80004c8 <__aeabi_dmul>
 80041fa:	f7fc fc1f 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80041fe:	3501      	adds	r5, #1
 8004200:	b2ed      	uxtb	r5, r5
 8004202:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004206:	429d      	cmp	r5, r3
 8004208:	dbe8      	blt.n	80041dc <ntc_analog_sensors_calc+0x454>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a5[iterator++]*power;
 800420a:	f10b 0501 	add.w	r5, fp, #1
 800420e:	b2ed      	uxtb	r5, r5
 8004210:	4601      	mov	r1, r0
 8004212:	4b4e      	ldr	r3, [pc, #312]	; (800434c <ntc_analog_sensors_calc+0x5c4>)
 8004214:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004218:	f7fc fc60 	bl	8000adc <__aeabi_fmul>
 800421c:	f7fc f8fc 	bl	8000418 <__aeabi_f2d>
 8004220:	00a2      	lsls	r2, r4, #2
 8004222:	4422      	add	r2, r4
 8004224:	0053      	lsls	r3, r2, #1
 8004226:	4433      	add	r3, r6
 8004228:	3306      	adds	r3, #6
 800422a:	4a45      	ldr	r2, [pc, #276]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 800422c:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	e9d8 0100 	ldrd	r0, r1, [r8]
 8004238:	f7fb ff90 	bl	800015c <__adddf3>
 800423c:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 8004240:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f1ba 0f00 	cmp.w	sl, #0
 800424a:	f000 81a7 	beq.w	800459c <ntc_analog_sensors_calc+0x814>
 800424e:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a5[iterator++]*power;
 8004250:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004252:	2500      	movs	r5, #0
			float power = 1;
 8004254:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004258:	e7d3      	b.n	8004202 <ntc_analog_sensors_calc+0x47a>
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 20000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 40000)
 800425a:	a335      	add	r3, pc, #212	; (adr r3, 8004330 <ntc_analog_sensors_calc+0x5a8>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	4640      	mov	r0, r8
 8004262:	4649      	mov	r1, r9
 8004264:	f7fc fbc0 	bl	80009e8 <__aeabi_dcmpgt>
 8004268:	2800      	cmp	r0, #0
 800426a:	d073      	beq.n	8004354 <ntc_analog_sensors_calc+0x5cc>
 800426c:	a332      	add	r3, pc, #200	; (adr r3, 8004338 <ntc_analog_sensors_calc+0x5b0>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	4640      	mov	r0, r8
 8004274:	4649      	mov	r1, r9
 8004276:	f7fc fba3 	bl	80009c0 <__aeabi_dcmple>
 800427a:	2800      	cmp	r0, #0
 800427c:	d06a      	beq.n	8004354 <ntc_analog_sensors_calc+0x5cc>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 800427e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004282:	0053      	lsls	r3, r2, #1
 8004284:	443b      	add	r3, r7
 8004286:	3306      	adds	r3, #6
 8004288:	4a2d      	ldr	r2, [pc, #180]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 800428a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800428e:	2000      	movs	r0, #0
 8004290:	2100      	movs	r1, #0
 8004292:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a6)/4;
 8004296:	f04f 0a03 	mov.w	sl, #3
	uint8_t iterator = 0;
 800429a:	f04f 0b00 	mov.w	fp, #0
 800429e:	e03a      	b.n	8004316 <ntc_analog_sensors_calc+0x58e>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 80042a0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80042a4:	0053      	lsls	r3, r2, #1
 80042a6:	4433      	add	r3, r6
 80042a8:	4a25      	ldr	r2, [pc, #148]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 80042aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042b2:	f7fc f8b1 	bl	8000418 <__aeabi_f2d>
 80042b6:	4642      	mov	r2, r8
 80042b8:	464b      	mov	r3, r9
 80042ba:	f7fc f905 	bl	80004c8 <__aeabi_dmul>
 80042be:	f7fc fbbd 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80042c2:	3501      	adds	r5, #1
 80042c4:	b2ed      	uxtb	r5, r5
 80042c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80042ca:	429d      	cmp	r5, r3
 80042cc:	dbe8      	blt.n	80042a0 <ntc_analog_sensors_calc+0x518>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a6[iterator++]*power;
 80042ce:	f10b 0501 	add.w	r5, fp, #1
 80042d2:	b2ed      	uxtb	r5, r5
 80042d4:	4601      	mov	r1, r0
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <ntc_analog_sensors_calc+0x5c8>)
 80042d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80042dc:	f7fc fbfe 	bl	8000adc <__aeabi_fmul>
 80042e0:	f7fc f89a 	bl	8000418 <__aeabi_f2d>
 80042e4:	00a2      	lsls	r2, r4, #2
 80042e6:	4422      	add	r2, r4
 80042e8:	0053      	lsls	r3, r2, #1
 80042ea:	4433      	add	r3, r6
 80042ec:	3306      	adds	r3, #6
 80042ee:	4a14      	ldr	r2, [pc, #80]	; (8004340 <ntc_analog_sensors_calc+0x5b8>)
 80042f0:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	e9d8 0100 	ldrd	r0, r1, [r8]
 80042fc:	f7fb ff2e 	bl	800015c <__adddf3>
 8004300:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 8004304:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f1ba 0f00 	cmp.w	sl, #0
 800430e:	f000 8145 	beq.w	800459c <ntc_analog_sensors_calc+0x814>
 8004312:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a6[iterator++]*power;
 8004314:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004316:	2500      	movs	r5, #0
			float power = 1;
 8004318:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800431c:	e7d3      	b.n	80042c6 <ntc_analog_sensors_calc+0x53e>
 800431e:	bf00      	nop
 8004320:	00000000 	.word	0x00000000
 8004324:	40c38800 	.word	0x40c38800
 8004328:	00000000 	.word	0x00000000
 800432c:	40c77000 	.word	0x40c77000
 8004330:	00000000 	.word	0x00000000
 8004334:	40d38800 	.word	0x40d38800
 8004338:	00000000 	.word	0x00000000
 800433c:	40e38800 	.word	0x40e38800
 8004340:	20000ae0 	.word	0x20000ae0
 8004344:	20000028 	.word	0x20000028
 8004348:	20000038 	.word	0x20000038
 800434c:	20000048 	.word	0x20000048
 8004350:	20000058 	.word	0x20000058
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 40000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 60000 )
 8004354:	a39c      	add	r3, pc, #624	; (adr r3, 80045c8 <ntc_analog_sensors_calc+0x840>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	4640      	mov	r0, r8
 800435c:	4649      	mov	r1, r9
 800435e:	f7fc fb43 	bl	80009e8 <__aeabi_dcmpgt>
 8004362:	2800      	cmp	r0, #0
 8004364:	d058      	beq.n	8004418 <ntc_analog_sensors_calc+0x690>
 8004366:	a39a      	add	r3, pc, #616	; (adr r3, 80045d0 <ntc_analog_sensors_calc+0x848>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	4640      	mov	r0, r8
 800436e:	4649      	mov	r1, r9
 8004370:	f7fc fb26 	bl	80009c0 <__aeabi_dcmple>
 8004374:	2800      	cmp	r0, #0
 8004376:	d04f      	beq.n	8004418 <ntc_analog_sensors_calc+0x690>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 8004378:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800437c:	0053      	lsls	r3, r2, #1
 800437e:	443b      	add	r3, r7
 8004380:	3306      	adds	r3, #6
 8004382:	4a99      	ldr	r2, [pc, #612]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 8004384:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004388:	2000      	movs	r0, #0
 800438a:	2100      	movs	r1, #0
 800438c:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a7)/4;
 8004390:	f04f 0a03 	mov.w	sl, #3
	uint8_t iterator = 0;
 8004394:	f04f 0b00 	mov.w	fp, #0
 8004398:	e03a      	b.n	8004410 <ntc_analog_sensors_calc+0x688>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 800439a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800439e:	0053      	lsls	r3, r2, #1
 80043a0:	4433      	add	r3, r6
 80043a2:	4a91      	ldr	r2, [pc, #580]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 80043a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043ac:	f7fc f834 	bl	8000418 <__aeabi_f2d>
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	f7fc f888 	bl	80004c8 <__aeabi_dmul>
 80043b8:	f7fc fb40 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80043bc:	3501      	adds	r5, #1
 80043be:	b2ed      	uxtb	r5, r5
 80043c0:	f10a 33ff 	add.w	r3, sl, #4294967295
 80043c4:	429d      	cmp	r5, r3
 80043c6:	dbe8      	blt.n	800439a <ntc_analog_sensors_calc+0x612>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a7[iterator++]*power;
 80043c8:	f10b 0501 	add.w	r5, fp, #1
 80043cc:	b2ed      	uxtb	r5, r5
 80043ce:	4601      	mov	r1, r0
 80043d0:	4b86      	ldr	r3, [pc, #536]	; (80045ec <ntc_analog_sensors_calc+0x864>)
 80043d2:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80043d6:	f7fc fb81 	bl	8000adc <__aeabi_fmul>
 80043da:	f7fc f81d 	bl	8000418 <__aeabi_f2d>
 80043de:	00a2      	lsls	r2, r4, #2
 80043e0:	4422      	add	r2, r4
 80043e2:	0053      	lsls	r3, r2, #1
 80043e4:	4433      	add	r3, r6
 80043e6:	3306      	adds	r3, #6
 80043e8:	4a7f      	ldr	r2, [pc, #508]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 80043ea:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	e9d8 0100 	ldrd	r0, r1, [r8]
 80043f6:	f7fb feb1 	bl	800015c <__adddf3>
 80043fa:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 80043fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f1ba 0f00 	cmp.w	sl, #0
 8004408:	f000 80c8 	beq.w	800459c <ntc_analog_sensors_calc+0x814>
 800440c:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a7[iterator++]*power;
 800440e:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004410:	2500      	movs	r5, #0
			float power = 1;
 8004412:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004416:	e7d3      	b.n	80043c0 <ntc_analog_sensors_calc+0x638>
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 60000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 100000 )
 8004418:	a36d      	add	r3, pc, #436	; (adr r3, 80045d0 <ntc_analog_sensors_calc+0x848>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	4640      	mov	r0, r8
 8004420:	4649      	mov	r1, r9
 8004422:	f7fc fae1 	bl	80009e8 <__aeabi_dcmpgt>
 8004426:	2800      	cmp	r0, #0
 8004428:	d057      	beq.n	80044da <ntc_analog_sensors_calc+0x752>
 800442a:	a36b      	add	r3, pc, #428	; (adr r3, 80045d8 <ntc_analog_sensors_calc+0x850>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	4640      	mov	r0, r8
 8004432:	4649      	mov	r1, r9
 8004434:	f7fc fac4 	bl	80009c0 <__aeabi_dcmple>
 8004438:	2800      	cmp	r0, #0
 800443a:	d04e      	beq.n	80044da <ntc_analog_sensors_calc+0x752>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 800443c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004440:	0053      	lsls	r3, r2, #1
 8004442:	443b      	add	r3, r7
 8004444:	3306      	adds	r3, #6
 8004446:	4a68      	ldr	r2, [pc, #416]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 8004448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800444c:	2000      	movs	r0, #0
 800444e:	2100      	movs	r1, #0
 8004450:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a8)/4;
 8004454:	f04f 0a02 	mov.w	sl, #2
	uint8_t iterator = 0;
 8004458:	f04f 0b00 	mov.w	fp, #0
 800445c:	e039      	b.n	80044d2 <ntc_analog_sensors_calc+0x74a>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 800445e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004462:	0053      	lsls	r3, r2, #1
 8004464:	4433      	add	r3, r6
 8004466:	4a60      	ldr	r2, [pc, #384]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 8004468:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800446c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004470:	f7fb ffd2 	bl	8000418 <__aeabi_f2d>
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	f7fc f826 	bl	80004c8 <__aeabi_dmul>
 800447c:	f7fc fade 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004480:	3501      	adds	r5, #1
 8004482:	b2ed      	uxtb	r5, r5
 8004484:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004488:	429d      	cmp	r5, r3
 800448a:	dbe8      	blt.n	800445e <ntc_analog_sensors_calc+0x6d6>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a8[iterator++]*power;
 800448c:	f10b 0501 	add.w	r5, fp, #1
 8004490:	b2ed      	uxtb	r5, r5
 8004492:	4601      	mov	r1, r0
 8004494:	4b56      	ldr	r3, [pc, #344]	; (80045f0 <ntc_analog_sensors_calc+0x868>)
 8004496:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800449a:	f7fc fb1f 	bl	8000adc <__aeabi_fmul>
 800449e:	f7fb ffbb 	bl	8000418 <__aeabi_f2d>
 80044a2:	00a2      	lsls	r2, r4, #2
 80044a4:	4422      	add	r2, r4
 80044a6:	0053      	lsls	r3, r2, #1
 80044a8:	4433      	add	r3, r6
 80044aa:	3306      	adds	r3, #6
 80044ac:	4a4e      	ldr	r2, [pc, #312]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 80044ae:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9d8 0100 	ldrd	r0, r1, [r8]
 80044ba:	f7fb fe4f 	bl	800015c <__adddf3>
 80044be:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 80044c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f1ba 0f00 	cmp.w	sl, #0
 80044cc:	d066      	beq.n	800459c <ntc_analog_sensors_calc+0x814>
 80044ce:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a8[iterator++]*power;
 80044d0:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80044d2:	2500      	movs	r5, #0
			float power = 1;
 80044d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80044d8:	e7d4      	b.n	8004484 <ntc_analog_sensors_calc+0x6fc>
	}
	else if(ntc_analog_temp[probe].NTC_resistance[no_sensor] > 100000 && ntc_analog_temp[probe].NTC_resistance[no_sensor] <= 200000 )
 80044da:	a33f      	add	r3, pc, #252	; (adr r3, 80045d8 <ntc_analog_sensors_calc+0x850>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	4640      	mov	r0, r8
 80044e2:	4649      	mov	r1, r9
 80044e4:	f7fc fa80 	bl	80009e8 <__aeabi_dcmpgt>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d057      	beq.n	800459c <ntc_analog_sensors_calc+0x814>
 80044ec:	a33c      	add	r3, pc, #240	; (adr r3, 80045e0 <ntc_analog_sensors_calc+0x858>)
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	4640      	mov	r0, r8
 80044f4:	4649      	mov	r1, r9
 80044f6:	f7fc fa63 	bl	80009c0 <__aeabi_dcmple>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d04e      	beq.n	800459c <ntc_analog_sensors_calc+0x814>
	{
		ntc_analog_temp[probe].NTC_temperature[no_sensor] = 0;
 80044fe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004502:	0053      	lsls	r3, r2, #1
 8004504:	443b      	add	r3, r7
 8004506:	3306      	adds	r3, #6
 8004508:	4a37      	ldr	r2, [pc, #220]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 800450a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800450e:	2000      	movs	r0, #0
 8004510:	2100      	movs	r1, #0
 8004512:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a9)/4;
 8004516:	f04f 0a02 	mov.w	sl, #2
	uint8_t iterator = 0;
 800451a:	f04f 0b00 	mov.w	fp, #0
 800451e:	e039      	b.n	8004594 <ntc_analog_sensors_calc+0x80c>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_temp[probe].NTC_resistance[no_sensor];
 8004520:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004524:	0053      	lsls	r3, r2, #1
 8004526:	4433      	add	r3, r6
 8004528:	4a2f      	ldr	r2, [pc, #188]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 800452a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800452e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004532:	f7fb ff71 	bl	8000418 <__aeabi_f2d>
 8004536:	4642      	mov	r2, r8
 8004538:	464b      	mov	r3, r9
 800453a:	f7fb ffc5 	bl	80004c8 <__aeabi_dmul>
 800453e:	f7fc fa7d 	bl	8000a3c <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004542:	3501      	adds	r5, #1
 8004544:	b2ed      	uxtb	r5, r5
 8004546:	f10a 33ff 	add.w	r3, sl, #4294967295
 800454a:	429d      	cmp	r5, r3
 800454c:	dbe8      	blt.n	8004520 <ntc_analog_sensors_calc+0x798>
			}
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a9[iterator++]*power;
 800454e:	f10b 0501 	add.w	r5, fp, #1
 8004552:	b2ed      	uxtb	r5, r5
 8004554:	4601      	mov	r1, r0
 8004556:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <ntc_analog_sensors_calc+0x86c>)
 8004558:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800455c:	f7fc fabe 	bl	8000adc <__aeabi_fmul>
 8004560:	f7fb ff5a 	bl	8000418 <__aeabi_f2d>
 8004564:	00a2      	lsls	r2, r4, #2
 8004566:	4422      	add	r2, r4
 8004568:	0053      	lsls	r3, r2, #1
 800456a:	4433      	add	r3, r6
 800456c:	3306      	adds	r3, #6
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <ntc_analog_sensors_calc+0x860>)
 8004570:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	e9d8 0100 	ldrd	r0, r1, [r8]
 800457c:	f7fb fdee 	bl	800015c <__adddf3>
 8004580:	e9c8 0100 	strd	r0, r1, [r8]
		} while(number_of_components--);
 8004584:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f1ba 0f00 	cmp.w	sl, #0
 800458e:	d005      	beq.n	800459c <ntc_analog_sensors_calc+0x814>
 8004590:	469a      	mov	sl, r3
			ntc_analog_temp[probe].NTC_temperature[no_sensor] += a9[iterator++]*power;
 8004592:	46ab      	mov	fp, r5
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004594:	2500      	movs	r5, #0
			float power = 1;
 8004596:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800459a:	e7d4      	b.n	8004546 <ntc_analog_sensors_calc+0x7be>
	}
	if(no_sensor == 0 ) probe_s0++;
 800459c:	b91f      	cbnz	r7, 80045a6 <ntc_analog_sensors_calc+0x81e>
 800459e:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <ntc_analog_sensors_calc+0x870>)
 80045a0:	7813      	ldrb	r3, [r2, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	7013      	strb	r3, [r2, #0]
	if(no_sensor == 1 ) probe_s1++;
 80045a6:	2f01      	cmp	r7, #1
 80045a8:	d003      	beq.n	80045b2 <ntc_analog_sensors_calc+0x82a>
	if(no_sensor == 2 ) probe_s2++;
 80045aa:	2f02      	cmp	r7, #2
 80045ac:	d006      	beq.n	80045bc <ntc_analog_sensors_calc+0x834>
	//ntc_analog_temp[probe].NTC_temperature[no_sensor] = BETA * T_0 / (T_0 * log(ntc_analog_temp[probe].NTC_resistance[no_sensor]/10000) + BETA) - 273.15;
}
 80045ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(no_sensor == 1 ) probe_s1++;
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <ntc_analog_sensors_calc+0x874>)
 80045b4:	7813      	ldrb	r3, [r2, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	7013      	strb	r3, [r2, #0]
 80045ba:	e7f6      	b.n	80045aa <ntc_analog_sensors_calc+0x822>
	if(no_sensor == 2 ) probe_s2++;
 80045bc:	4a10      	ldr	r2, [pc, #64]	; (8004600 <ntc_analog_sensors_calc+0x878>)
 80045be:	7813      	ldrb	r3, [r2, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	7013      	strb	r3, [r2, #0]
 80045c4:	e7f3      	b.n	80045ae <ntc_analog_sensors_calc+0x826>
 80045c6:	bf00      	nop
 80045c8:	00000000 	.word	0x00000000
 80045cc:	40e38800 	.word	0x40e38800
 80045d0:	00000000 	.word	0x00000000
 80045d4:	40ed4c00 	.word	0x40ed4c00
 80045d8:	00000000 	.word	0x00000000
 80045dc:	40f86a00 	.word	0x40f86a00
 80045e0:	00000000 	.word	0x00000000
 80045e4:	41086a00 	.word	0x41086a00
 80045e8:	20000ae0 	.word	0x20000ae0
 80045ec:	20000064 	.word	0x20000064
 80045f0:	20000070 	.word	0x20000070
 80045f4:	20000078 	.word	0x20000078
 80045f8:	20000535 	.word	0x20000535
 80045fc:	20000536 	.word	0x20000536
 8004600:	20000537 	.word	0x20000537

08004604 <ntc_handler>:
	if(ntc_handler_flag == NTC_HANDLER_FLAG_BUSY) return ;
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <ntc_handler+0x2c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d007      	beq.n	800461e <ntc_handler+0x1a>
	ntc_handler_flag = NTC_HANDLER_FLAG_BUSY;
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <ntc_handler+0x2c>)
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
	if(ms_time_counter != ms_counter) return;
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <ntc_handler+0x30>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	4283      	cmp	r3, r0
 800461c:	d000      	beq.n	8004620 <ntc_handler+0x1c>
 800461e:	4770      	bx	lr
{
 8004620:	b510      	push	{r4, lr}
 8004622:	460c      	mov	r4, r1
	ntc_TEMP_SENS_calc();
 8004624:	f7ff fb6c 	bl	8003d00 <ntc_TEMP_SENS_calc>
	ntc_analog_sensors_calc(no_sensor);
 8004628:	4620      	mov	r0, r4
 800462a:	f7ff fbad 	bl	8003d88 <ntc_analog_sensors_calc>
}
 800462e:	bd10      	pop	{r4, pc}
 8004630:	2000059f 	.word	0x2000059f
 8004634:	20000778 	.word	0x20000778

08004638 <ntc_get_analog_sensors_value>:

	return 1 ; // TODO poprawić funkcje sprawdzającą czy czujnik jest podłączony do układu
}

double ntc_get_analog_sensors_value(uint8_t no_of_sensor)
{
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4605      	mov	r5, r0
	double temp_avg=0;
	for(uint8_t probe_cnt=0 ; probe_cnt < 5; probe_cnt++ )
 800463c:	2400      	movs	r4, #0
	double temp_avg=0;
 800463e:	2000      	movs	r0, #0
 8004640:	2100      	movs	r1, #0
	for(uint8_t probe_cnt=0 ; probe_cnt < 5; probe_cnt++ )
 8004642:	e00d      	b.n	8004660 <ntc_get_analog_sensors_value+0x28>
	{
		temp_avg += ntc_analog_temp[probe_cnt].NTC_temperature[no_of_sensor];
 8004644:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004648:	0053      	lsls	r3, r2, #1
 800464a:	442b      	add	r3, r5
 800464c:	3306      	adds	r3, #6
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <ntc_get_analog_sensors_value+0x38>)
 8004650:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb fd80 	bl	800015c <__adddf3>
	for(uint8_t probe_cnt=0 ; probe_cnt < 5; probe_cnt++ )
 800465c:	3401      	adds	r4, #1
 800465e:	b2e4      	uxtb	r4, r4
 8004660:	2c04      	cmp	r4, #4
 8004662:	d9ef      	bls.n	8004644 <ntc_get_analog_sensors_value+0xc>
	}
	temp_avg = temp_avg / 5;
 8004664:	2200      	movs	r2, #0
 8004666:	4b03      	ldr	r3, [pc, #12]	; (8004674 <ntc_get_analog_sensors_value+0x3c>)
 8004668:	f7fc f858 	bl	800071c <__aeabi_ddiv>
	return temp_avg;
}
 800466c:	bd38      	pop	{r3, r4, r5, pc}
 800466e:	bf00      	nop
 8004670:	20000ae0 	.word	0x20000ae0
 8004674:	40140000 	.word	0x40140000

08004678 <ntc_init>:
{
 8004678:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t pr_cnt = 0; pr_cnt < 5 ; pr_cnt++) //  wypełenie 5 próbek
 800467a:	2500      	movs	r5, #0
 800467c:	e008      	b.n	8004690 <ntc_init+0x18>
			ntc_analog_sensors_calc(senor_cnt);
 800467e:	4620      	mov	r0, r4
 8004680:	f7ff fb82 	bl	8003d88 <ntc_analog_sensors_calc>
		for(uint8_t senor_cnt = 0; senor_cnt < 3 ; senor_cnt++) // trzech możliwych czujników
 8004684:	3401      	adds	r4, #1
 8004686:	b2e4      	uxtb	r4, r4
 8004688:	2c02      	cmp	r4, #2
 800468a:	d9f8      	bls.n	800467e <ntc_init+0x6>
	for(uint8_t pr_cnt = 0; pr_cnt < 5 ; pr_cnt++) //  wypełenie 5 próbek
 800468c:	3501      	adds	r5, #1
 800468e:	b2ed      	uxtb	r5, r5
 8004690:	2d04      	cmp	r5, #4
 8004692:	d801      	bhi.n	8004698 <ntc_init+0x20>
		for(uint8_t senor_cnt = 0; senor_cnt < 3 ; senor_cnt++) // trzech możliwych czujników
 8004694:	2400      	movs	r4, #0
 8004696:	e7f7      	b.n	8004688 <ntc_init+0x10>
	for(uint8_t senor_cnt = 0; senor_cnt < 3 ; senor_cnt++) // trzech możliwych czujników
 8004698:	2400      	movs	r4, #0
	uint8_t ntc_sensors_enable_msk =0xff;
 800469a:	25ff      	movs	r5, #255	; 0xff
	uint8_t ntc_sensors_enable_cnt =0;
 800469c:	4626      	mov	r6, r4
 800469e:	e005      	b.n	80046ac <ntc_init+0x34>
			ntc_sensors_enable_msk &= ~(1<<senor_cnt);
 80046a0:	2301      	movs	r3, #1
 80046a2:	40a3      	lsls	r3, r4
 80046a4:	ea25 0503 	bic.w	r5, r5, r3
	for(uint8_t senor_cnt = 0; senor_cnt < 3 ; senor_cnt++) // trzech możliwych czujników
 80046a8:	3401      	adds	r4, #1
 80046aa:	b2e4      	uxtb	r4, r4
 80046ac:	2c02      	cmp	r4, #2
 80046ae:	d80f      	bhi.n	80046d0 <ntc_init+0x58>
		if(ntc_get_analog_sensors_value(senor_cnt) != 0 )
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ffc1 	bl	8004638 <ntc_get_analog_sensors_value>
 80046b6:	2200      	movs	r2, #0
 80046b8:	2300      	movs	r3, #0
 80046ba:	f7fc f96d 	bl	8000998 <__aeabi_dcmpeq>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d1ee      	bne.n	80046a0 <ntc_init+0x28>
			ntc_sensors_enable_cnt++;
 80046c2:	3601      	adds	r6, #1
 80046c4:	b2f6      	uxtb	r6, r6
			ntc_sensors_enable_msk |= (1<<senor_cnt);
 80046c6:	2301      	movs	r3, #1
 80046c8:	40a3      	lsls	r3, r4
 80046ca:	432b      	orrs	r3, r5
 80046cc:	b2dd      	uxtb	r5, r3
 80046ce:	e7eb      	b.n	80046a8 <ntc_init+0x30>
	HC_status.ntc_amount = ntc_sensors_enable_cnt;
 80046d0:	4b01      	ldr	r3, [pc, #4]	; (80046d8 <ntc_init+0x60>)
 80046d2:	705e      	strb	r6, [r3, #1]
	HC_status.ntc_enable_sensor_mask = ntc_sensors_enable_msk;
 80046d4:	709d      	strb	r5, [r3, #2]
}
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	20000598 	.word	0x20000598

080046dc <ntc_convert_float_to_string>:

	return ntc_convert_kelvin_to_celsius(T);
}

uint8_t ntc_convert_float_to_string(uint8_t * string_table, double temperature_ntc)
{
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	4604      	mov	r4, r0
 80046e0:	4616      	mov	r6, r2
 80046e2:	461d      	mov	r5, r3
	uint8_t digit_counter = 0 ;
	uint16_t i=10000;
	uint16_t temperature_int_multiplied100;

	if(temperature_ntc < 0)
 80046e4:	2200      	movs	r2, #0
 80046e6:	2300      	movs	r3, #0
 80046e8:	4630      	mov	r0, r6
 80046ea:	4629      	mov	r1, r5
 80046ec:	f7fc f95e 	bl	80009ac <__aeabi_dcmplt>
 80046f0:	b968      	cbnz	r0, 800470e <ntc_convert_float_to_string+0x32>
		*(string_table++) = '-';
		temperature_int_multiplied100 = (uint16_t) (-temperature_ntc * 100);
	}
	else
	{
		temperature_int_multiplied100 = (uint16_t) (temperature_ntc * 100);
 80046f2:	2200      	movs	r2, #0
 80046f4:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <ntc_convert_float_to_string+0xd4>)
 80046f6:	4630      	mov	r0, r6
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fb fee5 	bl	80004c8 <__aeabi_dmul>
 80046fe:	f7fc f97d 	bl	80009fc <__aeabi_d2uiz>
 8004702:	b280      	uxth	r0, r0
	}


	if(temperature_int_multiplied100 == 0)
 8004704:	b190      	cbz	r0, 800472c <ntc_convert_float_to_string+0x50>
	uint16_t i=10000;
 8004706:	f242 7310 	movw	r3, #10000	; 0x2710
	uint8_t digit_counter = 0 ;
 800470a:	2200      	movs	r2, #0
 800470c:	e020      	b.n	8004750 <ntc_convert_float_to_string+0x74>
		*(string_table++) = '-';
 800470e:	1c67      	adds	r7, r4, #1
 8004710:	232d      	movs	r3, #45	; 0x2d
 8004712:	7023      	strb	r3, [r4, #0]
		temperature_int_multiplied100 = (uint16_t) (-temperature_ntc * 100);
 8004714:	2200      	movs	r2, #0
 8004716:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <ntc_convert_float_to_string+0xd4>)
 8004718:	4630      	mov	r0, r6
 800471a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800471e:	f7fb fed3 	bl	80004c8 <__aeabi_dmul>
 8004722:	f7fc f96b 	bl	80009fc <__aeabi_d2uiz>
 8004726:	b280      	uxth	r0, r0
		*(string_table++) = '-';
 8004728:	463c      	mov	r4, r7
 800472a:	e7eb      	b.n	8004704 <ntc_convert_float_to_string+0x28>
		{
			*(string_table++) = '0';
 800472c:	2330      	movs	r3, #48	; 0x30
 800472e:	7023      	strb	r3, [r4, #0]
			*(string_table++) = '.';
 8004730:	222e      	movs	r2, #46	; 0x2e
 8004732:	7062      	strb	r2, [r4, #1]
			*(string_table++) = '0';
 8004734:	70a3      	strb	r3, [r4, #2]
			*(string_table++) = '0';
 8004736:	70e3      	strb	r3, [r4, #3]
			*(string_table++) = ' ';
 8004738:	2320      	movs	r3, #32
 800473a:	7123      	strb	r3, [r4, #4]
			*(string_table++) = ' ';
 800473c:	7163      	strb	r3, [r4, #5]
			*(string_table++) = '\0';
 800473e:	2300      	movs	r3, #0
 8004740:	71a3      	strb	r3, [r4, #6]
			return 1;
 8004742:	e032      	b.n	80047aa <ntc_convert_float_to_string+0xce>
		}
		while((temperature_int_multiplied100 / i) == 0)
		{
			i = i/10;
 8004744:	491b      	ldr	r1, [pc, #108]	; (80047b4 <ntc_convert_float_to_string+0xd8>)
 8004746:	fba1 1303 	umull	r1, r3, r1, r3
 800474a:	08db      	lsrs	r3, r3, #3
			digit_counter++;
 800474c:	3201      	adds	r2, #1
 800474e:	b2d2      	uxtb	r2, r2
		while((temperature_int_multiplied100 / i) == 0)
 8004750:	fbb0 f1f3 	udiv	r1, r0, r3
 8004754:	2900      	cmp	r1, #0
 8004756:	d0f5      	beq.n	8004744 <ntc_convert_float_to_string+0x68>
		}
		if(digit_counter >= 3) // ułamek zero przed kropką
 8004758:	2a02      	cmp	r2, #2
 800475a:	d90c      	bls.n	8004776 <ntc_convert_float_to_string+0x9a>
		{
			*(string_table++) = '0';
 800475c:	4621      	mov	r1, r4
 800475e:	2530      	movs	r5, #48	; 0x30
 8004760:	f801 5b02 	strb.w	r5, [r1], #2
			*(string_table++) = '.';
 8004764:	252e      	movs	r5, #46	; 0x2e
 8004766:	7065      	strb	r5, [r4, #1]
 8004768:	460c      	mov	r4, r1
 800476a:	e004      	b.n	8004776 <ntc_convert_float_to_string+0x9a>
		while(i != 0 )
		{
			*(string_table++) = 0x30 + temperature_int_multiplied100/i;
			temperature_int_multiplied100 = (uint16_t)temperature_int_multiplied100 % i;
			if(i == 100) *(string_table++) = '.';
			i = i/10;
 800476c:	4911      	ldr	r1, [pc, #68]	; (80047b4 <ntc_convert_float_to_string+0xd8>)
 800476e:	fba1 1303 	umull	r1, r3, r1, r3
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	462c      	mov	r4, r5
		while(i != 0 )
 8004776:	b193      	cbz	r3, 800479e <ntc_convert_float_to_string+0xc2>
			*(string_table++) = 0x30 + temperature_int_multiplied100/i;
 8004778:	1c65      	adds	r5, r4, #1
 800477a:	fbb0 f1f3 	udiv	r1, r0, r3
 800477e:	f101 0630 	add.w	r6, r1, #48	; 0x30
 8004782:	7026      	strb	r6, [r4, #0]
			temperature_int_multiplied100 = (uint16_t)temperature_int_multiplied100 % i;
 8004784:	fb03 0111 	mls	r1, r3, r1, r0
 8004788:	b288      	uxth	r0, r1
			if(i == 100) *(string_table++) = '.';
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d1ee      	bne.n	800476c <ntc_convert_float_to_string+0x90>
 800478e:	1ca5      	adds	r5, r4, #2
 8004790:	212e      	movs	r1, #46	; 0x2e
 8004792:	7061      	strb	r1, [r4, #1]
 8004794:	e7ea      	b.n	800476c <ntc_convert_float_to_string+0x90>
		}
		while(digit_counter--)
		{
			*(string_table++) = ' ';
 8004796:	2220      	movs	r2, #32
 8004798:	7022      	strb	r2, [r4, #0]
		while(digit_counter--)
 800479a:	461a      	mov	r2, r3
			*(string_table++) = ' ';
 800479c:	3401      	adds	r4, #1
		while(digit_counter--)
 800479e:	1e53      	subs	r3, r2, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2a00      	cmp	r2, #0
 80047a4:	d1f7      	bne.n	8004796 <ntc_convert_float_to_string+0xba>
		}
		*(string_table++) = '\0';
 80047a6:	2300      	movs	r3, #0
 80047a8:	7023      	strb	r3, [r4, #0]

	return 1;
}
 80047aa:	2001      	movs	r0, #1
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40590000 	.word	0x40590000
 80047b4:	cccccccd 	.word	0xcccccccd

080047b8 <PID_manual_settings>:



void PID_manual_settings(void)
{
	sPID.setpoint = 45.0;
 80047b8:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <PID_manual_settings+0x38>)
 80047ba:	2000      	movs	r0, #0
 80047bc:	490d      	ldr	r1, [pc, #52]	; (80047f4 <PID_manual_settings+0x3c>)
 80047be:	e9c3 0100 	strd	r0, r1, [r3]
	sPID.K_P = 550;
 80047c2:	2000      	movs	r0, #0
 80047c4:	490c      	ldr	r1, [pc, #48]	; (80047f8 <PID_manual_settings+0x40>)
 80047c6:	e9c3 0108 	strd	r0, r1, [r3, #32]
	sPID.K_I = 0.3;
 80047ca:	a105      	add	r1, pc, #20	; (adr r1, 80047e0 <PID_manual_settings+0x28>)
 80047cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047d0:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
	sPID.K_D = 450;
 80047d4:	a104      	add	r1, pc, #16	; (adr r1, 80047e8 <PID_manual_settings+0x30>)
 80047d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047da:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
}
 80047de:	4770      	bx	lr
 80047e0:	33333333 	.word	0x33333333
 80047e4:	3fd33333 	.word	0x3fd33333
 80047e8:	00000000 	.word	0x00000000
 80047ec:	407c2000 	.word	0x407c2000
 80047f0:	20000640 	.word	0x20000640
 80047f4:	40468000 	.word	0x40468000
 80047f8:	40813000 	.word	0x40813000

080047fc <PID_set_PWM>:

void PID_set_PWM(double PID_value)
{
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4604      	mov	r4, r0
 8004800:	460d      	mov	r5, r1
	if(PID_value > 9728 ) PID_value = 9472;
 8004802:	2200      	movs	r2, #0
 8004804:	4b13      	ldr	r3, [pc, #76]	; (8004854 <PID_set_PWM+0x58>)
 8004806:	f7fc f8ef 	bl	80009e8 <__aeabi_dcmpgt>
 800480a:	b108      	cbz	r0, 8004810 <PID_set_PWM+0x14>
 800480c:	2400      	movs	r4, #0
 800480e:	4d12      	ldr	r5, [pc, #72]	; (8004858 <PID_set_PWM+0x5c>)
	sPID.PWM_value = 0x2600 - (uint16_t)PID_value;
 8004810:	4620      	mov	r0, r4
 8004812:	4629      	mov	r1, r5
 8004814:	f7fc f8f2 	bl	80009fc <__aeabi_d2uiz>
 8004818:	b280      	uxth	r0, r0
 800481a:	f5c0 5018 	rsb	r0, r0, #9728	; 0x2600
 800481e:	b280      	uxth	r0, r0
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <PID_set_PWM+0x60>)
 8004822:	f8a3 0060 	strh.w	r0, [r3, #96]	; 0x60
	if(sPID.PWM_value < 10) sPID.PWM_value = 10;
 8004826:	2809      	cmp	r0, #9
 8004828:	d802      	bhi.n	8004830 <PID_set_PWM+0x34>
 800482a:	220a      	movs	r2, #10
 800482c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	if(sPID.PWM_value > 0x2500) sPID.PWM_value = 0x2500;
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <PID_set_PWM+0x60>)
 8004832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004836:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 800483a:	d904      	bls.n	8004846 <PID_set_PWM+0x4a>
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <PID_set_PWM+0x60>)
 800483e:	f44f 5214 	mov.w	r2, #9472	; 0x2500
 8004842:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	TIM1->CCR1 = sPID.PWM_value;
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <PID_set_PWM+0x60>)
 8004848:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <PID_set_PWM+0x64>)
 800484e:	635a      	str	r2, [r3, #52]	; 0x34
	// system pracuje dla nastaw 10 - maksymalna moc
	// 0x2600  - minimalna moc
}
 8004850:	bd38      	pop	{r3, r4, r5, pc}
 8004852:	bf00      	nop
 8004854:	40c30000 	.word	0x40c30000
 8004858:	40c28000 	.word	0x40c28000
 800485c:	20000640 	.word	0x20000640
 8004860:	40012c00 	.word	0x40012c00

08004864 <PID_control_handler>:


void PID_control_handler(uint16_t ms_delay)
{

	if(ms_counter != ms_delay) return;
 8004864:	4b32      	ldr	r3, [pc, #200]	; (8004930 <PID_control_handler+0xcc>)
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	4283      	cmp	r3, r0
 800486c:	d000      	beq.n	8004870 <PID_control_handler+0xc>
 800486e:	4770      	bx	lr
{
 8004870:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 8004874:	b082      	sub	sp, #8
	PID_manual_settings();
 8004876:	f7ff ff9f 	bl	80047b8 <PID_manual_settings>
	sPID.output_fb = ntc_get_analog_sensors_value(0);
 800487a:	2000      	movs	r0, #0
 800487c:	f7ff fedc 	bl	8004638 <ntc_get_analog_sensors_value>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4c2b      	ldr	r4, [pc, #172]	; (8004934 <PID_control_handler+0xd0>)
 8004886:	e9c4 2306 	strd	r2, r3, [r4, #24]
	sPID.error[1] = sPID.error[0];
 800488a:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800488e:	e9c4 6704 	strd	r6, r7, [r4, #16]
	sPID.error[0] = sPID.setpoint - sPID.output_fb;
 8004892:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004896:	f7fb fc5f 	bl	8000158 <__aeabi_dsub>
 800489a:	4682      	mov	sl, r0
 800489c:	468b      	mov	fp, r1
 800489e:	e9c4 ab02 	strd	sl, fp, [r4, #8]
	// obliczenie wyjścia proporcjonalnego
	sPID.P_out = sPID.K_P*sPID.error[0];
 80048a2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80048a6:	f7fb fe0f 	bl	80004c8 <__aeabi_dmul>
 80048aa:	e9cd 0100 	strd	r0, r1, [sp]
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	// obliczenie wyjścia całkującego
	sPID.I_error = sPID.I_error + (sPID.error[0] + sPID.error[1])/2;
 80048b6:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 80048ba:	4652      	mov	r2, sl
 80048bc:	465b      	mov	r3, fp
 80048be:	4630      	mov	r0, r6
 80048c0:	4639      	mov	r1, r7
 80048c2:	f7fb fc4b 	bl	800015c <__adddf3>
 80048c6:	2200      	movs	r2, #0
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <PID_control_handler+0xd4>)
 80048ca:	f7fb fdfd 	bl	80004c8 <__aeabi_dmul>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4640      	mov	r0, r8
 80048d4:	4649      	mov	r1, r9
 80048d6:	f7fb fc41 	bl	800015c <__adddf3>
 80048da:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
	sPID.I_out = sPID.K_I * sPID.I_error;
 80048de:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80048e2:	f7fb fdf1 	bl	80004c8 <__aeabi_dmul>
 80048e6:	4680      	mov	r8, r0
 80048e8:	4689      	mov	r9, r1
 80048ea:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	// obliczenie wyjścia róźniczkującego
	sPID.D_error = sPID.error[0] - sPID.error[1]; //  / t
 80048ee:	4632      	mov	r2, r6
 80048f0:	463b      	mov	r3, r7
 80048f2:	4650      	mov	r0, sl
 80048f4:	4659      	mov	r1, fp
 80048f6:	f7fb fc2f 	bl	8000158 <__aeabi_dsub>
 80048fa:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
	sPID.D_out = sPID.K_D * sPID.D_error;
 80048fe:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8004902:	f7fb fde1 	bl	80004c8 <__aeabi_dmul>
 8004906:	4606      	mov	r6, r0
 8004908:	460f      	mov	r7, r1
 800490a:	e9c4 6716 	strd	r6, r7, [r4, #88]	; 0x58
	PID_set_PWM(sPID.P_out  + sPID.I_out + sPID.D_out);
 800490e:	4642      	mov	r2, r8
 8004910:	464b      	mov	r3, r9
 8004912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004916:	f7fb fc21 	bl	800015c <__adddf3>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4630      	mov	r0, r6
 8004920:	4639      	mov	r1, r7
 8004922:	f7fb fc1b 	bl	800015c <__adddf3>
 8004926:	f7ff ff69 	bl	80047fc <PID_set_PWM>
}
 800492a:	b002      	add	sp, #8
 800492c:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8004930:	20000778 	.word	0x20000778
 8004934:	20000640 	.word	0x20000640
 8004938:	3fe00000 	.word	0x3fe00000

0800493c <servis_uart_send_ntc>:
void servis_uart_send_ntc(uint16_t ms_run_time, uint8_t sensor_no)
{
	static uint8_t ntc_string[]={'\0','\0','\0','\0','\0','\0','\0','\0','\0'};
	uint8_t char_counter=0;

	if(ms_run_time != ms_counter) return;
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <servis_uart_send_ntc+0x4c>)
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	4283      	cmp	r3, r0
 8004944:	d000      	beq.n	8004948 <servis_uart_send_ntc+0xc>
 8004946:	4770      	bx	lr
{
 8004948:	b510      	push	{r4, lr}
 800494a:	4608      	mov	r0, r1

	ntc_convert_float_to_string(&ntc_string[0],  ntc_get_analog_sensors_value(sensor_no));
 800494c:	f7ff fe74 	bl	8004638 <ntc_get_analog_sensors_value>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	480d      	ldr	r0, [pc, #52]	; (800498c <servis_uart_send_ntc+0x50>)
 8004956:	f7ff fec1 	bl	80046dc <ntc_convert_float_to_string>
	uint8_t char_counter=0;
 800495a:	2200      	movs	r2, #0
	while(ntc_string[char_counter] != '\0' && ntc_string[char_counter] != ' ')
 800495c:	e001      	b.n	8004962 <servis_uart_send_ntc+0x26>
	{
		char_counter++;
 800495e:	3201      	adds	r2, #1
 8004960:	b2d2      	uxtb	r2, r2
	while(ntc_string[char_counter] != '\0' && ntc_string[char_counter] != ' ')
 8004962:	4610      	mov	r0, r2
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <servis_uart_send_ntc+0x50>)
 8004966:	5c9b      	ldrb	r3, [r3, r2]
 8004968:	b10b      	cbz	r3, 800496e <servis_uart_send_ntc+0x32>
 800496a:	2b20      	cmp	r3, #32
 800496c:	d1f7      	bne.n	800495e <servis_uart_send_ntc+0x22>
	}
	ntc_string[char_counter++] =  '\n';
 800496e:	1c53      	adds	r3, r2, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <servis_uart_send_ntc+0x50>)
 8004974:	240a      	movs	r4, #10
 8004976:	540c      	strb	r4, [r1, r0]
	ntc_string[char_counter++] =  '\r';
 8004978:	3202      	adds	r2, #2
 800497a:	200d      	movs	r0, #13
 800497c:	54c8      	strb	r0, [r1, r3]
	HAL_UART_Transmit_IT(&huart3, &ntc_string[0], char_counter );
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	4803      	ldr	r0, [pc, #12]	; (8004990 <servis_uart_send_ntc+0x54>)
 8004982:	f7fe f98c 	bl	8002c9e <HAL_UART_Transmit_IT>
}
 8004986:	bd10      	pop	{r4, pc}
 8004988:	20000778 	.word	0x20000778
 800498c:	20000538 	.word	0x20000538
 8004990:	200005d0 	.word	0x200005d0

08004994 <convert_time_to_str>:
void ui_list_init(void){
//  read data from eeprom and put into scructs
}

void convert_time_to_str(uint8_t time_h, uint8_t time_m)
{
 8004994:	b430      	push	{r4, r5}
	char zero_str = 48;
	time_string[0] = '[';
 8004996:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <convert_time_to_str+0x4c>)
 8004998:	235b      	movs	r3, #91	; 0x5b
 800499a:	7013      	strb	r3, [r2, #0]
	time_string[1] = time_h/10 + zero_str;
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <convert_time_to_str+0x50>)
 800499e:	fba3 5400 	umull	r5, r4, r3, r0
 80049a2:	08e4      	lsrs	r4, r4, #3
 80049a4:	f104 0530 	add.w	r5, r4, #48	; 0x30
 80049a8:	7055      	strb	r5, [r2, #1]
	time_string[2] = time_h%10 + zero_str;
 80049aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80049ae:	0065      	lsls	r5, r4, #1
 80049b0:	1b40      	subs	r0, r0, r5
 80049b2:	3030      	adds	r0, #48	; 0x30
 80049b4:	7090      	strb	r0, [r2, #2]
	time_string[3] = ':';
 80049b6:	203a      	movs	r0, #58	; 0x3a
 80049b8:	70d0      	strb	r0, [r2, #3]
	time_string[4] = time_m/10 + zero_str;
 80049ba:	fba3 0301 	umull	r0, r3, r3, r1
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80049c4:	7110      	strb	r0, [r2, #4]
	time_string[5] = time_m%10 + zero_str;
 80049c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049ca:	0058      	lsls	r0, r3, #1
 80049cc:	1a09      	subs	r1, r1, r0
 80049ce:	3130      	adds	r1, #48	; 0x30
 80049d0:	7151      	strb	r1, [r2, #5]
	time_string[6] = ']';
 80049d2:	235d      	movs	r3, #93	; 0x5d
 80049d4:	7193      	strb	r3, [r2, #6]
	time_string[7] = '\0';
 80049d6:	2300      	movs	r3, #0
 80049d8:	71d3      	strb	r3, [r2, #7]
}
 80049da:	bc30      	pop	{r4, r5}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000c74 	.word	0x20000c74
 80049e4:	cccccccd 	.word	0xcccccccd

080049e8 <convert_temp_to_str>:
void convert_temp_to_str(double temp_double)
{
 80049e8:	b508      	push	{r3, lr}
	uint16_t temp_int = (uint16_t)(temp_double*10);
 80049ea:	2200      	movs	r2, #0
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <convert_temp_to_str+0x58>)
 80049ee:	f7fb fd6b 	bl	80004c8 <__aeabi_dmul>
 80049f2:	f7fc f803 	bl	80009fc <__aeabi_d2uiz>
 80049f6:	b280      	uxth	r0, r0
	char zero_str = 48;
	temp_string[0] = '[';
 80049f8:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <convert_temp_to_str+0x5c>)
 80049fa:	235b      	movs	r3, #91	; 0x5b
 80049fc:	7013      	strb	r3, [r2, #0]
	temp_string[1] = temp_int/100 + zero_str;
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <convert_temp_to_str+0x60>)
 8004a00:	fba3 1300 	umull	r1, r3, r3, r0
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a0a:	7051      	strb	r1, [r2, #1]
	temp_string[2] = (temp_int%100)/10 +zero_str;
 8004a0c:	2164      	movs	r1, #100	; 0x64
 8004a0e:	fb01 0013 	mls	r0, r1, r3, r0
 8004a12:	b280      	uxth	r0, r0
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <convert_temp_to_str+0x64>)
 8004a16:	fba3 1300 	umull	r1, r3, r3, r0
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a20:	7091      	strb	r1, [r2, #2]
	temp_string[3] = '.';
 8004a22:	212e      	movs	r1, #46	; 0x2e
 8004a24:	70d1      	strb	r1, [r2, #3]
	temp_string[4] = (temp_int%100)%10+zero_str;
 8004a26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004a2a:	0059      	lsls	r1, r3, #1
 8004a2c:	1a40      	subs	r0, r0, r1
 8004a2e:	3030      	adds	r0, #48	; 0x30
 8004a30:	7110      	strb	r0, [r2, #4]
	temp_string[5] = 0xdf;
 8004a32:	23df      	movs	r3, #223	; 0xdf
 8004a34:	7153      	strb	r3, [r2, #5]
	temp_string[6] = ']';
 8004a36:	235d      	movs	r3, #93	; 0x5d
 8004a38:	7193      	strb	r3, [r2, #6]
	temp_string[7] = '\0';
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	71d3      	strb	r3, [r2, #7]
}
 8004a3e:	bd08      	pop	{r3, pc}
 8004a40:	40240000 	.word	0x40240000
 8004a44:	20000c7c 	.word	0x20000c7c
 8004a48:	51eb851f 	.word	0x51eb851f
 8004a4c:	cccccccd 	.word	0xcccccccd

08004a50 <menu_refresh>:
{
	char *p = "Test";
	return p;
}

void menu_refresh(void) {
 8004a50:	b538      	push	{r3, r4, r5, lr}

	menu_t *temp;
	uint8_t i;
	if (currentPointer->parent) temp = (currentPointer->parent)->child;
 8004a52:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <menu_refresh+0xb8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	b113      	cbz	r3, 8004a60 <menu_refresh+0x10>
 8004a5a:	68dc      	ldr	r4, [r3, #12]
	else temp = (menu_t *)&ns_set;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e004      	b.n	8004a6a <menu_refresh+0x1a>
 8004a60:	4c2a      	ldr	r4, [pc, #168]	; (8004b0c <menu_refresh+0xbc>)
 8004a62:	e7fb      	b.n	8004a5c <menu_refresh+0xc>
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
		temp = temp->next;
 8004a64:	6864      	ldr	r4, [r4, #4]
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
 8004a66:	3301      	adds	r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <menu_refresh+0xc0>)
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	4929      	ldr	r1, [pc, #164]	; (8004b14 <menu_refresh+0xc4>)
 8004a70:	7809      	ldrb	r1, [r1, #0]
 8004a72:	1a52      	subs	r2, r2, r1
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d1f5      	bne.n	8004a64 <menu_refresh+0x14>
	}

	lcd_buf_clear();
 8004a78:	f7ff f8e4 	bl	8003c44 <lcd_buf_clear>
	for (i = 0; i < LCD_ROWS; i++) {
 8004a7c:	2500      	movs	r5, #0
 8004a7e:	e015      	b.n	8004aac <menu_refresh+0x5c>

		lcd_buf_go_to(0,i);
		if (temp == currentPointer)
		{
			if(button_handler_func != BUTTON_HANDLER_FUNC_MENU)
 8004a80:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <menu_refresh+0xc8>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b303      	cbz	r3, 8004ac8 <menu_refresh+0x78>
			{
				lcd_char(0x7e);
 8004a86:	207e      	movs	r0, #126	; 0x7e
 8004a88:	f7ff f8ca 	bl	8003c20 <lcd_char>
				lcd_char(62);
			}
		}
		else lcd_char(' ');

		lcd_buf_go_to(2, i);
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	2002      	movs	r0, #2
 8004a90:	f7ff f8bc 	bl	8003c0c <lcd_buf_go_to>
		lcd_buf_write_text(temp->name);
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	f7ff f8eb 	bl	8003c70 <lcd_buf_write_text>

		if(temp->set_option == SET_OPTION_TIME)
 8004a9a:	7e23      	ldrb	r3, [r4, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d017      	beq.n	8004ad0 <menu_refresh+0x80>
			lcd_buf_go_to(12, i);
			convert_time_to_str(temp->hours, temp->minutes);
			lcd_buf_write_text(time_string);
			//lcd_buf_write_text(ui_convert_inttime_to_str(temp->hours, temp->minutes));
		}
		else if(temp->set_option == SET_OPTION_TEMP)
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d023      	beq.n	8004aec <menu_refresh+0x9c>
			lcd_buf_go_to(12, i);
			convert_temp_to_str(temp->temp);
			lcd_buf_write_text(temp_string);
		}

		temp = temp->next;
 8004aa4:	6864      	ldr	r4, [r4, #4]
		if (!temp) break;
 8004aa6:	b36c      	cbz	r4, 8004b04 <menu_refresh+0xb4>
	for (i = 0; i < LCD_ROWS; i++) {
 8004aa8:	3501      	adds	r5, #1
 8004aaa:	b2ed      	uxtb	r5, r5
 8004aac:	2d01      	cmp	r5, #1
 8004aae:	d829      	bhi.n	8004b04 <menu_refresh+0xb4>
		lcd_buf_go_to(0,i);
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7ff f8aa 	bl	8003c0c <lcd_buf_go_to>
		if (temp == currentPointer)
 8004ab8:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <menu_refresh+0xb8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	d0df      	beq.n	8004a80 <menu_refresh+0x30>
		else lcd_char(' ');
 8004ac0:	2020      	movs	r0, #32
 8004ac2:	f7ff f8ad 	bl	8003c20 <lcd_char>
 8004ac6:	e7e1      	b.n	8004a8c <menu_refresh+0x3c>
				lcd_char(62);
 8004ac8:	203e      	movs	r0, #62	; 0x3e
 8004aca:	f7ff f8a9 	bl	8003c20 <lcd_char>
 8004ace:	e7dd      	b.n	8004a8c <menu_refresh+0x3c>
			lcd_buf_go_to(12, i);
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	200c      	movs	r0, #12
 8004ad4:	f7ff f89a 	bl	8003c0c <lcd_buf_go_to>
			convert_time_to_str(temp->hours, temp->minutes);
 8004ad8:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8004adc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8004ae0:	f7ff ff58 	bl	8004994 <convert_time_to_str>
			lcd_buf_write_text(time_string);
 8004ae4:	480d      	ldr	r0, [pc, #52]	; (8004b1c <menu_refresh+0xcc>)
 8004ae6:	f7ff f8c3 	bl	8003c70 <lcd_buf_write_text>
 8004aea:	e7db      	b.n	8004aa4 <menu_refresh+0x54>
			lcd_buf_go_to(12, i);
 8004aec:	4629      	mov	r1, r5
 8004aee:	200c      	movs	r0, #12
 8004af0:	f7ff f88c 	bl	8003c0c <lcd_buf_go_to>
			convert_temp_to_str(temp->temp);
 8004af4:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8004af8:	f7ff ff76 	bl	80049e8 <convert_temp_to_str>
			lcd_buf_write_text(temp_string);
 8004afc:	4808      	ldr	r0, [pc, #32]	; (8004b20 <menu_refresh+0xd0>)
 8004afe:	f7ff f8b7 	bl	8003c70 <lcd_buf_write_text>
 8004b02:	e7cf      	b.n	8004aa4 <menu_refresh+0x54>

	}
}
 8004b04:	bd38      	pop	{r3, r4, r5, pc}
 8004b06:	bf00      	nop
 8004b08:	200000cc 	.word	0x200000cc
 8004b0c:	200005a0 	.word	0x200005a0
 8004b10:	20000547 	.word	0x20000547
 8004b14:	20000546 	.word	0x20000546
 8004b18:	20000541 	.word	0x20000541
 8004b1c:	20000c74 	.word	0x20000c74
 8004b20:	20000c7c 	.word	0x20000c7c

08004b24 <ui_set_time_callback>:
void ui_set_time_callback(){
 8004b24:	b508      	push	{r3, lr}
	button_handler_func = BUTTON_HANDLER_FUNC_SET_TIME;
 8004b26:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <ui_set_time_callback+0x10>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004b2c:	f7ff ff90 	bl	8004a50 <menu_refresh>
}
 8004b30:	bd08      	pop	{r3, pc}
 8004b32:	bf00      	nop
 8004b34:	20000541 	.word	0x20000541

08004b38 <ui_set_temp_callback>:
void ui_set_temp_callback(){
 8004b38:	b508      	push	{r3, lr}
	button_handler_func = BUTTON_HANDLER_FUNC_SET_TEMP;
 8004b3a:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <ui_set_temp_callback+0x10>)
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004b40:	f7ff ff86 	bl	8004a50 <menu_refresh>
}
 8004b44:	bd08      	pop	{r3, pc}
 8004b46:	bf00      	nop
 8004b48:	20000541 	.word	0x20000541

08004b4c <ui_time_plus>:
{
 8004b4c:	b508      	push	{r3, lr}
	currentPointer->minutes++;
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <ui_time_plus+0x3c>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8004b56:	3301      	adds	r3, #1
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	if(currentPointer->minutes == 60)
 8004b5e:	2b3c      	cmp	r3, #60	; 0x3c
 8004b60:	d002      	beq.n	8004b68 <ui_time_plus+0x1c>
	menu_refresh();
 8004b62:	f7ff ff75 	bl	8004a50 <menu_refresh>
}
 8004b66:	bd08      	pop	{r3, pc}
		currentPointer->minutes = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		currentPointer->hours++;
 8004b6e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004b72:	3301      	adds	r3, #1
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		if(currentPointer->hours == 100)
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d1f1      	bne.n	8004b62 <ui_time_plus+0x16>
			currentPointer->hours = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8004b84:	e7ed      	b.n	8004b62 <ui_time_plus+0x16>
 8004b86:	bf00      	nop
 8004b88:	200000cc 	.word	0x200000cc

08004b8c <ui_time_minus>:
{
 8004b8c:	b508      	push	{r3, lr}
	currentPointer->minutes--;
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <ui_time_minus+0x3c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	if(currentPointer->minutes == 0xff)
 8004b9e:	2bff      	cmp	r3, #255	; 0xff
 8004ba0:	d002      	beq.n	8004ba8 <ui_time_minus+0x1c>
	menu_refresh();
 8004ba2:	f7ff ff55 	bl	8004a50 <menu_refresh>
}
 8004ba6:	bd08      	pop	{r3, pc}
		currentPointer->minutes = 59;
 8004ba8:	233b      	movs	r3, #59	; 0x3b
 8004baa:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		currentPointer->hours--;
 8004bae:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		if(currentPointer->hours == 0xff)
 8004bba:	2bff      	cmp	r3, #255	; 0xff
 8004bbc:	d1f1      	bne.n	8004ba2 <ui_time_minus+0x16>
			currentPointer->hours = 99;
 8004bbe:	2363      	movs	r3, #99	; 0x63
 8004bc0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8004bc4:	e7ed      	b.n	8004ba2 <ui_time_minus+0x16>
 8004bc6:	bf00      	nop
 8004bc8:	200000cc 	.word	0x200000cc

08004bcc <ui_time_save_and_exit>:
{
 8004bcc:	b508      	push	{r3, lr}
	button_handler_func = BUTTON_HANDLER_FUNC_MENU;
 8004bce:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <ui_time_save_and_exit+0x10>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004bd4:	f7ff ff3c 	bl	8004a50 <menu_refresh>
}
 8004bd8:	bd08      	pop	{r3, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000541 	.word	0x20000541

08004be0 <ui_time_exit_witout_save>:
{
 8004be0:	b508      	push	{r3, lr}
	button_handler_func = BUTTON_HANDLER_FUNC_MENU;
 8004be2:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <ui_time_exit_witout_save+0x10>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004be8:	f7ff ff32 	bl	8004a50 <menu_refresh>
}
 8004bec:	bd08      	pop	{r3, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000541 	.word	0x20000541
 8004bf4:	00000000 	.word	0x00000000

08004bf8 <ui_temp_plus>:
{
 8004bf8:	b510      	push	{r4, lr}
	currentPointer->temp = currentPointer->temp + 0.1;
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <ui_temp_plus+0x38>)
 8004bfc:	681c      	ldr	r4, [r3, #0]
 8004bfe:	a30a      	add	r3, pc, #40	; (adr r3, 8004c28 <ui_temp_plus+0x30>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8004c08:	f7fb faa8 	bl	800015c <__adddf3>
 8004c0c:	e9c4 0108 	strd	r0, r1, [r4, #32]
	if(currentPointer->temp > 70)
 8004c10:	2200      	movs	r2, #0
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <ui_temp_plus+0x3c>)
 8004c14:	f7fb fee8 	bl	80009e8 <__aeabi_dcmpgt>
 8004c18:	b118      	cbz	r0, 8004c22 <ui_temp_plus+0x2a>
		currentPointer->temp = 70.0;
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <ui_temp_plus+0x3c>)
 8004c1e:	e9c4 2308 	strd	r2, r3, [r4, #32]
	menu_refresh();
 8004c22:	f7ff ff15 	bl	8004a50 <menu_refresh>
}
 8004c26:	bd10      	pop	{r4, pc}
 8004c28:	9999999a 	.word	0x9999999a
 8004c2c:	3fb99999 	.word	0x3fb99999
 8004c30:	200000cc 	.word	0x200000cc
 8004c34:	40518000 	.word	0x40518000

08004c38 <ui_temp_minus>:
{
 8004c38:	b510      	push	{r4, lr}
	currentPointer->temp = currentPointer->temp - 0.1;
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <ui_temp_minus+0x40>)
 8004c3c:	681c      	ldr	r4, [r3, #0]
 8004c3e:	a30c      	add	r3, pc, #48	; (adr r3, 8004c70 <ui_temp_minus+0x38>)
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8004c48:	f7fb fa86 	bl	8000158 <__aeabi_dsub>
 8004c4c:	e9c4 0108 	strd	r0, r1, [r4, #32]
	if(currentPointer->temp < 0 )
 8004c50:	2200      	movs	r2, #0
 8004c52:	2300      	movs	r3, #0
 8004c54:	f7fb feaa 	bl	80009ac <__aeabi_dcmplt>
 8004c58:	b910      	cbnz	r0, 8004c60 <ui_temp_minus+0x28>
	menu_refresh();
 8004c5a:	f7ff fef9 	bl	8004a50 <menu_refresh>
}
 8004c5e:	bd10      	pop	{r4, pc}
		currentPointer->temp = 0;
 8004c60:	2200      	movs	r2, #0
 8004c62:	2300      	movs	r3, #0
 8004c64:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8004c68:	e7f7      	b.n	8004c5a <ui_temp_minus+0x22>
 8004c6a:	bf00      	nop
 8004c6c:	f3af 8000 	nop.w
 8004c70:	9999999a 	.word	0x9999999a
 8004c74:	3fb99999 	.word	0x3fb99999
 8004c78:	200000cc 	.word	0x200000cc

08004c7c <ui_temp_save_and_exit>:
{
 8004c7c:	b508      	push	{r3, lr}
	button_handler_func = BUTTON_HANDLER_FUNC_MENU;
 8004c7e:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <ui_temp_save_and_exit+0x10>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004c84:	f7ff fee4 	bl	8004a50 <menu_refresh>
}
 8004c88:	bd08      	pop	{r3, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000541 	.word	0x20000541

08004c90 <ui_temp_exit_witout_save>:
{
 8004c90:	b508      	push	{r3, lr}
	button_handler_func = BUTTON_HANDLER_FUNC_MENU;
 8004c92:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <ui_temp_exit_witout_save+0x10>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004c98:	f7ff feda 	bl	8004a50 <menu_refresh>
}
 8004c9c:	bd08      	pop	{r3, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000541 	.word	0x20000541

08004ca4 <menu_get_index>:
uint8_t menu_get_index(menu_t *q) {

	menu_t *temp;
	uint8_t i = 0;

	if (q->parent) temp = (q->parent)->child;
 8004ca4:	6903      	ldr	r3, [r0, #16]
 8004ca6:	b113      	cbz	r3, 8004cae <menu_get_index+0xa>
 8004ca8:	68da      	ldr	r2, [r3, #12]
	else temp = (menu_t *)&ns_set;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e004      	b.n	8004cb8 <menu_get_index+0x14>
 8004cae:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <menu_get_index+0x1c>)
 8004cb0:	e7fb      	b.n	8004caa <menu_get_index+0x6>

	while (temp != q) {
		temp = temp->next;
 8004cb2:	6852      	ldr	r2, [r2, #4]
		i++;
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
	while (temp != q) {
 8004cb8:	4282      	cmp	r2, r0
 8004cba:	d1fa      	bne.n	8004cb2 <menu_get_index+0xe>
	}

	return i;
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	4770      	bx	lr
 8004cc0:	200005a0 	.word	0x200005a0

08004cc4 <ui_menu_next>:

void ui_menu_next(void)
{
 8004cc4:	b508      	push	{r3, lr}
	if (currentPointer->next)
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <ui_menu_next+0x30>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	b17b      	cbz	r3, 8004cee <ui_menu_next+0x2a>
	{
		currentPointer = currentPointer->next;
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <ui_menu_next+0x30>)
 8004cd0:	6013      	str	r3, [r2, #0]
		menu_index++;
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <ui_menu_next+0x34>)
 8004cd4:	7813      	ldrb	r3, [r2, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	7013      	strb	r3, [r2, #0]
		if (++lcd_row_pos > LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <ui_menu_next+0x38>)
 8004cdc:	7813      	ldrb	r3, [r2, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	7013      	strb	r3, [r2, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d902      	bls.n	8004cee <ui_menu_next+0x2a>
 8004ce8:	4613      	mov	r3, r2
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
		//lcd_row_pos = 0;

		//if (currentPointer->parent) currentPointer = (currentPointer->parent)->child;
		//else currentPointer = &new_settings;
	}
	menu_refresh();
 8004cee:	f7ff feaf 	bl	8004a50 <menu_refresh>
}
 8004cf2:	bd08      	pop	{r3, pc}
 8004cf4:	200000cc 	.word	0x200000cc
 8004cf8:	20000547 	.word	0x20000547
 8004cfc:	20000546 	.word	0x20000546

08004d00 <ui_menu_prev>:

void ui_menu_prev(void) {
 8004d00:	b508      	push	{r3, lr}


	if(currentPointer->prev)
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <ui_menu_prev+0x44>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6898      	ldr	r0, [r3, #8]
 8004d08:	b168      	cbz	r0, 8004d26 <ui_menu_prev+0x26>
	{
		currentPointer = currentPointer->prev;
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <ui_menu_prev+0x44>)
 8004d0c:	6018      	str	r0, [r3, #0]
		if (menu_index)
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <ui_menu_prev+0x48>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b15b      	cbz	r3, 8004d2c <ui_menu_prev+0x2c>
		{
			menu_index--;
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <ui_menu_prev+0x48>)
 8004d18:	7013      	strb	r3, [r2, #0]
			if (lcd_row_pos > 0) lcd_row_pos--;
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <ui_menu_prev+0x4c>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	b113      	cbz	r3, 8004d26 <ui_menu_prev+0x26>
 8004d20:	3b01      	subs	r3, #1
 8004d22:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <ui_menu_prev+0x4c>)
 8004d24:	7013      	strb	r3, [r2, #0]

			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
			else lcd_row_pos = menu_index;
		}
	}
	menu_refresh();
 8004d26:	f7ff fe93 	bl	8004a50 <menu_refresh>
}
 8004d2a:	bd08      	pop	{r3, pc}
			menu_index = menu_get_index(currentPointer);
 8004d2c:	f7ff ffba 	bl	8004ca4 <menu_get_index>
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <ui_menu_prev+0x48>)
 8004d32:	7018      	strb	r0, [r3, #0]
			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 8004d34:	b910      	cbnz	r0, 8004d3c <ui_menu_prev+0x3c>
			else lcd_row_pos = menu_index;
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <ui_menu_prev+0x4c>)
 8004d38:	7018      	strb	r0, [r3, #0]
 8004d3a:	e7f4      	b.n	8004d26 <ui_menu_prev+0x26>
			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <ui_menu_prev+0x4c>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e7f0      	b.n	8004d26 <ui_menu_prev+0x26>
 8004d44:	200000cc 	.word	0x200000cc
 8004d48:	20000547 	.word	0x20000547
 8004d4c:	20000546 	.word	0x20000546

08004d50 <menu_get_level>:
uint8_t menu_get_level(menu_t *q) {

	menu_t *temp = q;
	uint8_t i = 0;

	if (!q->parent) return 0;
 8004d50:	6903      	ldr	r3, [r0, #16]
 8004d52:	b143      	cbz	r3, 8004d66 <menu_get_level+0x16>
	uint8_t i = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e001      	b.n	8004d5c <menu_get_level+0xc>

	while (temp->parent != NULL) {
		temp = temp->parent;
		i++;
 8004d58:	3301      	adds	r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
	while (temp->parent != NULL) {
 8004d5c:	6900      	ldr	r0, [r0, #16]
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d1fa      	bne.n	8004d58 <menu_get_level+0x8>
	}

	return i;
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	4770      	bx	lr
	if (!q->parent) return 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e7fb      	b.n	8004d62 <menu_get_level+0x12>
	...

08004d6c <ui_menu_enter>:


void ui_menu_enter(void) {
 8004d6c:	b510      	push	{r4, lr}

	if (currentPointer->menu_function) currentPointer->menu_function();
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <ui_menu_enter+0x48>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	b103      	cbz	r3, 8004d78 <ui_menu_enter+0xc>
 8004d76:	4798      	blx	r3

	if (currentPointer->child)
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <ui_menu_enter+0x48>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	68c4      	ldr	r4, [r0, #12]
 8004d7e:	b16c      	cbz	r4, 8004d9c <ui_menu_enter+0x30>
	{

		switch (menu_get_level(currentPointer)) {
 8004d80:	f7ff ffe6 	bl	8004d50 <menu_get_level>
 8004d84:	b158      	cbz	r0, 8004d9e <ui_menu_enter+0x32>
 8004d86:	2801      	cmp	r0, #1
 8004d88:	d00e      	beq.n	8004da8 <ui_menu_enter+0x3c>
		}

		// switch...case can be replaced by:
		// lcd_row_pos_level[ menu_get_level(currentPointer) ] = lcd_row_pos;

		menu_index = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <ui_menu_enter+0x4c>)
 8004d8e:	7013      	strb	r3, [r2, #0]
		lcd_row_pos = 0;
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <ui_menu_enter+0x50>)
 8004d92:	7013      	strb	r3, [r2, #0]

		currentPointer = currentPointer->child;
 8004d94:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <ui_menu_enter+0x48>)
 8004d96:	601c      	str	r4, [r3, #0]

		menu_refresh();
 8004d98:	f7ff fe5a 	bl	8004a50 <menu_refresh>
	}
}
 8004d9c:	bd10      	pop	{r4, pc}
				lcd_row_pos_level_1 = lcd_row_pos;
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <ui_menu_enter+0x50>)
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <ui_menu_enter+0x54>)
 8004da4:	701a      	strb	r2, [r3, #0]
				break;
 8004da6:	e7f0      	b.n	8004d8a <ui_menu_enter+0x1e>
				lcd_row_pos_level_2 = lcd_row_pos;
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <ui_menu_enter+0x50>)
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <ui_menu_enter+0x58>)
 8004dae:	701a      	strb	r2, [r3, #0]
				break;
 8004db0:	e7eb      	b.n	8004d8a <ui_menu_enter+0x1e>
 8004db2:	bf00      	nop
 8004db4:	200000cc 	.word	0x200000cc
 8004db8:	20000547 	.word	0x20000547
 8004dbc:	20000546 	.word	0x20000546
 8004dc0:	20000c70 	.word	0x20000c70
 8004dc4:	20000c71 	.word	0x20000c71

08004dc8 <ui_menu_back>:



void ui_menu_back(void) {
 8004dc8:	b510      	push	{r4, lr}

	if (currentPointer->parent) {
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <ui_menu_back+0x40>)
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	6904      	ldr	r4, [r0, #16]
 8004dd0:	b174      	cbz	r4, 8004df0 <ui_menu_back+0x28>

		switch (menu_get_level(currentPointer)) {
 8004dd2:	f7ff ffbd 	bl	8004d50 <menu_get_level>
 8004dd6:	2801      	cmp	r0, #1
 8004dd8:	d00b      	beq.n	8004df2 <ui_menu_back+0x2a>
 8004dda:	2802      	cmp	r0, #2
 8004ddc:	d00e      	beq.n	8004dfc <ui_menu_back+0x34>
			case 2:
				lcd_row_pos = lcd_row_pos_level_2;
				break;
			}

		currentPointer = currentPointer->parent;
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <ui_menu_back+0x40>)
 8004de0:	601c      	str	r4, [r3, #0]
		menu_index = menu_get_index(currentPointer);
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7ff ff5e 	bl	8004ca4 <menu_get_index>
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <ui_menu_back+0x44>)
 8004dea:	7018      	strb	r0, [r3, #0]

		menu_refresh();
 8004dec:	f7ff fe30 	bl	8004a50 <menu_refresh>

	}
}
 8004df0:	bd10      	pop	{r4, pc}
				lcd_row_pos = lcd_row_pos_level_1;
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <ui_menu_back+0x48>)
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <ui_menu_back+0x4c>)
 8004df8:	701a      	strb	r2, [r3, #0]
				break;
 8004dfa:	e7f0      	b.n	8004dde <ui_menu_back+0x16>
				lcd_row_pos = lcd_row_pos_level_2;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <ui_menu_back+0x50>)
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <ui_menu_back+0x4c>)
 8004e02:	701a      	strb	r2, [r3, #0]
				break;
 8004e04:	e7eb      	b.n	8004dde <ui_menu_back+0x16>
 8004e06:	bf00      	nop
 8004e08:	200000cc 	.word	0x200000cc
 8004e0c:	20000547 	.word	0x20000547
 8004e10:	20000c70 	.word	0x20000c70
 8004e14:	20000546 	.word	0x20000546
 8004e18:	20000c71 	.word	0x20000c71

08004e1c <ui_button_handler>:
{
 8004e1c:	b508      	push	{r3, lr}
	if(button_handler_func == BUTTON_HANDLER_FUNC_MENU)
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <ui_button_handler+0x84>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	b993      	cbnz	r3, 8004e4a <ui_button_handler+0x2e>
		if(button == UI_BUTTON_UP)
 8004e24:	b140      	cbz	r0, 8004e38 <ui_button_handler+0x1c>
		else if(button == UI_BUTTON_DOWN)
 8004e26:	2801      	cmp	r0, #1
 8004e28:	d009      	beq.n	8004e3e <ui_button_handler+0x22>
		else if(button == UI_BUTTON_OK)
 8004e2a:	2802      	cmp	r0, #2
 8004e2c:	d00a      	beq.n	8004e44 <ui_button_handler+0x28>
		else if(button == UI_BUTTON_BACK)
 8004e2e:	2803      	cmp	r0, #3
 8004e30:	d10f      	bne.n	8004e52 <ui_button_handler+0x36>
			ui_menu_back();
 8004e32:	f7ff ffc9 	bl	8004dc8 <ui_menu_back>
 8004e36:	e00c      	b.n	8004e52 <ui_button_handler+0x36>
			ui_menu_prev();
 8004e38:	f7ff ff62 	bl	8004d00 <ui_menu_prev>
 8004e3c:	e009      	b.n	8004e52 <ui_button_handler+0x36>
			ui_menu_next();
 8004e3e:	f7ff ff41 	bl	8004cc4 <ui_menu_next>
 8004e42:	e006      	b.n	8004e52 <ui_button_handler+0x36>
			ui_menu_enter();
 8004e44:	f7ff ff92 	bl	8004d6c <ui_menu_enter>
 8004e48:	e003      	b.n	8004e52 <ui_button_handler+0x36>
	else if(button_handler_func == BUTTON_HANDLER_FUNC_SET_TIME)
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d002      	beq.n	8004e54 <ui_button_handler+0x38>
	else if(button_handler_func == BUTTON_HANDLER_FUNC_SET_TEMP)
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d013      	beq.n	8004e7a <ui_button_handler+0x5e>
}
 8004e52:	bd08      	pop	{r3, pc}
		if(button == UI_BUTTON_UP)
 8004e54:	b140      	cbz	r0, 8004e68 <ui_button_handler+0x4c>
		else if(button == UI_BUTTON_DOWN)
 8004e56:	2801      	cmp	r0, #1
 8004e58:	d009      	beq.n	8004e6e <ui_button_handler+0x52>
		else if(button == UI_BUTTON_OK)
 8004e5a:	2802      	cmp	r0, #2
 8004e5c:	d00a      	beq.n	8004e74 <ui_button_handler+0x58>
		else if(button == UI_BUTTON_BACK)
 8004e5e:	2803      	cmp	r0, #3
 8004e60:	d1f7      	bne.n	8004e52 <ui_button_handler+0x36>
			ui_time_exit_witout_save();
 8004e62:	f7ff febd 	bl	8004be0 <ui_time_exit_witout_save>
 8004e66:	e7f4      	b.n	8004e52 <ui_button_handler+0x36>
			ui_time_plus();
 8004e68:	f7ff fe70 	bl	8004b4c <ui_time_plus>
 8004e6c:	e7f1      	b.n	8004e52 <ui_button_handler+0x36>
			ui_time_minus();
 8004e6e:	f7ff fe8d 	bl	8004b8c <ui_time_minus>
 8004e72:	e7ee      	b.n	8004e52 <ui_button_handler+0x36>
			ui_time_save_and_exit();
 8004e74:	f7ff feaa 	bl	8004bcc <ui_time_save_and_exit>
 8004e78:	e7eb      	b.n	8004e52 <ui_button_handler+0x36>
		if(button == UI_BUTTON_UP)
 8004e7a:	b140      	cbz	r0, 8004e8e <ui_button_handler+0x72>
		else if(button == UI_BUTTON_DOWN)
 8004e7c:	2801      	cmp	r0, #1
 8004e7e:	d009      	beq.n	8004e94 <ui_button_handler+0x78>
		else if(button == UI_BUTTON_OK)
 8004e80:	2802      	cmp	r0, #2
 8004e82:	d00a      	beq.n	8004e9a <ui_button_handler+0x7e>
		else if(button == UI_BUTTON_BACK)
 8004e84:	2803      	cmp	r0, #3
 8004e86:	d1e4      	bne.n	8004e52 <ui_button_handler+0x36>
			ui_temp_exit_witout_save();
 8004e88:	f7ff ff02 	bl	8004c90 <ui_temp_exit_witout_save>
}
 8004e8c:	e7e1      	b.n	8004e52 <ui_button_handler+0x36>
			ui_temp_plus();
 8004e8e:	f7ff feb3 	bl	8004bf8 <ui_temp_plus>
 8004e92:	e7de      	b.n	8004e52 <ui_button_handler+0x36>
			ui_temp_minus();
 8004e94:	f7ff fed0 	bl	8004c38 <ui_temp_minus>
 8004e98:	e7db      	b.n	8004e52 <ui_button_handler+0x36>
			ui_temp_save_and_exit();
 8004e9a:	f7ff feef 	bl	8004c7c <ui_temp_save_and_exit>
 8004e9e:	e7d8      	b.n	8004e52 <ui_button_handler+0x36>
 8004ea0:	20000541 	.word	0x20000541

08004ea4 <iu_button_hold_handler>:
/* ui_handler_flag its busy flag its prevent
 * entering to ui_handler() few times with this same ms_counter value */


void iu_button_hold_handler()
{
 8004ea4:	b508      	push	{r3, lr}
	static uint8_t button_hold_on_timer_divider;


	if((GPIOB->IDR & GPIO_PIN_12) == 0)
 8004ea6:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <iu_button_hold_handler+0xe8>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004eae:	d149      	bne.n	8004f44 <iu_button_hold_handler+0xa0>
	{
		if(ms_counter % 999 == 0)
 8004eb0:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <iu_button_hold_handler+0xec>)
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <iu_button_hold_handler+0xf0>)
 8004eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ebc:	1ad1      	subs	r1, r2, r3
 8004ebe:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004ec2:	0a5b      	lsrs	r3, r3, #9
 8004ec4:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004ec8:	fb01 2313 	mls	r3, r1, r3, r2
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	b91b      	cbnz	r3, 8004ed8 <iu_button_hold_handler+0x34>
		{
			button_hold_on_counter++;
 8004ed0:	4a31      	ldr	r2, [pc, #196]	; (8004f98 <iu_button_hold_handler+0xf4>)
 8004ed2:	7813      	ldrb	r3, [r2, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	7013      	strb	r3, [r2, #0]
	else
	{
		button_hold_on_counter = 0;
		return ;
	}
	if(button_hold_on_counter < 3) return;
 8004ed8:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <iu_button_hold_handler+0xf4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d94f      	bls.n	8004f80 <iu_button_hold_handler+0xdc>
	else
	{
		button_hold_on_timer_divider = 2;
 8004ee0:	4a2e      	ldr	r2, [pc, #184]	; (8004f9c <iu_button_hold_handler+0xf8>)
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 4) button_hold_on_timer_divider = 3;
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d901      	bls.n	8004eee <iu_button_hold_handler+0x4a>
 8004eea:	2103      	movs	r1, #3
 8004eec:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 6) button_hold_on_timer_divider = 8;
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d902      	bls.n	8004ef8 <iu_button_hold_handler+0x54>
 8004ef2:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <iu_button_hold_handler+0xf8>)
 8004ef4:	2108      	movs	r1, #8
 8004ef6:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 10) button_hold_on_timer_divider = 14;
 8004ef8:	2b0a      	cmp	r3, #10
 8004efa:	d902      	bls.n	8004f02 <iu_button_hold_handler+0x5e>
 8004efc:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <iu_button_hold_handler+0xf8>)
 8004efe:	210e      	movs	r1, #14
 8004f00:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 15) button_hold_on_timer_divider = 25;
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d902      	bls.n	8004f0c <iu_button_hold_handler+0x68>
 8004f06:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <iu_button_hold_handler+0xf8>)
 8004f08:	2219      	movs	r2, #25
 8004f0a:	701a      	strb	r2, [r3, #0]
		if(ms_counter %(1000/button_hold_on_timer_divider) == 0)
 8004f0c:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <iu_button_hold_handler+0xec>)
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	b292      	uxth	r2, r2
 8004f12:	4b22      	ldr	r3, [pc, #136]	; (8004f9c <iu_button_hold_handler+0xf8>)
 8004f14:	7819      	ldrb	r1, [r3, #0]
 8004f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f1a:	fb93 f3f1 	sdiv	r3, r3, r1
 8004f1e:	fb92 f1f3 	sdiv	r1, r2, r3
 8004f22:	fb03 2311 	mls	r3, r3, r1, r2
 8004f26:	bb5b      	cbnz	r3, 8004f80 <iu_button_hold_handler+0xdc>
		{
			if((GPIOB->IDR & GPIO_PIN_12) == 0)
 8004f28:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <iu_button_hold_handler+0xe8>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004f30:	d027      	beq.n	8004f82 <iu_button_hold_handler+0xde>
			{
				ui_button_handler(UI_BUTTON_UP);
			}
			else if((GPIOC->IDR & GPIO_PIN_13) == 0)
 8004f32:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <iu_button_hold_handler+0xfc>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004f3a:	d121      	bne.n	8004f80 <iu_button_hold_handler+0xdc>
			{
				ui_button_handler(UI_BUTTON_DOWN);
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f7ff ff6d 	bl	8004e1c <ui_button_handler>
 8004f42:	e01d      	b.n	8004f80 <iu_button_hold_handler+0xdc>
	else if((GPIOC->IDR & GPIO_PIN_13) == 0)
 8004f44:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <iu_button_hold_handler+0xfc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004f4c:	d115      	bne.n	8004f7a <iu_button_hold_handler+0xd6>
		if(ms_counter % 999 == 0)
 8004f4e:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <iu_button_hold_handler+0xec>)
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <iu_button_hold_handler+0xf0>)
 8004f56:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5a:	1ad1      	subs	r1, r2, r3
 8004f5c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004f60:	0a5b      	lsrs	r3, r3, #9
 8004f62:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004f66:	fb01 2313 	mls	r3, r1, r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1b3      	bne.n	8004ed8 <iu_button_hold_handler+0x34>
			button_hold_on_counter++;
 8004f70:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <iu_button_hold_handler+0xf4>)
 8004f72:	7813      	ldrb	r3, [r2, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	7013      	strb	r3, [r2, #0]
 8004f78:	e7ae      	b.n	8004ed8 <iu_button_hold_handler+0x34>
		button_hold_on_counter = 0;
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <iu_button_hold_handler+0xf4>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8004f80:	bd08      	pop	{r3, pc}
				ui_button_handler(UI_BUTTON_UP);
 8004f82:	2000      	movs	r0, #0
 8004f84:	f7ff ff4a 	bl	8004e1c <ui_button_handler>
 8004f88:	e7fa      	b.n	8004f80 <iu_button_hold_handler+0xdc>
 8004f8a:	bf00      	nop
 8004f8c:	40010c00 	.word	0x40010c00
 8004f90:	20000778 	.word	0x20000778
 8004f94:	06680a41 	.word	0x06680a41
 8004f98:	20000542 	.word	0x20000542
 8004f9c:	20000543 	.word	0x20000543
 8004fa0:	40011000 	.word	0x40011000

08004fa4 <temp_progress_bar>:
 char CELCIUS_CHAR = 0xdf;
 char END_OF_TEMP[] = "C]";
 char SET_TEMP[] = " Set temp.  [";

uint8_t temp_progress_bar(double external_temp, double actual_temp, double setpoint)
{
 8004fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	4606      	mov	r6, r0
 8004faa:	460f      	mov	r7, r1
 8004fac:	4614      	mov	r4, r2
 8004fae:	461d      	mov	r5, r3
	double sub;
	if(actual_temp >= setpoint - 0.5 )
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4b13      	ldr	r3, [pc, #76]	; (8005000 <temp_progress_bar+0x5c>)
 8004fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004fb8:	f7fb f8ce 	bl	8000158 <__aeabi_dsub>
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	f7fb fcfe 	bl	80009c0 <__aeabi_dcmple>
 8004fc4:	b9d0      	cbnz	r0, 8004ffc <temp_progress_bar+0x58>
	{
		return 10;
	}
	else
	{
		sub = (setpoint - external_temp) / 10;
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	463b      	mov	r3, r7
 8004fca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004fce:	f7fb f8c3 	bl	8000158 <__aeabi_dsub>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <temp_progress_bar+0x60>)
 8004fd6:	f7fb fba1 	bl	800071c <__aeabi_ddiv>
 8004fda:	4680      	mov	r8, r0
 8004fdc:	4689      	mov	r9, r1
		return  (actual_temp - external_temp)  / sub;
 8004fde:	4632      	mov	r2, r6
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7fb f8b7 	bl	8000158 <__aeabi_dsub>
 8004fea:	4642      	mov	r2, r8
 8004fec:	464b      	mov	r3, r9
 8004fee:	f7fb fb95 	bl	800071c <__aeabi_ddiv>
 8004ff2:	f7fb fd03 	bl	80009fc <__aeabi_d2uiz>
 8004ff6:	b2c0      	uxtb	r0, r0
	}
}
 8004ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 10;
 8004ffc:	200a      	movs	r0, #10
 8004ffe:	e7fb      	b.n	8004ff8 <temp_progress_bar+0x54>
 8005000:	3fe00000 	.word	0x3fe00000
 8005004:	40240000 	.word	0x40240000

08005008 <iu_heating_process_handler>:


void iu_heating_process_handler(){
 8005008:	b530      	push	{r4, r5, lr}
 800500a:	b089      	sub	sp, #36	; 0x24
	uint8_t progress_bar_value;
	// external temperature
	// get external temperature
	// set temperature - external

	progress_bar_value = temp_progress_bar(25.0, ntc_get_analog_sensors_value(0) , 45.0);
 800500c:	2000      	movs	r0, #0
 800500e:	f7ff fb13 	bl	8004638 <ntc_get_analog_sensors_value>
 8005012:	2200      	movs	r2, #0
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <iu_heating_process_handler+0x174>)
 8005016:	e9cd 2300 	strd	r2, r3, [sp]
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	2000      	movs	r0, #0
 8005020:	4957      	ldr	r1, [pc, #348]	; (8005180 <iu_heating_process_handler+0x178>)
 8005022:	f7ff ffbf 	bl	8004fa4 <temp_progress_bar>
 8005026:	4605      	mov	r5, r0
	for(uint8_t i = 0 ; i< 10 ; i++)
 8005028:	2400      	movs	r4, #0
 800502a:	e004      	b.n	8005036 <iu_heating_process_handler+0x2e>
		{
			lcd_char(0xff);
		}
		else
		{
			lcd_char(' ');
 800502c:	2020      	movs	r0, #32
 800502e:	f7fe fdf7 	bl	8003c20 <lcd_char>
	for(uint8_t i = 0 ; i< 10 ; i++)
 8005032:	3401      	adds	r4, #1
 8005034:	b2e4      	uxtb	r4, r4
 8005036:	2c09      	cmp	r4, #9
 8005038:	d80a      	bhi.n	8005050 <iu_heating_process_handler+0x48>
		lcd_buf_go_to(5+i,1);
 800503a:	1d60      	adds	r0, r4, #5
 800503c:	2101      	movs	r1, #1
 800503e:	b2c0      	uxtb	r0, r0
 8005040:	f7fe fde4 	bl	8003c0c <lcd_buf_go_to>
		if(progress_bar_value >= i )
 8005044:	42ac      	cmp	r4, r5
 8005046:	d8f1      	bhi.n	800502c <iu_heating_process_handler+0x24>
			lcd_char(0xff);
 8005048:	20ff      	movs	r0, #255	; 0xff
 800504a:	f7fe fde9 	bl	8003c20 <lcd_char>
 800504e:	e7f0      	b.n	8005032 <iu_heating_process_handler+0x2a>
		}
	}
	temp_progress_bar(25.0, ntc_get_analog_sensors_value(0) , 45.0);
 8005050:	2000      	movs	r0, #0
 8005052:	f7ff faf1 	bl	8004638 <ntc_get_analog_sensors_value>

	if(ui_heating_flag == 0 /*UI_HEAT_FLAG_HEATING*/)
 8005056:	4b4b      	ldr	r3, [pc, #300]	; (8005184 <iu_heating_process_handler+0x17c>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b98b      	cbnz	r3, 8005080 <iu_heating_process_handler+0x78>
	{
		if(display_counter++ < 1000)
 800505c:	494a      	ldr	r1, [pc, #296]	; (8005188 <iu_heating_process_handler+0x180>)
 800505e:	880a      	ldrh	r2, [r1, #0]
 8005060:	1c53      	adds	r3, r2, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	800b      	strh	r3, [r1, #0]
 8005066:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800506a:	d30b      	bcc.n	8005084 <iu_heating_process_handler+0x7c>
			lcd_buf_go_to(0,1);
			lcd_buf_write_text(&PROGRESS_BAR_1[0]);
			lcd_buf_go_to(15,1);
			lcd_buf_write_text(&PROGRESS_BAR_2[0]);
		}
		else if(display_counter < 8000)
 800506c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005070:	d31e      	bcc.n	80050b0 <iu_heating_process_handler+0xa8>
			lcd_buf_go_to(0,1);
			lcd_buf_write_text(&PROGRESS_BAR_1[0]);
			lcd_buf_go_to(15,1);
			lcd_buf_write_text(&PROGRESS_BAR_2[0]);
		}
		else if(display_counter < 9000)
 8005072:	f242 3227 	movw	r2, #8999	; 0x2327
 8005076:	4293      	cmp	r3, r2
 8005078:	d94e      	bls.n	8005118 <iu_heating_process_handler+0x110>
			lcd_buf_go_to(15,1);
			lcd_buf_write_text(&PROGRESS_BAR_2[0]);
		}
		else
		{
			display_counter = 0;
 800507a:	4b43      	ldr	r3, [pc, #268]	; (8005188 <iu_heating_process_handler+0x180>)
 800507c:	2200      	movs	r2, #0
 800507e:	801a      	strh	r2, [r3, #0]
	}
	else if(ui_heating_flag == UI_HEAT_FLAG_STABILIZING)
	{

	}
}
 8005080:	b009      	add	sp, #36	; 0x24
 8005082:	bd30      	pop	{r4, r5, pc}
			lcd_buf_go_to(0,0);
 8005084:	2100      	movs	r1, #0
 8005086:	4608      	mov	r0, r1
 8005088:	f7fe fdc0 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&HEATING[0]);
 800508c:	483f      	ldr	r0, [pc, #252]	; (800518c <iu_heating_process_handler+0x184>)
 800508e:	f7fe fdef 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(0,1);
 8005092:	2101      	movs	r1, #1
 8005094:	2000      	movs	r0, #0
 8005096:	f7fe fdb9 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&PROGRESS_BAR_1[0]);
 800509a:	483d      	ldr	r0, [pc, #244]	; (8005190 <iu_heating_process_handler+0x188>)
 800509c:	f7fe fde8 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(15,1);
 80050a0:	2101      	movs	r1, #1
 80050a2:	200f      	movs	r0, #15
 80050a4:	f7fe fdb2 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&PROGRESS_BAR_2[0]);
 80050a8:	483a      	ldr	r0, [pc, #232]	; (8005194 <iu_heating_process_handler+0x18c>)
 80050aa:	f7fe fde1 	bl	8003c70 <lcd_buf_write_text>
 80050ae:	e7e7      	b.n	8005080 <iu_heating_process_handler+0x78>
			lcd_buf_go_to(0,0);
 80050b0:	2100      	movs	r1, #0
 80050b2:	4608      	mov	r0, r1
 80050b4:	f7fe fdaa 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&ACTUAL_TEMP[0]);
 80050b8:	4837      	ldr	r0, [pc, #220]	; (8005198 <iu_heating_process_handler+0x190>)
 80050ba:	f7fe fdd9 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(13,0);
 80050be:	2100      	movs	r1, #0
 80050c0:	200d      	movs	r0, #13
 80050c2:	f7fe fda3 	bl	8003c0c <lcd_buf_go_to>
			ntc_convert_float_to_string(&str_table[0],  ntc_get_analog_sensors_value(0));
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7ff fab6 	bl	8004638 <ntc_get_analog_sensors_value>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	a803      	add	r0, sp, #12
 80050d2:	f7ff fb03 	bl	80046dc <ntc_convert_float_to_string>
			lcd_buf_write_text((char*)&str_table[0]);
 80050d6:	a803      	add	r0, sp, #12
 80050d8:	f7fe fdca 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(17,0);
 80050dc:	2100      	movs	r1, #0
 80050de:	2011      	movs	r0, #17
 80050e0:	f7fe fd94 	bl	8003c0c <lcd_buf_go_to>
			lcd_char(CELCIUS_CHAR);
 80050e4:	4b2d      	ldr	r3, [pc, #180]	; (800519c <iu_heating_process_handler+0x194>)
 80050e6:	7818      	ldrb	r0, [r3, #0]
 80050e8:	f7fe fd9a 	bl	8003c20 <lcd_char>
			lcd_buf_go_to(18,0);
 80050ec:	2100      	movs	r1, #0
 80050ee:	2012      	movs	r0, #18
 80050f0:	f7fe fd8c 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&END_OF_TEMP[0]);
 80050f4:	482a      	ldr	r0, [pc, #168]	; (80051a0 <iu_heating_process_handler+0x198>)
 80050f6:	f7fe fdbb 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(0,1);
 80050fa:	2101      	movs	r1, #1
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7fe fd85 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&PROGRESS_BAR_1[0]);
 8005102:	4823      	ldr	r0, [pc, #140]	; (8005190 <iu_heating_process_handler+0x188>)
 8005104:	f7fe fdb4 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(15,1);
 8005108:	2101      	movs	r1, #1
 800510a:	200f      	movs	r0, #15
 800510c:	f7fe fd7e 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&PROGRESS_BAR_2[0]);
 8005110:	4820      	ldr	r0, [pc, #128]	; (8005194 <iu_heating_process_handler+0x18c>)
 8005112:	f7fe fdad 	bl	8003c70 <lcd_buf_write_text>
 8005116:	e7b3      	b.n	8005080 <iu_heating_process_handler+0x78>
			lcd_buf_go_to(0,0);
 8005118:	2100      	movs	r1, #0
 800511a:	4608      	mov	r0, r1
 800511c:	f7fe fd76 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&SET_TEMP[0]);
 8005120:	4820      	ldr	r0, [pc, #128]	; (80051a4 <iu_heating_process_handler+0x19c>)
 8005122:	f7fe fda5 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(13,0);
 8005126:	2100      	movs	r1, #0
 8005128:	200d      	movs	r0, #13
 800512a:	f7fe fd6f 	bl	8003c0c <lcd_buf_go_to>
			ntc_convert_float_to_string(&str_table[0], 45.0);
 800512e:	2200      	movs	r2, #0
 8005130:	4b12      	ldr	r3, [pc, #72]	; (800517c <iu_heating_process_handler+0x174>)
 8005132:	a803      	add	r0, sp, #12
 8005134:	f7ff fad2 	bl	80046dc <ntc_convert_float_to_string>
			lcd_buf_write_text((char*)&str_table[0]);
 8005138:	a803      	add	r0, sp, #12
 800513a:	f7fe fd99 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(17,0);
 800513e:	2100      	movs	r1, #0
 8005140:	2011      	movs	r0, #17
 8005142:	f7fe fd63 	bl	8003c0c <lcd_buf_go_to>
			lcd_char(CELCIUS_CHAR);
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <iu_heating_process_handler+0x194>)
 8005148:	7818      	ldrb	r0, [r3, #0]
 800514a:	f7fe fd69 	bl	8003c20 <lcd_char>
			lcd_buf_go_to(18,0);
 800514e:	2100      	movs	r1, #0
 8005150:	2012      	movs	r0, #18
 8005152:	f7fe fd5b 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&END_OF_TEMP[0]);
 8005156:	4812      	ldr	r0, [pc, #72]	; (80051a0 <iu_heating_process_handler+0x198>)
 8005158:	f7fe fd8a 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(0,1);
 800515c:	2101      	movs	r1, #1
 800515e:	2000      	movs	r0, #0
 8005160:	f7fe fd54 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&PROGRESS_BAR_1[0]);
 8005164:	480a      	ldr	r0, [pc, #40]	; (8005190 <iu_heating_process_handler+0x188>)
 8005166:	f7fe fd83 	bl	8003c70 <lcd_buf_write_text>
			lcd_buf_go_to(15,1);
 800516a:	2101      	movs	r1, #1
 800516c:	200f      	movs	r0, #15
 800516e:	f7fe fd4d 	bl	8003c0c <lcd_buf_go_to>
			lcd_buf_write_text(&PROGRESS_BAR_2[0]);
 8005172:	4808      	ldr	r0, [pc, #32]	; (8005194 <iu_heating_process_handler+0x18c>)
 8005174:	f7fe fd7c 	bl	8003c70 <lcd_buf_write_text>
 8005178:	e782      	b.n	8005080 <iu_heating_process_handler+0x78>
 800517a:	bf00      	nop
 800517c:	40468000 	.word	0x40468000
 8005180:	40390000 	.word	0x40390000
 8005184:	20000548 	.word	0x20000548
 8005188:	20000544 	.word	0x20000544
 800518c:	20000094 	.word	0x20000094
 8005190:	200000ac 	.word	0x200000ac
 8005194:	200000b4 	.word	0x200000b4
 8005198:	20000080 	.word	0x20000080
 800519c:	2000008e 	.word	0x2000008e
 80051a0:	20000090 	.word	0x20000090
 80051a4:	200000bc 	.word	0x200000bc

080051a8 <ui_handler>:


void ui_handler()
{
 80051a8:	b508      	push	{r3, lr}

	if(ui_handler_flag == UI_HANDLER_FLAG_BUSY) return;
 80051aa:	4b4a      	ldr	r3, [pc, #296]	; (80052d4 <ui_handler+0x12c>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d062      	beq.n	800527a <ui_handler+0xd2>

	iu_button_hold_handler();
 80051b4:	f7ff fe76 	bl	8004ea4 <iu_button_hold_handler>

	iu_heating_process_handler();
 80051b8:	f7ff ff26 	bl	8005008 <iu_heating_process_handler>

	//red led control

	if( (HC_status.ds18b20_amount == 0) && (HC_status.ntc_amount == 0))
 80051bc:	4b46      	ldr	r3, [pc, #280]	; (80052d8 <ui_handler+0x130>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b9a3      	cbnz	r3, 80051ec <ui_handler+0x44>
 80051c2:	4a45      	ldr	r2, [pc, #276]	; (80052d8 <ui_handler+0x130>)
 80051c4:	7852      	ldrb	r2, [r2, #1]
 80051c6:	b98a      	cbnz	r2, 80051ec <ui_handler+0x44>
	{
		if(ms_counter % 200 == 0)	LED_RED_GPIO_Port -> ODR ^= LED_RED_Pin;
 80051c8:	4b44      	ldr	r3, [pc, #272]	; (80052dc <ui_handler+0x134>)
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	4b44      	ldr	r3, [pc, #272]	; (80052e0 <ui_handler+0x138>)
 80051d0:	fba3 1302 	umull	r1, r3, r3, r2
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	21c8      	movs	r1, #200	; 0xc8
 80051d8:	fb01 2313 	mls	r3, r1, r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	b9db      	cbnz	r3, 8005218 <ui_handler+0x70>
 80051e0:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <ui_handler+0x13c>)
 80051e2:	68d3      	ldr	r3, [r2, #12]
 80051e4:	f083 0320 	eor.w	r3, r3, #32
 80051e8:	60d3      	str	r3, [r2, #12]
 80051ea:	e015      	b.n	8005218 <ui_handler+0x70>
	}
	else if(HC_status.ds18b20_amount == 0 || (HC_status.ntc_amount == 0))
 80051ec:	b113      	cbz	r3, 80051f4 <ui_handler+0x4c>
 80051ee:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <ui_handler+0x130>)
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	b98b      	cbnz	r3, 8005218 <ui_handler+0x70>
	{
		if(ms_counter % 500 == 0) LED_RED_GPIO_Port -> ODR ^= LED_RED_Pin;
 80051f4:	4b39      	ldr	r3, [pc, #228]	; (80052dc <ui_handler+0x134>)
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <ui_handler+0x140>)
 80051fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005206:	fb01 2313 	mls	r3, r1, r3, r2
 800520a:	b29b      	uxth	r3, r3
 800520c:	b923      	cbnz	r3, 8005218 <ui_handler+0x70>
 800520e:	4a35      	ldr	r2, [pc, #212]	; (80052e4 <ui_handler+0x13c>)
 8005210:	68d3      	ldr	r3, [r2, #12]
 8005212:	f083 0320 	eor.w	r3, r3, #32
 8005216:	60d3      	str	r3, [r2, #12]
	}

	// green led control

	if(HC_status.heating_status == HEATING_STATUS_RUN)
 8005218:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <ui_handler+0x130>)
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d014      	beq.n	800524a <ui_handler+0xa2>
		if((ms_counter/10)%20 == 0)
		{
			LED_GREEN_GPIO_Port->ODR ^=  LED_GREEN_Pin;
		}
	}
	else if(HC_status.heating_status == HEATING_STATUS_STOP)
 8005220:	bb63      	cbnz	r3, 800527c <ui_handler+0xd4>
	{
		if(ms_counter % 499 == 0)
 8005222:	4b2e      	ldr	r3, [pc, #184]	; (80052dc <ui_handler+0x134>)
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29a      	uxth	r2, r3
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <ui_handler+0x144>)
 800522a:	fba3 1302 	umull	r1, r3, r3, r2
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	f240 11f3 	movw	r1, #499	; 0x1f3
 8005234:	fb01 2313 	mls	r3, r1, r3, r2
 8005238:	b29b      	uxth	r3, r3
 800523a:	b9db      	cbnz	r3, 8005274 <ui_handler+0xcc>
		{
			LED_GREEN_GPIO_Port->BRR = LED_GREEN_Pin;
 800523c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005240:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	615a      	str	r2, [r3, #20]
 8005248:	e014      	b.n	8005274 <ui_handler+0xcc>
		if((ms_counter/10)%20 == 0)
 800524a:	4b24      	ldr	r3, [pc, #144]	; (80052dc <ui_handler+0x134>)
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <ui_handler+0x148>)
 8005252:	fba2 1303 	umull	r1, r3, r2, r3
 8005256:	08db      	lsrs	r3, r3, #3
 8005258:	fba2 1203 	umull	r1, r2, r2, r3
 800525c:	0912      	lsrs	r2, r2, #4
 800525e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005262:	0091      	lsls	r1, r2, #2
 8005264:	1a5b      	subs	r3, r3, r1
 8005266:	b29b      	uxth	r3, r3
 8005268:	b923      	cbnz	r3, 8005274 <ui_handler+0xcc>
			LED_GREEN_GPIO_Port->ODR ^=  LED_GREEN_Pin;
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <ui_handler+0x13c>)
 800526c:	68d3      	ldr	r3, [r2, #12]
 800526e:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8005272:	60d3      	str	r3, [r2, #12]
		}
	}

	// buzzer contorl

	ui_handler_flag = UI_HANDLER_FLAG_BUSY;
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <ui_handler+0x12c>)
 8005276:	2201      	movs	r2, #1
 8005278:	701a      	strb	r2, [r3, #0]
}
 800527a:	bd08      	pop	{r3, pc}
	else if(HC_status.heating_status == HEATING_STATUS_ENDING)
 800527c:	2b02      	cmp	r3, #2
 800527e:	d016      	beq.n	80052ae <ui_handler+0x106>
	else if(HC_status.heating_status == HEATING_STATUS_END)
 8005280:	2b03      	cmp	r3, #3
 8005282:	d1f7      	bne.n	8005274 <ui_handler+0xcc>
		if( ( ms_counter % 90 ) == 0)
 8005284:	4b15      	ldr	r3, [pc, #84]	; (80052dc <ui_handler+0x134>)
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29a      	uxth	r2, r3
 800528a:	0853      	lsrs	r3, r2, #1
 800528c:	4919      	ldr	r1, [pc, #100]	; (80052f4 <ui_handler+0x14c>)
 800528e:	fba1 1303 	umull	r1, r3, r1, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	215a      	movs	r1, #90	; 0x5a
 8005296:	fb01 2313 	mls	r3, r1, r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e9      	bne.n	8005274 <ui_handler+0xcc>
			LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 80052a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052a4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80052a8:	2240      	movs	r2, #64	; 0x40
 80052aa:	611a      	str	r2, [r3, #16]
 80052ac:	e7e2      	b.n	8005274 <ui_handler+0xcc>
		if( (ms_counter % 200) == 0 )
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <ui_handler+0x134>)
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <ui_handler+0x138>)
 80052b6:	fba3 1302 	umull	r1, r3, r3, r2
 80052ba:	099b      	lsrs	r3, r3, #6
 80052bc:	21c8      	movs	r1, #200	; 0xc8
 80052be:	fb01 2313 	mls	r3, r1, r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1d5      	bne.n	8005274 <ui_handler+0xcc>
			LED_GREEN_GPIO_Port->ODR ^= LED_GREEN_Pin;
 80052c8:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <ui_handler+0x13c>)
 80052ca:	68d3      	ldr	r3, [r2, #12]
 80052cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80052d0:	60d3      	str	r3, [r2, #12]
 80052d2:	e7cf      	b.n	8005274 <ui_handler+0xcc>
 80052d4:	200009a8 	.word	0x200009a8
 80052d8:	20000598 	.word	0x20000598
 80052dc:	20000778 	.word	0x20000778
 80052e0:	51eb851f 	.word	0x51eb851f
 80052e4:	40010800 	.word	0x40010800
 80052e8:	10624dd3 	.word	0x10624dd3
 80052ec:	20d56b39 	.word	0x20d56b39
 80052f0:	cccccccd 	.word	0xcccccccd
 80052f4:	b60b60b7 	.word	0xb60b60b7

080052f8 <ui_populate_with_rom_data>:


void ui_populate_with_rom_data(void)
{
 80052f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ns_set.name = "NEW SET.";
 80052fc:	4a6c      	ldr	r2, [pc, #432]	; (80054b0 <ui_populate_with_rom_data+0x1b8>)
 80052fe:	4b6d      	ldr	r3, [pc, #436]	; (80054b4 <ui_populate_with_rom_data+0x1bc>)
 8005300:	6013      	str	r3, [r2, #0]
	ns_set.next = &mem1_set;
 8005302:	486d      	ldr	r0, [pc, #436]	; (80054b8 <ui_populate_with_rom_data+0x1c0>)
 8005304:	6050      	str	r0, [r2, #4]
	ns_set.prev = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	6093      	str	r3, [r2, #8]
	ns_set.child = &ns_time;
 800530a:	4c6c      	ldr	r4, [pc, #432]	; (80054bc <ui_populate_with_rom_data+0x1c4>)
 800530c:	60d4      	str	r4, [r2, #12]
	ns_set.parent = NULL;
 800530e:	6113      	str	r3, [r2, #16]
	ns_set.menu_function = NULL;
 8005310:	6153      	str	r3, [r2, #20]

	ns_time.name = "SET TIME";
 8005312:	496b      	ldr	r1, [pc, #428]	; (80054c0 <ui_populate_with_rom_data+0x1c8>)
 8005314:	6021      	str	r1, [r4, #0]
	ns_time.next = &ns_temp;
 8005316:	496b      	ldr	r1, [pc, #428]	; (80054c4 <ui_populate_with_rom_data+0x1cc>)
 8005318:	6061      	str	r1, [r4, #4]
	ns_time.prev = NULL;
 800531a:	60a3      	str	r3, [r4, #8]
	ns_time.child = NULL;
 800531c:	60e3      	str	r3, [r4, #12]
	ns_time.parent = &ns_set;
 800531e:	6122      	str	r2, [r4, #16]
	ns_time.menu_function = ui_set_time_callback;
 8005320:	4d69      	ldr	r5, [pc, #420]	; (80054c8 <ui_populate_with_rom_data+0x1d0>)
 8005322:	6165      	str	r5, [r4, #20]
	ns_time.set_option = SET_OPTION_TIME;
 8005324:	f04f 0b01 	mov.w	fp, #1
 8005328:	f884 b018 	strb.w	fp, [r4, #24]

	ns_temp.name = "SET TEMP";
 800532c:	4d67      	ldr	r5, [pc, #412]	; (80054cc <ui_populate_with_rom_data+0x1d4>)
 800532e:	600d      	str	r5, [r1, #0]
	ns_temp.next = &ns_start;
 8005330:	4d67      	ldr	r5, [pc, #412]	; (80054d0 <ui_populate_with_rom_data+0x1d8>)
 8005332:	604d      	str	r5, [r1, #4]
	ns_temp.prev = &ns_time;
 8005334:	608c      	str	r4, [r1, #8]
	ns_temp.child = NULL;
 8005336:	60cb      	str	r3, [r1, #12]
	ns_temp.parent = &ns_set;
 8005338:	610a      	str	r2, [r1, #16]
	ns_temp.menu_function = ui_set_temp_callback;
 800533a:	4c66      	ldr	r4, [pc, #408]	; (80054d4 <ui_populate_with_rom_data+0x1dc>)
 800533c:	614c      	str	r4, [r1, #20]
	ns_temp.set_option = SET_OPTION_TEMP;
 800533e:	f04f 0a02 	mov.w	sl, #2
 8005342:	f881 a018 	strb.w	sl, [r1, #24]

	ns_start.name = "START";
 8005346:	4c64      	ldr	r4, [pc, #400]	; (80054d8 <ui_populate_with_rom_data+0x1e0>)
 8005348:	602c      	str	r4, [r5, #0]
	ns_start.next = NULL;
 800534a:	606b      	str	r3, [r5, #4]
	ns_start.prev = &ns_temp;
 800534c:	60a9      	str	r1, [r5, #8]
	ns_start.child = NULL;
 800534e:	60eb      	str	r3, [r5, #12]
	ns_start.parent = &ns_set;
 8005350:	612a      	str	r2, [r5, #16]
	ns_start.menu_function = NULL;
 8005352:	616b      	str	r3, [r5, #20]
	ns_start.set_option = 0;
 8005354:	762b      	strb	r3, [r5, #24]

	mem1_set.name = "MEM1 SET";
 8005356:	4961      	ldr	r1, [pc, #388]	; (80054dc <ui_populate_with_rom_data+0x1e4>)
 8005358:	6001      	str	r1, [r0, #0]
	mem1_set.next = &mem2_set;
 800535a:	4961      	ldr	r1, [pc, #388]	; (80054e0 <ui_populate_with_rom_data+0x1e8>)
 800535c:	6041      	str	r1, [r0, #4]
	mem1_set.prev = &ns_set;
 800535e:	6082      	str	r2, [r0, #8]
	mem1_set.child = &mem1_time;
 8005360:	4e60      	ldr	r6, [pc, #384]	; (80054e4 <ui_populate_with_rom_data+0x1ec>)
 8005362:	60c6      	str	r6, [r0, #12]
	mem1_set.parent = NULL;
 8005364:	6103      	str	r3, [r0, #16]

	mem1_time.name = "MEM1 TIME";
 8005366:	4a60      	ldr	r2, [pc, #384]	; (80054e8 <ui_populate_with_rom_data+0x1f0>)
 8005368:	6032      	str	r2, [r6, #0]
	mem1_time.next = &mem1_temp;
 800536a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8005530 <ui_populate_with_rom_data+0x238>
 800536e:	f8c6 9004 	str.w	r9, [r6, #4]
	mem1_time.prev = NULL;
 8005372:	60b3      	str	r3, [r6, #8]
	mem1_time.child = NULL;
 8005374:	60f3      	str	r3, [r6, #12]
	mem1_time.parent = &mem1_set;
 8005376:	6130      	str	r0, [r6, #16]
	mem1_time.menu_function = NULL;
 8005378:	6173      	str	r3, [r6, #20]
	mem1_time.set_option = SET_OPTION_TIME;
 800537a:	f886 b018 	strb.w	fp, [r6, #24]

	mem1_temp.name = "MEM1 TEMP";
 800537e:	4a5b      	ldr	r2, [pc, #364]	; (80054ec <ui_populate_with_rom_data+0x1f4>)
 8005380:	f8c9 2000 	str.w	r2, [r9]
	mem1_temp.next = &mem1_start;
 8005384:	4a5a      	ldr	r2, [pc, #360]	; (80054f0 <ui_populate_with_rom_data+0x1f8>)
 8005386:	f8c9 2004 	str.w	r2, [r9, #4]
	mem1_temp.prev = &mem1_time;
 800538a:	f8c9 6008 	str.w	r6, [r9, #8]
	mem1_temp.child = NULL;
 800538e:	f8c9 300c 	str.w	r3, [r9, #12]
	mem1_temp.parent = &mem1_set;
 8005392:	f8c9 0010 	str.w	r0, [r9, #16]
	mem1_temp.menu_function = NULL;
 8005396:	f8c9 3014 	str.w	r3, [r9, #20]
	mem1_temp.set_option = SET_OPTION_TEMP;
 800539a:	f889 a018 	strb.w	sl, [r9, #24]

	mem1_start.name = "MEM1 START";
 800539e:	4c55      	ldr	r4, [pc, #340]	; (80054f4 <ui_populate_with_rom_data+0x1fc>)
 80053a0:	6014      	str	r4, [r2, #0]
	mem1_start.next = NULL;
 80053a2:	6053      	str	r3, [r2, #4]
	mem1_start.prev = &mem1_temp;
 80053a4:	f8c2 9008 	str.w	r9, [r2, #8]
	mem1_start.child = NULL;
 80053a8:	60d3      	str	r3, [r2, #12]
	mem1_start.parent = &mem1_set;
 80053aa:	6110      	str	r0, [r2, #16]
	mem1_start.menu_function = NULL;
 80053ac:	6153      	str	r3, [r2, #20]
	mem1_start.set_option = 0;
 80053ae:	7613      	strb	r3, [r2, #24]

	mem2_set.name = "MEM2 SET";
 80053b0:	4a51      	ldr	r2, [pc, #324]	; (80054f8 <ui_populate_with_rom_data+0x200>)
 80053b2:	600a      	str	r2, [r1, #0]
	mem2_set.next = &mem3_set;
 80053b4:	4a51      	ldr	r2, [pc, #324]	; (80054fc <ui_populate_with_rom_data+0x204>)
 80053b6:	604a      	str	r2, [r1, #4]
	mem2_set.prev = &mem1_set;
 80053b8:	6088      	str	r0, [r1, #8]
	mem2_set.child = &mem2_time;
 80053ba:	4d51      	ldr	r5, [pc, #324]	; (8005500 <ui_populate_with_rom_data+0x208>)
 80053bc:	60cd      	str	r5, [r1, #12]
	mem2_set.parent = NULL;
 80053be:	610b      	str	r3, [r1, #16]

	mem2_time.name = "MEM2 TIME";
 80053c0:	4850      	ldr	r0, [pc, #320]	; (8005504 <ui_populate_with_rom_data+0x20c>)
 80053c2:	6028      	str	r0, [r5, #0]
	mem2_time.next = &mem2_temp;
 80053c4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8005534 <ui_populate_with_rom_data+0x23c>
 80053c8:	f8c5 8004 	str.w	r8, [r5, #4]
	mem2_time.prev = NULL;
 80053cc:	60ab      	str	r3, [r5, #8]
	mem2_time.child = NULL;
 80053ce:	60eb      	str	r3, [r5, #12]
	mem2_time.parent = &mem2_set;
 80053d0:	6129      	str	r1, [r5, #16]
	mem2_time.menu_function = NULL;
 80053d2:	616b      	str	r3, [r5, #20]
	mem2_time.set_option = SET_OPTION_TIME;
 80053d4:	f885 b018 	strb.w	fp, [r5, #24]

	mem2_temp.name = "MEM2 TEMP";
 80053d8:	484b      	ldr	r0, [pc, #300]	; (8005508 <ui_populate_with_rom_data+0x210>)
 80053da:	f8c8 0000 	str.w	r0, [r8]
	mem2_temp.next = &mem2_start;
 80053de:	484b      	ldr	r0, [pc, #300]	; (800550c <ui_populate_with_rom_data+0x214>)
 80053e0:	f8c8 0004 	str.w	r0, [r8, #4]
	mem2_temp.prev = &mem2_time;
 80053e4:	f8c8 5008 	str.w	r5, [r8, #8]
	mem2_temp.child = NULL;
 80053e8:	f8c8 300c 	str.w	r3, [r8, #12]
	mem2_temp.parent = &mem2_set;
 80053ec:	f8c8 1010 	str.w	r1, [r8, #16]
	mem2_temp.menu_function = NULL;
 80053f0:	f8c8 3014 	str.w	r3, [r8, #20]
	mem2_temp.set_option = SET_OPTION_TEMP;
 80053f4:	f888 a018 	strb.w	sl, [r8, #24]

	mem2_start.name = "MEM2 START";
 80053f8:	4c45      	ldr	r4, [pc, #276]	; (8005510 <ui_populate_with_rom_data+0x218>)
 80053fa:	6004      	str	r4, [r0, #0]
	mem2_start.next = NULL;
 80053fc:	6043      	str	r3, [r0, #4]
	mem2_start.prev = &mem2_temp;
 80053fe:	f8c0 8008 	str.w	r8, [r0, #8]
	mem2_start.child = NULL;
 8005402:	60c3      	str	r3, [r0, #12]
	mem2_start.parent = &mem2_set;
 8005404:	6101      	str	r1, [r0, #16]
	mem2_start.menu_function = NULL;
 8005406:	6143      	str	r3, [r0, #20]
	mem2_start.set_option = 0;
 8005408:	7603      	strb	r3, [r0, #24]

	mem3_set.name = "MEM3 SET";
 800540a:	4842      	ldr	r0, [pc, #264]	; (8005514 <ui_populate_with_rom_data+0x21c>)
 800540c:	6010      	str	r0, [r2, #0]
	mem3_set.next = NULL;
 800540e:	6053      	str	r3, [r2, #4]
	mem3_set.prev = &mem2_set;
 8005410:	6091      	str	r1, [r2, #8]
	mem3_set.child = &mem3_time;
 8005412:	4c41      	ldr	r4, [pc, #260]	; (8005518 <ui_populate_with_rom_data+0x220>)
 8005414:	60d4      	str	r4, [r2, #12]
	mem3_set.parent = NULL;
 8005416:	6113      	str	r3, [r2, #16]
	mem3_set.menu_function = NULL;
 8005418:	6153      	str	r3, [r2, #20]

	mem3_time.name = "MEM3 TIME";
 800541a:	4940      	ldr	r1, [pc, #256]	; (800551c <ui_populate_with_rom_data+0x224>)
 800541c:	6021      	str	r1, [r4, #0]
	mem3_time.next = &mem3_temp;
 800541e:	4f40      	ldr	r7, [pc, #256]	; (8005520 <ui_populate_with_rom_data+0x228>)
 8005420:	6067      	str	r7, [r4, #4]
	mem3_time.prev = NULL;
 8005422:	60a3      	str	r3, [r4, #8]
	mem3_time.child = NULL;
 8005424:	60e3      	str	r3, [r4, #12]
	mem3_time.parent = &mem3_set;
 8005426:	6122      	str	r2, [r4, #16]
	mem3_time.menu_function = NULL;
 8005428:	6163      	str	r3, [r4, #20]
	mem3_time.set_option = SET_OPTION_TIME;
 800542a:	f884 b018 	strb.w	fp, [r4, #24]

	mem3_temp.name = "MEM3 TEMP";
 800542e:	493d      	ldr	r1, [pc, #244]	; (8005524 <ui_populate_with_rom_data+0x22c>)
 8005430:	6039      	str	r1, [r7, #0]
	mem3_temp.next = &mem3_start;
 8005432:	493d      	ldr	r1, [pc, #244]	; (8005528 <ui_populate_with_rom_data+0x230>)
 8005434:	6079      	str	r1, [r7, #4]
	mem3_temp.prev = &mem3_time;
 8005436:	60bc      	str	r4, [r7, #8]
	mem3_temp.child = NULL;
 8005438:	60fb      	str	r3, [r7, #12]
	mem3_temp.parent = &mem3_set;
 800543a:	613a      	str	r2, [r7, #16]
	mem3_temp.menu_function = NULL;
 800543c:	617b      	str	r3, [r7, #20]
	mem3_temp.set_option = SET_OPTION_TEMP;
 800543e:	f887 a018 	strb.w	sl, [r7, #24]

	mem3_start.name = "MEM3 START";
 8005442:	483a      	ldr	r0, [pc, #232]	; (800552c <ui_populate_with_rom_data+0x234>)
 8005444:	6008      	str	r0, [r1, #0]
	mem3_start.next = NULL;
 8005446:	604b      	str	r3, [r1, #4]
	mem3_start.prev = &mem3_temp;
 8005448:	608f      	str	r7, [r1, #8]
	mem3_start.child = NULL;
 800544a:	60cb      	str	r3, [r1, #12]
	mem3_start.parent = &mem3_set;
 800544c:	610a      	str	r2, [r1, #16]
	mem3_start.menu_function = NULL;
 800544e:	614b      	str	r3, [r1, #20]
	mem3_start.set_option = 0;
 8005450:	760b      	strb	r3, [r1, #24]
//	menu_t memory3_settings_time= {"MEM3 TIME", &memory3_settings_temp, NULL, NULL, &memory3_settings , ui_set_time_callback,SET_OPTION_TIME,0,0,0};
//	menu_t memory3_settings_temp= {"MEM3 TEMP", &memory3_settings_start, &memory3_settings_time, NULL, &memory3_settings , ui_set_temp_callback,SET_OPTION_TEMP,0,0,0};
//	menu_t memory3_settings_start= {"MEM3 START", NULL, &memory3_settings_temp, NULL, &memory3_settings , NULL,0,0,0,0};


	mem1_time.hours = rom_get_time_hours(1);
 8005452:	4658      	mov	r0, fp
 8005454:	f7fe fa7e 	bl	8003954 <rom_get_time_hours>
 8005458:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
	mem1_time.minutes = rom_get_time_minutes(1);
 800545c:	4658      	mov	r0, fp
 800545e:	f7fe fa9d 	bl	800399c <rom_get_time_minutes>
 8005462:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
	mem2_time.hours = rom_get_time_hours(2);
 8005466:	4650      	mov	r0, sl
 8005468:	f7fe fa74 	bl	8003954 <rom_get_time_hours>
 800546c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
	mem2_time.minutes = rom_get_time_minutes(2);
 8005470:	4650      	mov	r0, sl
 8005472:	f7fe fa93 	bl	800399c <rom_get_time_minutes>
 8005476:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
	mem3_time.hours = rom_get_time_hours(3);
 800547a:	2003      	movs	r0, #3
 800547c:	f7fe fa6a 	bl	8003954 <rom_get_time_hours>
 8005480:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	mem3_time.minutes = rom_get_time_minutes(3);
 8005484:	2003      	movs	r0, #3
 8005486:	f7fe fa89 	bl	800399c <rom_get_time_minutes>
 800548a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	mem1_temp.temp = rom_get_temp(1);
 800548e:	4658      	mov	r0, fp
 8005490:	f7fe fa34 	bl	80038fc <rom_get_temp>
 8005494:	e9c9 0108 	strd	r0, r1, [r9, #32]
	mem2_temp.temp = rom_get_temp(2);
 8005498:	4650      	mov	r0, sl
 800549a:	f7fe fa2f 	bl	80038fc <rom_get_temp>
 800549e:	e9c8 0108 	strd	r0, r1, [r8, #32]
	mem3_temp.temp = rom_get_temp(3);
 80054a2:	2003      	movs	r0, #3
 80054a4:	f7fe fa2a 	bl	80038fc <rom_get_temp>
 80054a8:	e9c7 0108 	strd	r0, r1, [r7, #32]



}
 80054ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	200005a0 	.word	0x200005a0
 80054b4:	08005e1c 	.word	0x08005e1c
 80054b8:	200008e8 	.word	0x200008e8
 80054bc:	20000918 	.word	0x20000918
 80054c0:	08005e28 	.word	0x08005e28
 80054c4:	20000818 	.word	0x20000818
 80054c8:	08004b25 	.word	0x08004b25
 80054cc:	08005e34 	.word	0x08005e34
 80054d0:	20000848 	.word	0x20000848
 80054d4:	08004b39 	.word	0x08004b39
 80054d8:	08005e40 	.word	0x08005e40
 80054dc:	08005e48 	.word	0x08005e48
 80054e0:	20000780 	.word	0x20000780
 80054e4:	20000748 	.word	0x20000748
 80054e8:	08005e54 	.word	0x08005e54
 80054ec:	08005e60 	.word	0x08005e60
 80054f0:	200007e8 	.word	0x200007e8
 80054f4:	08005e6c 	.word	0x08005e6c
 80054f8:	08005e78 	.word	0x08005e78
 80054fc:	20000878 	.word	0x20000878
 8005500:	20000a10 	.word	0x20000a10
 8005504:	08005e84 	.word	0x08005e84
 8005508:	08005e90 	.word	0x08005e90
 800550c:	20000978 	.word	0x20000978
 8005510:	08005e9c 	.word	0x08005e9c
 8005514:	08005ea8 	.word	0x08005ea8
 8005518:	20000610 	.word	0x20000610
 800551c:	08005eb4 	.word	0x08005eb4
 8005520:	20000948 	.word	0x20000948
 8005524:	08005ec0 	.word	0x08005ec0
 8005528:	200006f0 	.word	0x200006f0
 800552c:	08005ecc 	.word	0x08005ecc
 8005530:	200009e0 	.word	0x200009e0
 8005534:	200009b0 	.word	0x200009b0

08005538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800553c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553e:	2400      	movs	r4, #0
 8005540:	9404      	str	r4, [sp, #16]
 8005542:	9405      	str	r4, [sp, #20]
 8005544:	9406      	str	r4, [sp, #24]
 8005546:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005548:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <MX_GPIO_Init+0x10c>)
 800554a:	699a      	ldr	r2, [r3, #24]
 800554c:	f042 0210 	orr.w	r2, r2, #16
 8005550:	619a      	str	r2, [r3, #24]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	f002 0210 	and.w	r2, r2, #16
 8005558:	9200      	str	r2, [sp, #0]
 800555a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	f042 0220 	orr.w	r2, r2, #32
 8005562:	619a      	str	r2, [r3, #24]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	f002 0220 	and.w	r2, r2, #32
 800556a:	9201      	str	r2, [sp, #4]
 800556c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	f042 0204 	orr.w	r2, r2, #4
 8005574:	619a      	str	r2, [r3, #24]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	f002 0204 	and.w	r2, r2, #4
 800557c:	9202      	str	r2, [sp, #8]
 800557e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	9303      	str	r3, [sp, #12]
 8005590:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 8005592:	4e2d      	ldr	r6, [pc, #180]	; (8005648 <MX_GPIO_Init+0x110>)
 8005594:	4622      	mov	r2, r4
 8005596:	f248 7178 	movw	r1, #34680	; 0x8778
 800559a:	4630      	mov	r0, r6
 800559c:	f7fc fb1c 	bl	8001bd8 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 80055a0:	4d2a      	ldr	r5, [pc, #168]	; (800564c <MX_GPIO_Init+0x114>)
 80055a2:	4622      	mov	r2, r4
 80055a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80055a8:	4628      	mov	r0, r5
 80055aa:	f7fc fb15 	bl	8001bd8 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_EXIT_Pin BUTTON_OK_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_EXIT_Pin|BUTTON_OK_Pin;
 80055ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80055b2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80055b4:	4f26      	ldr	r7, [pc, #152]	; (8005650 <MX_GPIO_Init+0x118>)
 80055b6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055ba:	a904      	add	r1, sp, #16
 80055bc:	4825      	ldr	r0, [pc, #148]	; (8005654 <MX_GPIO_Init+0x11c>)
 80055be:	f7fc fa1f 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONE_WIRE_DATA1_Pin ONE_WIRE_DATA2_Pin LED_RED_Pin LED_GREEN_Pin 
                           BUZZER_Pin FAN_CTRL_Pin HEATER_CTRL_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 80055c2:	f248 7378 	movw	r3, #34680	; 0x8778
 80055c6:	9304      	str	r3, [sp, #16]
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055c8:	f04f 0901 	mov.w	r9, #1
 80055cc:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d2:	f04f 0802 	mov.w	r8, #2
 80055d6:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055da:	a904      	add	r1, sp, #16
 80055dc:	4630      	mov	r0, r6
 80055de:	f7fc fa0f 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <MX_GPIO_Init+0x120>)
 80055e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 80055ec:	a904      	add	r1, sp, #16
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7fc fa06 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D1B2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin 
                           LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 80055f4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80055f8:	9304      	str	r3, [sp, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fa:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005600:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005604:	a904      	add	r1, sp, #16
 8005606:	4628      	mov	r0, r5
 8005608:	f7fc f9fa 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 800560c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005610:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005612:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 8005616:	a904      	add	r1, sp, #16
 8005618:	4628      	mov	r0, r5
 800561a:	f7fc f9f1 	bl	8001a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800561e:	4622      	mov	r2, r4
 8005620:	4621      	mov	r1, r4
 8005622:	2017      	movs	r0, #23
 8005624:	f7fb ff66 	bl	80014f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005628:	2017      	movs	r0, #23
 800562a:	f7fb ff97 	bl	800155c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800562e:	4622      	mov	r2, r4
 8005630:	4621      	mov	r1, r4
 8005632:	2028      	movs	r0, #40	; 0x28
 8005634:	f7fb ff5e 	bl	80014f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005638:	2028      	movs	r0, #40	; 0x28
 800563a:	f7fb ff8f 	bl	800155c <HAL_NVIC_EnableIRQ>

}
 800563e:	b009      	add	sp, #36	; 0x24
 8005640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005644:	40021000 	.word	0x40021000
 8005648:	40010800 	.word	0x40010800
 800564c:	40010c00 	.word	0x40010c00
 8005650:	10210000 	.word	0x10210000
 8005654:	40011000 	.word	0x40011000
 8005658:	10310000 	.word	0x10310000

0800565c <MX_ADC1_Init>:
{
 800565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005660:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8005662:	2600      	movs	r6, #0
 8005664:	9601      	str	r6, [sp, #4]
 8005666:	9602      	str	r6, [sp, #8]
 8005668:	9603      	str	r6, [sp, #12]
  hadc1.Instance = ADC1;
 800566a:	4c2f      	ldr	r4, [pc, #188]	; (8005728 <MX_ADC1_Init+0xcc>)
 800566c:	4b2f      	ldr	r3, [pc, #188]	; (800572c <MX_ADC1_Init+0xd0>)
 800566e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005670:	f44f 7880 	mov.w	r8, #256	; 0x100
 8005674:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005678:	2501      	movs	r5, #1
 800567a:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800567c:	7526      	strb	r6, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800567e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8005682:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005684:	6066      	str	r6, [r4, #4]
  hadc1.Init.NbrOfConversion = 4;
 8005686:	2704      	movs	r7, #4
 8005688:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800568a:	4620      	mov	r0, r4
 800568c:	f7fb fe20 	bl	80012d0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8005690:	9601      	str	r6, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005692:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005694:	2307      	movs	r3, #7
 8005696:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005698:	eb0d 0107 	add.w	r1, sp, r7
 800569c:	4620      	mov	r0, r4
 800569e:	f7fb fc7d 	bl	8000f9c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 80056a2:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80056a4:	2502      	movs	r5, #2
 80056a6:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056a8:	eb0d 0107 	add.w	r1, sp, r7
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7fb fc75 	bl	8000f9c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 80056b2:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80056b4:	2303      	movs	r3, #3
 80056b6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056b8:	eb0d 0107 	add.w	r1, sp, r7
 80056bc:	4620      	mov	r0, r4
 80056be:	f7fb fc6d 	bl	8000f9c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80056c2:	2310      	movs	r3, #16
 80056c4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80056c6:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056c8:	eb0d 0107 	add.w	r1, sp, r7
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7fb fc65 	bl	8000f9c <HAL_ADC_ConfigChannel>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80056d2:	4b17      	ldr	r3, [pc, #92]	; (8005730 <MX_ADC1_Init+0xd4>)
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	615a      	str	r2, [r3, #20]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	9b00      	ldr	r3, [sp, #0]
  hdma1.Instance = DMA1_Channel1;
 80056e6:	4d13      	ldr	r5, [pc, #76]	; (8005734 <MX_ADC1_Init+0xd8>)
 80056e8:	4b13      	ldr	r3, [pc, #76]	; (8005738 <MX_ADC1_Init+0xdc>)
 80056ea:	602b      	str	r3, [r5, #0]
  hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ec:	606e      	str	r6, [r5, #4]
  hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ee:	60ae      	str	r6, [r5, #8]
  hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	60eb      	str	r3, [r5, #12]
  hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80056f4:	f8c5 8010 	str.w	r8, [r5, #16]
  hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80056f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056fc:	616b      	str	r3, [r5, #20]
  hdma1.Init.Mode = DMA_CIRCULAR;
 80056fe:	2320      	movs	r3, #32
 8005700:	61ab      	str	r3, [r5, #24]
  hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 8005702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005706:	61eb      	str	r3, [r5, #28]
  HAL_ADCEx_Calibration_Start(&hadc1);
 8005708:	4620      	mov	r0, r4
 800570a:	f7fb fe69 	bl	80013e0 <HAL_ADCEx_Calibration_Start>
  HAL_DMA_Init(&hdma1);
 800570e:	4628      	mov	r0, r5
 8005710:	f7fb ff5e 	bl	80015d0 <HAL_DMA_Init>
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 8005714:	6225      	str	r5, [r4, #32]
 8005716:	626c      	str	r4, [r5, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, ADC_CHANNELS);
 8005718:	463a      	mov	r2, r7
 800571a:	4908      	ldr	r1, [pc, #32]	; (800573c <MX_ADC1_Init+0xe0>)
 800571c:	4620      	mov	r0, r4
 800571e:	f7fb fd19 	bl	8001154 <HAL_ADC_Start_DMA>
}
 8005722:	b004      	add	sp, #16
 8005724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005728:	200007b8 	.word	0x200007b8
 800572c:	40012400 	.word	0x40012400
 8005730:	40021000 	.word	0x40021000
 8005734:	200006a8 	.word	0x200006a8
 8005738:	40020008 	.word	0x40020008
 800573c:	200007b0 	.word	0x200007b0

08005740 <MX_TIM1_Init>:
{
 8005740:	b530      	push	{r4, r5, lr}
 8005742:	b097      	sub	sp, #92	; 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005744:	2400      	movs	r4, #0
 8005746:	9412      	str	r4, [sp, #72]	; 0x48
 8005748:	9413      	str	r4, [sp, #76]	; 0x4c
 800574a:	9414      	str	r4, [sp, #80]	; 0x50
 800574c:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800574e:	9410      	str	r4, [sp, #64]	; 0x40
 8005750:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005752:	9409      	str	r4, [sp, #36]	; 0x24
 8005754:	940a      	str	r4, [sp, #40]	; 0x28
 8005756:	940b      	str	r4, [sp, #44]	; 0x2c
 8005758:	940c      	str	r4, [sp, #48]	; 0x30
 800575a:	940d      	str	r4, [sp, #52]	; 0x34
 800575c:	940e      	str	r4, [sp, #56]	; 0x38
 800575e:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005760:	2220      	movs	r2, #32
 8005762:	4621      	mov	r1, r4
 8005764:	a801      	add	r0, sp, #4
 8005766:	f000 fab5 	bl	8005cd4 <memset>
  htim1.Instance = TIM1;
 800576a:	4d21      	ldr	r5, [pc, #132]	; (80057f0 <MX_TIM1_Init+0xb0>)
 800576c:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <MX_TIM1_Init+0xb4>)
 800576e:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 71;
 8005770:	2347      	movs	r3, #71	; 0x47
 8005772:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005774:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 9800;
 8005776:	f242 6348 	movw	r3, #9800	; 0x2648
 800577a:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800577c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800577e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005780:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005782:	4628      	mov	r0, r5
 8005784:	f7fd f836 	bl	80027f4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800578c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800578e:	a912      	add	r1, sp, #72	; 0x48
 8005790:	4628      	mov	r0, r5
 8005792:	f7fd f8f1 	bl	8002978 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005796:	4628      	mov	r0, r5
 8005798:	f7fd f845 	bl	8002826 <HAL_TIM_OC_Init>
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800579c:	2108      	movs	r1, #8
 800579e:	4628      	mov	r0, r5
 80057a0:	f7fd f85a 	bl	8002858 <HAL_TIM_OnePulse_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057a4:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057a6:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057a8:	a910      	add	r1, sp, #64	; 0x40
 80057aa:	4628      	mov	r0, r5
 80057ac:	f7fd f951 	bl	8002a52 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80057b0:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80057b2:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057b4:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80057b6:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057b8:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057ba:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057bc:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057be:	4622      	mov	r2, r4
 80057c0:	a909      	add	r1, sp, #36	; 0x24
 80057c2:	4628      	mov	r0, r5
 80057c4:	f7fd f89e 	bl	8002904 <HAL_TIM_OC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80057c8:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80057ca:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80057cc:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80057ce:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80057d0:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80057d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057d6:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80057d8:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80057da:	a901      	add	r1, sp, #4
 80057dc:	4628      	mov	r0, r5
 80057de:	f7fd f95b 	bl	8002a98 <HAL_TIMEx_ConfigBreakDeadTime>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80057e2:	2204      	movs	r2, #4
 80057e4:	a909      	add	r1, sp, #36	; 0x24
 80057e6:	4628      	mov	r0, r5
 80057e8:	f7fd f88c 	bl	8002904 <HAL_TIM_OC_ConfigChannel>
}
 80057ec:	b017      	add	sp, #92	; 0x5c
 80057ee:	bd30      	pop	{r4, r5, pc}
 80057f0:	200008a8 	.word	0x200008a8
 80057f4:	40012c00 	.word	0x40012c00

080057f8 <MX_USART3_UART_Init>:
{
 80057f8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80057fa:	4808      	ldr	r0, [pc, #32]	; (800581c <MX_USART3_UART_Init+0x24>)
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <MX_USART3_UART_Init+0x28>)
 80057fe:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8005800:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005804:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005806:	2300      	movs	r3, #0
 8005808:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800580a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800580c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800580e:	220c      	movs	r2, #12
 8005810:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005812:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005814:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005816:	f7fd fa13 	bl	8002c40 <HAL_UART_Init>
}
 800581a:	bd08      	pop	{r3, pc}
 800581c:	200005d0 	.word	0x200005d0
 8005820:	40004800 	.word	0x40004800

08005824 <SystemClock_Config>:
{
 8005824:	b530      	push	{r4, r5, lr}
 8005826:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005828:	2400      	movs	r4, #0
 800582a:	940c      	str	r4, [sp, #48]	; 0x30
 800582c:	940d      	str	r4, [sp, #52]	; 0x34
 800582e:	940f      	str	r4, [sp, #60]	; 0x3c
 8005830:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005832:	9405      	str	r4, [sp, #20]
 8005834:	9406      	str	r4, [sp, #24]
 8005836:	9407      	str	r4, [sp, #28]
 8005838:	9408      	str	r4, [sp, #32]
 800583a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800583c:	9401      	str	r4, [sp, #4]
 800583e:	9402      	str	r4, [sp, #8]
 8005840:	9403      	str	r4, [sp, #12]
 8005842:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005844:	2201      	movs	r2, #1
 8005846:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800584c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800584e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005850:	2502      	movs	r5, #2
 8005852:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005854:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005856:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800585a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800585c:	a80a      	add	r0, sp, #40	; 0x28
 800585e:	f7fc f9e7 	bl	8001c30 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005862:	230f      	movs	r3, #15
 8005864:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005866:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005868:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800586a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005870:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005872:	4629      	mov	r1, r5
 8005874:	a805      	add	r0, sp, #20
 8005876:	f7fc fc1b 	bl	80020b0 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800587a:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800587c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005880:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005882:	a801      	add	r0, sp, #4
 8005884:	f7fc fcee 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
}
 8005888:	b015      	add	sp, #84	; 0x54
 800588a:	bd30      	pop	{r4, r5, pc}

0800588c <main>:
{
 800588c:	b508      	push	{r3, lr}
  HAL_Init();
 800588e:	f7fb fa9b 	bl	8000dc8 <HAL_Init>
  SystemClock_Config();
 8005892:	f7ff ffc7 	bl	8005824 <SystemClock_Config>
  MX_GPIO_Init();
 8005896:	f7ff fe4f 	bl	8005538 <MX_GPIO_Init>
  MX_ADC1_Init();
 800589a:	f7ff fedf 	bl	800565c <MX_ADC1_Init>
  MX_TIM1_Init();
 800589e:	f7ff ff4f 	bl	8005740 <MX_TIM1_Init>
  simple_delay_ms(500);
 80058a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058a6:	f7fd fb15 	bl	8002ed4 <simple_delay_ms>
  MX_USART3_UART_Init();
 80058aa:	f7ff ffa5 	bl	80057f8 <MX_USART3_UART_Init>
  LCD_Initalize();
 80058ae:	f7fe f95d 	bl	8003b6c <LCD_Initalize>
  HAL_FLASH_Unlock();
 80058b2:	f7fb ff91 	bl	80017d8 <HAL_FLASH_Unlock>
  if( EE_Init() != HAL_OK) Error_Handler();
 80058b6:	f7fd fe25 	bl	8003504 <EE_Init>
  ds18b20_initalize();
 80058ba:	f7fd fced 	bl	8003298 <ds18b20_initalize>
  ntc_init();
 80058be:	f7fe fedb 	bl	8004678 <ntc_init>
  rom_value_init();
 80058c2:	f7fd ffc5 	bl	8003850 <rom_value_init>
  ui_populate_with_rom_data();
 80058c6:	f7ff fd17 	bl	80052f8 <ui_populate_with_rom_data>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1| TIM_IT_CC2);
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <main+0x74>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68d3      	ldr	r3, [r2, #12]
 80058d0:	f043 0306 	orr.w	r3, r3, #6
 80058d4:	60d3      	str	r3, [r2, #12]
  PID_manual_settings();
 80058d6:	f7fe ff6f 	bl	80047b8 <PID_manual_settings>
	  lcd_circle_bufer_refresh();
 80058da:	f7fe f9e7 	bl	8003cac <lcd_circle_bufer_refresh>
	  ui_handler();
 80058de:	f7ff fc63 	bl	80051a8 <ui_handler>
	  ntc_handler(500, 0);
 80058e2:	2100      	movs	r1, #0
 80058e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058e8:	f7fe fe8c 	bl	8004604 <ntc_handler>
	  PID_control_handler(600);
 80058ec:	f44f 7016 	mov.w	r0, #600	; 0x258
 80058f0:	f7fe ffb8 	bl	8004864 <PID_control_handler>
	  servis_uart_send_ntc(720, 0);
 80058f4:	2100      	movs	r1, #0
 80058f6:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 80058fa:	f7ff f81f 	bl	800493c <servis_uart_send_ntc>
 80058fe:	e7ec      	b.n	80058da <main+0x4e>
 8005900:	200008a8 	.word	0x200008a8

08005904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005904:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005906:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <HAL_MspInit+0x3c>)
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	619a      	str	r2, [r3, #24]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	f002 0201 	and.w	r2, r2, #1
 8005916:	9200      	str	r2, [sp, #0]
 8005918:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005920:	61da      	str	r2, [r3, #28]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800592c:	4a05      	ldr	r2, [pc, #20]	; (8005944 <HAL_MspInit+0x40>)
 800592e:	6853      	ldr	r3, [r2, #4]
 8005930:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005938:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800593a:	b002      	add	sp, #8
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40021000 	.word	0x40021000
 8005944:	40010000 	.word	0x40010000

08005948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005948:	b500      	push	{lr}
 800594a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800594c:	2300      	movs	r3, #0
 800594e:	9302      	str	r3, [sp, #8]
 8005950:	9303      	str	r3, [sp, #12]
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8005956:	6802      	ldr	r2, [r0, #0]
 8005958:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <HAL_ADC_MspInit+0x68>)
 800595a:	429a      	cmp	r2, r3
 800595c:	d002      	beq.n	8005964 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800595e:	b007      	add	sp, #28
 8005960:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005964:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	619a      	str	r2, [r3, #24]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005976:	9200      	str	r2, [sp, #0]
 8005978:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	f042 0204 	orr.w	r2, r2, #4
 8005980:	619a      	str	r2, [r3, #24]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800598c:	2307      	movs	r3, #7
 800598e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005990:	2303      	movs	r3, #3
 8005992:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005994:	a902      	add	r1, sp, #8
 8005996:	4807      	ldr	r0, [pc, #28]	; (80059b4 <HAL_ADC_MspInit+0x6c>)
 8005998:	f7fc f832 	bl	8001a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800599c:	2200      	movs	r2, #0
 800599e:	4611      	mov	r1, r2
 80059a0:	2012      	movs	r0, #18
 80059a2:	f7fb fda7 	bl	80014f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80059a6:	2012      	movs	r0, #18
 80059a8:	f7fb fdd8 	bl	800155c <HAL_NVIC_EnableIRQ>
}
 80059ac:	e7d7      	b.n	800595e <HAL_ADC_MspInit+0x16>
 80059ae:	bf00      	nop
 80059b0:	40012400 	.word	0x40012400
 80059b4:	40010800 	.word	0x40010800

080059b8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80059b8:	6802      	ldr	r2, [r0, #0]
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <HAL_TIM_Base_MspInit+0x4c>)
 80059bc:	429a      	cmp	r2, r3
 80059be:	d000      	beq.n	80059c2 <HAL_TIM_Base_MspInit+0xa>
 80059c0:	4770      	bx	lr
{
 80059c2:	b500      	push	{lr}
 80059c4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80059c6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d0:	619a      	str	r2, [r3, #24]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80059dc:	2200      	movs	r2, #0
 80059de:	4611      	mov	r1, r2
 80059e0:	2019      	movs	r0, #25
 80059e2:	f7fb fd87 	bl	80014f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80059e6:	2019      	movs	r0, #25
 80059e8:	f7fb fdb8 	bl	800155c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80059ec:	2200      	movs	r2, #0
 80059ee:	4611      	mov	r1, r2
 80059f0:	201b      	movs	r0, #27
 80059f2:	f7fb fd7f 	bl	80014f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80059f6:	201b      	movs	r0, #27
 80059f8:	f7fb fdb0 	bl	800155c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80059fc:	b003      	add	sp, #12
 80059fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a02:	bf00      	nop
 8005a04:	40012c00 	.word	0x40012c00

08005a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a08:	b530      	push	{r4, r5, lr}
 8005a0a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8005a16:	6802      	ldr	r2, [r0, #0]
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <HAL_UART_MspInit+0x80>)
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005a1e:	b007      	add	sp, #28
 8005a20:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a22:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005a2c:	61da      	str	r2, [r3, #28]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005a34:	9200      	str	r2, [sp, #0]
 8005a36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	f042 0208 	orr.w	r2, r2, #8
 8005a3e:	619a      	str	r2, [r3, #24]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a50:	2302      	movs	r3, #2
 8005a52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a54:	2303      	movs	r3, #3
 8005a56:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a58:	4d0c      	ldr	r5, [pc, #48]	; (8005a8c <HAL_UART_MspInit+0x84>)
 8005a5a:	a902      	add	r1, sp, #8
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f7fb ffcf 	bl	8001a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a66:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a68:	2400      	movs	r4, #0
 8005a6a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a6e:	a902      	add	r1, sp, #8
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7fb ffc5 	bl	8001a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005a76:	4622      	mov	r2, r4
 8005a78:	4621      	mov	r1, r4
 8005a7a:	2027      	movs	r0, #39	; 0x27
 8005a7c:	f7fb fd3a 	bl	80014f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a80:	2027      	movs	r0, #39	; 0x27
 8005a82:	f7fb fd6b 	bl	800155c <HAL_NVIC_EnableIRQ>
}
 8005a86:	e7ca      	b.n	8005a1e <HAL_UART_MspInit+0x16>
 8005a88:	40004800 	.word	0x40004800
 8005a8c:	40010c00 	.word	0x40010c00

08005a90 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a90:	4770      	bx	lr

08005a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a92:	e7fe      	b.n	8005a92 <HardFault_Handler>

08005a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a94:	e7fe      	b.n	8005a94 <MemManage_Handler>

08005a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a96:	e7fe      	b.n	8005a96 <BusFault_Handler>

08005a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a98:	e7fe      	b.n	8005a98 <UsageFault_Handler>

08005a9a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a9a:	4770      	bx	lr

08005a9c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a9c:	4770      	bx	lr

08005a9e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a9e:	4770      	bx	lr

08005aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8005aa2:	f7fb f9a3 	bl	8000dec <HAL_IncTick>
	ui_handler_flag = UI_HANDLER_FLAG_FREE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4a07      	ldr	r2, [pc, #28]	; (8005ac8 <SysTick_Handler+0x28>)
 8005aaa:	7013      	strb	r3, [r2, #0]
	ntc_handler_flag = NTC_HANDLER_FLAG_FREE;
 8005aac:	4a07      	ldr	r2, [pc, #28]	; (8005acc <SysTick_Handler+0x2c>)
 8005aae:	7013      	strb	r3, [r2, #0]
	if(++ms_counter >= 1000)
 8005ab0:	4a07      	ldr	r2, [pc, #28]	; (8005ad0 <SysTick_Handler+0x30>)
 8005ab2:	8813      	ldrh	r3, [r2, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8013      	strh	r3, [r2, #0]
 8005aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005abe:	d302      	bcc.n	8005ac6 <SysTick_Handler+0x26>
	{
		ms_counter = 0;
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ac6:	bd08      	pop	{r3, pc}
 8005ac8:	200009a8 	.word	0x200009a8
 8005acc:	2000059f 	.word	0x2000059f
 8005ad0:	20000778 	.word	0x20000778

08005ad4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ad6:	4802      	ldr	r0, [pc, #8]	; (8005ae0 <ADC1_2_IRQHandler+0xc>)
 8005ad8:	f7fb f9cb 	bl	8000e72 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005adc:	bd08      	pop	{r3, pc}
 8005ade:	bf00      	nop
 8005ae0:	200007b8 	.word	0x200007b8

08005ae4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005ae4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ZCD_Pin))
 8005ae6:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <EXTI9_5_IRQHandler+0x2c>)
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005aee:	d103      	bne.n	8005af8 <EXTI9_5_IRQHandler+0x14>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
		FAN_CTRL_GPIO_Port->BRR = FAN_CTRL_Pin;
		//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005af0:	2080      	movs	r0, #128	; 0x80
 8005af2:	f7fc f879 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005af6:	bd08      	pop	{r3, pc}
		HAL_TIM_Base_Start_IT(&htim1);
 8005af8:	4806      	ldr	r0, [pc, #24]	; (8005b14 <EXTI9_5_IRQHandler+0x30>)
 8005afa:	f7fc fd6c 	bl	80025d6 <HAL_TIM_Base_Start_IT>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <EXTI9_5_IRQHandler+0x34>)
 8005b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b04:	615a      	str	r2, [r3, #20]
		FAN_CTRL_GPIO_Port->BRR = FAN_CTRL_Pin;
 8005b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0a:	615a      	str	r2, [r3, #20]
 8005b0c:	e7f0      	b.n	8005af0 <EXTI9_5_IRQHandler+0xc>
 8005b0e:	bf00      	nop
 8005b10:	40010400 	.word	0x40010400
 8005b14:	200008a8 	.word	0x200008a8
 8005b18:	40010800 	.word	0x40010800

08005b1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005b1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;

	// for a test
	//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <TIM1_UP_IRQHandler+0x14>)
 8005b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b24:	615a      	str	r2, [r3, #20]


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b26:	4803      	ldr	r0, [pc, #12]	; (8005b34 <TIM1_UP_IRQHandler+0x18>)
 8005b28:	f7fc fd6d 	bl	8002606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005b2c:	bd08      	pop	{r3, pc}
 8005b2e:	bf00      	nop
 8005b30:	40010800 	.word	0x40010800
 8005b34:	200008a8 	.word	0x200008a8

08005b38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005b38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
	// for a test	//LED_RED_GPIO_Port->BSRR = LED_RED_Pin;
	if(TIM1->SR & TIM_IT_CC1)
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <TIM1_CC_IRQHandler+0x30>)
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f013 0f02 	tst.w	r3, #2
 8005b42:	d003      	beq.n	8005b4c <TIM1_CC_IRQHandler+0x14>
	{
		HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <TIM1_CC_IRQHandler+0x34>)
 8005b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b4a:	611a      	str	r2, [r3, #16]
	}

	if(TIM1->SR & TIM_IT_CC2)
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <TIM1_CC_IRQHandler+0x30>)
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f013 0f04 	tst.w	r3, #4
 8005b54:	d003      	beq.n	8005b5e <TIM1_CC_IRQHandler+0x26>
	{
		FAN_CTRL_GPIO_Port->BSRR = FAN_CTRL_Pin;
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <TIM1_CC_IRQHandler+0x34>)
 8005b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5c:	611a      	str	r2, [r3, #16]
	}



	/* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b5e:	4804      	ldr	r0, [pc, #16]	; (8005b70 <TIM1_CC_IRQHandler+0x38>)
 8005b60:	f7fc fd51 	bl	8002606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005b64:	bd08      	pop	{r3, pc}
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40010800 	.word	0x40010800
 8005b70:	200008a8 	.word	0x200008a8

08005b74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b76:	4802      	ldr	r0, [pc, #8]	; (8005b80 <USART3_IRQHandler+0xc>)
 8005b78:	f7fd f914 	bl	8002da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b7c:	bd08      	pop	{r3, pc}
 8005b7e:	bf00      	nop
 8005b80:	200005d0 	.word	0x200005d0

08005b84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if((EXTI->PR & BUTTON_EXIT_Pin) != 0x00u)
 8005b86:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <EXTI15_10_IRQHandler+0x6c>)
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005b8e:	d112      	bne.n	8005bb6 <EXTI15_10_IRQHandler+0x32>
	{
		ui_button_handler(UI_BUTTON_BACK); // ui_menu_back();
	}
	else if((EXTI->PR & BUTTON_OK_Pin) != 0x00u)
 8005b90:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <EXTI15_10_IRQHandler+0x6c>)
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005b98:	d121      	bne.n	8005bde <EXTI15_10_IRQHandler+0x5a>
	{
		ui_button_handler(UI_BUTTON_OK);
	}
	else if((EXTI->PR & BUTTON_DOWN_Pin) != 0x00u)
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <EXTI15_10_IRQHandler+0x6c>)
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005ba2:	d120      	bne.n	8005be6 <EXTI15_10_IRQHandler+0x62>
	{
		ui_button_handler(UI_BUTTON_DOWN);
	}
	else if((EXTI->PR & BUTTON_UP_Pin) != 0x00u)
 8005ba4:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <EXTI15_10_IRQHandler+0x6c>)
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005bac:	d006      	beq.n	8005bbc <EXTI15_10_IRQHandler+0x38>
	{
		ui_button_handler(UI_BUTTON_UP);
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7ff f934 	bl	8004e1c <ui_button_handler>
 8005bb4:	e002      	b.n	8005bbc <EXTI15_10_IRQHandler+0x38>
		ui_button_handler(UI_BUTTON_BACK); // ui_menu_back();
 8005bb6:	2003      	movs	r0, #3
 8005bb8:	f7ff f930 	bl	8004e1c <ui_button_handler>
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005bbc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005bc0:	f7fc f812 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005bc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005bc8:	f7fc f80e 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005bcc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005bd0:	f7fc f80a 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005bd8:	f7fc f806 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005bdc:	bd08      	pop	{r3, pc}
		ui_button_handler(UI_BUTTON_OK);
 8005bde:	2002      	movs	r0, #2
 8005be0:	f7ff f91c 	bl	8004e1c <ui_button_handler>
 8005be4:	e7ea      	b.n	8005bbc <EXTI15_10_IRQHandler+0x38>
		ui_button_handler(UI_BUTTON_DOWN);
 8005be6:	2001      	movs	r0, #1
 8005be8:	f7ff f918 	bl	8004e1c <ui_button_handler>
 8005bec:	e7e6      	b.n	8005bbc <EXTI15_10_IRQHandler+0x38>
 8005bee:	bf00      	nop
 8005bf0:	40010400 	.word	0x40010400

08005bf4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <SystemInit+0x40>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005bfe:	6859      	ldr	r1, [r3, #4]
 8005c00:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <SystemInit+0x44>)
 8005c02:	400a      	ands	r2, r1
 8005c04:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005c0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c10:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c18:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005c20:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005c22:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005c26:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <SystemInit+0x48>)
 8005c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c2e:	609a      	str	r2, [r3, #8]
#endif 
}
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
 8005c38:	f8ff0000 	.word	0xf8ff0000
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005c40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005c42:	e003      	b.n	8005c4c <LoopCopyDataInit>

08005c44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005c46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005c48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005c4a:	3104      	adds	r1, #4

08005c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005c4c:	480a      	ldr	r0, [pc, #40]	; (8005c78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005c50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005c52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005c54:	d3f6      	bcc.n	8005c44 <CopyDataInit>
  ldr r2, =_sbss
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005c58:	e002      	b.n	8005c60 <LoopFillZerobss>

08005c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005c5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005c5c:	f842 3b04 	str.w	r3, [r2], #4

08005c60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005c60:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005c62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005c64:	d3f9      	bcc.n	8005c5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c66:	f7ff ffc5 	bl	8005bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c6a:	f000 f80f 	bl	8005c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c6e:	f7ff fe0d 	bl	800588c <main>
  bx lr
 8005c72:	4770      	bx	lr
  ldr r3, =_sidata
 8005c74:	08005f00 	.word	0x08005f00
  ldr r0, =_sdata
 8005c78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005c7c:	2000050c 	.word	0x2000050c
  ldr r2, =_sbss
 8005c80:	20000510 	.word	0x20000510
  ldr r3, = _ebss
 8005c84:	20000c90 	.word	0x20000c90

08005c88 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c88:	e7fe      	b.n	8005c88 <CAN1_RX1_IRQHandler>
	...

08005c8c <__libc_init_array>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	2500      	movs	r5, #0
 8005c90:	4e0c      	ldr	r6, [pc, #48]	; (8005cc4 <__libc_init_array+0x38>)
 8005c92:	4c0d      	ldr	r4, [pc, #52]	; (8005cc8 <__libc_init_array+0x3c>)
 8005c94:	1ba4      	subs	r4, r4, r6
 8005c96:	10a4      	asrs	r4, r4, #2
 8005c98:	42a5      	cmp	r5, r4
 8005c9a:	d109      	bne.n	8005cb0 <__libc_init_array+0x24>
 8005c9c:	f000 f89e 	bl	8005ddc <_init>
 8005ca0:	2500      	movs	r5, #0
 8005ca2:	4e0a      	ldr	r6, [pc, #40]	; (8005ccc <__libc_init_array+0x40>)
 8005ca4:	4c0a      	ldr	r4, [pc, #40]	; (8005cd0 <__libc_init_array+0x44>)
 8005ca6:	1ba4      	subs	r4, r4, r6
 8005ca8:	10a4      	asrs	r4, r4, #2
 8005caa:	42a5      	cmp	r5, r4
 8005cac:	d105      	bne.n	8005cba <__libc_init_array+0x2e>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cb4:	4798      	blx	r3
 8005cb6:	3501      	adds	r5, #1
 8005cb8:	e7ee      	b.n	8005c98 <__libc_init_array+0xc>
 8005cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cbe:	4798      	blx	r3
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	e7f2      	b.n	8005caa <__libc_init_array+0x1e>
 8005cc4:	08005ef4 	.word	0x08005ef4
 8005cc8:	08005ef4 	.word	0x08005ef4
 8005ccc:	08005ef4 	.word	0x08005ef4
 8005cd0:	08005efc 	.word	0x08005efc

08005cd4 <memset>:
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4402      	add	r2, r0
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d100      	bne.n	8005cde <memset+0xa>
 8005cdc:	4770      	bx	lr
 8005cde:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce2:	e7f9      	b.n	8005cd8 <memset+0x4>

08005ce4 <register_fini>:
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <register_fini+0xc>)
 8005ce6:	b113      	cbz	r3, 8005cee <register_fini+0xa>
 8005ce8:	4802      	ldr	r0, [pc, #8]	; (8005cf4 <register_fini+0x10>)
 8005cea:	f000 b805 	b.w	8005cf8 <atexit>
 8005cee:	4770      	bx	lr
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	08005d05 	.word	0x08005d05

08005cf8 <atexit>:
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 b816 	b.w	8005d30 <__register_exitproc>

08005d04 <__libc_fini_array>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d07      	ldr	r5, [pc, #28]	; (8005d24 <__libc_fini_array+0x20>)
 8005d08:	4c07      	ldr	r4, [pc, #28]	; (8005d28 <__libc_fini_array+0x24>)
 8005d0a:	1b64      	subs	r4, r4, r5
 8005d0c:	10a4      	asrs	r4, r4, #2
 8005d0e:	b91c      	cbnz	r4, 8005d18 <__libc_fini_array+0x14>
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d14:	f000 b868 	b.w	8005de8 <_fini>
 8005d18:	3c01      	subs	r4, #1
 8005d1a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005d1e:	4798      	blx	r3
 8005d20:	e7f5      	b.n	8005d0e <__libc_fini_array+0xa>
 8005d22:	bf00      	nop
 8005d24:	08005efc 	.word	0x08005efc
 8005d28:	08005f00 	.word	0x08005f00

08005d2c <__retarget_lock_acquire_recursive>:
 8005d2c:	4770      	bx	lr

08005d2e <__retarget_lock_release_recursive>:
 8005d2e:	4770      	bx	lr

08005d30 <__register_exitproc>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	4c26      	ldr	r4, [pc, #152]	; (8005dd0 <__register_exitproc+0xa0>)
 8005d36:	4606      	mov	r6, r0
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	4698      	mov	r8, r3
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	4691      	mov	r9, r2
 8005d40:	f7ff fff4 	bl	8005d2c <__retarget_lock_acquire_recursive>
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <__register_exitproc+0xa4>)
 8005d46:	681d      	ldr	r5, [r3, #0]
 8005d48:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8005d4c:	b918      	cbnz	r0, 8005d56 <__register_exitproc+0x26>
 8005d4e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8005d52:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8005d56:	6843      	ldr	r3, [r0, #4]
 8005d58:	2b1f      	cmp	r3, #31
 8005d5a:	dd19      	ble.n	8005d90 <__register_exitproc+0x60>
 8005d5c:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <__register_exitproc+0xa8>)
 8005d5e:	b933      	cbnz	r3, 8005d6e <__register_exitproc+0x3e>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	f7ff ffe4 	bl	8005d2e <__retarget_lock_release_recursive>
 8005d66:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005d72:	f3af 8000 	nop.w
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d0f2      	beq.n	8005d60 <__register_exitproc+0x30>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8005d80:	6042      	str	r2, [r0, #4]
 8005d82:	6003      	str	r3, [r0, #0]
 8005d84:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8005d88:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8005d8c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8005d90:	6843      	ldr	r3, [r0, #4]
 8005d92:	b19e      	cbz	r6, 8005dbc <__register_exitproc+0x8c>
 8005d94:	2201      	movs	r2, #1
 8005d96:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8005d9a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8005d9e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8005da2:	409a      	lsls	r2, r3
 8005da4:	4311      	orrs	r1, r2
 8005da6:	2e02      	cmp	r6, #2
 8005da8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8005dac:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8005db0:	bf02      	ittt	eq
 8005db2:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8005db6:	430a      	orreq	r2, r1
 8005db8:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	6042      	str	r2, [r0, #4]
 8005dc2:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	f7ff ffb1 	bl	8005d2e <__retarget_lock_release_recursive>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e7cc      	b.n	8005d6a <__register_exitproc+0x3a>
 8005dd0:	20000508 	.word	0x20000508
 8005dd4:	08005ef0 	.word	0x08005ef0
 8005dd8:	00000000 	.word	0x00000000

08005ddc <_init>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr

08005de8 <_fini>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr
