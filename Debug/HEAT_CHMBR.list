
HEAT_CHMBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b0c  08003b0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b0c  08003b0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b0c  08003b0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  08003b20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200001d4  08003b20  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001203a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3c  00000000  00000000  0003206f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00034db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016236  00000000  00000000  00036f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f0a4  00000000  00000000  0004d1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079191  00000000  00000000  0005c272  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004800  00000000  00000000  000d5480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ac8 	.word	0x08003ac8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003ac8 	.word	0x08003ac8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fc0d 	bl	800097c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 faae 	bl	80036c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fc25 	bl	80009e6 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fbed 	bl	8000992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f003 fa6c 	bl	800372c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fa81 	bl	800075c <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b1b      	ldrb	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7d1b      	ldrb	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b1b      	ldrb	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 8000318:	4013      	ands	r3, r2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	f003 0320 	and.w	r3, r3, #32
 80003d2:	2b20      	cmp	r3, #32
 80003d4:	d140      	bne.n	8000458 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0302 	and.w	r3, r3, #2
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d139      	bne.n	8000458 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e8:	f003 0310 	and.w	r3, r3, #16
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d105      	bne.n	80003fc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000406:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800040a:	d11d      	bne.n	8000448 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000410:	2b00      	cmp	r3, #0
 8000412:	d119      	bne.n	8000448 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f022 0220 	bic.w	r2, r2, #32
 8000422:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000438:	2b00      	cmp	r3, #0
 800043a:	d105      	bne.n	8000448 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000440:	f043 0201 	orr.w	r2, r3, #1
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 f87c 	bl	8000546 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f06f 0212 	mvn.w	r2, #18
 8000456:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000462:	2b80      	cmp	r3, #128	; 0x80
 8000464:	d14f      	bne.n	8000506 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	2b04      	cmp	r3, #4
 8000472:	d148      	bne.n	8000506 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000478:	f003 0310 	and.w	r3, r3, #16
 800047c:	2b00      	cmp	r3, #0
 800047e:	d105      	bne.n	800048c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000496:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800049a:	d012      	beq.n	80004c2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d125      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80004b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004b8:	d11d      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d119      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80004d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d105      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ee:	f043 0201 	orr.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f96a 	bl	80007d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f06f 020c 	mvn.w	r2, #12
 8000504:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000510:	2b40      	cmp	r3, #64	; 0x40
 8000512:	d114      	bne.n	800053e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b01      	cmp	r3, #1
 8000520:	d10d      	bne.n	800053e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f812 	bl	8000558 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f06f 0201 	mvn.w	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
	...

0800056c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000584:	2b01      	cmp	r3, #1
 8000586:	d101      	bne.n	800058c <HAL_ADC_ConfigChannel+0x20>
 8000588:	2302      	movs	r3, #2
 800058a:	e0dc      	b.n	8000746 <HAL_ADC_ConfigChannel+0x1da>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d81c      	bhi.n	80005d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	3b05      	subs	r3, #5
 80005ae:	221f      	movs	r2, #31
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4019      	ands	r1, r3
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	3b05      	subs	r3, #5
 80005c8:	fa00 f203 	lsl.w	r2, r0, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
 80005d4:	e03c      	b.n	8000650 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2b0c      	cmp	r3, #12
 80005dc:	d81c      	bhi.n	8000618 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	3b23      	subs	r3, #35	; 0x23
 80005f0:	221f      	movs	r2, #31
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4019      	ands	r1, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	3b23      	subs	r3, #35	; 0x23
 800060a:	fa00 f203 	lsl.w	r2, r0, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	430a      	orrs	r2, r1
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	e01b      	b.n	8000650 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	3b41      	subs	r3, #65	; 0x41
 800062a:	221f      	movs	r2, #31
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4019      	ands	r1, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	3b41      	subs	r3, #65	; 0x41
 8000644:	fa00 f203 	lsl.w	r2, r0, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	430a      	orrs	r2, r1
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b09      	cmp	r3, #9
 8000656:	d91c      	bls.n	8000692 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68d9      	ldr	r1, [r3, #12]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	3b1e      	subs	r3, #30
 800066a:	2207      	movs	r2, #7
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	4019      	ands	r1, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	6898      	ldr	r0, [r3, #8]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	3b1e      	subs	r3, #30
 8000684:	fa00 f203 	lsl.w	r2, r0, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	430a      	orrs	r2, r1
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	e019      	b.n	80006c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6919      	ldr	r1, [r3, #16]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	2207      	movs	r2, #7
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4019      	ands	r1, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	6898      	ldr	r0, [r3, #8]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	fa00 f203 	lsl.w	r2, r0, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b10      	cmp	r3, #16
 80006cc:	d003      	beq.n	80006d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006d2:	2b11      	cmp	r3, #17
 80006d4:	d132      	bne.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <HAL_ADC_ConfigChannel+0x1e4>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d125      	bne.n	800072c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d126      	bne.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006fc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b10      	cmp	r3, #16
 8000704:	d11a      	bne.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <HAL_ADC_ConfigChannel+0x1e8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <HAL_ADC_ConfigChannel+0x1ec>)
 800070c:	fba2 2303 	umull	r2, r3, r2, r3
 8000710:	0c9a      	lsrs	r2, r3, #18
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800071c:	e002      	b.n	8000724 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3b01      	subs	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f9      	bne.n	800071e <HAL_ADC_ConfigChannel+0x1b2>
 800072a:	e007      	b.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000730:	f043 0220 	orr.w	r2, r3, #32
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40012400 	.word	0x40012400
 8000754:	20000008 	.word	0x20000008
 8000758:	431bde83 	.word	0x431bde83

0800075c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b01      	cmp	r3, #1
 8000774:	d127      	bne.n	80007c6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f022 0201 	bic.w	r2, r2, #1
 8000784:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000786:	f7ff fd39 	bl	80001fc <HAL_GetTick>
 800078a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800078c:	e014      	b.n	80007b8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800078e:	f7ff fd35 	bl	80001fc <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b02      	cmp	r3, #2
 800079a:	d90d      	bls.n	80007b8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a0:	f043 0210 	orr.w	r2, r3, #16
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ac:	f043 0201 	orr.w	r2, r3, #1
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e007      	b.n	80007c8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d0e3      	beq.n	800078e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
	...

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <__NVIC_EnableIRQ+0x34>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	; 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000948:	d301      	bcc.n	800094e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094a:	2301      	movs	r3, #1
 800094c:	e00f      	b.n	800096e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <SysTick_Config+0x40>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000956:	210f      	movs	r1, #15
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f7ff ff90 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SysTick_Config+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <SysTick_Config+0x40>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff2d 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff42 	bl	800082c <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ff90 	bl	80008d4 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5f 	bl	8000880 <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff35 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffa2 	bl	8000938 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d005      	beq.n	8000a22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2204      	movs	r2, #4
 8000a1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e051      	b.n	8000ac6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 020e 	bic.w	r2, r2, #14
 8000a30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 0201 	bic.w	r2, r2, #1
 8000a40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <HAL_DMA_Abort_IT+0xd0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d029      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0xa0>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <HAL_DMA_Abort_IT+0xd4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d022      	beq.n	8000a9c <HAL_DMA_Abort_IT+0x9c>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_DMA_Abort_IT+0xd8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d01a      	beq.n	8000a96 <HAL_DMA_Abort_IT+0x96>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_DMA_Abort_IT+0xdc>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d012      	beq.n	8000a90 <HAL_DMA_Abort_IT+0x90>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_DMA_Abort_IT+0xe0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d00a      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x8a>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <HAL_DMA_Abort_IT+0xe4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d102      	bne.n	8000a84 <HAL_DMA_Abort_IT+0x84>
 8000a7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a82:	e00e      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a88:	e00b      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8e:	e008      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	e005      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	e002      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	e000      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_DMA_Abort_IT+0xe8>)
 8000aa4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	4798      	blx	r3
    } 
  }
  return status;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020008 	.word	0x40020008
 8000ad4:	4002001c 	.word	0x4002001c
 8000ad8:	40020030 	.word	0x40020030
 8000adc:	40020044 	.word	0x40020044
 8000ae0:	40020058 	.word	0x40020058
 8000ae4:	4002006c 	.word	0x4002006c
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	e127      	b.n	8000d50 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b00:	2201      	movs	r2, #1
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f040 8116 	bne.w	8000d4a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d034      	beq.n	8000b90 <HAL_GPIO_Init+0xa4>
 8000b26:	2b12      	cmp	r3, #18
 8000b28:	d80d      	bhi.n	8000b46 <HAL_GPIO_Init+0x5a>
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d02b      	beq.n	8000b86 <HAL_GPIO_Init+0x9a>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d804      	bhi.n	8000b3c <HAL_GPIO_Init+0x50>
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d031      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d01c      	beq.n	8000b74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3a:	e048      	b.n	8000bce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d043      	beq.n	8000bc8 <HAL_GPIO_Init+0xdc>
 8000b40:	2b11      	cmp	r3, #17
 8000b42:	d01b      	beq.n	8000b7c <HAL_GPIO_Init+0x90>
          break;
 8000b44:	e043      	b.n	8000bce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b46:	4a89      	ldr	r2, [pc, #548]	; (8000d6c <HAL_GPIO_Init+0x280>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d026      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b4c:	4a87      	ldr	r2, [pc, #540]	; (8000d6c <HAL_GPIO_Init+0x280>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d806      	bhi.n	8000b60 <HAL_GPIO_Init+0x74>
 8000b52:	4a87      	ldr	r2, [pc, #540]	; (8000d70 <HAL_GPIO_Init+0x284>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d020      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b58:	4a86      	ldr	r2, [pc, #536]	; (8000d74 <HAL_GPIO_Init+0x288>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d01d      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
          break;
 8000b5e:	e036      	b.n	8000bce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b60:	4a85      	ldr	r2, [pc, #532]	; (8000d78 <HAL_GPIO_Init+0x28c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d019      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b66:	4a85      	ldr	r2, [pc, #532]	; (8000d7c <HAL_GPIO_Init+0x290>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d016      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b6c:	4a84      	ldr	r2, [pc, #528]	; (8000d80 <HAL_GPIO_Init+0x294>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
          break;
 8000b72:	e02c      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e028      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	3304      	adds	r3, #4
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e023      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e01e      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	330c      	adds	r3, #12
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e019      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e012      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	611a      	str	r2, [r3, #16]
          break;
 8000bba:	e008      	b.n	8000bce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	615a      	str	r2, [r3, #20]
          break;
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d801      	bhi.n	8000bd8 <HAL_GPIO_Init+0xec>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	e001      	b.n	8000bdc <HAL_GPIO_Init+0xf0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	d802      	bhi.n	8000bea <HAL_GPIO_Init+0xfe>
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	e002      	b.n	8000bf0 <HAL_GPIO_Init+0x104>
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	3b08      	subs	r3, #8
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	6a39      	ldr	r1, [r7, #32]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 8096 	beq.w	8000d4a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1e:	4b59      	ldr	r3, [pc, #356]	; (8000d84 <HAL_GPIO_Init+0x298>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a58      	ldr	r2, [pc, #352]	; (8000d84 <HAL_GPIO_Init+0x298>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <HAL_GPIO_Init+0x298>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c36:	4a54      	ldr	r2, [pc, #336]	; (8000d88 <HAL_GPIO_Init+0x29c>)
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4013      	ands	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <HAL_GPIO_Init+0x2a0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0x19e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a4a      	ldr	r2, [pc, #296]	; (8000d90 <HAL_GPIO_Init+0x2a4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d00d      	beq.n	8000c86 <HAL_GPIO_Init+0x19a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a49      	ldr	r2, [pc, #292]	; (8000d94 <HAL_GPIO_Init+0x2a8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d007      	beq.n	8000c82 <HAL_GPIO_Init+0x196>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a48      	ldr	r2, [pc, #288]	; (8000d98 <HAL_GPIO_Init+0x2ac>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_GPIO_Init+0x192>
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e004      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e002      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8e:	f002 0203 	and.w	r2, r2, #3
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	4093      	lsls	r3, r2
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9c:	493a      	ldr	r1, [pc, #232]	; (8000d88 <HAL_GPIO_Init+0x29c>)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4938      	ldr	r1, [pc, #224]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	4933      	ldr	r1, [pc, #204]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	492e      	ldr	r1, [pc, #184]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4929      	ldr	r1, [pc, #164]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	4924      	ldr	r1, [pc, #144]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	608b      	str	r3, [r1, #8]
 8000d12:	e006      	b.n	8000d22 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	491f      	ldr	r1, [pc, #124]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	491a      	ldr	r1, [pc, #104]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60cb      	str	r3, [r1, #12]
 8000d3a:	e006      	b.n	8000d4a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4915      	ldr	r1, [pc, #84]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f aed0 	bne.w	8000b00 <HAL_GPIO_Init+0x14>
  }
}
 8000d60:	bf00      	nop
 8000d62:	372c      	adds	r7, #44	; 0x2c
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	10210000 	.word	0x10210000
 8000d70:	10110000 	.word	0x10110000
 8000d74:	10120000 	.word	0x10120000
 8000d78:	10310000 	.word	0x10310000
 8000d7c:	10320000 	.word	0x10320000
 8000d80:	10220000 	.word	0x10220000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40011400 	.word	0x40011400
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	611a      	str	r2, [r3, #16]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f806 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e26c      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8087 	beq.w	8000f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e34:	4b92      	ldr	r3, [pc, #584]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d00c      	beq.n	8000e5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e40:	4b8f      	ldr	r3, [pc, #572]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d112      	bne.n	8000e72 <HAL_RCC_OscConfig+0x5e>
 8000e4c:	4b8c      	ldr	r3, [pc, #560]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e58:	d10b      	bne.n	8000e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5a:	4b89      	ldr	r3, [pc, #548]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d06c      	beq.n	8000f40 <HAL_RCC_OscConfig+0x12c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d168      	bne.n	8000f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e246      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x76>
 8000e7c:	4b80      	ldr	r3, [pc, #512]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a7f      	ldr	r2, [pc, #508]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e02e      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x98>
 8000e92:	4b7b      	ldr	r3, [pc, #492]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a7a      	ldr	r2, [pc, #488]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	4b78      	ldr	r3, [pc, #480]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a77      	ldr	r2, [pc, #476]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e01d      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0xbc>
 8000eb6:	4b72      	ldr	r3, [pc, #456]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a71      	ldr	r2, [pc, #452]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b6f      	ldr	r3, [pc, #444]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a6e      	ldr	r2, [pc, #440]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e00b      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000ed0:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a6a      	ldr	r2, [pc, #424]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b68      	ldr	r3, [pc, #416]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a67      	ldr	r2, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff f984 	bl	80001fc <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff f980 	bl	80001fc <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e1fa      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xe4>
 8000f16:	e014      	b.n	8000f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff f970 	bl	80001fc <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff f96c 	bl	80001fc <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e1e6      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f32:	4b53      	ldr	r3, [pc, #332]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f0      	bne.n	8000f20 <HAL_RCC_OscConfig+0x10c>
 8000f3e:	e000      	b.n	8000f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d063      	beq.n	8001016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f4e:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f5a:	4b49      	ldr	r3, [pc, #292]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d11c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x18c>
 8000f66:	4b46      	ldr	r3, [pc, #280]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d116      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	4b43      	ldr	r3, [pc, #268]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <HAL_RCC_OscConfig+0x176>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d001      	beq.n	8000f8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e1ba      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4939      	ldr	r1, [pc, #228]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9e:	e03a      	b.n	8001016 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d020      	beq.n	8000fea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff f925 	bl	80001fc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb6:	f7ff f921 	bl	80001fc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e19b      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	4927      	ldr	r1, [pc, #156]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
 8000fe8:	e015      	b.n	8001016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff f904 	bl	80001fc <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff8:	f7ff f900 	bl	80001fc <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e17a      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b00      	cmp	r3, #0
 8001020:	d03a      	beq.n	8001098 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d019      	beq.n	800105e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_RCC_OscConfig+0x274>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001030:	f7ff f8e4 	bl	80001fc <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff f8e0 	bl	80001fc <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e15a      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f000 faa8 	bl	80015ac <RCC_Delay>
 800105c:	e01c      	b.n	8001098 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_RCC_OscConfig+0x274>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001064:	f7ff f8ca 	bl	80001fc <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800106a:	e00f      	b.n	800108c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff f8c6 	bl	80001fc <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d908      	bls.n	800108c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e140      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	42420000 	.word	0x42420000
 8001088:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108c:	4b9e      	ldr	r3, [pc, #632]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e9      	bne.n	800106c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80a6 	beq.w	80011f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010aa:	4b97      	ldr	r3, [pc, #604]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10d      	bne.n	80010d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a93      	ldr	r2, [pc, #588]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d2:	4b8e      	ldr	r3, [pc, #568]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d118      	bne.n	8001110 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010de:	4b8b      	ldr	r3, [pc, #556]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a8a      	ldr	r2, [pc, #552]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ea:	f7ff f887 	bl	80001fc <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f2:	f7ff f883 	bl	80001fc <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b64      	cmp	r3, #100	; 0x64
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e0fd      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4b81      	ldr	r3, [pc, #516]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x312>
 8001118:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a7a      	ldr	r2, [pc, #488]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	e02d      	b.n	8001182 <HAL_RCC_OscConfig+0x36e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x334>
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a75      	ldr	r2, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b73      	ldr	r3, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a72      	ldr	r2, [pc, #456]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	f023 0304 	bic.w	r3, r3, #4
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	e01c      	b.n	8001182 <HAL_RCC_OscConfig+0x36e>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b05      	cmp	r3, #5
 800114e:	d10c      	bne.n	800116a <HAL_RCC_OscConfig+0x356>
 8001150:	4b6d      	ldr	r3, [pc, #436]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a6c      	ldr	r2, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6213      	str	r3, [r2, #32]
 800115c:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4a69      	ldr	r2, [pc, #420]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6213      	str	r3, [r2, #32]
 8001168:	e00b      	b.n	8001182 <HAL_RCC_OscConfig+0x36e>
 800116a:	4b67      	ldr	r3, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a66      	ldr	r2, [pc, #408]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	6213      	str	r3, [r2, #32]
 8001176:	4b64      	ldr	r3, [pc, #400]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a63      	ldr	r2, [pc, #396]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d015      	beq.n	80011b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff f837 	bl	80001fc <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff f833 	bl	80001fc <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e0ab      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a8:	4b57      	ldr	r3, [pc, #348]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ee      	beq.n	8001192 <HAL_RCC_OscConfig+0x37e>
 80011b4:	e014      	b.n	80011e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff f821 	bl	80001fc <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff f81d 	bl	80001fc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e095      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1ee      	bne.n	80011be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d105      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e6:	4b48      	ldr	r3, [pc, #288]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a47      	ldr	r2, [pc, #284]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8081 	beq.w	80012fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011fc:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b08      	cmp	r3, #8
 8001206:	d061      	beq.n	80012cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d146      	bne.n	800129e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001210:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <HAL_RCC_OscConfig+0x4fc>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7fe fff1 	bl	80001fc <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121e:	f7fe ffed 	bl	80001fc <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e067      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001230:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d108      	bne.n	8001258 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	492d      	ldr	r1, [pc, #180]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a19      	ldr	r1, [r3, #32]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	430b      	orrs	r3, r1
 800126a:	4927      	ldr	r1, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_RCC_OscConfig+0x4fc>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7fe ffc1 	bl	80001fc <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7fe ffbd 	bl	80001fc <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e037      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x46a>
 800129c:	e02f      	b.n	80012fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_RCC_OscConfig+0x4fc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7fe ffaa 	bl	80001fc <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ac:	f7fe ffa6 	bl	80001fc <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e020      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x498>
 80012ca:	e018      	b.n	80012fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e013      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	40007000 	.word	0x40007000
 8001310:	42420060 	.word	0x42420060

08001314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d0      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d910      	bls.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0207 	bic.w	r2, r3, #7
 800133e:	4965      	ldr	r1, [pc, #404]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0b8      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800137a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001388:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	494d      	ldr	r1, [pc, #308]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d040      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d115      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e073      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06b      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 0203 	bic.w	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4936      	ldr	r1, [pc, #216]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7fe fefa 	bl	80001fc <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7fe fef6 	bl	80001fc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e053      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d210      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 0207 	bic.w	r2, r3, #7
 800144a:	4922      	ldr	r1, [pc, #136]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e032      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4916      	ldr	r1, [pc, #88]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a2:	f000 f821 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4601      	mov	r1, r0
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	fa21 f303 	lsr.w	r3, r1, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1cc>)
 80014bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1d0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe58 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08003afc 	.word	0x08003afc
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000000 	.word	0x20000000

080014e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	b490      	push	{r4, r7}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014f0:	1d3c      	adds	r4, r7, #4
 80014f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d002      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x40>
 8001522:	2b08      	cmp	r3, #8
 8001524:	d003      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0x46>
 8001526:	e02d      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800152a:	623b      	str	r3, [r7, #32]
      break;
 800152c:	e02d      	b.n	800158a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800153a:	4413      	add	r3, r2
 800153c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001540:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	0c5b      	lsrs	r3, r3, #17
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800155a:	4413      	add	r3, r2
 800155c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001560:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001566:	fb02 f203 	mul.w	r2, r2, r3
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
 8001572:	e004      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	623b      	str	r3, [r7, #32]
      break;
 8001582:	e002      	b.n	800158a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001586:	623b      	str	r3, [r7, #32]
      break;
 8001588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800158a:	6a3b      	ldr	r3, [r7, #32]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bc90      	pop	{r4, r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	08003ae0 	.word	0x08003ae0
 800159c:	08003af0 	.word	0x08003af0
 80015a0:	40021000 	.word	0x40021000
 80015a4:	007a1200 	.word	0x007a1200
 80015a8:	003d0900 	.word	0x003d0900

080015ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <RCC_Delay+0x34>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <RCC_Delay+0x38>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0a5b      	lsrs	r3, r3, #9
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c8:	bf00      	nop
  }
  while (Delay --);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	60fa      	str	r2, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f9      	bne.n	80015c8 <RCC_Delay+0x1c>
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	10624dd3 	.word	0x10624dd3

080015e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d07d      	beq.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001608:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10d      	bne.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	61d3      	str	r3, [r2, #28]
 8001620:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162c:	2301      	movs	r3, #1
 800162e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d118      	bne.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163c:	4b43      	ldr	r3, [pc, #268]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a42      	ldr	r2, [pc, #264]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001648:	f7fe fdd8 	bl	80001fc <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	e008      	b.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001650:	f7fe fdd4 	bl	80001fc <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e06d      	b.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001676:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02e      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d027      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800168c:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001694:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016a2:	4a29      	ldr	r2, [pc, #164]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d014      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7fe fda3 	bl	80001fc <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7fe fd9f 	bl	80001fc <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e036      	b.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ee      	beq.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4917      	ldr	r1, [pc, #92]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	490b      	ldr	r1, [pc, #44]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	4904      	ldr	r1, [pc, #16]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	42420440 	.word	0x42420440

08001754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e053      	b.n	800180e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d106      	bne.n	8001786 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f002 f817 	bl	80037b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2202      	movs	r2, #2
 800178a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800179c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	ea42 0103 	orr.w	r1, r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	0c1a      	lsrs	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f002 0204 	and.w	r2, r2, #4
 80017ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69da      	ldr	r2, [r3, #28]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e01d      	b.n	8001864 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d106      	bne.n	8001842 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f002 f805 	bl	800384c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3304      	adds	r3, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f000 faf1 	bl	8001e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b06      	cmp	r3, #6
 8001894:	d007      	beq.n	80018a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e01d      	b.n	8001900 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d106      	bne.n	80018de <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f815 	bl	8001908 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f000 faa3 	bl	8001e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e02d      	b.n	800198a <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f825 	bl	8001992 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f000 fa6e 	bl	8001e3c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0208 	bic.w	r2, r2, #8
 800196e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d122      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d11b      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0202 	mvn.w	r2, #2
 80019d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fa0d 	bl	8001e06 <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fa00 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa0f 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d122      	bne.n	8001a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d11b      	bne.n	8001a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0204 	mvn.w	r2, #4
 8001a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f9e3 	bl	8001e06 <HAL_TIM_IC_CaptureCallback>
 8001a40:	e005      	b.n	8001a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f9d6 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f9e5 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d122      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d11b      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0208 	mvn.w	r2, #8
 8001a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f9b9 	bl	8001e06 <HAL_TIM_IC_CaptureCallback>
 8001a94:	e005      	b.n	8001aa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f9ac 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f9bb 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d122      	bne.n	8001afc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d11b      	bne.n	8001afc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0210 	mvn.w	r2, #16
 8001acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f98f 	bl	8001e06 <HAL_TIM_IC_CaptureCallback>
 8001ae8:	e005      	b.n	8001af6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f982 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f991 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10e      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0201 	mvn.w	r2, #1
 8001b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f95d 	bl	8001de2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	2b80      	cmp	r3, #128	; 0x80
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d107      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fc92 	bl	8002478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5e:	2b40      	cmp	r3, #64	; 0x40
 8001b60:	d10e      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d107      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f955 	bl	8001e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d10e      	bne.n	8001bac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d107      	bne.n	8001bac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0220 	mvn.w	r2, #32
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fc5d 	bl	8002466 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_OC_ConfigChannel+0x1a>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e04e      	b.n	8001c6c <HAL_TIM_OC_ConfigChannel+0xb8>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d839      	bhi.n	8001c58 <HAL_TIM_OC_ConfigChannel+0xa4>
 8001be4:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <HAL_TIM_OC_ConfigChannel+0x38>)
 8001be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	08001c21 	.word	0x08001c21
 8001bf0:	08001c59 	.word	0x08001c59
 8001bf4:	08001c59 	.word	0x08001c59
 8001bf8:	08001c59 	.word	0x08001c59
 8001bfc:	08001c2f 	.word	0x08001c2f
 8001c00:	08001c59 	.word	0x08001c59
 8001c04:	08001c59 	.word	0x08001c59
 8001c08:	08001c59 	.word	0x08001c59
 8001c0c:	08001c3d 	.word	0x08001c3d
 8001c10:	08001c59 	.word	0x08001c59
 8001c14:	08001c59 	.word	0x08001c59
 8001c18:	08001c59 	.word	0x08001c59
 8001c1c:	08001c4b 	.word	0x08001c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f96a 	bl	8001f00 <TIM_OC1_SetConfig>
      break;
 8001c2c:	e015      	b.n	8001c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f9c9 	bl	8001fcc <TIM_OC2_SetConfig>
      break;
 8001c3a:	e00e      	b.n	8001c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fa2c 	bl	80020a0 <TIM_OC3_SetConfig>
      break;
 8001c48:	e007      	b.n	8001c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fa8f 	bl	8002174 <TIM_OC4_SetConfig>
      break;
 8001c56:	e000      	b.n	8001c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8001c58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_TIM_ConfigClockSource+0x18>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e0a6      	b.n	8001dda <HAL_TIM_ConfigClockSource+0x166>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d067      	beq.n	8001d94 <HAL_TIM_ConfigClockSource+0x120>
 8001cc4:	2b40      	cmp	r3, #64	; 0x40
 8001cc6:	d80b      	bhi.n	8001ce0 <HAL_TIM_ConfigClockSource+0x6c>
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d073      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0x140>
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d802      	bhi.n	8001cd6 <HAL_TIM_ConfigClockSource+0x62>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d06f      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001cd4:	e078      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d06c      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0x140>
 8001cda:	2b30      	cmp	r3, #48	; 0x30
 8001cdc:	d06a      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001cde:	e073      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ce0:	2b70      	cmp	r3, #112	; 0x70
 8001ce2:	d00d      	beq.n	8001d00 <HAL_TIM_ConfigClockSource+0x8c>
 8001ce4:	2b70      	cmp	r3, #112	; 0x70
 8001ce6:	d804      	bhi.n	8001cf2 <HAL_TIM_ConfigClockSource+0x7e>
 8001ce8:	2b50      	cmp	r3, #80	; 0x50
 8001cea:	d033      	beq.n	8001d54 <HAL_TIM_ConfigClockSource+0xe0>
 8001cec:	2b60      	cmp	r3, #96	; 0x60
 8001cee:	d041      	beq.n	8001d74 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001cf0:	e06a      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf6:	d066      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0x152>
 8001cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfc:	d017      	beq.n	8001d2e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001cfe:	e063      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f000 faf5 	bl	80022fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]
      break;
 8001d2c:	e04c      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6899      	ldr	r1, [r3, #8]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f000 fade 	bl	80022fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d50:	609a      	str	r2, [r3, #8]
      break;
 8001d52:	e039      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f000 fa55 	bl	8002210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2150      	movs	r1, #80	; 0x50
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 faac 	bl	80022ca <TIM_ITRx_SetConfig>
      break;
 8001d72:	e029      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	461a      	mov	r2, r3
 8001d82:	f000 fa73 	bl	800226c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2160      	movs	r1, #96	; 0x60
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fa9c 	bl	80022ca <TIM_ITRx_SetConfig>
      break;
 8001d92:	e019      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	461a      	mov	r2, r3
 8001da2:	f000 fa35 	bl	8002210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2140      	movs	r1, #64	; 0x40
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fa8c 	bl	80022ca <TIM_ITRx_SetConfig>
      break;
 8001db2:	e009      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f000 fa83 	bl	80022ca <TIM_ITRx_SetConfig>
      break;
 8001dc4:	e000      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <TIM_Base_SetConfig+0xb8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00b      	beq.n	8001e6c <TIM_Base_SetConfig+0x30>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5a:	d007      	beq.n	8001e6c <TIM_Base_SetConfig+0x30>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <TIM_Base_SetConfig+0xbc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d003      	beq.n	8001e6c <TIM_Base_SetConfig+0x30>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <TIM_Base_SetConfig+0xc0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d108      	bne.n	8001e7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <TIM_Base_SetConfig+0xb8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00b      	beq.n	8001e9e <TIM_Base_SetConfig+0x62>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d007      	beq.n	8001e9e <TIM_Base_SetConfig+0x62>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <TIM_Base_SetConfig+0xbc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d003      	beq.n	8001e9e <TIM_Base_SetConfig+0x62>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <TIM_Base_SetConfig+0xc0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d108      	bne.n	8001eb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <TIM_Base_SetConfig+0xb8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d103      	bne.n	8001ee4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	615a      	str	r2, [r3, #20]
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40000800 	.word	0x40000800

08001f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	f023 0201 	bic.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f023 0302 	bic.w	r3, r3, #2
 8001f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <TIM_OC1_SetConfig+0xc8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d10c      	bne.n	8001f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 0308 	bic.w	r3, r3, #8
 8001f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <TIM_OC1_SetConfig+0xc8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d111      	bne.n	8001fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	621a      	str	r2, [r3, #32]
}
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40012c00 	.word	0x40012c00

08001fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f023 0210 	bic.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 0320 	bic.w	r3, r3, #32
 8002016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <TIM_OC2_SetConfig+0xd0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d10d      	bne.n	8002048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <TIM_OC2_SetConfig+0xd0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d113      	bne.n	8002078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800205e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	621a      	str	r2, [r3, #32]
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40012c00 	.word	0x40012c00

080020a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <TIM_OC3_SetConfig+0xd0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10d      	bne.n	800211a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <TIM_OC3_SetConfig+0xd0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d113      	bne.n	800214a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	621a      	str	r2, [r3, #32]
}
 8002164:	bf00      	nop
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40012c00 	.word	0x40012c00

08002174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	031b      	lsls	r3, r3, #12
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <TIM_OC4_SetConfig+0x98>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d109      	bne.n	80021e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	621a      	str	r2, [r3, #32]
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40012c00 	.word	0x40012c00

08002210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f023 0201 	bic.w	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800223a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f023 030a 	bic.w	r3, r3, #10
 800224c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	621a      	str	r2, [r3, #32]
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 0210 	bic.w	r2, r3, #16
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002296:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	031b      	lsls	r3, r3, #12
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	621a      	str	r2, [r3, #32]
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f043 0307 	orr.w	r3, r3, #7
 80022ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	609a      	str	r2, [r3, #8]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022fe:	b480      	push	{r7}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	431a      	orrs	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4313      	orrs	r3, r2
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	609a      	str	r2, [r3, #8]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002350:	2302      	movs	r3, #2
 8002352:	e032      	b.n	80023ba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4313      	orrs	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80023dc:	2302      	movs	r3, #2
 80023de:	e03d      	b.n	800245c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
	...

0800248c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_UART_IRQHandler+0x52>
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f98d 	bl	80027f6 <UART_Receive_IT>
      return;
 80024dc:	e0cc      	b.n	8002678 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80ab 	beq.w	800263c <HAL_UART_IRQHandler+0x1b0>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_UART_IRQHandler+0x70>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80a0 	beq.w	800263c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_UART_IRQHandler+0x90>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_UART_IRQHandler+0xb0>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	f043 0202 	orr.w	r2, r3, #2
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_UART_IRQHandler+0xd0>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_UART_IRQHandler+0xf0>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	f043 0208 	orr.w	r2, r3, #8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d078      	beq.n	8002676 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_UART_IRQHandler+0x112>
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f92c 	bl	80027f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <HAL_UART_IRQHandler+0x13a>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d031      	beq.n	800262a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f877 	bl	80026ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d023      	beq.n	8002622 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d013      	beq.n	800261a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	4a22      	ldr	r2, [pc, #136]	; (8002680 <HAL_UART_IRQHandler+0x1f4>)
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe f9fe 	bl	8000a00 <HAL_DMA_Abort_IT>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002614:	4610      	mov	r0, r2
 8002616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	e00e      	b.n	8002638 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f844 	bl	80026a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	e00a      	b.n	8002638 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f840 	bl	80026a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	e006      	b.n	8002638 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f83c 	bl	80026a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002636:	e01e      	b.n	8002676 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002638:	bf00      	nop
    return;
 800263a:	e01c      	b.n	8002676 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_UART_IRQHandler+0x1cc>
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f863 	bl	800271c <UART_Transmit_IT>
    return;
 8002656:	e00f      	b.n	8002678 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_UART_IRQHandler+0x1ec>
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8aa 	bl	80027c6 <UART_EndTransmit_IT>
    return;
 8002672:	bf00      	nop
 8002674:	e000      	b.n	8002678 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002676:	bf00      	nop
  }
}
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	080026f5 	.word	0x080026f5

08002684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff ffca 	bl	80026a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b21      	cmp	r3, #33	; 0x21
 800272e:	d144      	bne.n	80027ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002738:	d11a      	bne.n	8002770 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800274e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	621a      	str	r2, [r3, #32]
 8002762:	e00e      	b.n	8002782 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	621a      	str	r2, [r3, #32]
 800276e:	e008      	b.n	8002782 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	1c59      	adds	r1, r3, #1
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6211      	str	r1, [r2, #32]
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29b      	uxth	r3, r3
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4619      	mov	r1, r3
 8002790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
  }
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff4c 	bl	8002684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b22      	cmp	r3, #34	; 0x22
 8002808:	d171      	bne.n	80028ee <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	d123      	bne.n	800285c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10e      	bne.n	8002840 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	1c9a      	adds	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
 800283e:	e029      	b.n	8002894 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	b29b      	uxth	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
 800285a:	e01b      	b.n	8002894 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6858      	ldr	r0, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6291      	str	r1, [r2, #40]	; 0x28
 8002874:	b2c2      	uxtb	r2, r0
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e00c      	b.n	8002894 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	1c58      	adds	r0, r3, #1
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6288      	str	r0, [r1, #40]	; 0x28
 800288c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4619      	mov	r1, r3
 80028a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d120      	bne.n	80028ea <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0220 	bic.w	r2, r2, #32
 80028b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fed8 	bl	8002696 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e002      	b.n	80028f0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <simple_delay_ms>:




void simple_delay_ms(const uint16_t ms)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  uint32_t i = ms * 7200;
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	60fb      	str	r3, [r7, #12]
  while (i-- > 0) {
 800290e:	e000      	b.n	8002912 <simple_delay_ms+0x1a>
    asm("nop");
 8002910:	bf00      	nop
  while (i-- > 0) {
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	60fa      	str	r2, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f9      	bne.n	8002910 <simple_delay_ms+0x18>
  }
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <simple_delay_us>:

void simple_delay_us(const uint16_t us)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	80fb      	strh	r3, [r7, #6]
  uint16_t i = us * 7;
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	461a      	mov	r2, r3
 8002934:	00d2      	lsls	r2, r2, #3
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	81fb      	strh	r3, [r7, #14]
  while (i-- > 0) {
 800293a:	e000      	b.n	800293e <simple_delay_us+0x18>
    asm("nop");
 800293c:	bf00      	nop
  while (i-- > 0) {
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	81fa      	strh	r2, [r7, #14]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <simple_delay_us+0x16>
  }
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <crc8>:
 *      Author: kowma
 */
#include "main.h"
#include "ds18b20.h"

unsigned char crc8(void const *mem, size_t len) {
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	75fb      	strb	r3, [r7, #23]
	unsigned char const *data = mem;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	613b      	str	r3, [r7, #16]

		while (len--) {
 8002964:	e022      	b.n	80029ac <crc8+0x5a>
			uint8_t inbyte = *data++;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	613a      	str	r2, [r7, #16]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 8; i; i--) {
 8002970:	2308      	movs	r3, #8
 8002972:	73bb      	strb	r3, [r7, #14]
 8002974:	e017      	b.n	80029a6 <crc8+0x54>
				uint8_t mix = (crc ^ inbyte) & 0x01;
 8002976:	7dfa      	ldrb	r2, [r7, #23]
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	4053      	eors	r3, r2
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	737b      	strb	r3, [r7, #13]
				crc >>= 1;
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
				if (mix) crc ^= 0x8C;
 800298a:	7b7b      	ldrb	r3, [r7, #13]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <crc8+0x48>
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002996:	43db      	mvns	r3, r3
 8002998:	75fb      	strb	r3, [r7, #23]
				inbyte >>= 1;
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 8; i; i--) {
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	73bb      	strb	r3, [r7, #14]
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e4      	bne.n	8002976 <crc8+0x24>
		while (len--) {
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	603a      	str	r2, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1d7      	bne.n	8002966 <crc8+0x14>
			}
		}
		return crc;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
	...

080029c4 <oneWire_direction_set>:
}scratchpad[MAX_DS18B20_SENSORS_AMOUNT];



void oneWire_direction_set(uint8_t direction)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef	GPIO_InitStruct;
	if(direction == ONE_WIRE_BUS_INPUT)
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10e      	bne.n	80029f2 <oneWire_direction_set+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80029dc:	2301      	movs	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin ;// Pin for 1-Wire bus
 80029e0:	2308      	movs	r3, #8
 80029e2:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 80029e4:	f107 0308 	add.w	r3, r7, #8
 80029e8:	4619      	mov	r1, r3
 80029ea:	480c      	ldr	r0, [pc, #48]	; (8002a1c <oneWire_direction_set+0x58>)
 80029ec:	f7fe f87e 	bl	8000aec <HAL_GPIO_Init>
	else
	{
		// error
	}

}
 80029f0:	e010      	b.n	8002a14 <oneWire_direction_set+0x50>
	else if(direction ==  ONE_WIRE_BUS_OUTPUT)
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d10d      	bne.n	8002a14 <oneWire_direction_set+0x50>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 80029f8:	2311      	movs	r3, #17
 80029fa:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002a00:	2301      	movs	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin; // Pin for 1-Wire bus
 8002a04:	2308      	movs	r3, #8
 8002a06:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4803      	ldr	r0, [pc, #12]	; (8002a1c <oneWire_direction_set+0x58>)
 8002a10:	f7fe f86c 	bl	8000aec <HAL_GPIO_Init>
}
 8002a14:	bf00      	nop
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40010800 	.word	0x40010800

08002a20 <oneWire_init>:

uint8_t oneWire_init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
	uint8_t i;
	//TIM2->CR1 |= (1<<3); //OPM
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002a26:	2002      	movs	r0, #2
 8002a28:	f7ff ffcc 	bl	80029c4 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <oneWire_init+0x54>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <oneWire_init+0x54>)
 8002a32:	f023 0308 	bic.w	r3, r3, #8
 8002a36:	60d3      	str	r3, [r2, #12]
	simple_delay_us(500);
 8002a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a3c:	f7ff ff73 	bl	8002926 <simple_delay_us>

	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7ff ffbf 	bl	80029c4 <oneWire_direction_set>
	simple_delay_us(70);
 8002a46:	2046      	movs	r0, #70	; 0x46
 8002a48:	f7ff ff6d 	bl	8002926 <simple_delay_us>

	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin) // if 0 - then there is devices on bus
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <oneWire_init+0x54>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <oneWire_init+0x3e>
	{
		i = ONE_WIRE_PRESENCE_FAIL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	71fb      	strb	r3, [r7, #7]
 8002a5c:	e001      	b.n	8002a62 <oneWire_init+0x42>
	}
	else i = ONE_WIRE_PRESENCE_SUCCESS;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	71fb      	strb	r3, [r7, #7]
	simple_delay_us(410);
 8002a62:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002a66:	f7ff ff5e 	bl	8002926 <simple_delay_us>
	return i;
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40010800 	.word	0x40010800

08002a78 <oneWire_writeBit>:

void oneWire_writeBit(uint8_t value)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin; // todo check
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <oneWire_writeBit+0x50>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <oneWire_writeBit+0x50>)
 8002a88:	f023 0308 	bic.w	r3, r3, #8
 8002a8c:	60d3      	str	r3, [r2, #12]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7ff ff98 	bl	80029c4 <oneWire_direction_set>
	if(value)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <oneWire_writeBit+0x36>
	{
		simple_delay_us(6);
 8002a9a:	2006      	movs	r0, #6
 8002a9c:	f7ff ff43 	bl	8002926 <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7ff ff8f 	bl	80029c4 <oneWire_direction_set>
		simple_delay_us(64);
 8002aa6:	2040      	movs	r0, #64	; 0x40
 8002aa8:	f7ff ff3d 	bl	8002926 <simple_delay_us>
	{
		simple_delay_us(60);
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
		simple_delay_us(10);
	}
}
 8002aac:	e008      	b.n	8002ac0 <oneWire_writeBit+0x48>
		simple_delay_us(60);
 8002aae:	203c      	movs	r0, #60	; 0x3c
 8002ab0:	f7ff ff39 	bl	8002926 <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff ff85 	bl	80029c4 <oneWire_direction_set>
		simple_delay_us(10);
 8002aba:	200a      	movs	r0, #10
 8002abc:	f7ff ff33 	bl	8002926 <simple_delay_us>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40010800 	.word	0x40010800

08002acc <oneWire_writeByte>:
void oneWire_writeByte(uint8_t byte)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f7ff ff74 	bl	80029c4 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <oneWire_writeByte+0x50>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <oneWire_writeByte+0x50>)
 8002ae2:	f023 0308 	bic.w	r3, r3, #8
 8002ae6:	60d3      	str	r3, [r2, #12]
	for(uint8_t i=0; i<8; i++){
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	e00f      	b.n	8002b0e <oneWire_writeByte+0x42>
		oneWire_writeBit(byte & 1<<i);
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2201      	movs	r2, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	b25a      	sxtb	r2, r3
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ffb8 	bl	8002a78 <oneWire_writeBit>
	for(uint8_t i=0; i<8; i++){
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b07      	cmp	r3, #7
 8002b12:	d9ec      	bls.n	8002aee <oneWire_writeByte+0x22>
	}
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40010800 	.word	0x40010800

08002b20 <oneWire_readbit>:

uint8_t oneWire_readbit(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002b24:	2002      	movs	r0, #2
 8002b26:	f7ff ff4d 	bl	80029c4 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <oneWire_readbit+0x4c>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <oneWire_readbit+0x4c>)
 8002b30:	f023 0308 	bic.w	r3, r3, #8
 8002b34:	60d3      	str	r3, [r2, #12]
	simple_delay_us(2);
 8002b36:	2002      	movs	r0, #2
 8002b38:	f7ff fef5 	bl	8002926 <simple_delay_us>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7ff ff41 	bl	80029c4 <oneWire_direction_set>
	simple_delay_us(10);
 8002b42:	200a      	movs	r0, #10
 8002b44:	f7ff feef 	bl	8002926 <simple_delay_us>
	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin)
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <oneWire_readbit+0x4c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <oneWire_readbit+0x3e>
	{
		simple_delay_us(60);
 8002b54:	203c      	movs	r0, #60	; 0x3c
 8002b56:	f7ff fee6 	bl	8002926 <simple_delay_us>
		return 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e003      	b.n	8002b66 <oneWire_readbit+0x46>
	}
	else{
		simple_delay_us(60);
 8002b5e:	203c      	movs	r0, #60	; 0x3c
 8002b60:	f7ff fee1 	bl	8002926 <simple_delay_us>
		return 0;
 8002b64:	2300      	movs	r3, #0
	}
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40010800 	.word	0x40010800

08002b70 <write_data_to_struct>:
	}
	return devices_counter;
}

void write_data_to_struct(uint8_t bit_cnt, uint8_t bit_data, uint8_t deviceNo)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	71bb      	strb	r3, [r7, #6]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	717b      	strb	r3, [r7, #5]
	if(bit_cnt < 8) // write to family no
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d815      	bhi.n	8002bb4 <write_data_to_struct+0x44>
	{
		 if(bit_data) rom_address[deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d06e      	beq.n	8002c6c <write_data_to_struct+0xfc>
 8002b8e:	797b      	ldrb	r3, [r7, #5]
 8002b90:	4a39      	ldr	r2, [pc, #228]	; (8002c78 <write_data_to_struct+0x108>)
 8002b92:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	b25a      	sxtb	r2, r3
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b25a      	sxtb	r2, r3
 8002ba8:	797b      	ldrb	r3, [r7, #5]
 8002baa:	b2d1      	uxtb	r1, r2
 8002bac:	4a32      	ldr	r2, [pc, #200]	; (8002c78 <write_data_to_struct+0x108>)
 8002bae:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	}
	else if( bit_cnt >= 56) // CRC
	{
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
	}
}
 8002bb2:	e05b      	b.n	8002c6c <write_data_to_struct+0xfc>
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	2b07      	cmp	r3, #7
 8002bb8:	d919      	bls.n	8002bee <write_data_to_struct+0x7e>
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	2b27      	cmp	r3, #39	; 0x27
 8002bbe:	d816      	bhi.n	8002bee <write_data_to_struct+0x7e>
		if(bit_data) rom_address[deviceNo].ROM_NO_FIRST_HALF |= (1 << (bit_cnt - 8));
 8002bc0:	79bb      	ldrb	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d052      	beq.n	8002c6c <write_data_to_struct+0xfc>
 8002bc6:	797b      	ldrb	r3, [r7, #5]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <write_data_to_struct+0x108>)
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	3b08      	subs	r3, #8
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	797b      	ldrb	r3, [r7, #5]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4925      	ldr	r1, [pc, #148]	; (8002c78 <write_data_to_struct+0x108>)
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	f8c3 2001 	str.w	r2, [r3, #1]
 8002bec:	e03e      	b.n	8002c6c <write_data_to_struct+0xfc>
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) )  // Serial no first half
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	2b27      	cmp	r3, #39	; 0x27
 8002bf2:	d91e      	bls.n	8002c32 <write_data_to_struct+0xc2>
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2b37      	cmp	r3, #55	; 0x37
 8002bf8:	d81b      	bhi.n	8002c32 <write_data_to_struct+0xc2>
		if(bit_data) rom_address[deviceNo].ROM_NO_SECOUND_HALF |= (1 << (bit_cnt - 40 ));
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d035      	beq.n	8002c6c <write_data_to_struct+0xfc>
 8002c00:	797b      	ldrb	r3, [r7, #5]
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <write_data_to_struct+0x108>)
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	3b28      	subs	r3, #40	; 0x28
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21a      	sxth	r2, r3
 8002c20:	797b      	ldrb	r3, [r7, #5]
 8002c22:	b291      	uxth	r1, r2
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <write_data_to_struct+0x108>)
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	f8a3 2005 	strh.w	r2, [r3, #5]
 8002c30:	e01c      	b.n	8002c6c <write_data_to_struct+0xfc>
	else if( bit_cnt >= 56) // CRC
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b37      	cmp	r3, #55	; 0x37
 8002c36:	d919      	bls.n	8002c6c <write_data_to_struct+0xfc>
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
 8002c38:	79bb      	ldrb	r3, [r7, #6]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <write_data_to_struct+0xfc>
 8002c3e:	797b      	ldrb	r3, [r7, #5]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <write_data_to_struct+0x108>)
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	79db      	ldrb	r3, [r3, #7]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	b25a      	sxtb	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	3b38      	subs	r3, #56	; 0x38
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	b25b      	sxtb	r3, r3
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	b25a      	sxtb	r2, r3
 8002c5c:	797b      	ldrb	r3, [r7, #5]
 8002c5e:	b2d1      	uxtb	r1, r2
 8002c60:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <write_data_to_struct+0x108>)
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	460a      	mov	r2, r1
 8002c68:	71da      	strb	r2, [r3, #7]
}
 8002c6a:	e7ff      	b.n	8002c6c <write_data_to_struct+0xfc>
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	200000bc 	.word	0x200000bc

08002c7c <read_address_bit_form_struct>:
//		if(bit_data) ROM_CRC[deviceNo] |= (1 << (bit_cnt - 56));
//	}
//}

uint8_t read_address_bit_form_struct(uint8_t bit_cnt, uint8_t deviceNo)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	460a      	mov	r2, r1
 8002c86:	71fb      	strb	r3, [r7, #7]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	71bb      	strb	r3, [r7, #6]
	if(bit_cnt < 8) // write to family no
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	2b07      	cmp	r3, #7
 8002c90:	d810      	bhi.n	8002cb4 <read_address_bit_form_struct+0x38>
	{
		 return ((rom_address[deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
 8002c92:	79bb      	ldrb	r3, [r7, #6]
 8002c94:	4a2e      	ldr	r2, [pc, #184]	; (8002d50 <read_address_bit_form_struct+0xd4>)
 8002c96:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bfcc      	ite	gt
 8002cac:	2301      	movgt	r3, #1
 8002cae:	2300      	movle	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e048      	b.n	8002d46 <read_address_bit_form_struct+0xca>
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d914      	bls.n	8002ce4 <read_address_bit_form_struct+0x68>
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b27      	cmp	r3, #39	; 0x27
 8002cbe:	d811      	bhi.n	8002ce4 <read_address_bit_form_struct+0x68>
	{
		return ((rom_address[deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
 8002cc0:	79bb      	ldrb	r3, [r7, #6]
 8002cc2:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <read_address_bit_form_struct+0xd4>)
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	3a08      	subs	r2, #8
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e030      	b.n	8002d46 <read_address_bit_form_struct+0xca>
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) ) // Serial no first half
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2b27      	cmp	r3, #39	; 0x27
 8002ce8:	d916      	bls.n	8002d18 <read_address_bit_form_struct+0x9c>
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	2b37      	cmp	r3, #55	; 0x37
 8002cee:	d813      	bhi.n	8002d18 <read_address_bit_form_struct+0x9c>
	{
		return ((rom_address[deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
 8002cf0:	79bb      	ldrb	r3, [r7, #6]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <read_address_bit_form_struct+0xd4>)
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	4619      	mov	r1, r3
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	3b28      	subs	r3, #40	; 0x28
 8002d04:	2201      	movs	r2, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	400b      	ands	r3, r1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bfcc      	ite	gt
 8002d10:	2301      	movgt	r3, #1
 8002d12:	2300      	movle	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e016      	b.n	8002d46 <read_address_bit_form_struct+0xca>
	}
	else if( bit_cnt >= 56) // CRC
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	2b37      	cmp	r3, #55	; 0x37
 8002d1c:	d912      	bls.n	8002d44 <read_address_bit_form_struct+0xc8>
	{
		return ((rom_address[deviceNo].ROM_CRC & (1 << (bit_cnt - 56) )) > 0) ;
 8002d1e:	79bb      	ldrb	r3, [r7, #6]
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <read_address_bit_form_struct+0xd4>)
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	79db      	ldrb	r3, [r3, #7]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	3b38      	subs	r3, #56	; 0x38
 8002d30:	2201      	movs	r2, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	400b      	ands	r3, r1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bfcc      	ite	gt
 8002d3c:	2301      	movgt	r3, #1
 8002d3e:	2300      	movle	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e000      	b.n	8002d46 <read_address_bit_form_struct+0xca>
	}
	else // not used // TODO add asset
	{
		return 0;
 8002d44:	2300      	movs	r3, #0
	}

}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	200000bc 	.word	0x200000bc

08002d54 <ds18b20_check_crc>:
//	}
//}


uint8_t ds18b20_check_crc(uint8_t DS18B20_sensor_no)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t sensor_crc;
	sensor_crc = crc8(&rom_address[DS18B20_sensor_no], 7);
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <ds18b20_check_crc+0x40>)
 8002d64:	4413      	add	r3, r2
 8002d66:	2107      	movs	r1, #7
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fdf2 	bl	8002952 <crc8>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	73fb      	strb	r3, [r7, #15]
	if(sensor_crc == rom_address[DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <ds18b20_check_crc+0x40>)
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	79db      	ldrb	r3, [r3, #7]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d101      	bne.n	8002d88 <ds18b20_check_crc+0x34>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <ds18b20_check_crc+0x36>
	else return DS18B20_CRC_ACK_FAIL;
 8002d88:	2300      	movs	r3, #0

}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200000bc 	.word	0x200000bc

08002d98 <ds18b20_search_rom>:
/***
 * searching algorithm based on :
 * https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/187.html
 */
uint8_t ds18b20_search_rom(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	71fb      	strb	r3, [r7, #7]
 8002da2:	2300      	movs	r3, #0
 8002da4:	707b      	strb	r3, [r7, #1]
 8002da6:	2300      	movs	r3, #0
 8002da8:	703b      	strb	r3, [r7, #0]
 8002daa:	2300      	movs	r3, #0
 8002dac:	71bb      	strb	r3, [r7, #6]
	uint8_t lastDiscrepancy = 0, searchDirection = 0, lastZero = 0; // może byc 0 bo na pierwszych 8 pozycjach zapisana jest rodzina urządzeń
 8002dae:	2300      	movs	r3, #0
 8002db0:	717b      	strb	r3, [r7, #5]
 8002db2:	2300      	movs	r3, #0
 8002db4:	713b      	strb	r3, [r7, #4]
 8002db6:	2300      	movs	r3, #0
 8002db8:	70fb      	strb	r3, [r7, #3]
	do{
		if(oneWire_init() == ONE_WIRE_PRESENCE_FAIL) return ROM_SARCHING_ERROR;
 8002dba:	f7ff fe31 	bl	8002a20 <oneWire_init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <ds18b20_search_rom+0x30>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e07d      	b.n	8002ec4 <ds18b20_search_rom+0x12c>

		// there is at least one sensor - someone send presensce ack
		oneWire_writeByte(0xF0);
 8002dc8:	20f0      	movs	r0, #240	; 0xf0
 8002dca:	f7ff fe7f 	bl	8002acc <oneWire_writeByte>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	71fb      	strb	r3, [r7, #7]
 8002dd2:	e04c      	b.n	8002e6e <ds18b20_search_rom+0xd6>
		{
			true_bit = oneWire_readbit();
 8002dd4:	f7ff fea4 	bl	8002b20 <oneWire_readbit>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	707b      	strb	r3, [r7, #1]
			complement_bit = oneWire_readbit();
 8002ddc:	f7ff fea0 	bl	8002b20 <oneWire_readbit>
 8002de0:	4603      	mov	r3, r0
 8002de2:	703b      	strb	r3, [r7, #0]
			if( ( true_bit ==  0 ) && (complement_bit == 0) ) {
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12d      	bne.n	8002e46 <ds18b20_search_rom+0xae>
 8002dea:	783b      	ldrb	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d12a      	bne.n	8002e46 <ds18b20_search_rom+0xae>

				if((bit_counter + 1) ==  lastDiscrepancy)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	797b      	ldrb	r3, [r7, #5]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d102      	bne.n	8002e00 <ds18b20_search_rom+0x68>
				{
					searchDirection = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	713b      	strb	r3, [r7, #4]
 8002dfe:	e011      	b.n	8002e24 <ds18b20_search_rom+0x8c>
				}
				else if((bit_counter + 1) > lastDiscrepancy )
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	797b      	ldrb	r3, [r7, #5]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	dd02      	ble.n	8002e10 <ds18b20_search_rom+0x78>
				{
					searchDirection = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	713b      	strb	r3, [r7, #4]
 8002e0e:	e009      	b.n	8002e24 <ds18b20_search_rom+0x8c>

				}
				else // (bit_counter + 1) < lastDiscrepancy
				{
					searchDirection = read_address_bit_form_struct(bit_counter, devices_counter-1);
 8002e10:	79bb      	ldrb	r3, [r7, #6]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff2e 	bl	8002c7c <read_address_bit_form_struct>
 8002e20:	4603      	mov	r3, r0
 8002e22:	713b      	strb	r3, [r7, #4]
				}

				oneWire_writeBit(searchDirection);
 8002e24:	793b      	ldrb	r3, [r7, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fe26 	bl	8002a78 <oneWire_writeBit>
				write_data_to_struct(bit_counter, searchDirection, devices_counter);
 8002e2c:	79ba      	ldrb	r2, [r7, #6]
 8002e2e:	7939      	ldrb	r1, [r7, #4]
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fe9c 	bl	8002b70 <write_data_to_struct>
				//write_data_to_tables(bit_counter, searchDirection, devices_counter); // ROM tables


				searchDirection ? (lastZero = lastZero) : (lastZero = bit_counter+1);
 8002e38:	793b      	ldrb	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d114      	bne.n	8002e68 <ds18b20_search_rom+0xd0>
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	3301      	adds	r3, #1
 8002e42:	70fb      	strb	r3, [r7, #3]
 8002e44:	e010      	b.n	8002e68 <ds18b20_search_rom+0xd0>
			}
			else if( true_bit != complement_bit)
 8002e46:	787a      	ldrb	r2, [r7, #1]
 8002e48:	783b      	ldrb	r3, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d00a      	beq.n	8002e64 <ds18b20_search_rom+0xcc>
			{
				write_data_to_struct(bit_counter, true_bit, devices_counter);
 8002e4e:	79ba      	ldrb	r2, [r7, #6]
 8002e50:	7879      	ldrb	r1, [r7, #1]
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fe8b 	bl	8002b70 <write_data_to_struct>
				//write_data_to_tables(bit_counter, true_bit, devices_counter); // ROM tables
				oneWire_writeBit(true_bit);
 8002e5a:	787b      	ldrb	r3, [r7, #1]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fe0b 	bl	8002a78 <oneWire_writeBit>
 8002e62:	e001      	b.n	8002e68 <ds18b20_search_rom+0xd0>
			}
			else{
				return ROM_SARCHING_ERROR;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e02d      	b.n	8002ec4 <ds18b20_search_rom+0x12c>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	71fb      	strb	r3, [r7, #7]
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b3f      	cmp	r3, #63	; 0x3f
 8002e72:	d9af      	bls.n	8002dd4 <ds18b20_search_rom+0x3c>
			}
		}
		lastDiscrepancy = lastZero;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	717b      	strb	r3, [r7, #5]
		lastZero = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	70fb      	strb	r3, [r7, #3]
		if(lastDiscrepancy != 0)
 8002e7c:	797b      	ldrb	r3, [r7, #5]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <ds18b20_search_rom+0xf0>
		{
			devices_counter++  ;
 8002e82:	79bb      	ldrb	r3, [r7, #6]
 8002e84:	3301      	adds	r3, #1
 8002e86:	71bb      	strb	r3, [r7, #6]
		}

	}while(lastDiscrepancy != 0);
 8002e88:	797b      	ldrb	r3, [r7, #5]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d195      	bne.n	8002dba <ds18b20_search_rom+0x22>

	ds18b20_sensors_amount = devices_counter + 1; //counter from 0 to device amount - 1
 8002e8e:	79bb      	ldrb	r3, [r7, #6]
 8002e90:	3301      	adds	r3, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <ds18b20_search_rom+0x134>)
 8002e96:	701a      	strb	r2, [r3, #0]


	// check CRC codes ..

	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	70bb      	strb	r3, [r7, #2]
 8002e9c:	e00b      	b.n	8002eb6 <ds18b20_search_rom+0x11e>
	{
		if(ds18b20_check_crc(founded_sensor_no) == DS18B20_CRC_ACK_FAIL)
 8002e9e:	78bb      	ldrb	r3, [r7, #2]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff57 	bl	8002d54 <ds18b20_check_crc>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <ds18b20_search_rom+0x118>
		{
			return DS18B20_CRC_ACK_FAIL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e009      	b.n	8002ec4 <ds18b20_search_rom+0x12c>
	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8002eb0:	78bb      	ldrb	r3, [r7, #2]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	70bb      	strb	r3, [r7, #2]
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <ds18b20_search_rom+0x134>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	78ba      	ldrb	r2, [r7, #2]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3ed      	bcc.n	8002e9e <ds18b20_search_rom+0x106>
		}
	}
	return ROM_SARCHING_OK;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000028 	.word	0x20000028

08002ed0 <ds18b20_initalize>:
	}
	*(temperature_str_hex++) = '\0';
}

void ds18b20_initalize(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	ds18b20_search_rom();
 8002ed4:	f7ff ff60 	bl	8002d98 <ds18b20_search_rom>
	ui_change_ds18B20_status(ds18b20_sensors_amount);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <ds18b20_initalize+0x18>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f960 	bl	80031a4 <ui_change_ds18B20_status>
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000028 	.word	0x20000028

08002eec <LCD_Data_Bus_Input>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void LCD_Data_Bus_Input(void){
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
	GPIOB->CRL = 0x88888888;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <LCD_Data_Bus_Input+0x14>)
 8002ef2:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002ef6:	601a      	str	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	40010c00 	.word	0x40010c00

08002f04 <LCD_Data_Bus_Output>:
void LCD_Data_Bus_Output(void){
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	GPIOB->CRL = 0x77777777;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <LCD_Data_Bus_Output+0x14>)
 8002f0a:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	40010c00 	.word	0x40010c00

08002f1c <_LCD_Write>:


void _LCD_Write(uint8_t data){
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
	LCD_Data_Bus_Output();
 8002f26:	f7ff ffed 	bl	8002f04 <LCD_Data_Bus_Output>

	LCD_RW_GPIO_Port->ODR &= ~LCD_RW_Pin;
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <_LCD_Write+0x58>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <_LCD_Write+0x58>)
 8002f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f34:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <_LCD_Write+0x58>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <_LCD_Write+0x58>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	60d3      	str	r3, [r2, #12]
	LCD_D0_GPIO_Port->ODR &= 0xff00;
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <_LCD_Write+0x58>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <_LCD_Write+0x58>)
 8002f48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f4c:	60d3      	str	r3, [r2, #12]
	LCD_D0_GPIO_Port->ODR |= data;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <_LCD_Write+0x58>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	4907      	ldr	r1, [pc, #28]	; (8002f74 <_LCD_Write+0x58>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60cb      	str	r3, [r1, #12]
	simple_delay_us(4);
 8002f5a:	2004      	movs	r0, #4
 8002f5c:	f7ff fce3 	bl	8002926 <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <_LCD_Write+0x58>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <_LCD_Write+0x58>)
 8002f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6a:	60d3      	str	r3, [r2, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40010c00 	.word	0x40010c00

08002f78 <_LCD_Read>:
//
// Funkcja odczytu bajtu z wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------

uint8_t _LCD_Read(void){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	71fb      	strb	r3, [r7, #7]

	LCD_Data_Bus_Input();
 8002f82:	f7ff ffb3 	bl	8002eec <LCD_Data_Bus_Input>

	LCD_RW_GPIO_Port->ODR |= LCD_RW_Pin;
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <_LCD_Read+0x50>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a0f      	ldr	r2, [pc, #60]	; (8002fc8 <_LCD_Read+0x50>)
 8002f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f90:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <_LCD_Read+0x50>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <_LCD_Read+0x50>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	60d3      	str	r3, [r2, #12]
	simple_delay_us(10);
 8002f9e:	200a      	movs	r0, #10
 8002fa0:	f7ff fcc1 	bl	8002926 <simple_delay_us>
	tmp = (uint8_t) (LCD_D0_GPIO_Port->IDR & 0x00ff);
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <_LCD_Read+0x50>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	71fb      	strb	r3, [r7, #7]
	simple_delay_us(2);
 8002faa:	2002      	movs	r0, #2
 8002fac:	f7ff fcbb 	bl	8002926 <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <_LCD_Read+0x50>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <_LCD_Read+0x50>)
 8002fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fba:	60d3      	str	r3, [r2, #12]
	return tmp;
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40010c00 	.word	0x40010c00

08002fcc <LCD_WriteCommand>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(uint8_t command){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <LCD_WriteCommand+0x3c>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <LCD_WriteCommand+0x3c>)
 8002fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fe0:	60d3      	str	r3, [r2, #12]
	_LCD_Write(command);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff99 	bl	8002f1c <_LCD_Write>
	simple_delay_us(2);
 8002fea:	2002      	movs	r0, #2
 8002fec:	f7ff fc9b 	bl	8002926 <simple_delay_us>
	while(LCD_ReadStatus() & 0x80);
 8002ff0:	bf00      	nop
 8002ff2:	f000 f80b 	bl	800300c <LCD_ReadStatus>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	dbf9      	blt.n	8002ff2 <LCD_WriteCommand+0x26>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40010800 	.word	0x40010800

0800300c <LCD_ReadStatus>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
uint8_t LCD_ReadStatus(void){
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <LCD_ReadStatus+0x20>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a05      	ldr	r2, [pc, #20]	; (800302c <LCD_ReadStatus+0x20>)
 8003016:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800301a:	60d3      	str	r3, [r2, #12]
	simple_delay_us(2);
 800301c:	2002      	movs	r0, #2
 800301e:	f7ff fc82 	bl	8002926 <simple_delay_us>
	return _LCD_Read();
 8003022:	f7ff ffa9 	bl	8002f78 <_LCD_Read>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40010800 	.word	0x40010800

08003030 <LCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(uint8_t data){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <LCD_WriteData+0x34>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <LCD_WriteData+0x34>)
 8003040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003044:	60d3      	str	r3, [r2, #12]
	_LCD_Write(data);
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff67 	bl	8002f1c <_LCD_Write>
	//simple_delay_ms(10);
	while(LCD_ReadStatus() & 0x80);
 800304e:	bf00      	nop
 8003050:	f7ff ffdc 	bl	800300c <LCD_ReadStatus>
 8003054:	4603      	mov	r3, r0
 8003056:	b25b      	sxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	dbf9      	blt.n	8003050 <LCD_WriteData+0x20>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40010800 	.word	0x40010800

08003068 <LCD_WriteText>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text){
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	while(*text)	LCD_WriteData(*text++);
 8003070:	e006      	b.n	8003080 <LCD_WriteText+0x18>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ffd8 	bl	8003030 <LCD_WriteData>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f4      	bne.n	8003072 <LCD_WriteText+0xa>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0


	LCD_Data_Bus_Output();
 8003096:	f7ff ff35 	bl	8002f04 <LCD_Data_Bus_Output>
	simple_delay_ms(15);
 800309a:	200f      	movs	r0, #15
 800309c:	f7ff fc2c 	bl	80028f8 <simple_delay_ms>
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <LCD_Initalize+0xc0>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <LCD_Initalize+0xc0>)
 80030a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030aa:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <LCD_Initalize+0xc4>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a28      	ldr	r2, [pc, #160]	; (8003154 <LCD_Initalize+0xc4>)
 80030b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b6:	60d3      	str	r3, [r2, #12]
	LCD_RW_GPIO_Port->ODR  &= ~LCD_RW_Pin;
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <LCD_Initalize+0xc4>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <LCD_Initalize+0xc4>)
 80030be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c2:	60d3      	str	r3, [r2, #12]

	for(uint8_t i = 0; i < 3; i++){
 80030c4:	2300      	movs	r3, #0
 80030c6:	71fb      	strb	r3, [r7, #7]
 80030c8:	e01d      	b.n	8003106 <LCD_Initalize+0x76>
		LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <LCD_Initalize+0xc4>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a21      	ldr	r2, [pc, #132]	; (8003154 <LCD_Initalize+0xc4>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	60d3      	str	r3, [r2, #12]
		LCD_D0_GPIO_Port->ODR &= 0xff00;
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <LCD_Initalize+0xc4>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <LCD_Initalize+0xc4>)
 80030dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030e0:	60d3      	str	r3, [r2, #12]
		LCD_D0_GPIO_Port->ODR |=  0x003F;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <LCD_Initalize+0xc4>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <LCD_Initalize+0xc4>)
 80030e8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80030ec:	60d3      	str	r3, [r2, #12]
		LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <LCD_Initalize+0xc4>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <LCD_Initalize+0xc4>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	60d3      	str	r3, [r2, #12]
		simple_delay_ms(5);
 80030fa:	2005      	movs	r0, #5
 80030fc:	f7ff fbfc 	bl	80028f8 <simple_delay_ms>
	for(uint8_t i = 0; i < 3; i++){
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	3301      	adds	r3, #1
 8003104:	71fb      	strb	r3, [r7, #7]
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d9de      	bls.n	80030ca <LCD_Initalize+0x3a>
	  }

	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_8_BIT);
 800310c:	2038      	movs	r0, #56	; 0x38
 800310e:	f7ff ff5d 	bl	8002fcc <LCD_WriteCommand>
	simple_delay_ms(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f7ff fbf0 	bl	80028f8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8003118:	2008      	movs	r0, #8
 800311a:	f7ff ff57 	bl	8002fcc <LCD_WriteCommand>
	simple_delay_ms(1);
 800311e:	2001      	movs	r0, #1
 8003120:	f7ff fbea 	bl	80028f8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_CLEAR);
 8003124:	2001      	movs	r0, #1
 8003126:	f7ff ff51 	bl	8002fcc <LCD_WriteCommand>
	simple_delay_ms(1);
 800312a:	2001      	movs	r0, #1
 800312c:	f7ff fbe4 	bl	80028f8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 8003130:	2006      	movs	r0, #6
 8003132:	f7ff ff4b 	bl	8002fcc <LCD_WriteCommand>
	simple_delay_ms(1);
 8003136:	2001      	movs	r0, #1
 8003138:	f7ff fbde 	bl	80028f8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 800313c:	200c      	movs	r0, #12
 800313e:	f7ff ff45 	bl	8002fcc <LCD_WriteCommand>

	LCD_WriteText("HC_2020");
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <LCD_Initalize+0xc8>)
 8003144:	f7ff ff90 	bl	8003068 <LCD_WriteText>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40010800 	.word	0x40010800
 8003154:	40010c00 	.word	0x40010c00
 8003158:	08003af4 	.word	0x08003af4

0800315c <pwmctrl_enable_timer_irq>:
#include "main.h"



void pwmctrl_enable_timer_irq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_IT(&htim1,TIM_IT_CC1);
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <pwmctrl_enable_timer_irq+0x44>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <pwmctrl_enable_timer_irq+0x44>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0202 	orr.w	r2, r2, #2
 800316e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <pwmctrl_enable_timer_irq+0x44>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <pwmctrl_enable_timer_irq+0x44>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 5000);
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <pwmctrl_enable_timer_irq+0x44>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800318a:	2019      	movs	r0, #25
 800318c:	f7fd fc1d 	bl	80009ca <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003190:	201b      	movs	r0, #27
 8003192:	f7fd fc1a 	bl	80009ca <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim1);
 8003196:	4802      	ldr	r0, [pc, #8]	; (80031a0 <pwmctrl_enable_timer_irq+0x44>)
 8003198:	f7fe fb68 	bl	800186c <HAL_TIM_Base_Start_IT>

}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000034 	.word	0x20000034

080031a4 <ui_change_ds18B20_status>:

	ui_handler_flag = UI_HANDLER_FLAG_BUSY;
}

void ui_change_ds18B20_status(uint8_t status)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	HC_status.ds18b20_amount = status;
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <ui_change_ds18B20_status+0x1c>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	7013      	strb	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000012c 	.word	0x2000012c

080031c4 <ui_increment_ms_counter>:

/***
 * 	function is calling in SysTick IRQ Handler
 */
inline void ui_increment_ms_counter(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	ui_handler_flag = UI_HANDLER_FLAG_FREE;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <ui_increment_ms_counter+0x30>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
	if(++ms_counter >= 1000)
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <ui_increment_ms_counter+0x34>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <ui_increment_ms_counter+0x34>)
 80031da:	4619      	mov	r1, r3
 80031dc:	8011      	strh	r1, [r2, #0]
 80031de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e2:	d302      	bcc.n	80031ea <ui_increment_ms_counter+0x26>
	{
		ms_counter = 0;
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <ui_increment_ms_counter+0x34>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	801a      	strh	r2, [r3, #0]
	}
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2000013a 	.word	0x2000013a
 80031f8:	20000032 	.word	0x20000032

080031fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003200:	f7fc ffa4 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003204:	f000 f80f 	bl	8003226 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003208:	f000 f9ae 	bl	8003568 <MX_GPIO_Init>
  MX_ADC1_Init();
 800320c:	f000 f866 	bl	80032dc <MX_ADC1_Init>
  MX_SPI2_Init();
 8003210:	f000 f8ce 	bl	80033b0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003214:	f000 f902 	bl	800341c <MX_TIM1_Init>
  //MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  LCD_Initalize();
 8003218:	f7ff ff3a 	bl	8003090 <LCD_Initalize>
  ds18b20_initalize();
 800321c:	f7ff fe58 	bl	8002ed0 <ds18b20_initalize>
  pwmctrl_enable_timer_irq();
 8003220:	f7ff ff9c 	bl	800315c <pwmctrl_enable_timer_irq>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003224:	e7fe      	b.n	8003224 <main+0x28>

08003226 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b094      	sub	sp, #80	; 0x50
 800322a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800322c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003230:	2228      	movs	r2, #40	; 0x28
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fc3f 	bl	8003ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003256:	2301      	movs	r3, #1
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800325a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003260:	2300      	movs	r3, #0
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003264:	2301      	movs	r3, #1
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003268:	2302      	movs	r3, #2
 800326a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800326c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003272:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd fdc9 	bl	8000e14 <HAL_RCC_OscConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003288:	f000 fa18 	bl	80036bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800328c:	230f      	movs	r3, #15
 800328e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003290:	2302      	movs	r3, #2
 8003292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	2102      	movs	r1, #2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe f833 	bl	8001314 <HAL_RCC_ClockConfig>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80032b4:	f000 fa02 	bl	80036bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032b8:	2302      	movs	r3, #2
 80032ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80032bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe f98f 	bl	80015e8 <HAL_RCCEx_PeriphCLKConfig>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80032d0:	f000 f9f4 	bl	80036bc <Error_Handler>
  }
}
 80032d4:	bf00      	nop
 80032d6:	3750      	adds	r7, #80	; 0x50
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <MX_ADC1_Init+0xcc>)
 80032ee:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <MX_ADC1_Init+0xd0>)
 80032f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <MX_ADC1_Init+0xcc>)
 80032f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <MX_ADC1_Init+0xcc>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003300:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <MX_ADC1_Init+0xcc>)
 8003302:	2200      	movs	r2, #0
 8003304:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <MX_ADC1_Init+0xcc>)
 8003308:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800330c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800330e:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <MX_ADC1_Init+0xcc>)
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <MX_ADC1_Init+0xcc>)
 8003316:	2204      	movs	r2, #4
 8003318:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800331a:	4823      	ldr	r0, [pc, #140]	; (80033a8 <MX_ADC1_Init+0xcc>)
 800331c:	f7fc ff78 	bl	8000210 <HAL_ADC_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003326:	f000 f9c9 	bl	80036bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800332e:	2301      	movs	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003332:	2307      	movs	r3, #7
 8003334:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	4619      	mov	r1, r3
 800333a:	481b      	ldr	r0, [pc, #108]	; (80033a8 <MX_ADC1_Init+0xcc>)
 800333c:	f7fd f916 	bl	800056c <HAL_ADC_ConfigChannel>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003346:	f000 f9b9 	bl	80036bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800334a:	2301      	movs	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800334e:	2302      	movs	r3, #2
 8003350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4814      	ldr	r0, [pc, #80]	; (80033a8 <MX_ADC1_Init+0xcc>)
 8003358:	f7fd f908 	bl	800056c <HAL_ADC_ConfigChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003362:	f000 f9ab 	bl	80036bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003366:	2302      	movs	r3, #2
 8003368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800336a:	2303      	movs	r3, #3
 800336c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	4619      	mov	r1, r3
 8003372:	480d      	ldr	r0, [pc, #52]	; (80033a8 <MX_ADC1_Init+0xcc>)
 8003374:	f7fd f8fa 	bl	800056c <HAL_ADC_ConfigChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800337e:	f000 f99d 	bl	80036bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003382:	2310      	movs	r3, #16
 8003384:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003386:	2304      	movs	r3, #4
 8003388:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4806      	ldr	r0, [pc, #24]	; (80033a8 <MX_ADC1_Init+0xcc>)
 8003390:	f7fd f8ec 	bl	800056c <HAL_ADC_ConfigChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800339a:	f000 f98f 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200000fc 	.word	0x200000fc
 80033ac:	40012400 	.word	0x40012400

080033b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <MX_SPI2_Init+0x64>)
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <MX_SPI2_Init+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <MX_SPI2_Init+0x64>)
 80033bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <MX_SPI2_Init+0x64>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <MX_SPI2_Init+0x64>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <MX_SPI2_Init+0x64>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <MX_SPI2_Init+0x64>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <MX_SPI2_Init+0x64>)
 80033dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <MX_SPI2_Init+0x64>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <MX_SPI2_Init+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <MX_SPI2_Init+0x64>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <MX_SPI2_Init+0x64>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <MX_SPI2_Init+0x64>)
 80033fc:	220a      	movs	r2, #10
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003400:	4804      	ldr	r0, [pc, #16]	; (8003414 <MX_SPI2_Init+0x64>)
 8003402:	f7fe f9a7 	bl	8001754 <HAL_SPI_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800340c:	f000 f956 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}
 8003414:	2000013c 	.word	0x2000013c
 8003418:	40003800 	.word	0x40003800

0800341c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b096      	sub	sp, #88	; 0x58
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003430:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800343a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	615a      	str	r2, [r3, #20]
 800344c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	2220      	movs	r2, #32
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fb2f 	bl	8003ab8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <MX_TIM1_Init+0x144>)
 800345c:	4a41      	ldr	r2, [pc, #260]	; (8003564 <MX_TIM1_Init+0x148>)
 800345e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8003460:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <MX_TIM1_Init+0x144>)
 8003462:	2247      	movs	r2, #71	; 0x47
 8003464:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <MX_TIM1_Init+0x144>)
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9800;
 800346c:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <MX_TIM1_Init+0x144>)
 800346e:	f242 6248 	movw	r2, #9800	; 0x2648
 8003472:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <MX_TIM1_Init+0x144>)
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <MX_TIM1_Init+0x144>)
 800347c:	2200      	movs	r2, #0
 800347e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003480:	4b37      	ldr	r3, [pc, #220]	; (8003560 <MX_TIM1_Init+0x144>)
 8003482:	2200      	movs	r2, #0
 8003484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003486:	4836      	ldr	r0, [pc, #216]	; (8003560 <MX_TIM1_Init+0x144>)
 8003488:	f7fe f9c5 	bl	8001816 <HAL_TIM_Base_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003492:	f000 f913 	bl	80036bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800349c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034a0:	4619      	mov	r1, r3
 80034a2:	482f      	ldr	r0, [pc, #188]	; (8003560 <MX_TIM1_Init+0x144>)
 80034a4:	f7fe fbe6 	bl	8001c74 <HAL_TIM_ConfigClockSource>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80034ae:	f000 f905 	bl	80036bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80034b2:	482b      	ldr	r0, [pc, #172]	; (8003560 <MX_TIM1_Init+0x144>)
 80034b4:	f7fe f9fd 	bl	80018b2 <HAL_TIM_OC_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80034be:	f000 f8fd 	bl	80036bc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80034c2:	2108      	movs	r1, #8
 80034c4:	4826      	ldr	r0, [pc, #152]	; (8003560 <MX_TIM1_Init+0x144>)
 80034c6:	f7fe fa28 	bl	800191a <HAL_TIM_OnePulse_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80034d0:	f000 f8f4 	bl	80036bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034e0:	4619      	mov	r1, r3
 80034e2:	481f      	ldr	r0, [pc, #124]	; (8003560 <MX_TIM1_Init+0x144>)
 80034e4:	f7fe ff2a 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80034ee:	f000 f8e5 	bl	80036bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034fe:	2300      	movs	r3, #0
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003502:	2300      	movs	r3, #0
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003512:	2200      	movs	r2, #0
 8003514:	4619      	mov	r1, r3
 8003516:	4812      	ldr	r0, [pc, #72]	; (8003560 <MX_TIM1_Init+0x144>)
 8003518:	f7fe fb4c 	bl	8001bb4 <HAL_TIM_OC_ConfigChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003522:	f000 f8cb 	bl	80036bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800353a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800353e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	4619      	mov	r1, r3
 8003548:	4805      	ldr	r0, [pc, #20]	; (8003560 <MX_TIM1_Init+0x144>)
 800354a:	f7fe ff3b 	bl	80023c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8003554:	f000 f8b2 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003558:	bf00      	nop
 800355a:	3758      	adds	r7, #88	; 0x58
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000034 	.word	0x20000034
 8003564:	40012c00 	.word	0x40012c00

08003568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356e:	f107 0310 	add.w	r3, r7, #16
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800357c:	4b49      	ldr	r3, [pc, #292]	; (80036a4 <MX_GPIO_Init+0x13c>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4a48      	ldr	r2, [pc, #288]	; (80036a4 <MX_GPIO_Init+0x13c>)
 8003582:	f043 0310 	orr.w	r3, r3, #16
 8003586:	6193      	str	r3, [r2, #24]
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <MX_GPIO_Init+0x13c>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003594:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <MX_GPIO_Init+0x13c>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	4a42      	ldr	r2, [pc, #264]	; (80036a4 <MX_GPIO_Init+0x13c>)
 800359a:	f043 0320 	orr.w	r3, r3, #32
 800359e:	6193      	str	r3, [r2, #24]
 80035a0:	4b40      	ldr	r3, [pc, #256]	; (80036a4 <MX_GPIO_Init+0x13c>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ac:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <MX_GPIO_Init+0x13c>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <MX_GPIO_Init+0x13c>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <MX_GPIO_Init+0x13c>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <MX_GPIO_Init+0x13c>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	4a36      	ldr	r2, [pc, #216]	; (80036a4 <MX_GPIO_Init+0x13c>)
 80035ca:	f043 0308 	orr.w	r3, r3, #8
 80035ce:	6193      	str	r3, [r2, #24]
 80035d0:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <MX_GPIO_Init+0x13c>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 80035dc:	2200      	movs	r2, #0
 80035de:	f248 7178 	movw	r1, #34680	; 0x8778
 80035e2:	4831      	ldr	r0, [pc, #196]	; (80036a8 <MX_GPIO_Init+0x140>)
 80035e4:	f7fd fbdc 	bl	8000da0 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 80035e8:	2200      	movs	r2, #0
 80035ea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80035ee:	482f      	ldr	r0, [pc, #188]	; (80036ac <MX_GPIO_Init+0x144>)
 80035f0:	f7fd fbd6 	bl	8000da0 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_EXIT_Pin BUTTON_OK_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_EXIT_Pin|BUTTON_OK_Pin;
 80035f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80035f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <MX_GPIO_Init+0x148>)
 80035fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003602:	f107 0310 	add.w	r3, r7, #16
 8003606:	4619      	mov	r1, r3
 8003608:	482a      	ldr	r0, [pc, #168]	; (80036b4 <MX_GPIO_Init+0x14c>)
 800360a:	f7fd fa6f 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : ONE_WIRE_DATA1_Pin ONE_WIRE_DATA2_Pin LED_RED_Pin LED_GREEN_Pin 
                           BUZZER_Pin FAN_CTRL_Pin HEATER_CTRL_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 800360e:	f248 7378 	movw	r3, #34680	; 0x8778
 8003612:	613b      	str	r3, [r7, #16]
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2302      	movs	r3, #2
 800361e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003620:	f107 0310 	add.w	r3, r7, #16
 8003624:	4619      	mov	r1, r3
 8003626:	4820      	ldr	r0, [pc, #128]	; (80036a8 <MX_GPIO_Init+0x140>)
 8003628:	f7fd fa60 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <MX_GPIO_Init+0x150>)
 8003632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	4619      	mov	r1, r3
 800363e:	481a      	ldr	r0, [pc, #104]	; (80036a8 <MX_GPIO_Init+0x140>)
 8003640:	f7fd fa54 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D1B2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin 
                           LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 8003644:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003648:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364a:	2301      	movs	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	2302      	movs	r3, #2
 8003654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	4619      	mov	r1, r3
 800365c:	4813      	ldr	r0, [pc, #76]	; (80036ac <MX_GPIO_Init+0x144>)
 800365e:	f7fd fa45 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 8003662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <MX_GPIO_Init+0x148>)
 800366a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	4619      	mov	r1, r3
 8003676:	480d      	ldr	r0, [pc, #52]	; (80036ac <MX_GPIO_Init+0x144>)
 8003678:	f7fd fa38 	bl	8000aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	2017      	movs	r0, #23
 8003682:	f7fd f986 	bl	8000992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003686:	2017      	movs	r0, #23
 8003688:	f7fd f99f 	bl	80009ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	2028      	movs	r0, #40	; 0x28
 8003692:	f7fd f97e 	bl	8000992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003696:	2028      	movs	r0, #40	; 0x28
 8003698:	f7fd f997 	bl	80009ca <HAL_NVIC_EnableIRQ>

}
 800369c:	bf00      	nop
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40010800 	.word	0x40010800
 80036ac:	40010c00 	.word	0x40010c00
 80036b0:	10210000 	.word	0x10210000
 80036b4:	40011000 	.word	0x40011000
 80036b8:	10310000 	.word	0x10310000

080036bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_MspInit+0x5c>)
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_MspInit+0x5c>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6193      	str	r3, [r2, #24]
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_MspInit+0x5c>)
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_MspInit+0x5c>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_MspInit+0x5c>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	61d3      	str	r3, [r2, #28]
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_MspInit+0x5c>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_MspInit+0x60>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <HAL_MspInit+0x60>)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000
 8003728:	40010000 	.word	0x40010000

0800372c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_ADC_MspInit+0x7c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d129      	bne.n	80037a0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_ADC_MspInit+0x80>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_ADC_MspInit+0x80>)
 8003752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003756:	6193      	str	r3, [r2, #24]
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_ADC_MspInit+0x80>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_ADC_MspInit+0x80>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4a10      	ldr	r2, [pc, #64]	; (80037ac <HAL_ADC_MspInit+0x80>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6193      	str	r3, [r2, #24]
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_ADC_MspInit+0x80>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800377c:	2307      	movs	r3, #7
 800377e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003780:	2303      	movs	r3, #3
 8003782:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	4619      	mov	r1, r3
 800378a:	4809      	ldr	r0, [pc, #36]	; (80037b0 <HAL_ADC_MspInit+0x84>)
 800378c:	f7fd f9ae 	bl	8000aec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003790:	2200      	movs	r2, #0
 8003792:	2100      	movs	r1, #0
 8003794:	2012      	movs	r0, #18
 8003796:	f7fd f8fc 	bl	8000992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800379a:	2012      	movs	r0, #18
 800379c:	f7fd f915 	bl	80009ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037a0:	bf00      	nop
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40012400 	.word	0x40012400
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010800 	.word	0x40010800

080037b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_SPI_MspInit+0x8c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d131      	bne.n	8003838 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_SPI_MspInit+0x90>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <HAL_SPI_MspInit+0x90>)
 80037da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037de:	61d3      	str	r3, [r2, #28]
 80037e0:	4b18      	ldr	r3, [pc, #96]	; (8003844 <HAL_SPI_MspInit+0x90>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ec:	4b15      	ldr	r3, [pc, #84]	; (8003844 <HAL_SPI_MspInit+0x90>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <HAL_SPI_MspInit+0x90>)
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	6193      	str	r3, [r2, #24]
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_SPI_MspInit+0x90>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003804:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	2302      	movs	r3, #2
 800380c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800380e:	2303      	movs	r3, #3
 8003810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003812:	f107 0310 	add.w	r3, r7, #16
 8003816:	4619      	mov	r1, r3
 8003818:	480b      	ldr	r0, [pc, #44]	; (8003848 <HAL_SPI_MspInit+0x94>)
 800381a:	f7fd f967 	bl	8000aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800381e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	4619      	mov	r1, r3
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <HAL_SPI_MspInit+0x94>)
 8003834:	f7fd f95a 	bl	8000aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40003800 	.word	0x40003800
 8003844:	40021000 	.word	0x40021000
 8003848:	40010c00 	.word	0x40010c00

0800384c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <HAL_TIM_Base_MspInit+0x54>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d11b      	bne.n	8003896 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_TIM_Base_MspInit+0x58>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_TIM_Base_MspInit+0x58>)
 8003864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003868:	6193      	str	r3, [r2, #24]
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_TIM_Base_MspInit+0x58>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	2019      	movs	r0, #25
 800387c:	f7fd f889 	bl	8000992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003880:	2019      	movs	r0, #25
 8003882:	f7fd f8a2 	bl	80009ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	201b      	movs	r0, #27
 800388c:	f7fd f881 	bl	8000992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003890:	201b      	movs	r0, #27
 8003892:	f7fd f89a 	bl	80009ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40012c00 	.word	0x40012c00
 80038a4:	40021000 	.word	0x40021000

080038a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <HardFault_Handler+0x4>

080038ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <MemManage_Handler+0x4>

080038c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c4:	e7fe      	b.n	80038c4 <BusFault_Handler+0x4>

080038c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ca:	e7fe      	b.n	80038ca <UsageFault_Handler+0x4>

080038cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ui_increment_ms_counter();
 80038f4:	f7ff fc66 	bl	80031c4 <ui_increment_ms_counter>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f8:	f7fc fc6e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <ADC1_2_IRQHandler+0x10>)
 8003906:	f7fc fd5b 	bl	80003c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200000fc 	.word	0x200000fc

08003914 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ZCD_Pin))
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <EXTI9_5_IRQHandler+0x28>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <EXTI9_5_IRQHandler+0x1c>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8003924:	4806      	ldr	r0, [pc, #24]	; (8003940 <EXTI9_5_IRQHandler+0x2c>)
 8003926:	f7fd ffa1 	bl	800186c <HAL_TIM_Base_Start_IT>
		LED_RED_GPIO_Port->BRR = LED_RED_Pin;
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <EXTI9_5_IRQHandler+0x30>)
 800392c:	2220      	movs	r2, #32
 800392e:	615a      	str	r2, [r3, #20]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003930:	2080      	movs	r0, #128	; 0x80
 8003932:	f7fd fa4d 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40010400 	.word	0x40010400
 8003940:	20000034 	.word	0x20000034
 8003944:	40010800 	.word	0x40010800

08003948 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;

	// for a test
	LED_RED_GPIO_Port->BRR = LED_RED_Pin;
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <TIM1_UP_IRQHandler+0x14>)
 800394e:	2220      	movs	r2, #32
 8003950:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003952:	4803      	ldr	r0, [pc, #12]	; (8003960 <TIM1_UP_IRQHandler+0x18>)
 8003954:	f7fe f826 	bl	80019a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40010800 	.word	0x40010800
 8003960:	20000034 	.word	0x20000034

08003964 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
	// for a test

	LED_RED_GPIO_Port->BSRR = LED_RED_Pin;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <TIM1_CC_IRQHandler+0x14>)
 800396a:	2220      	movs	r2, #32
 800396c:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800396e:	4803      	ldr	r0, [pc, #12]	; (800397c <TIM1_CC_IRQHandler+0x18>)
 8003970:	f7fe f818 	bl	80019a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010800 	.word	0x40010800
 800397c:	20000034 	.word	0x20000034

08003980 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <USART3_IRQHandler+0x10>)
 8003986:	f7fe fd81 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000194 	.word	0x20000194

08003994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003998:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800399c:	f7fd fa18 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039a4:	f7fd fa14 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80039a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039ac:	f7fd fa10 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039b4:	f7fd fa0c 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}

080039bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80039c0:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <SystemInit+0x5c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <SystemInit+0x5c>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80039cc:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <SystemInit+0x5c>)
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4911      	ldr	r1, [pc, #68]	; (8003a18 <SystemInit+0x5c>)
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <SystemInit+0x60>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <SystemInit+0x5c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <SystemInit+0x5c>)
 80039de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <SystemInit+0x5c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <SystemInit+0x5c>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <SystemInit+0x5c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <SystemInit+0x5c>)
 80039fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80039fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SystemInit+0x5c>)
 8003a02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003a06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <SystemInit+0x64>)
 8003a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	f8ff0000 	.word	0xf8ff0000
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a26:	e003      	b.n	8003a30 <LoopCopyDataInit>

08003a28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a2e:	3104      	adds	r1, #4

08003a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a30:	480a      	ldr	r0, [pc, #40]	; (8003a5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a38:	d3f6      	bcc.n	8003a28 <CopyDataInit>
  ldr r2, =_sbss
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a3c:	e002      	b.n	8003a44 <LoopFillZerobss>

08003a3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a40:	f842 3b04 	str.w	r3, [r2], #4

08003a44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a48:	d3f9      	bcc.n	8003a3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a4a:	f7ff ffb7 	bl	80039bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a4e:	f000 f80f 	bl	8003a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a52:	f7ff fbd3 	bl	80031fc <main>
  bx lr
 8003a56:	4770      	bx	lr
  ldr r3, =_sidata
 8003a58:	08003b14 	.word	0x08003b14
  ldr r0, =_sdata
 8003a5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003a64:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003a68:	200001d4 	.word	0x200001d4

08003a6c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a6c:	e7fe      	b.n	8003a6c <CAN1_RX1_IRQHandler>
	...

08003a70 <__libc_init_array>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	2500      	movs	r5, #0
 8003a74:	4e0c      	ldr	r6, [pc, #48]	; (8003aa8 <__libc_init_array+0x38>)
 8003a76:	4c0d      	ldr	r4, [pc, #52]	; (8003aac <__libc_init_array+0x3c>)
 8003a78:	1ba4      	subs	r4, r4, r6
 8003a7a:	10a4      	asrs	r4, r4, #2
 8003a7c:	42a5      	cmp	r5, r4
 8003a7e:	d109      	bne.n	8003a94 <__libc_init_array+0x24>
 8003a80:	f000 f822 	bl	8003ac8 <_init>
 8003a84:	2500      	movs	r5, #0
 8003a86:	4e0a      	ldr	r6, [pc, #40]	; (8003ab0 <__libc_init_array+0x40>)
 8003a88:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <__libc_init_array+0x44>)
 8003a8a:	1ba4      	subs	r4, r4, r6
 8003a8c:	10a4      	asrs	r4, r4, #2
 8003a8e:	42a5      	cmp	r5, r4
 8003a90:	d105      	bne.n	8003a9e <__libc_init_array+0x2e>
 8003a92:	bd70      	pop	{r4, r5, r6, pc}
 8003a94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a98:	4798      	blx	r3
 8003a9a:	3501      	adds	r5, #1
 8003a9c:	e7ee      	b.n	8003a7c <__libc_init_array+0xc>
 8003a9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aa2:	4798      	blx	r3
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	e7f2      	b.n	8003a8e <__libc_init_array+0x1e>
 8003aa8:	08003b0c 	.word	0x08003b0c
 8003aac:	08003b0c 	.word	0x08003b0c
 8003ab0:	08003b0c 	.word	0x08003b0c
 8003ab4:	08003b10 	.word	0x08003b10

08003ab8 <memset>:
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4402      	add	r2, r0
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <memset+0xa>
 8003ac0:	4770      	bx	lr
 8003ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac6:	e7f9      	b.n	8003abc <memset+0x4>

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
