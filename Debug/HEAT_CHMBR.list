
HEAT_CHMBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004058  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080041b0  080041b0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041b0  080041b0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000088  0800423c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200002f8  0800423c  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014641  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e7e  00000000  00000000  000346ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a691  00000000  00000000  0003756c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f70  00000000  00000000  00041c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001238  00000000  00000000  00042b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015e87  00000000  00000000  00043da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d9ca  00000000  00000000  00059c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078e21  00000000  00000000  000675f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000e041a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ad0  00000000  00000000  000e0498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08004150 	.word	0x08004150

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08004150 	.word	0x08004150

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fmul>:
 8000a9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aa0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000aa4:	bf1e      	ittt	ne
 8000aa6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aaa:	ea92 0f0c 	teqne	r2, ip
 8000aae:	ea93 0f0c 	teqne	r3, ip
 8000ab2:	d06f      	beq.n	8000b94 <__aeabi_fmul+0xf8>
 8000ab4:	441a      	add	r2, r3
 8000ab6:	ea80 0c01 	eor.w	ip, r0, r1
 8000aba:	0240      	lsls	r0, r0, #9
 8000abc:	bf18      	it	ne
 8000abe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ac2:	d01e      	beq.n	8000b02 <__aeabi_fmul+0x66>
 8000ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ac8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000acc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ad0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ad4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ad8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000adc:	bf3e      	ittt	cc
 8000ade:	0049      	lslcc	r1, r1, #1
 8000ae0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ae4:	005b      	lslcc	r3, r3, #1
 8000ae6:	ea40 0001 	orr.w	r0, r0, r1
 8000aea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aee:	2afd      	cmp	r2, #253	; 0xfd
 8000af0:	d81d      	bhi.n	8000b2e <__aeabi_fmul+0x92>
 8000af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	4770      	bx	lr
 8000b02:	f090 0f00 	teq	r0, #0
 8000b06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b0a:	bf08      	it	eq
 8000b0c:	0249      	lsleq	r1, r1, #9
 8000b0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b16:	3a7f      	subs	r2, #127	; 0x7f
 8000b18:	bfc2      	ittt	gt
 8000b1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b22:	4770      	bxgt	lr
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	dc5d      	bgt.n	8000bec <__aeabi_fmul+0x150>
 8000b30:	f112 0f19 	cmn.w	r2, #25
 8000b34:	bfdc      	itt	le
 8000b36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b3a:	4770      	bxle	lr
 8000b3c:	f1c2 0200 	rsb	r2, r2, #0
 8000b40:	0041      	lsls	r1, r0, #1
 8000b42:	fa21 f102 	lsr.w	r1, r1, r2
 8000b46:	f1c2 0220 	rsb	r2, r2, #32
 8000b4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b52:	f140 0000 	adc.w	r0, r0, #0
 8000b56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b5a:	bf08      	it	eq
 8000b5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b60:	4770      	bx	lr
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b6a:	bf02      	ittt	eq
 8000b6c:	0040      	lsleq	r0, r0, #1
 8000b6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b72:	3a01      	subeq	r2, #1
 8000b74:	d0f9      	beq.n	8000b6a <__aeabi_fmul+0xce>
 8000b76:	ea40 000c 	orr.w	r0, r0, ip
 8000b7a:	f093 0f00 	teq	r3, #0
 8000b7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b82:	bf02      	ittt	eq
 8000b84:	0049      	lsleq	r1, r1, #1
 8000b86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b8a:	3b01      	subeq	r3, #1
 8000b8c:	d0f9      	beq.n	8000b82 <__aeabi_fmul+0xe6>
 8000b8e:	ea41 010c 	orr.w	r1, r1, ip
 8000b92:	e78f      	b.n	8000ab4 <__aeabi_fmul+0x18>
 8000b94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b98:	ea92 0f0c 	teq	r2, ip
 8000b9c:	bf18      	it	ne
 8000b9e:	ea93 0f0c 	teqne	r3, ip
 8000ba2:	d00a      	beq.n	8000bba <__aeabi_fmul+0x11e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	d1d8      	bne.n	8000b62 <__aeabi_fmul+0xc6>
 8000bb0:	ea80 0001 	eor.w	r0, r0, r1
 8000bb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	bf17      	itett	ne
 8000bc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000bc4:	4608      	moveq	r0, r1
 8000bc6:	f091 0f00 	teqne	r1, #0
 8000bca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000bce:	d014      	beq.n	8000bfa <__aeabi_fmul+0x15e>
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d101      	bne.n	8000bda <__aeabi_fmul+0x13e>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	d10f      	bne.n	8000bfa <__aeabi_fmul+0x15e>
 8000bda:	ea93 0f0c 	teq	r3, ip
 8000bde:	d103      	bne.n	8000be8 <__aeabi_fmul+0x14c>
 8000be0:	024b      	lsls	r3, r1, #9
 8000be2:	bf18      	it	ne
 8000be4:	4608      	movne	r0, r1
 8000be6:	d108      	bne.n	8000bfa <__aeabi_fmul+0x15e>
 8000be8:	ea80 0001 	eor.w	r0, r0, r1
 8000bec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_fdiv>:
 8000c04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c12:	ea92 0f0c 	teqne	r2, ip
 8000c16:	ea93 0f0c 	teqne	r3, ip
 8000c1a:	d069      	beq.n	8000cf0 <__aeabi_fdiv+0xec>
 8000c1c:	eba2 0203 	sub.w	r2, r2, r3
 8000c20:	ea80 0c01 	eor.w	ip, r0, r1
 8000c24:	0249      	lsls	r1, r1, #9
 8000c26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c2a:	d037      	beq.n	8000c9c <__aeabi_fdiv+0x98>
 8000c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	bf38      	it	cc
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	bf24      	itt	cs
 8000c4e:	1a5b      	subcs	r3, r3, r1
 8000c50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c58:	bf24      	itt	cs
 8000c5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c66:	bf24      	itt	cs
 8000c68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c74:	bf24      	itt	cs
 8000c76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	bf18      	it	ne
 8000c82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c86:	d1e0      	bne.n	8000c4a <__aeabi_fdiv+0x46>
 8000c88:	2afd      	cmp	r2, #253	; 0xfd
 8000c8a:	f63f af50 	bhi.w	8000b2e <__aeabi_fmul+0x92>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c94:	bf08      	it	eq
 8000c96:	f020 0001 	biceq.w	r0, r0, #1
 8000c9a:	4770      	bx	lr
 8000c9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca4:	327f      	adds	r2, #127	; 0x7f
 8000ca6:	bfc2      	ittt	gt
 8000ca8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cb0:	4770      	bxgt	lr
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	3a01      	subs	r2, #1
 8000cbc:	e737      	b.n	8000b2e <__aeabi_fmul+0x92>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fdiv+0xc2>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fdiv+0xda>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e795      	b.n	8000c1c <__aeabi_fdiv+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	d108      	bne.n	8000d0c <__aeabi_fdiv+0x108>
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	f47f af7d 	bne.w	8000bfa <__aeabi_fmul+0x15e>
 8000d00:	ea93 0f0c 	teq	r3, ip
 8000d04:	f47f af70 	bne.w	8000be8 <__aeabi_fmul+0x14c>
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e776      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d0c:	ea93 0f0c 	teq	r3, ip
 8000d10:	d104      	bne.n	8000d1c <__aeabi_fdiv+0x118>
 8000d12:	024b      	lsls	r3, r1, #9
 8000d14:	f43f af4c 	beq.w	8000bb0 <__aeabi_fmul+0x114>
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e76e      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d20:	bf18      	it	ne
 8000d22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d26:	d1ca      	bne.n	8000cbe <__aeabi_fdiv+0xba>
 8000d28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d2c:	f47f af5c 	bne.w	8000be8 <__aeabi_fmul+0x14c>
 8000d30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	f47f af3c 	bne.w	8000bb0 <__aeabi_fmul+0x114>
 8000d38:	e75f      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d3a:	bf00      	nop

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b510      	push	{r4, lr}
 8000d3e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_InitTick+0x40>)
 8000d42:	7818      	ldrb	r0, [r3, #0]
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <HAL_InitTick+0x44>)
 8000d4e:	6810      	ldr	r0, [r2, #0]
 8000d50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d54:	f000 fbf0 	bl	8001538 <HAL_SYSTICK_Config>
 8000d58:	b968      	cbnz	r0, 8000d76 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	2c0f      	cmp	r4, #15
 8000d5c:	d901      	bls.n	8000d62 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d5e:	2001      	movs	r0, #1
 8000d60:	e00a      	b.n	8000d78 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d62:	2200      	movs	r2, #0
 8000d64:	4621      	mov	r1, r4
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	f000 fba3 	bl	80014b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_InitTick+0x48>)
 8000d70:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2000      	movs	r0, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
}
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000080 	.word	0x20000080
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_Init>:
{
 8000d88:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8a:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x20>)
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 fb7b 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff ffce 	bl	8000d3c <HAL_InitTick>
  HAL_MspInit();
 8000da0:	f003 f820 	bl	8003de4 <HAL_MspInit>
}
 8000da4:	2000      	movs	r0, #0
 8000da6:	bd08      	pop	{r3, pc}
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_IncTick+0x10>)
 8000dae:	6811      	ldr	r1, [r2, #0]
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_IncTick+0x14>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	440b      	add	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200000a8 	.word	0x200000a8
 8000dc0:	20000000 	.word	0x20000000

08000dc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dc4:	4b01      	ldr	r3, [pc, #4]	; (8000dcc <HAL_GetTick+0x8>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200000a8 	.word	0x200000a8

08000dd0 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000dd0:	4770      	bx	lr

08000dd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000dd2:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000dd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dd8:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000ddc:	d003      	beq.n	8000de6 <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4798      	blx	r3
  }
}
 8000de4:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	6892      	ldr	r2, [r2, #8]
 8000df2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000df6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000dfa:	d003      	beq.n	8000e04 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ffe7 	bl	8000dd0 <HAL_ADC_ConvCpltCallback>
 8000e02:	e7ef      	b.n	8000de4 <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e04:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d1f8      	bne.n	8000dfc <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e14:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000e18:	d1f0      	bne.n	8000dfc <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e1c:	f042 0201 	orr.w	r2, r2, #1
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
 8000e22:	e7eb      	b.n	8000dfc <ADC_DMAConvCplt+0x2a>

08000e24 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000e24:	4770      	bx	lr

08000e26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e26:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000e28:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000e2a:	f7ff fffb 	bl	8000e24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e2e:	bd08      	pop	{r3, pc}

08000e30 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8000e30:	4770      	bx	lr

08000e32 <HAL_ADC_IRQHandler>:
{
 8000e32:	b510      	push	{r4, lr}
 8000e34:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000e36:	6803      	ldr	r3, [r0, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	f012 0f20 	tst.w	r2, #32
 8000e3e:	d018      	beq.n	8000e72 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	f012 0f02 	tst.w	r2, #2
 8000e46:	d014      	beq.n	8000e72 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e48:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000e4a:	f012 0f10 	tst.w	r2, #16
 8000e4e:	d103      	bne.n	8000e58 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e50:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e56:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000e5e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000e62:	d038      	beq.n	8000ed6 <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff ffb3 	bl	8000dd0 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	f06f 0212 	mvn.w	r2, #18
 8000e70:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000e7a:	d022      	beq.n	8000ec2 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	f012 0f04 	tst.w	r2, #4
 8000e82:	d01e      	beq.n	8000ec2 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e86:	f012 0f10 	tst.w	r2, #16
 8000e8a:	d103      	bne.n	8000e94 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e92:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000e9a:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000e9e:	d031      	beq.n	8000f04 <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ea0:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ea2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000ea6:	d105      	bne.n	8000eb4 <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000eae:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000eb2:	d024      	beq.n	8000efe <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f000 fae9 	bl	800148c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	f06f 020c 	mvn.w	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000eca:	d003      	beq.n	8000ed4 <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f013 0f01 	tst.w	r3, #1
 8000ed2:	d128      	bne.n	8000f26 <HAL_ADC_IRQHandler+0xf4>
}
 8000ed4:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ed6:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d1c3      	bne.n	8000e64 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	f022 0220 	bic.w	r2, r2, #32
 8000ee2:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ee4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eea:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000eee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ef2:	d1b7      	bne.n	8000e64 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	62a3      	str	r3, [r4, #40]	; 0x28
 8000efc:	e7b2      	b.n	8000e64 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000efe:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d1d7      	bne.n	8000eb4 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f0a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f12:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f1a:	d1cb      	bne.n	8000eb4 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f24:	e7c6      	b.n	8000eb4 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f7ff ff7e 	bl	8000e30 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	f06f 0201 	mvn.w	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	e7ca      	b.n	8000ed4 <HAL_ADC_IRQHandler+0xa2>

08000f3e <HAL_ADC_ErrorCallback>:
}
 8000f3e:	4770      	bx	lr

08000f40 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000f40:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f42:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f54:	f7ff fff3 	bl	8000f3e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f58:	bd08      	pop	{r3, pc}
	...

08000f5c <HAL_ADC_ConfigChannel>:
{ 
 8000f5c:	b430      	push	{r4, r5}
 8000f5e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f64:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	f000 808b 	beq.w	8001084 <HAL_ADC_ConfigChannel+0x128>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	2301      	movs	r3, #1
 8000f72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000f76:	684b      	ldr	r3, [r1, #4]
 8000f78:	2b06      	cmp	r3, #6
 8000f7a:	d829      	bhi.n	8000fd0 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f7c:	6805      	ldr	r5, [r0, #0]
 8000f7e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000f80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f84:	3b05      	subs	r3, #5
 8000f86:	241f      	movs	r4, #31
 8000f88:	409c      	lsls	r4, r3
 8000f8a:	ea20 0004 	bic.w	r0, r0, r4
 8000f8e:	680c      	ldr	r4, [r1, #0]
 8000f90:	fa04 f303 	lsl.w	r3, r4, r3
 8000f94:	4303      	orrs	r3, r0
 8000f96:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f98:	680b      	ldr	r3, [r1, #0]
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d938      	bls.n	8001010 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f9e:	6815      	ldr	r5, [r2, #0]
 8000fa0:	68e8      	ldr	r0, [r5, #12]
 8000fa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fa6:	3b1e      	subs	r3, #30
 8000fa8:	2407      	movs	r4, #7
 8000faa:	409c      	lsls	r4, r3
 8000fac:	ea20 0004 	bic.w	r0, r0, r4
 8000fb0:	688c      	ldr	r4, [r1, #8]
 8000fb2:	fa04 f303 	lsl.w	r3, r4, r3
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fba:	680b      	ldr	r3, [r1, #0]
 8000fbc:	3b10      	subs	r3, #16
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d934      	bls.n	800102c <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8000fca:	b002      	add	sp, #8
 8000fcc:	bc30      	pop	{r4, r5}
 8000fce:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000fd0:	2b0c      	cmp	r3, #12
 8000fd2:	d80e      	bhi.n	8000ff2 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fd4:	6805      	ldr	r5, [r0, #0]
 8000fd6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000fd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fdc:	3b23      	subs	r3, #35	; 0x23
 8000fde:	241f      	movs	r4, #31
 8000fe0:	409c      	lsls	r4, r3
 8000fe2:	ea20 0004 	bic.w	r0, r0, r4
 8000fe6:	680c      	ldr	r4, [r1, #0]
 8000fe8:	fa04 f303 	lsl.w	r3, r4, r3
 8000fec:	4303      	orrs	r3, r0
 8000fee:	632b      	str	r3, [r5, #48]	; 0x30
 8000ff0:	e7d2      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ff2:	6805      	ldr	r5, [r0, #0]
 8000ff4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000ff6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ffa:	3b41      	subs	r3, #65	; 0x41
 8000ffc:	241f      	movs	r4, #31
 8000ffe:	409c      	lsls	r4, r3
 8001000:	ea20 0004 	bic.w	r0, r0, r4
 8001004:	680c      	ldr	r4, [r1, #0]
 8001006:	fa04 f303 	lsl.w	r3, r4, r3
 800100a:	4303      	orrs	r3, r0
 800100c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800100e:	e7c3      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001010:	6815      	ldr	r5, [r2, #0]
 8001012:	6928      	ldr	r0, [r5, #16]
 8001014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001018:	2407      	movs	r4, #7
 800101a:	409c      	lsls	r4, r3
 800101c:	ea20 0004 	bic.w	r0, r0, r4
 8001020:	688c      	ldr	r4, [r1, #8]
 8001022:	fa04 f303 	lsl.w	r3, r4, r3
 8001026:	4303      	orrs	r3, r0
 8001028:	612b      	str	r3, [r5, #16]
 800102a:	e7c6      	b.n	8000fba <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <HAL_ADC_ConfigChannel+0x12c>)
 8001030:	4283      	cmp	r3, r0
 8001032:	d005      	beq.n	8001040 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001034:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001036:	f043 0320 	orr.w	r3, r3, #32
 800103a:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800103c:	2001      	movs	r0, #1
 800103e:	e7c1      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001046:	d11b      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001048:	6898      	ldr	r0, [r3, #8]
 800104a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800104e:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001050:	680b      	ldr	r3, [r1, #0]
 8001052:	2b10      	cmp	r3, #16
 8001054:	d001      	beq.n	800105a <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001056:	2000      	movs	r0, #0
 8001058:	e7b4      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_ADC_ConfigChannel+0x130>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	490c      	ldr	r1, [pc, #48]	; (8001090 <HAL_ADC_ConfigChannel+0x134>)
 8001060:	fba1 1303 	umull	r1, r3, r1, r3
 8001064:	0c9b      	lsrs	r3, r3, #18
 8001066:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800106a:	0059      	lsls	r1, r3, #1
 800106c:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800106e:	e002      	b.n	8001076 <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8001070:	9b01      	ldr	r3, [sp, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001076:	9b01      	ldr	r3, [sp, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f9      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	2000      	movs	r0, #0
 800107e:	e7a1      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x68>
 8001080:	2000      	movs	r0, #0
 8001082:	e79f      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8001084:	2002      	movs	r0, #2
 8001086:	e7a0      	b.n	8000fca <HAL_ADC_ConfigChannel+0x6e>
 8001088:	40012400 	.word	0x40012400
 800108c:	20000080 	.word	0x20000080
 8001090:	431bde83 	.word	0x431bde83

08001094 <ADC_Enable>:
{
 8001094:	b530      	push	{r4, r5, lr}
 8001096:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800109c:	6803      	ldr	r3, [r0, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	f012 0f01 	tst.w	r2, #1
 80010a4:	d12e      	bne.n	8001104 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <ADC_Enable+0x78>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <ADC_Enable+0x7c>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	0c9b      	lsrs	r3, r3, #18
 80010ba:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80010bc:	e002      	b.n	80010c4 <ADC_Enable+0x30>
      wait_loop_index--;
 80010be:	9b01      	ldr	r3, [sp, #4]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80010c4:	9b01      	ldr	r3, [sp, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f9      	bne.n	80010be <ADC_Enable+0x2a>
 80010ca:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80010cc:	f7ff fe7a 	bl	8000dc4 <HAL_GetTick>
 80010d0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f013 0f01 	tst.w	r3, #1
 80010da:	d111      	bne.n	8001100 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010dc:	f7ff fe72 	bl	8000dc4 <HAL_GetTick>
 80010e0:	1b40      	subs	r0, r0, r5
 80010e2:	2802      	cmp	r0, #2
 80010e4:	d9f5      	bls.n	80010d2 <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80010f6:	2300      	movs	r3, #0
 80010f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80010fc:	2001      	movs	r0, #1
 80010fe:	e002      	b.n	8001106 <ADC_Enable+0x72>
  return HAL_OK;
 8001100:	2000      	movs	r0, #0
 8001102:	e000      	b.n	8001106 <ADC_Enable+0x72>
 8001104:	2000      	movs	r0, #0
}
 8001106:	b003      	add	sp, #12
 8001108:	bd30      	pop	{r4, r5, pc}
 800110a:	bf00      	nop
 800110c:	20000080 	.word	0x20000080
 8001110:	431bde83 	.word	0x431bde83

08001114 <HAL_ADC_Start_DMA>:
{
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001116:	6804      	ldr	r4, [r0, #0]
 8001118:	4d45      	ldr	r5, [pc, #276]	; (8001230 <HAL_ADC_Start_DMA+0x11c>)
 800111a:	42ac      	cmp	r4, r5
 800111c:	d05b      	beq.n	80011d6 <HAL_ADC_Start_DMA+0xc2>
 800111e:	4b45      	ldr	r3, [pc, #276]	; (8001234 <HAL_ADC_Start_DMA+0x120>)
 8001120:	429c      	cmp	r4, r3
 8001122:	d058      	beq.n	80011d6 <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 8001124:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001128:	2c01      	cmp	r4, #1
 800112a:	d07e      	beq.n	800122a <HAL_ADC_Start_DMA+0x116>
 800112c:	4616      	mov	r6, r2
 800112e:	460d      	mov	r5, r1
 8001130:	4604      	mov	r4, r0
 8001132:	2301      	movs	r3, #1
 8001134:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001138:	f7ff ffac 	bl	8001094 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800113c:	4607      	mov	r7, r0
 800113e:	2800      	cmp	r0, #0
 8001140:	d16e      	bne.n	8001220 <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 8001142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001144:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_ADC_Start_DMA+0x120>)
 8001156:	429a      	cmp	r2, r3
 8001158:	d044      	beq.n	80011e4 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800115a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800115c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001160:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001162:	6853      	ldr	r3, [r2, #4]
 8001164:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001168:	d005      	beq.n	8001176 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800116c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001174:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001178:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800117c:	d048      	beq.n	8001210 <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800117e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001180:	f023 0306 	bic.w	r3, r3, #6
 8001184:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001186:	2300      	movs	r3, #0
 8001188:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800118c:	6a23      	ldr	r3, [r4, #32]
 800118e:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <HAL_ADC_Start_DMA+0x124>)
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001192:	6a23      	ldr	r3, [r4, #32]
 8001194:	4a29      	ldr	r2, [pc, #164]	; (800123c <HAL_ADC_Start_DMA+0x128>)
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001198:	6a23      	ldr	r3, [r4, #32]
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_ADC_Start_DMA+0x12c>)
 800119c:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	f06f 0202 	mvn.w	r2, #2
 80011a4:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	6893      	ldr	r3, [r2, #8]
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011b0:	6821      	ldr	r1, [r4, #0]
 80011b2:	4633      	mov	r3, r6
 80011b4:	462a      	mov	r2, r5
 80011b6:	314c      	adds	r1, #76	; 0x4c
 80011b8:	6a20      	ldr	r0, [r4, #32]
 80011ba:	f000 fa1f 	bl	80015fc <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	6893      	ldr	r3, [r2, #8]
 80011c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011ca:	d024      	beq.n	8001216 <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011cc:	6893      	ldr	r3, [r2, #8]
 80011ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011d2:	6093      	str	r3, [r2, #8]
 80011d4:	e027      	b.n	8001226 <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_ADC_Start_DMA+0x11c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80011de:	d0a1      	beq.n	8001124 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 80011e0:	2701      	movs	r7, #1
 80011e2:	e020      	b.n	8001226 <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011e4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80011ee:	d0b4      	beq.n	800115a <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011f6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_ADC_Start_DMA+0x11c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001200:	d0b9      	beq.n	8001176 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120c:	62a3      	str	r3, [r4, #40]	; 0x28
 800120e:	e7b2      	b.n	8001176 <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 8001210:	2300      	movs	r3, #0
 8001212:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001214:	e7b7      	b.n	8001186 <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001216:	6893      	ldr	r3, [r2, #8]
 8001218:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800121c:	6093      	str	r3, [r2, #8]
 800121e:	e002      	b.n	8001226 <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 8001220:	2300      	movs	r3, #0
 8001222:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001226:	4638      	mov	r0, r7
 8001228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800122a:	2702      	movs	r7, #2
 800122c:	e7fb      	b.n	8001226 <HAL_ADC_Start_DMA+0x112>
 800122e:	bf00      	nop
 8001230:	40012400 	.word	0x40012400
 8001234:	40012800 	.word	0x40012800
 8001238:	08000dd3 	.word	0x08000dd3
 800123c:	08000e27 	.word	0x08000e27
 8001240:	08000f41 	.word	0x08000f41

08001244 <ADC_ConversionStop_Disable>:
{
 8001244:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001246:	6803      	ldr	r3, [r0, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	f012 0f01 	tst.w	r2, #1
 800124e:	d101      	bne.n	8001254 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001250:	2000      	movs	r0, #0
}
 8001252:	bd38      	pop	{r3, r4, r5, pc}
 8001254:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800125e:	f7ff fdb1 	bl	8000dc4 <HAL_GetTick>
 8001262:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f013 0f01 	tst.w	r3, #1
 800126c:	d00e      	beq.n	800128c <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800126e:	f7ff fda9 	bl	8000dc4 <HAL_GetTick>
 8001272:	1b40      	subs	r0, r0, r5
 8001274:	2802      	cmp	r0, #2
 8001276:	d9f5      	bls.n	8001264 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8001288:	2001      	movs	r0, #1
 800128a:	e7e2      	b.n	8001252 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800128c:	2000      	movs	r0, #0
 800128e:	e7e0      	b.n	8001252 <ADC_ConversionStop_Disable+0xe>

08001290 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001290:	2800      	cmp	r0, #0
 8001292:	d07f      	beq.n	8001394 <HAL_ADC_Init+0x104>
{
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001298:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800129a:	2b00      	cmp	r3, #0
 800129c:	d033      	beq.n	8001306 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff ffd0 	bl	8001244 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012a6:	f013 0310 	ands.w	r3, r3, #16
 80012aa:	d16d      	bne.n	8001388 <HAL_ADC_Init+0xf8>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d16b      	bne.n	8001388 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 80012b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012b2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80012b6:	f022 0202 	bic.w	r2, r2, #2
 80012ba:	f042 0202 	orr.w	r2, r2, #2
 80012be:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c0:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012c2:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c4:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012c6:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012c8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012cc:	68a1      	ldr	r1, [r4, #8]
 80012ce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80012d2:	d021      	beq.n	8001318 <HAL_ADC_Init+0x88>
 80012d4:	2901      	cmp	r1, #1
 80012d6:	d01c      	beq.n	8001312 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d8:	7d21      	ldrb	r1, [r4, #20]
 80012da:	2901      	cmp	r1, #1
 80012dc:	d01f      	beq.n	800131e <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 80012de:	6825      	ldr	r5, [r4, #0]
 80012e0:	6869      	ldr	r1, [r5, #4]
 80012e2:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80012e6:	430b      	orrs	r3, r1
 80012e8:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80012ea:	6821      	ldr	r1, [r4, #0]
 80012ec:	688d      	ldr	r5, [r1, #8]
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_ADC_Init+0x108>)
 80012f0:	402b      	ands	r3, r5
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012f6:	68a3      	ldr	r3, [r4, #8]
 80012f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012fc:	d020      	beq.n	8001340 <HAL_ADC_Init+0xb0>
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d01e      	beq.n	8001340 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8001302:	2100      	movs	r1, #0
 8001304:	e01f      	b.n	8001346 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 8001306:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001308:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800130c:	f002 fd8c 	bl	8003e28 <HAL_ADC_MspInit>
 8001310:	e7c5      	b.n	800129e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001316:	e7df      	b.n	80012d8 <HAL_ADC_Init+0x48>
 8001318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131c:	e7dc      	b.n	80012d8 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800131e:	b935      	cbnz	r5, 800132e <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001320:	69a1      	ldr	r1, [r4, #24]
 8001322:	3901      	subs	r1, #1
 8001324:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8001328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800132c:	e7d7      	b.n	80012de <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001330:	f041 0120 	orr.w	r1, r1, #32
 8001334:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001338:	f041 0101 	orr.w	r1, r1, #1
 800133c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800133e:	e7ce      	b.n	80012de <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001340:	6923      	ldr	r3, [r4, #16]
 8001342:	3b01      	subs	r3, #1
 8001344:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001346:	6825      	ldr	r5, [r4, #0]
 8001348:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800134a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800134e:	430b      	orrs	r3, r1
 8001350:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	6899      	ldr	r1, [r3, #8]
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_ADC_Init+0x10c>)
 8001358:	400b      	ands	r3, r1
 800135a:	429a      	cmp	r2, r3
 800135c:	d00b      	beq.n	8001376 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 800135e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001360:	f023 0312 	bic.w	r3, r3, #18
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001372:	2001      	movs	r0, #1
 8001374:	e00d      	b.n	8001392 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8001376:	2300      	movs	r3, #0
 8001378:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800137a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800137c:	f023 0303 	bic.w	r3, r3, #3
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	62a3      	str	r3, [r4, #40]	; 0x28
 8001386:	e004      	b.n	8001392 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001388:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001390:	2001      	movs	r0, #1
}
 8001392:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
}
 8001396:	4770      	bx	lr
 8001398:	ffe1f7fd 	.word	0xffe1f7fd
 800139c:	ff1f0efe 	.word	0xff1f0efe

080013a0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013a8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d068      	beq.n	8001482 <HAL_ADCEx_Calibration_Start+0xe2>
 80013b0:	4604      	mov	r4, r0
 80013b2:	2301      	movs	r3, #1
 80013b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013b8:	f7ff ff44 	bl	8001244 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013bc:	4605      	mov	r5, r0
 80013be:	b128      	cbz	r0, 80013cc <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c0:	2300      	movs	r3, #0
 80013c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80013c6:	4628      	mov	r0, r5
 80013c8:	b002      	add	sp, #8
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d2:	f023 0302 	bic.w	r3, r3, #2
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <HAL_ADCEx_Calibration_Start+0xe8>)
 80013de:	681e      	ldr	r6, [r3, #0]
 80013e0:	2002      	movs	r0, #2
 80013e2:	f000 fe4d 	bl	8002080 <HAL_RCCEx_GetPeriphCLKFreq>
 80013e6:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80013ea:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 80013ec:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80013ee:	e002      	b.n	80013f6 <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 80013f0:	9b01      	ldr	r3, [sp, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80013f6:	9b01      	ldr	r3, [sp, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f9      	bne.n	80013f0 <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fe49 	bl	8001094 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001402:	6822      	ldr	r2, [r4, #0]
 8001404:	6893      	ldr	r3, [r2, #8]
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800140c:	f7ff fcda 	bl	8000dc4 <HAL_GetTick>
 8001410:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	f012 0f08 	tst.w	r2, #8
 800141a:	d00f      	beq.n	800143c <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800141c:	f7ff fcd2 	bl	8000dc4 <HAL_GetTick>
 8001420:	1b80      	subs	r0, r0, r6
 8001422:	280a      	cmp	r0, #10
 8001424:	d9f5      	bls.n	8001412 <HAL_ADCEx_Calibration_Start+0x72>
        ADC_STATE_CLR_SET(hadc->State,
 8001426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001428:	f023 0312 	bic.w	r3, r3, #18
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001432:	2300      	movs	r3, #0
 8001434:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001438:	2501      	movs	r5, #1
 800143a:	e7c4      	b.n	80013c6 <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	f042 0204 	orr.w	r2, r2, #4
 8001442:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001444:	f7ff fcbe 	bl	8000dc4 <HAL_GetTick>
 8001448:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f013 0f04 	tst.w	r3, #4
 8001452:	d00f      	beq.n	8001474 <HAL_ADCEx_Calibration_Start+0xd4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001454:	f7ff fcb6 	bl	8000dc4 <HAL_GetTick>
 8001458:	1b80      	subs	r0, r0, r6
 800145a:	280a      	cmp	r0, #10
 800145c:	d9f5      	bls.n	800144a <HAL_ADCEx_Calibration_Start+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001460:	f023 0312 	bic.w	r3, r3, #18
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800146a:	2300      	movs	r3, #0
 800146c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001470:	2501      	movs	r5, #1
 8001472:	e7a8      	b.n	80013c6 <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 8001474:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001480:	e79e      	b.n	80013c0 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8001482:	2502      	movs	r5, #2
 8001484:	e79f      	b.n	80013c6 <HAL_ADCEx_Calibration_Start+0x26>
 8001486:	bf00      	nop
 8001488:	20000080 	.word	0x20000080

0800148c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800148c:	4770      	bx	lr
	...

08001490 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001492:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001494:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800149c:	0200      	lsls	r0, r0, #8
 800149e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80014a4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80014a8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014ac:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_NVIC_SetPriority+0x60>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014be:	f1c3 0407 	rsb	r4, r3, #7
 80014c2:	2c04      	cmp	r4, #4
 80014c4:	bf28      	it	cs
 80014c6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c8:	1d1d      	adds	r5, r3, #4
 80014ca:	2d06      	cmp	r5, #6
 80014cc:	d918      	bls.n	8001500 <HAL_NVIC_SetPriority+0x4c>
 80014ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 35ff 	mov.w	r5, #4294967295
 80014d4:	fa05 f404 	lsl.w	r4, r5, r4
 80014d8:	ea21 0104 	bic.w	r1, r1, r4
 80014dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014de:	fa05 f303 	lsl.w	r3, r5, r3
 80014e2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80014e8:	2800      	cmp	r0, #0
 80014ea:	db0b      	blt.n	8001504 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	0109      	lsls	r1, r1, #4
 80014ee:	b2c9      	uxtb	r1, r1
 80014f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80014f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80014f8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014fc:	bc30      	pop	{r4, r5}
 80014fe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001500:	2300      	movs	r3, #0
 8001502:	e7e5      	b.n	80014d0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	f000 000f 	and.w	r0, r0, #15
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	b2c9      	uxtb	r1, r1
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <HAL_NVIC_SetPriority+0x64>)
 800150e:	5419      	strb	r1, [r3, r0]
 8001510:	e7f4      	b.n	80014fc <HAL_NVIC_SetPriority+0x48>
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	e000ed14 	.word	0xe000ed14

0800151c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800151c:	2800      	cmp	r0, #0
 800151e:	db07      	blt.n	8001530 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001520:	f000 021f 	and.w	r2, r0, #31
 8001524:	0940      	lsrs	r0, r0, #5
 8001526:	2301      	movs	r3, #1
 8001528:	4093      	lsls	r3, r2
 800152a:	4a02      	ldr	r2, [pc, #8]	; (8001534 <HAL_NVIC_EnableIRQ+0x18>)
 800152c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	3801      	subs	r0, #1
 800153a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800153e:	d20a      	bcs.n	8001556 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_SYSTICK_Config+0x24>)
 8001542:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_SYSTICK_Config+0x28>)
 8001546:	21f0      	movs	r1, #240	; 0xf0
 8001548:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	2000      	movs	r0, #0
 800154e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001564:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001566:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001568:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800156a:	2401      	movs	r4, #1
 800156c:	40b4      	lsls	r4, r6
 800156e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001570:	6804      	ldr	r4, [r0, #0]
 8001572:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001574:	6843      	ldr	r3, [r0, #4]
 8001576:	2b10      	cmp	r3, #16
 8001578:	d005      	beq.n	8001586 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800157a:	6803      	ldr	r3, [r0, #0]
 800157c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800157e:	6803      	ldr	r3, [r0, #0]
 8001580:	60da      	str	r2, [r3, #12]
  }
}
 8001582:	bc70      	pop	{r4, r5, r6}
 8001584:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001586:	6803      	ldr	r3, [r0, #0]
 8001588:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800158a:	6803      	ldr	r3, [r0, #0]
 800158c:	60d9      	str	r1, [r3, #12]
 800158e:	e7f8      	b.n	8001582 <DMA_SetConfig+0x1e>

08001590 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001590:	b360      	cbz	r0, 80015ec <HAL_DMA_Init+0x5c>
{
 8001592:	b410      	push	{r4}
 8001594:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001596:	6801      	ldr	r1, [r0, #0]
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_DMA_Init+0x60>)
 800159a:	440b      	add	r3, r1
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <HAL_DMA_Init+0x64>)
 800159e:	fba0 0303 	umull	r0, r3, r0, r3
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_DMA_Init+0x68>)
 80015aa:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ac:	2302      	movs	r3, #2
 80015ae:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80015b2:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015b4:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80015b8:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80015bc:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015be:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 80015c0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	68d4      	ldr	r4, [r2, #12]
 80015c4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ca:	6954      	ldr	r4, [r2, #20]
 80015cc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ce:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d2:	69d4      	ldr	r4, [r2, #28]
 80015d4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80015d6:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80015d8:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015da:	2000      	movs	r0, #0
 80015dc:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80015de:	2301      	movs	r3, #1
 80015e0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80015e4:	f882 0020 	strb.w	r0, [r2, #32]
}
 80015e8:	bc10      	pop	{r4}
 80015ea:	4770      	bx	lr
    return HAL_ERROR;
 80015ec:	2001      	movs	r0, #1
}
 80015ee:	4770      	bx	lr
 80015f0:	bffdfff8 	.word	0xbffdfff8
 80015f4:	cccccccd 	.word	0xcccccccd
 80015f8:	40020000 	.word	0x40020000

080015fc <HAL_DMA_Start_IT>:
{
 80015fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80015fe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001602:	2c01      	cmp	r4, #1
 8001604:	d032      	beq.n	800166c <HAL_DMA_Start_IT+0x70>
 8001606:	2401      	movs	r4, #1
 8001608:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800160c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001610:	2c01      	cmp	r4, #1
 8001612:	d004      	beq.n	800161e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001614:	2300      	movs	r3, #0
 8001616:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800161a:	2002      	movs	r0, #2
}
 800161c:	bd38      	pop	{r3, r4, r5, pc}
 800161e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	2002      	movs	r0, #2
 8001622:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001626:	2000      	movs	r0, #0
 8001628:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800162a:	6825      	ldr	r5, [r4, #0]
 800162c:	6828      	ldr	r0, [r5, #0]
 800162e:	f020 0001 	bic.w	r0, r0, #1
 8001632:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff ff95 	bl	8001564 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800163a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800163c:	b15b      	cbz	r3, 8001656 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f043 030e 	orr.w	r3, r3, #14
 8001646:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	e7e2      	b.n	800161c <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001660:	6822      	ldr	r2, [r4, #0]
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	f043 030a 	orr.w	r3, r3, #10
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e7ed      	b.n	8001648 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 800166c:	2002      	movs	r0, #2
 800166e:	e7d5      	b.n	800161c <HAL_DMA_Start_IT+0x20>

08001670 <HAL_DMA_Abort_IT>:
{  
 8001670:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001672:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001676:	2b02      	cmp	r3, #2
 8001678:	d003      	beq.n	8001682 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	2304      	movs	r3, #4
 800167c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800167e:	2001      	movs	r0, #1
}
 8001680:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001682:	6802      	ldr	r2, [r0, #0]
 8001684:	6813      	ldr	r3, [r2, #0]
 8001686:	f023 030e 	bic.w	r3, r3, #14
 800168a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800168c:	6802      	ldr	r2, [r0, #0]
 800168e:	6813      	ldr	r3, [r2, #0]
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001696:	6803      	ldr	r3, [r0, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_DMA_Abort_IT+0x90>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d014      	beq.n	80016c8 <HAL_DMA_Abort_IT+0x58>
 800169e:	3214      	adds	r2, #20
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d01f      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x74>
 80016a4:	3214      	adds	r2, #20
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01e      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x78>
 80016aa:	3214      	adds	r2, #20
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d01e      	beq.n	80016ee <HAL_DMA_Abort_IT+0x7e>
 80016b0:	3214      	adds	r2, #20
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01e      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x84>
 80016b6:	3214      	adds	r2, #20
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d002      	beq.n	80016c2 <HAL_DMA_Abort_IT+0x52>
 80016bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c0:	e003      	b.n	80016ca <HAL_DMA_Abort_IT+0x5a>
 80016c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016c6:	e000      	b.n	80016ca <HAL_DMA_Abort_IT+0x5a>
 80016c8:	2201      	movs	r2, #1
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_DMA_Abort_IT+0x94>)
 80016cc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80016d4:	2300      	movs	r3, #0
 80016d6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80016da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016dc:	b16b      	cbz	r3, 80016fa <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80016de:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2000      	movs	r0, #0
 80016e2:	e7cd      	b.n	8001680 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016e4:	2210      	movs	r2, #16
 80016e6:	e7f0      	b.n	80016ca <HAL_DMA_Abort_IT+0x5a>
 80016e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ec:	e7ed      	b.n	80016ca <HAL_DMA_Abort_IT+0x5a>
 80016ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016f2:	e7ea      	b.n	80016ca <HAL_DMA_Abort_IT+0x5a>
 80016f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016f8:	e7e7      	b.n	80016ca <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2000      	movs	r0, #0
 80016fc:	e7c0      	b.n	8001680 <HAL_DMA_Abort_IT+0x10>
 80016fe:	bf00      	nop
 8001700:	40020008 	.word	0x40020008
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b4f0      	push	{r4, r5, r6, r7}
 800170a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170c:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 800170e:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	e0a2      	b.n	8001858 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	2d00      	cmp	r5, #0
 8001714:	d05a      	beq.n	80017cc <HAL_GPIO_Init+0xc4>
 8001716:	2d01      	cmp	r5, #1
 8001718:	d100      	bne.n	800171c <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800171a:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800171c:	2bff      	cmp	r3, #255	; 0xff
 800171e:	d869      	bhi.n	80017f4 <HAL_GPIO_Init+0xec>
 8001720:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001722:	2bff      	cmp	r3, #255	; 0xff
 8001724:	d869      	bhi.n	80017fa <HAL_GPIO_Init+0xf2>
 8001726:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001728:	f8dc 4000 	ldr.w	r4, [ip]
 800172c:	270f      	movs	r7, #15
 800172e:	40af      	lsls	r7, r5
 8001730:	ea24 0407 	bic.w	r4, r4, r7
 8001734:	fa06 f505 	lsl.w	r5, r6, r5
 8001738:	432c      	orrs	r4, r5
 800173a:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173e:	684c      	ldr	r4, [r1, #4]
 8001740:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001744:	f000 8087 	beq.w	8001856 <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001748:	4c5f      	ldr	r4, [pc, #380]	; (80018c8 <HAL_GPIO_Init+0x1c0>)
 800174a:	69a5      	ldr	r5, [r4, #24]
 800174c:	f045 0501 	orr.w	r5, r5, #1
 8001750:	61a5      	str	r5, [r4, #24]
 8001752:	69a4      	ldr	r4, [r4, #24]
 8001754:	f004 0401 	and.w	r4, r4, #1
 8001758:	9401      	str	r4, [sp, #4]
 800175a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800175c:	0895      	lsrs	r5, r2, #2
 800175e:	1caf      	adds	r7, r5, #2
 8001760:	4c5a      	ldr	r4, [pc, #360]	; (80018cc <HAL_GPIO_Init+0x1c4>)
 8001762:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001766:	f002 0703 	and.w	r7, r2, #3
 800176a:	00bf      	lsls	r7, r7, #2
 800176c:	f04f 0c0f 	mov.w	ip, #15
 8001770:	fa0c fc07 	lsl.w	ip, ip, r7
 8001774:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001778:	4c55      	ldr	r4, [pc, #340]	; (80018d0 <HAL_GPIO_Init+0x1c8>)
 800177a:	42a0      	cmp	r0, r4
 800177c:	d043      	beq.n	8001806 <HAL_GPIO_Init+0xfe>
 800177e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001782:	42a0      	cmp	r0, r4
 8001784:	f000 8081 	beq.w	800188a <HAL_GPIO_Init+0x182>
 8001788:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800178c:	42a0      	cmp	r0, r4
 800178e:	d07e      	beq.n	800188e <HAL_GPIO_Init+0x186>
 8001790:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001794:	42a0      	cmp	r0, r4
 8001796:	d034      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001798:	2404      	movs	r4, #4
 800179a:	e035      	b.n	8001808 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 800179c:	4f4d      	ldr	r7, [pc, #308]	; (80018d4 <HAL_GPIO_Init+0x1cc>)
 800179e:	42bd      	cmp	r5, r7
 80017a0:	d014      	beq.n	80017cc <HAL_GPIO_Init+0xc4>
 80017a2:	d90b      	bls.n	80017bc <HAL_GPIO_Init+0xb4>
 80017a4:	4f4c      	ldr	r7, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x1d0>)
 80017a6:	42bd      	cmp	r5, r7
 80017a8:	d010      	beq.n	80017cc <HAL_GPIO_Init+0xc4>
 80017aa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80017ae:	42bd      	cmp	r5, r7
 80017b0:	d00c      	beq.n	80017cc <HAL_GPIO_Init+0xc4>
 80017b2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80017b6:	42bd      	cmp	r5, r7
 80017b8:	d1b0      	bne.n	800171c <HAL_GPIO_Init+0x14>
 80017ba:	e007      	b.n	80017cc <HAL_GPIO_Init+0xc4>
 80017bc:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80017c0:	42bd      	cmp	r5, r7
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0xc4>
 80017c4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80017c8:	42bd      	cmp	r5, r7
 80017ca:	d1a7      	bne.n	800171c <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017cc:	688d      	ldr	r5, [r1, #8]
 80017ce:	b17d      	cbz	r5, 80017f0 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017d0:	2d01      	cmp	r5, #1
 80017d2:	d008      	beq.n	80017e6 <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 80017d4:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d6:	2608      	movs	r6, #8
 80017d8:	e7a0      	b.n	800171c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017da:	68ce      	ldr	r6, [r1, #12]
 80017dc:	3608      	adds	r6, #8
          break;
 80017de:	e79d      	b.n	800171c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e0:	68ce      	ldr	r6, [r1, #12]
 80017e2:	360c      	adds	r6, #12
          break;
 80017e4:	e79a      	b.n	800171c <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 80017e6:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2608      	movs	r6, #8
 80017ea:	e797      	b.n	800171c <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ec:	2600      	movs	r6, #0
 80017ee:	e795      	b.n	800171c <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017f0:	2604      	movs	r6, #4
 80017f2:	e793      	b.n	800171c <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f4:	f100 0c04 	add.w	ip, r0, #4
 80017f8:	e793      	b.n	8001722 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017fa:	f1a2 0508 	sub.w	r5, r2, #8
 80017fe:	00ad      	lsls	r5, r5, #2
 8001800:	e792      	b.n	8001728 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001802:	2403      	movs	r4, #3
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x100>
 8001806:	2400      	movs	r4, #0
 8001808:	40bc      	lsls	r4, r7
 800180a:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 800180e:	3502      	adds	r5, #2
 8001810:	4f2e      	ldr	r7, [pc, #184]	; (80018cc <HAL_GPIO_Init+0x1c4>)
 8001812:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001816:	684c      	ldr	r4, [r1, #4]
 8001818:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800181c:	d039      	beq.n	8001892 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800181e:	4d2f      	ldr	r5, [pc, #188]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 8001820:	682c      	ldr	r4, [r5, #0]
 8001822:	431c      	orrs	r4, r3
 8001824:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001826:	684c      	ldr	r4, [r1, #4]
 8001828:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800182c:	d037      	beq.n	800189e <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800182e:	4d2b      	ldr	r5, [pc, #172]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 8001830:	686c      	ldr	r4, [r5, #4]
 8001832:	431c      	orrs	r4, r3
 8001834:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001836:	684c      	ldr	r4, [r1, #4]
 8001838:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 800183c:	d035      	beq.n	80018aa <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800183e:	4d27      	ldr	r5, [pc, #156]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 8001840:	68ac      	ldr	r4, [r5, #8]
 8001842:	431c      	orrs	r4, r3
 8001844:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001846:	684c      	ldr	r4, [r1, #4]
 8001848:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 800184c:	d033      	beq.n	80018b6 <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800184e:	4d23      	ldr	r5, [pc, #140]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 8001850:	68ec      	ldr	r4, [r5, #12]
 8001852:	4323      	orrs	r3, r4
 8001854:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001856:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001858:	680b      	ldr	r3, [r1, #0]
 800185a:	fa33 f402 	lsrs.w	r4, r3, r2
 800185e:	d030      	beq.n	80018c2 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8001860:	2401      	movs	r4, #1
 8001862:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001864:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001866:	429c      	cmp	r4, r3
 8001868:	d1f5      	bne.n	8001856 <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 800186a:	684d      	ldr	r5, [r1, #4]
 800186c:	2d12      	cmp	r5, #18
 800186e:	d0b7      	beq.n	80017e0 <HAL_GPIO_Init+0xd8>
 8001870:	d894      	bhi.n	800179c <HAL_GPIO_Init+0x94>
 8001872:	2d02      	cmp	r5, #2
 8001874:	d0b1      	beq.n	80017da <HAL_GPIO_Init+0xd2>
 8001876:	f67f af4c 	bls.w	8001712 <HAL_GPIO_Init+0xa>
 800187a:	2d03      	cmp	r5, #3
 800187c:	d0b6      	beq.n	80017ec <HAL_GPIO_Init+0xe4>
 800187e:	2d11      	cmp	r5, #17
 8001880:	f47f af4c 	bne.w	800171c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	68ce      	ldr	r6, [r1, #12]
 8001886:	3604      	adds	r6, #4
          break;
 8001888:	e748      	b.n	800171c <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800188a:	2401      	movs	r4, #1
 800188c:	e7bc      	b.n	8001808 <HAL_GPIO_Init+0x100>
 800188e:	2402      	movs	r4, #2
 8001890:	e7ba      	b.n	8001808 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001892:	4d12      	ldr	r5, [pc, #72]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 8001894:	682c      	ldr	r4, [r5, #0]
 8001896:	ea24 0403 	bic.w	r4, r4, r3
 800189a:	602c      	str	r4, [r5, #0]
 800189c:	e7c3      	b.n	8001826 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800189e:	4d0f      	ldr	r5, [pc, #60]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 80018a0:	686c      	ldr	r4, [r5, #4]
 80018a2:	ea24 0403 	bic.w	r4, r4, r3
 80018a6:	606c      	str	r4, [r5, #4]
 80018a8:	e7c5      	b.n	8001836 <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018aa:	4d0c      	ldr	r5, [pc, #48]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 80018ac:	68ac      	ldr	r4, [r5, #8]
 80018ae:	ea24 0403 	bic.w	r4, r4, r3
 80018b2:	60ac      	str	r4, [r5, #8]
 80018b4:	e7c7      	b.n	8001846 <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b6:	4d09      	ldr	r5, [pc, #36]	; (80018dc <HAL_GPIO_Init+0x1d4>)
 80018b8:	68ec      	ldr	r4, [r5, #12]
 80018ba:	ea24 0303 	bic.w	r3, r4, r3
 80018be:	60eb      	str	r3, [r5, #12]
 80018c0:	e7c9      	b.n	8001856 <HAL_GPIO_Init+0x14e>
  }
}
 80018c2:	b002      	add	sp, #8
 80018c4:	bcf0      	pop	{r4, r5, r6, r7}
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40010800 	.word	0x40010800
 80018d4:	10210000 	.word	0x10210000
 80018d8:	10310000 	.word	0x10310000
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e0:	b912      	cbnz	r2, 80018e8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e2:	0409      	lsls	r1, r1, #16
 80018e4:	6101      	str	r1, [r0, #16]
  }
}
 80018e6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80018e8:	6101      	str	r1, [r0, #16]
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80018f0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4203      	tst	r3, r0
 80018f8:	d100      	bne.n	80018fc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80018fa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80018fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001900:	f7ff fff4 	bl	80018ec <HAL_GPIO_EXTI_Callback>
}
 8001904:	e7f9      	b.n	80018fa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001906:	bf00      	nop
 8001908:	40010400 	.word	0x40010400

0800190c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800190c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <RCC_Delay+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <RCC_Delay+0x28>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	0a5b      	lsrs	r3, r3, #9
 800191a:	fb00 f003 	mul.w	r0, r0, r3
 800191e:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8001920:	bf00      	nop
  }
  while (Delay --);
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	9201      	str	r2, [sp, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f9      	bne.n	8001920 <RCC_Delay+0x14>
}
 800192c:	b002      	add	sp, #8
 800192e:	4770      	bx	lr
 8001930:	20000080 	.word	0x20000080
 8001934:	10624dd3 	.word	0x10624dd3

08001938 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001938:	2800      	cmp	r0, #0
 800193a:	f000 81f5 	beq.w	8001d28 <HAL_RCC_OscConfig+0x3f0>
{
 800193e:	b570      	push	{r4, r5, r6, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001944:	6803      	ldr	r3, [r0, #0]
 8001946:	f013 0f01 	tst.w	r3, #1
 800194a:	d02c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800194c:	4bab      	ldr	r3, [pc, #684]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b04      	cmp	r3, #4
 8001956:	d01d      	beq.n	8001994 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001958:	4ba8      	ldr	r3, [pc, #672]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d012      	beq.n	800198a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d041      	beq.n	80019f0 <HAL_RCC_OscConfig+0xb8>
 800196c:	2b00      	cmp	r3, #0
 800196e:	d155      	bne.n	8001a1c <HAL_RCC_OscConfig+0xe4>
 8001970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001974:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e037      	b.n	80019fa <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800198a:	4b9c      	ldr	r3, [pc, #624]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001992:	d0e7      	beq.n	8001964 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	4b99      	ldr	r3, [pc, #612]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_OscConfig+0x6e>
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 81c3 	beq.w	8001d2c <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	f013 0f02 	tst.w	r3, #2
 80019ac:	d076      	beq.n	8001a9c <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f013 0f0c 	tst.w	r3, #12
 80019b6:	d05f      	beq.n	8001a78 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d054      	beq.n	8001a6e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c4:	6923      	ldr	r3, [r4, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 808a 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80019cc:	4b8c      	ldr	r3, [pc, #560]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d2:	f7ff f9f7 	bl	8000dc4 <HAL_GetTick>
 80019d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f013 0f02 	tst.w	r3, #2
 80019e0:	d175      	bne.n	8001ace <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f9ef 	bl	8000dc4 <HAL_GetTick>
 80019e6:	1b40      	subs	r0, r0, r5
 80019e8:	2802      	cmp	r0, #2
 80019ea:	d9f5      	bls.n	80019d8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80019ec:	2003      	movs	r0, #3
 80019ee:	e1a0      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	4a82      	ldr	r2, [pc, #520]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 80019f2:	6813      	ldr	r3, [r2, #0]
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fa:	6863      	ldr	r3, [r4, #4]
 80019fc:	b343      	cbz	r3, 8001a50 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80019fe:	f7ff f9e1 	bl	8000dc4 <HAL_GetTick>
 8001a02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a04:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a0c:	d1cb      	bne.n	80019a6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0e:	f7ff f9d9 	bl	8000dc4 <HAL_GetTick>
 8001a12:	1b40      	subs	r0, r0, r5
 8001a14:	2864      	cmp	r0, #100	; 0x64
 8001a16:	d9f5      	bls.n	8001a04 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001a18:	2003      	movs	r0, #3
 8001a1a:	e18a      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_OscConfig+0xfe>
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e7e1      	b.n	80019fa <HAL_RCC_OscConfig+0xc2>
 8001a36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a3a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e7d4      	b.n	80019fa <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001a50:	f7ff f9b8 	bl	8000dc4 <HAL_GetTick>
 8001a54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	4b69      	ldr	r3, [pc, #420]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a5e:	d0a2      	beq.n	80019a6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff f9b0 	bl	8000dc4 <HAL_GetTick>
 8001a64:	1b40      	subs	r0, r0, r5
 8001a66:	2864      	cmp	r0, #100	; 0x64
 8001a68:	d9f5      	bls.n	8001a56 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	e161      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a76:	d1a5      	bne.n	80019c4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a78:	4b60      	ldr	r3, [pc, #384]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f013 0f02 	tst.w	r3, #2
 8001a80:	d004      	beq.n	8001a8c <HAL_RCC_OscConfig+0x154>
 8001a82:	6923      	ldr	r3, [r4, #16]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
 8001a8a:	e152      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4a5b      	ldr	r2, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a94:	6961      	ldr	r1, [r4, #20]
 8001a96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a9a:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	f013 0f08 	tst.w	r3, #8
 8001aa2:	d032      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa4:	69a3      	ldr	r3, [r4, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d05b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HAL_RCC_OscConfig+0x2cc>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f988 	bl	8000dc4 <HAL_GetTick>
 8001ab4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f013 0f02 	tst.w	r3, #2
 8001abe:	d121      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f980 	bl	8000dc4 <HAL_GetTick>
 8001ac4:	1b40      	subs	r0, r0, r5
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9f5      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001aca:	2003      	movs	r0, #3
 8001acc:	e131      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4a4b      	ldr	r2, [pc, #300]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ad6:	6961      	ldr	r1, [r4, #20]
 8001ad8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e7dd      	b.n	8001a9c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001ae0:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f96d 	bl	8000dc4 <HAL_GetTick>
 8001aea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f013 0f02 	tst.w	r3, #2
 8001af4:	d0d2      	beq.n	8001a9c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f965 	bl	8000dc4 <HAL_GetTick>
 8001afa:	1b40      	subs	r0, r0, r5
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001b00:	2003      	movs	r0, #3
 8001b02:	e116      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff ff01 	bl	800190c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	f013 0f04 	tst.w	r3, #4
 8001b10:	f000 8098 	beq.w	8001c44 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b1c:	d133      	bne.n	8001b86 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b26:	61da      	str	r2, [r3, #28]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b32:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <HAL_RCC_OscConfig+0x2d0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b3c:	d025      	beq.n	8001b8a <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	68e3      	ldr	r3, [r4, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d036      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x27a>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d14c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2aa>
 8001b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b4c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b50:	6a1a      	ldr	r2, [r3, #32]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	621a      	str	r2, [r3, #32]
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	f022 0204 	bic.w	r2, r2, #4
 8001b5e:	621a      	str	r2, [r3, #32]
 8001b60:	e02c      	b.n	8001bbc <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_RCC_OscConfig+0x2cc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b68:	f7ff f92c 	bl	8000dc4 <HAL_GetTick>
 8001b6c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f013 0f02 	tst.w	r3, #2
 8001b76:	d0c8      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f924 	bl	8000dc4 <HAL_GetTick>
 8001b7c:	1b40      	subs	r0, r0, r5
 8001b7e:	2802      	cmp	r0, #2
 8001b80:	d9f5      	bls.n	8001b6e <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8001b82:	2003      	movs	r0, #3
 8001b84:	e0d5      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2500      	movs	r5, #0
 8001b88:	e7d4      	b.n	8001b34 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x2d0>)
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b94:	f7ff f916 	bl	8000dc4 <HAL_GetTick>
 8001b98:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x2d0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ba2:	d1cc      	bne.n	8001b3e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba4:	f7ff f90e 	bl	8000dc4 <HAL_GetTick>
 8001ba8:	1b80      	subs	r0, r0, r6
 8001baa:	2864      	cmp	r0, #100	; 0x64
 8001bac:	d9f5      	bls.n	8001b9a <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8001bae:	2003      	movs	r0, #3
 8001bb0:	e0bf      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001bb4:	6a13      	ldr	r3, [r2, #32]
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbc:	68e3      	ldr	r3, [r4, #12]
 8001bbe:	b37b      	cbz	r3, 8001c20 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8001bc0:	f7ff f900 	bl	8000dc4 <HAL_GetTick>
 8001bc4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	f013 0f02 	tst.w	r3, #2
 8001bce:	d138      	bne.n	8001c42 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f8f8 	bl	8000dc4 <HAL_GetTick>
 8001bd4:	1b80      	subs	r0, r0, r6
 8001bd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bda:	4298      	cmp	r0, r3
 8001bdc:	d9f3      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
 8001be0:	e0a7      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d012      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2d4>
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_OscConfig+0x2c4>)
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	621a      	str	r2, [r3, #32]
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	621a      	str	r2, [r3, #32]
 8001bf8:	e7e0      	b.n	8001bbc <HAL_RCC_OscConfig+0x284>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	42420000 	.word	0x42420000
 8001c04:	42420480 	.word	0x42420480
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	f042 0204 	orr.w	r2, r2, #4
 8001c14:	621a      	str	r2, [r3, #32]
 8001c16:	6a1a      	ldr	r2, [r3, #32]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	621a      	str	r2, [r3, #32]
 8001c1e:	e7cd      	b.n	8001bbc <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8001c20:	f7ff f8d0 	bl	8000dc4 <HAL_GetTick>
 8001c24:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f013 0f02 	tst.w	r3, #2
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7ff f8c8 	bl	8000dc4 <HAL_GetTick>
 8001c34:	1b80      	subs	r0, r0, r6
 8001c36:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c3a:	4298      	cmp	r0, r3
 8001c3c:	d9f3      	bls.n	8001c26 <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8001c3e:	2003      	movs	r0, #3
 8001c40:	e077      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8001c42:	b9e5      	cbnz	r5, 8001c7e <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c44:	69e3      	ldr	r3, [r4, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d072      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c4a:	4a3d      	ldr	r2, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001c4c:	6852      	ldr	r2, [r2, #4]
 8001c4e:	f002 020c 	and.w	r2, r2, #12
 8001c52:	2a08      	cmp	r2, #8
 8001c54:	d056      	beq.n	8001d04 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d017      	beq.n	8001c8a <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <HAL_RCC_OscConfig+0x40c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c60:	f7ff f8b0 	bl	8000dc4 <HAL_GetTick>
 8001c64:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c6e:	d047      	beq.n	8001d00 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f8a8 	bl	8000dc4 <HAL_GetTick>
 8001c74:	1b00      	subs	r0, r0, r4
 8001c76:	2802      	cmp	r0, #2
 8001c78:	d9f5      	bls.n	8001c66 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	e059      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001c80:	69d3      	ldr	r3, [r2, #28]
 8001c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c86:	61d3      	str	r3, [r2, #28]
 8001c88:	e7dc      	b.n	8001c44 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_RCC_OscConfig+0x40c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c90:	f7ff f898 	bl	8000dc4 <HAL_GetTick>
 8001c94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c9e:	d006      	beq.n	8001cae <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f890 	bl	8000dc4 <HAL_GetTick>
 8001ca4:	1b40      	subs	r0, r0, r5
 8001ca6:	2802      	cmp	r0, #2
 8001ca8:	d9f5      	bls.n	8001c96 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e041      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cae:	6a23      	ldr	r3, [r4, #32]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d01a      	beq.n	8001cec <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb6:	4922      	ldr	r1, [pc, #136]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001cb8:	684b      	ldr	r3, [r1, #4]
 8001cba:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001cbe:	6a22      	ldr	r2, [r4, #32]
 8001cc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001cc2:	4302      	orrs	r2, r0
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_OscConfig+0x40c>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cce:	f7ff f879 	bl	8000dc4 <HAL_GetTick>
 8001cd2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cdc:	d10e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f871 	bl	8000dc4 <HAL_GetTick>
 8001ce2:	1b00      	subs	r0, r0, r4
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f5      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e022      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001cee:	6853      	ldr	r3, [r2, #4]
 8001cf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cf4:	68a1      	ldr	r1, [r4, #8]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	6053      	str	r3, [r2, #4]
 8001cfa:	e7dc      	b.n	8001cb6 <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e018      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
 8001d00:	2000      	movs	r0, #0
 8001d02:	e016      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d016      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_OscConfig+0x408>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001d10:	6a22      	ldr	r2, [r4, #32]
 8001d12:	4291      	cmp	r1, r2
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d1a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
 8001d26:	e004      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8001d28:	2001      	movs	r0, #1
}
 8001d2a:	4770      	bx	lr
        return HAL_ERROR;
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8001d30:	2000      	movs	r0, #0
}
 8001d32:	b002      	add	sp, #8
 8001d34:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d36:	2001      	movs	r0, #1
 8001d38:	e7fb      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	e7f9      	b.n	8001d32 <HAL_RCC_OscConfig+0x3fa>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	42420060 	.word	0x42420060

08001d48 <HAL_RCC_GetSysClockFreq>:
{
 8001d48:	b410      	push	{r4}
 8001d4a:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d4c:	4c16      	ldr	r4, [pc, #88]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001d4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d52:	f10d 0c18 	add.w	ip, sp, #24
 8001d56:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d5a:	8a23      	ldrh	r3, [r4, #16]
 8001d5c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_GetSysClockFreq+0x64>)
 8001d62:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	f003 020c 	and.w	r2, r3, #12
 8001d68:	2a08      	cmp	r2, #8
 8001d6a:	d11a      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d70:	4462      	add	r2, ip
 8001d72:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x68>)
 8001d7e:	fb00 f002 	mul.w	r0, r0, r2
}
 8001d82:	b007      	add	sp, #28
 8001d84:	bc10      	pop	{r4}
 8001d86:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_RCC_GetSysClockFreq+0x64>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001d90:	4463      	add	r3, ip
 8001d92:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d98:	fb00 f002 	mul.w	r0, r0, r2
 8001d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001da0:	e7ef      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001da2:	4804      	ldr	r0, [pc, #16]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001da4:	e7ed      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001da6:	bf00      	nop
 8001da8:	08004168 	.word	0x08004168
 8001dac:	40021000 	.word	0x40021000
 8001db0:	003d0900 	.word	0x003d0900
 8001db4:	007a1200 	.word	0x007a1200

08001db8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001db8:	2800      	cmp	r0, #0
 8001dba:	f000 80a3 	beq.w	8001f04 <HAL_RCC_ClockConfig+0x14c>
{
 8001dbe:	b570      	push	{r4, r5, r6, lr}
 8001dc0:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc2:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <HAL_RCC_ClockConfig+0x154>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	d20c      	bcs.n	8001de8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4a4f      	ldr	r2, [pc, #316]	; (8001f0c <HAL_RCC_ClockConfig+0x154>)
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	f023 0307 	bic.w	r3, r3, #7
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	428b      	cmp	r3, r1
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001de4:	2001      	movs	r0, #1
}
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f013 0f02 	tst.w	r3, #2
 8001dee:	d017      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	f013 0f04 	tst.w	r3, #4
 8001df4:	d004      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df6:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001df8:	6853      	ldr	r3, [r2, #4]
 8001dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dfe:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	f013 0f08 	tst.w	r3, #8
 8001e06:	d004      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001e0a:	6853      	ldr	r3, [r2, #4]
 8001e0c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e10:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e12:	4a3f      	ldr	r2, [pc, #252]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001e14:	6853      	ldr	r3, [r2, #4]
 8001e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e1a:	68a0      	ldr	r0, [r4, #8]
 8001e1c:	4303      	orrs	r3, r0
 8001e1e:	6053      	str	r3, [r2, #4]
 8001e20:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f013 0f01 	tst.w	r3, #1
 8001e28:	d031      	beq.n	8001e8e <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d025      	beq.n	8001e80 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4a36      	ldr	r2, [pc, #216]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	f012 0f02 	tst.w	r2, #2
 8001e3c:	d064      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4934      	ldr	r1, [pc, #208]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001e40:	684a      	ldr	r2, [r1, #4]
 8001e42:	f022 0203 	bic.w	r2, r2, #3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001e4a:	f7fe ffbb 	bl	8000dc4 <HAL_GetTick>
 8001e4e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	6862      	ldr	r2, [r4, #4]
 8001e5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e5e:	d016      	beq.n	8001e8e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7fe ffb0 	bl	8000dc4 <HAL_GetTick>
 8001e64:	1b80      	subs	r0, r0, r6
 8001e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e6a:	4298      	cmp	r0, r3
 8001e6c:	d9f0      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001e6e:	2003      	movs	r0, #3
 8001e70:	e7b9      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e7a:	d1e0      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	e7b2      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e80:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001e88:	d1d9      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7ab      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_ClockConfig+0x154>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	42ab      	cmp	r3, r5
 8001e98:	d90c      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <HAL_RCC_ClockConfig+0x154>)
 8001e9c:	6813      	ldr	r3, [r2, #0]
 8001e9e:	f023 0307 	bic.w	r3, r3, #7
 8001ea2:	432b      	orrs	r3, r5
 8001ea4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	42ab      	cmp	r3, r5
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	e798      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f013 0f04 	tst.w	r3, #4
 8001eba:	d006      	beq.n	8001eca <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001ebe:	6853      	ldr	r3, [r2, #4]
 8001ec0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ec4:	68e1      	ldr	r1, [r4, #12]
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	f013 0f08 	tst.w	r3, #8
 8001ed0:	d007      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001ed4:	6853      	ldr	r3, [r2, #4]
 8001ed6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001eda:	6921      	ldr	r1, [r4, #16]
 8001edc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ee0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee2:	f7ff ff31 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x158>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x15c>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	40d8      	lsrs	r0, r3
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_RCC_ClockConfig+0x160>)
 8001ef6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_RCC_ClockConfig+0x164>)
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	f7fe ff1e 	bl	8000d3c <HAL_InitTick>
  return HAL_OK;
 8001f00:	2000      	movs	r0, #0
 8001f02:	e770      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001f04:	2001      	movs	r0, #1
}
 8001f06:	4770      	bx	lr
        return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
 8001f0a:	e76c      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08004198 	.word	0x08004198
 8001f18:	20000080 	.word	0x20000080
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_RCC_GetHCLKFreq>:
}
 8001f20:	4b01      	ldr	r3, [pc, #4]	; (8001f28 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000080 	.word	0x20000080

08001f2c <HAL_RCC_GetPCLK1Freq>:
{
 8001f2c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f2e:	f7ff fff7 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001f3a:	4a03      	ldr	r2, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f3e:	40d8      	lsrs	r0, r3
 8001f40:	bd08      	pop	{r3, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	080041a8 	.word	0x080041a8

08001f4c <HAL_RCC_GetPCLK2Freq>:
{
 8001f4c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f4e:	f7ff ffe7 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f5e:	40d8      	lsrs	r0, r3
 8001f60:	bd08      	pop	{r3, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	080041a8 	.word	0x080041a8

08001f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	f013 0f01 	tst.w	r3, #1
 8001f78:	d034      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f82:	d148      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f8c:	61da      	str	r2, [r3, #28]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f98:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fa2:	d03a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fac:	d011      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001fae:	6862      	ldr	r2, [r4, #4]
 8001fb0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d00c      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb8:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001fba:	6a13      	ldr	r3, [r2, #32]
 8001fbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc0:	492e      	ldr	r1, [pc, #184]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001fc2:	2601      	movs	r6, #1
 8001fc4:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fca:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fcc:	f013 0f01 	tst.w	r3, #1
 8001fd0:	d137      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd2:	4a28      	ldr	r2, [pc, #160]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001fd4:	6a13      	ldr	r3, [r2, #32]
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fda:	6861      	ldr	r1, [r4, #4]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	d13f      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	f013 0f02 	tst.w	r3, #2
 8001fea:	d006      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fec:	4a21      	ldr	r2, [pc, #132]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001fee:	6853      	ldr	r3, [r2, #4]
 8001ff0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ff4:	68a1      	ldr	r1, [r4, #8]
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	f013 0f10 	tst.w	r3, #16
 8002000:	d035      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002002:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002004:	6853      	ldr	r3, [r2, #4]
 8002006:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800200a:	68e1      	ldr	r1, [r4, #12]
 800200c:	430b      	orrs	r3, r1
 800200e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002010:	2000      	movs	r0, #0
}
 8002012:	b002      	add	sp, #8
 8002014:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2500      	movs	r5, #0
 8002018:	e7bf      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002024:	f7fe fece 	bl	8000dc4 <HAL_GetTick>
 8002028:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002032:	d1b7      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe fec6 	bl	8000dc4 <HAL_GetTick>
 8002038:	1b80      	subs	r0, r0, r6
 800203a:	2864      	cmp	r0, #100	; 0x64
 800203c:	d9f5      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800203e:	2003      	movs	r0, #3
 8002040:	e7e7      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8002042:	f7fe febf 	bl	8000dc4 <HAL_GetTick>
 8002046:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f013 0f02 	tst.w	r3, #2
 8002050:	d1bf      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe feb7 	bl	8000dc4 <HAL_GetTick>
 8002056:	1b80      	subs	r0, r0, r6
 8002058:	f241 3388 	movw	r3, #5000	; 0x1388
 800205c:	4298      	cmp	r0, r3
 800205e:	d9f3      	bls.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8002060:	2003      	movs	r0, #3
 8002062:	e7d6      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	69d3      	ldr	r3, [r2, #28]
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206a:	61d3      	str	r3, [r2, #28]
 800206c:	e7ba      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 800206e:	2000      	movs	r0, #0
 8002070:	e7cf      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
 800207c:	42420440 	.word	0x42420440

08002080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002080:	b530      	push	{r4, r5, lr}
 8002082:	b087      	sub	sp, #28
 8002084:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002086:	4c38      	ldr	r4, [pc, #224]	; (8002168 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8002088:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800208c:	f10d 0c18 	add.w	ip, sp, #24
 8002090:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002094:	8a23      	ldrh	r3, [r4, #16]
 8002096:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800209a:	2d02      	cmp	r5, #2
 800209c:	d050      	beq.n	8002140 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800209e:	2d10      	cmp	r5, #16
 80020a0:	d003      	beq.n	80020aa <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 80020a2:	2d01      	cmp	r5, #1
 80020a4:	d02b      	beq.n	80020fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 80020a6:	2000      	movs	r0, #0
 80020a8:	e054      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80020ac:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80020b4:	d050      	beq.n	8002158 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b6:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80020ba:	a906      	add	r1, sp, #24
 80020bc:	440b      	add	r3, r1
 80020be:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80020c6:	d016      	beq.n	80020f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80020d0:	440b      	add	r3, r1
 80020d2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80020d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020dc:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020e8:	d134      	bne.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80020ea:	0040      	lsls	r0, r0, #1
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80020ee:	fba3 3000 	umull	r3, r0, r3, r0
 80020f2:	0840      	lsrs	r0, r0, #1
 80020f4:	e02e      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80020f8:	fb03 f000 	mul.w	r0, r3, r0
 80020fc:	e7f0      	b.n	80020e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002100:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002102:	f240 3202 	movw	r2, #770	; 0x302
 8002106:	401a      	ands	r2, r3
 8002108:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800210c:	d026      	beq.n	800215c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800210e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002116:	d004      	beq.n	8002122 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800211c:	d009      	beq.n	8002132 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  uint32_t temp_reg = 0U, frequency = 0U;
 800211e:	2000      	movs	r0, #0
 8002120:	e018      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002126:	f012 0f02 	tst.w	r2, #2
 800212a:	d0f5      	beq.n	8002118 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 800212c:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002130:	e010      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800213a:	d112      	bne.n	8002162 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  uint32_t temp_reg = 0U, frequency = 0U;
 800213c:	2000      	movs	r0, #0
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002140:	f7ff ff04 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800214c:	3301      	adds	r3, #1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 8002154:	b007      	add	sp, #28
 8002156:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 8002158:	2000      	movs	r0, #0
 800215a:	e7fb      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 800215c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002160:	e7f8      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 8002162:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 8002166:	e7f5      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8002168:	0800417c 	.word	0x0800417c
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	aaaaaaab 	.word	0xaaaaaaab
 8002178:	003d0900 	.word	0x003d0900

0800217c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800217c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217e:	6a03      	ldr	r3, [r0, #32]
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002186:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002188:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800218a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800218c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002190:	680d      	ldr	r5, [r1, #0]
 8002192:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002196:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800219a:	688b      	ldr	r3, [r1, #8]
 800219c:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800219e:	4d0d      	ldr	r5, [pc, #52]	; (80021d4 <TIM_OC1_SetConfig+0x58>)
 80021a0:	42a8      	cmp	r0, r5
 80021a2:	d009      	beq.n	80021b8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021a4:	4d0b      	ldr	r5, [pc, #44]	; (80021d4 <TIM_OC1_SetConfig+0x58>)
 80021a6:	42a8      	cmp	r0, r5
 80021a8:	d00d      	beq.n	80021c6 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021aa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ac:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021ae:	684a      	ldr	r2, [r1, #4]
 80021b0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b2:	6203      	str	r3, [r0, #32]
}
 80021b4:	bc70      	pop	{r4, r5, r6}
 80021b6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80021b8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80021bc:	68cc      	ldr	r4, [r1, #12]
 80021be:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	e7ee      	b.n	80021a4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80021ca:	694c      	ldr	r4, [r1, #20]
 80021cc:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80021ce:	698a      	ldr	r2, [r1, #24]
 80021d0:	4322      	orrs	r2, r4
 80021d2:	e7ea      	b.n	80021aa <TIM_OC1_SetConfig+0x2e>
 80021d4:	40012c00 	.word	0x40012c00

080021d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021da:	6a03      	ldr	r3, [r0, #32]
 80021dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021e6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021e8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ec:	680d      	ldr	r5, [r1, #0]
 80021ee:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021f4:	688d      	ldr	r5, [r1, #8]
 80021f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021fa:	4d0f      	ldr	r5, [pc, #60]	; (8002238 <TIM_OC3_SetConfig+0x60>)
 80021fc:	42a8      	cmp	r0, r5
 80021fe:	d009      	beq.n	8002214 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002200:	4d0d      	ldr	r5, [pc, #52]	; (8002238 <TIM_OC3_SetConfig+0x60>)
 8002202:	42a8      	cmp	r0, r5
 8002204:	d00e      	beq.n	8002224 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002206:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002208:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800220a:	684a      	ldr	r2, [r1, #4]
 800220c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220e:	6203      	str	r3, [r0, #32]
}
 8002210:	bc30      	pop	{r4, r5}
 8002212:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002218:	68cd      	ldr	r5, [r1, #12]
 800221a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800221e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002222:	e7ed      	b.n	8002200 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002224:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002228:	694d      	ldr	r5, [r1, #20]
 800222a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800222e:	698d      	ldr	r5, [r1, #24]
 8002230:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002234:	e7e7      	b.n	8002206 <TIM_OC3_SetConfig+0x2e>
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00

0800223c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800223c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800223e:	6a03      	ldr	r3, [r0, #32]
 8002240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002244:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002246:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002248:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800224a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800224c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002250:	680d      	ldr	r5, [r1, #0]
 8002252:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800225a:	688d      	ldr	r5, [r1, #8]
 800225c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002260:	4d07      	ldr	r5, [pc, #28]	; (8002280 <TIM_OC4_SetConfig+0x44>)
 8002262:	42a8      	cmp	r0, r5
 8002264:	d006      	beq.n	8002274 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002266:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002268:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800226a:	684a      	ldr	r2, [r1, #4]
 800226c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226e:	6203      	str	r3, [r0, #32]
}
 8002270:	bc30      	pop	{r4, r5}
 8002272:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002274:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002278:	694d      	ldr	r5, [r1, #20]
 800227a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800227e:	e7f2      	b.n	8002266 <TIM_OC4_SetConfig+0x2a>
 8002280:	40012c00 	.word	0x40012c00

08002284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002284:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002286:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002288:	6a04      	ldr	r4, [r0, #32]
 800228a:	f024 0401 	bic.w	r4, r4, #1
 800228e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002290:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002292:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002296:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800229a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800229e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022a2:	6203      	str	r3, [r0, #32]
}
 80022a4:	bc10      	pop	{r4}
 80022a6:	4770      	bx	lr

080022a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022a8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022aa:	6a03      	ldr	r3, [r0, #32]
 80022ac:	f023 0310 	bic.w	r3, r3, #16
 80022b0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80022b4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022b6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ba:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80022c2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022c8:	6203      	str	r3, [r0, #32]
}
 80022ca:	bc10      	pop	{r4}
 80022cc:	4770      	bx	lr

080022ce <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022ce:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022d4:	4319      	orrs	r1, r3
 80022d6:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022da:	6081      	str	r1, [r0, #8]
}
 80022dc:	4770      	bx	lr

080022de <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022de:	6802      	ldr	r2, [r0, #0]
 80022e0:	68d3      	ldr	r3, [r2, #12]
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e8:	6802      	ldr	r2, [r0, #0]
 80022ea:	6893      	ldr	r3, [r2, #8]
 80022ec:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d003      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_OC_MspInit>:
}
 8002300:	4770      	bx	lr

08002302 <HAL_TIM_OnePulse_MspInit>:
}
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_PeriodElapsedCallback>:
}
 8002304:	4770      	bx	lr

08002306 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002306:	4770      	bx	lr

08002308 <HAL_TIM_IC_CaptureCallback>:
}
 8002308:	4770      	bx	lr

0800230a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_TriggerCallback>:
}
 800230c:	4770      	bx	lr

0800230e <HAL_TIM_IRQHandler>:
{
 800230e:	b510      	push	{r4, lr}
 8002310:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002312:	6803      	ldr	r3, [r0, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	f012 0f02 	tst.w	r2, #2
 800231a:	d011      	beq.n	8002340 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	f012 0f02 	tst.w	r2, #2
 8002322:	d00d      	beq.n	8002340 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232a:	2301      	movs	r3, #1
 800232c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800232e:	6803      	ldr	r3, [r0, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f013 0f03 	tst.w	r3, #3
 8002336:	d070      	beq.n	800241a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002338:	f7ff ffe6 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233c:	2300      	movs	r3, #0
 800233e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	f012 0f04 	tst.w	r2, #4
 8002348:	d012      	beq.n	8002370 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	f012 0f04 	tst.w	r2, #4
 8002350:	d00e      	beq.n	8002370 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002352:	f06f 0204 	mvn.w	r2, #4
 8002356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002358:	2302      	movs	r3, #2
 800235a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002364:	d05f      	beq.n	8002426 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff ffce 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236c:	2300      	movs	r3, #0
 800236e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	f012 0f08 	tst.w	r2, #8
 8002378:	d012      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	f012 0f08 	tst.w	r2, #8
 8002380:	d00e      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002382:	f06f 0208 	mvn.w	r2, #8
 8002386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002388:	2304      	movs	r3, #4
 800238a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f013 0f03 	tst.w	r3, #3
 8002394:	d04e      	beq.n	8002434 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ffb6 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239c:	2300      	movs	r3, #0
 800239e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	f012 0f10 	tst.w	r2, #16
 80023a8:	d012      	beq.n	80023d0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	f012 0f10 	tst.w	r2, #16
 80023b0:	d00e      	beq.n	80023d0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023b2:	f06f 0210 	mvn.w	r2, #16
 80023b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b8:	2308      	movs	r3, #8
 80023ba:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80023c4:	d03d      	beq.n	8002442 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7ff ff9e 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023cc:	2300      	movs	r3, #0
 80023ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	f012 0f01 	tst.w	r2, #1
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	f012 0f01 	tst.w	r2, #1
 80023e0:	d136      	bne.n	8002450 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80023ea:	d003      	beq.n	80023f4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80023f2:	d134      	bne.n	800245e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002404:	d132      	bne.n	800246c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	f012 0f20 	tst.w	r2, #32
 800240e:	d003      	beq.n	8002418 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	f012 0f20 	tst.w	r2, #32
 8002416:	d130      	bne.n	800247a <HAL_TIM_IRQHandler+0x16c>
}
 8002418:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	f7ff ff74 	bl	8002306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff ff73 	bl	800230a <HAL_TIM_PWM_PulseFinishedCallback>
 8002424:	e78a      	b.n	800233c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff ff6d 	bl	8002306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ff6c 	bl	800230a <HAL_TIM_PWM_PulseFinishedCallback>
 8002432:	e79b      	b.n	800236c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff ff66 	bl	8002306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243a:	4620      	mov	r0, r4
 800243c:	f7ff ff65 	bl	800230a <HAL_TIM_PWM_PulseFinishedCallback>
 8002440:	e7ac      	b.n	800239c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff ff5f 	bl	8002306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	4620      	mov	r0, r4
 800244a:	f7ff ff5e 	bl	800230a <HAL_TIM_PWM_PulseFinishedCallback>
 800244e:	e7bd      	b.n	80023cc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002450:	f06f 0201 	mvn.w	r2, #1
 8002454:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff ff54 	bl	8002304 <HAL_TIM_PeriodElapsedCallback>
 800245c:	e7c1      	b.n	80023e2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800245e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002462:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002464:	4620      	mov	r0, r4
 8002466:	f000 f9c5 	bl	80027f4 <HAL_TIMEx_BreakCallback>
 800246a:	e7c3      	b.n	80023f4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800246c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002470:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002472:	4620      	mov	r0, r4
 8002474:	f7ff ff4a 	bl	800230c <HAL_TIM_TriggerCallback>
 8002478:	e7c5      	b.n	8002406 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800247a:	f06f 0220 	mvn.w	r2, #32
 800247e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002480:	4620      	mov	r0, r4
 8002482:	f000 f9b6 	bl	80027f2 <HAL_TIMEx_CommutCallback>
}
 8002486:	e7c7      	b.n	8002418 <HAL_TIM_IRQHandler+0x10a>

08002488 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002488:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <TIM_Base_SetConfig+0x70>)
 800248c:	4290      	cmp	r0, r2
 800248e:	d00a      	beq.n	80024a6 <TIM_Base_SetConfig+0x1e>
 8002490:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002494:	d007      	beq.n	80024a6 <TIM_Base_SetConfig+0x1e>
 8002496:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800249a:	4290      	cmp	r0, r2
 800249c:	d003      	beq.n	80024a6 <TIM_Base_SetConfig+0x1e>
 800249e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d103      	bne.n	80024ae <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024aa:	684a      	ldr	r2, [r1, #4]
 80024ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <TIM_Base_SetConfig+0x70>)
 80024b0:	4290      	cmp	r0, r2
 80024b2:	d00a      	beq.n	80024ca <TIM_Base_SetConfig+0x42>
 80024b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x42>
 80024ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80024be:	4290      	cmp	r0, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x42>
 80024c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024c6:	4290      	cmp	r0, r2
 80024c8:	d103      	bne.n	80024d2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ce:	68ca      	ldr	r2, [r1, #12]
 80024d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d6:	694a      	ldr	r2, [r1, #20]
 80024d8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80024da:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024dc:	688b      	ldr	r3, [r1, #8]
 80024de:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024e0:	680b      	ldr	r3, [r1, #0]
 80024e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <TIM_Base_SetConfig+0x70>)
 80024e6:	4298      	cmp	r0, r3
 80024e8:	d002      	beq.n	80024f0 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80024ea:	2301      	movs	r3, #1
 80024ec:	6143      	str	r3, [r0, #20]
}
 80024ee:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80024f0:	690b      	ldr	r3, [r1, #16]
 80024f2:	6303      	str	r3, [r0, #48]	; 0x30
 80024f4:	e7f9      	b.n	80024ea <TIM_Base_SetConfig+0x62>
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00

080024fc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80024fc:	b1a8      	cbz	r0, 800252a <HAL_TIM_Base_Init+0x2e>
{
 80024fe:	b510      	push	{r4, lr}
 8002500:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002506:	b15b      	cbz	r3, 8002520 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	2302      	movs	r3, #2
 800250a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250e:	1d21      	adds	r1, r4, #4
 8002510:	6820      	ldr	r0, [r4, #0]
 8002512:	f7ff ffb9 	bl	8002488 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002516:	2301      	movs	r3, #1
 8002518:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800251c:	2000      	movs	r0, #0
}
 800251e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002520:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002524:	f001 fcb8 	bl	8003e98 <HAL_TIM_Base_MspInit>
 8002528:	e7ee      	b.n	8002508 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800252a:	2001      	movs	r0, #1
}
 800252c:	4770      	bx	lr

0800252e <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800252e:	b1a8      	cbz	r0, 800255c <HAL_TIM_OC_Init+0x2e>
{
 8002530:	b510      	push	{r4, lr}
 8002532:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002534:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002538:	b15b      	cbz	r3, 8002552 <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002540:	1d21      	adds	r1, r4, #4
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	f7ff ffa0 	bl	8002488 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002548:	2301      	movs	r3, #1
 800254a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800254e:	2000      	movs	r0, #0
}
 8002550:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002552:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002556:	f7ff fed3 	bl	8002300 <HAL_TIM_OC_MspInit>
 800255a:	e7ee      	b.n	800253a <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800255c:	2001      	movs	r0, #1
}
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8002560:	b1f8      	cbz	r0, 80025a2 <HAL_TIM_OnePulse_Init+0x42>
{
 8002562:	b538      	push	{r3, r4, r5, lr}
 8002564:	4604      	mov	r4, r0
 8002566:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8002568:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800256c:	b1a3      	cbz	r3, 8002598 <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002574:	1d21      	adds	r1, r4, #4
 8002576:	6820      	ldr	r0, [r4, #0]
 8002578:	f7ff ff86 	bl	8002488 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	6813      	ldr	r3, [r2, #0]
 8002580:	f023 0308 	bic.w	r3, r3, #8
 8002584:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	6813      	ldr	r3, [r2, #0]
 800258a:	432b      	orrs	r3, r5
 800258c:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800258e:	2301      	movs	r3, #1
 8002590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002594:	2000      	movs	r0, #0
}
 8002596:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002598:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800259c:	f7ff feb1 	bl	8002302 <HAL_TIM_OnePulse_MspInit>
 80025a0:	e7e5      	b.n	800256e <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
}
 80025a4:	4770      	bx	lr
	...

080025a8 <TIM_OC2_SetConfig>:
{
 80025a8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025aa:	6a03      	ldr	r3, [r0, #32]
 80025ac:	f023 0310 	bic.w	r3, r3, #16
 80025b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80025b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80025b4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80025b6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025b8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025bc:	680d      	ldr	r5, [r1, #0]
 80025be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80025c2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025c6:	688d      	ldr	r5, [r1, #8]
 80025c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025cc:	4d0e      	ldr	r5, [pc, #56]	; (8002608 <TIM_OC2_SetConfig+0x60>)
 80025ce:	42a8      	cmp	r0, r5
 80025d0:	d009      	beq.n	80025e6 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d2:	4d0d      	ldr	r5, [pc, #52]	; (8002608 <TIM_OC2_SetConfig+0x60>)
 80025d4:	42a8      	cmp	r0, r5
 80025d6:	d00e      	beq.n	80025f6 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80025d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80025da:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80025dc:	684a      	ldr	r2, [r1, #4]
 80025de:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80025e0:	6203      	str	r3, [r0, #32]
}
 80025e2:	bc30      	pop	{r4, r5}
 80025e4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025ea:	68cd      	ldr	r5, [r1, #12]
 80025ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80025f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f4:	e7ed      	b.n	80025d2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025f6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025fa:	694d      	ldr	r5, [r1, #20]
 80025fc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002600:	698d      	ldr	r5, [r1, #24]
 8002602:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002606:	e7e7      	b.n	80025d8 <TIM_OC2_SetConfig+0x30>
 8002608:	40012c00 	.word	0x40012c00

0800260c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800260c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d028      	beq.n	8002666 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002618:	2301      	movs	r3, #1
 800261a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800261e:	2302      	movs	r3, #2
 8002620:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002624:	2a0c      	cmp	r2, #12
 8002626:	d80b      	bhi.n	8002640 <HAL_TIM_OC_ConfigChannel+0x34>
 8002628:	e8df f002 	tbb	[pc, r2]
 800262c:	0a0a0a07 	.word	0x0a0a0a07
 8002630:	0a0a0a11 	.word	0x0a0a0a11
 8002634:	0a0a0a15 	.word	0x0a0a0a15
 8002638:	19          	.byte	0x19
 8002639:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800263a:	6800      	ldr	r0, [r0, #0]
 800263c:	f7ff fd9e 	bl	800217c <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002640:	2301      	movs	r3, #1
 8002642:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002646:	2000      	movs	r0, #0
 8002648:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800264c:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800264e:	6800      	ldr	r0, [r0, #0]
 8002650:	f7ff ffaa 	bl	80025a8 <TIM_OC2_SetConfig>
      break;
 8002654:	e7f4      	b.n	8002640 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002656:	6800      	ldr	r0, [r0, #0]
 8002658:	f7ff fdbe 	bl	80021d8 <TIM_OC3_SetConfig>
      break;
 800265c:	e7f0      	b.n	8002640 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800265e:	6800      	ldr	r0, [r0, #0]
 8002660:	f7ff fdec 	bl	800223c <TIM_OC4_SetConfig>
      break;
 8002664:	e7ec      	b.n	8002640 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8002666:	2002      	movs	r0, #2
}
 8002668:	4770      	bx	lr

0800266a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800266c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002672:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002676:	430b      	orrs	r3, r1
 8002678:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800267a:	6083      	str	r3, [r0, #8]
}
 800267c:	bc10      	pop	{r4}
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002680:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d066      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0xd6>
{
 8002688:	b510      	push	{r4, lr}
 800268a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800268c:	2301      	movs	r3, #1
 800268e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002692:	2302      	movs	r3, #2
 8002694:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002698:	6802      	ldr	r2, [r0, #0]
 800269a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80026a4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80026a6:	680b      	ldr	r3, [r1, #0]
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d04a      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0xc2>
 80026ac:	d913      	bls.n	80026d6 <HAL_TIM_ConfigClockSource+0x56>
 80026ae:	2b60      	cmp	r3, #96	; 0x60
 80026b0:	d03d      	beq.n	800272e <HAL_TIM_ConfigClockSource+0xae>
 80026b2:	d91e      	bls.n	80026f2 <HAL_TIM_ConfigClockSource+0x72>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d028      	beq.n	800270a <HAL_TIM_ConfigClockSource+0x8a>
 80026b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026bc:	d130      	bne.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80026be:	68cb      	ldr	r3, [r1, #12]
 80026c0:	684a      	ldr	r2, [r1, #4]
 80026c2:	6889      	ldr	r1, [r1, #8]
 80026c4:	6800      	ldr	r0, [r0, #0]
 80026c6:	f7ff ffd0 	bl	800266a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	6893      	ldr	r3, [r2, #8]
 80026ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d2:	6093      	str	r3, [r2, #8]
      break;
 80026d4:	e024      	b.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d006      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0x68>
 80026da:	d904      	bls.n	80026e6 <HAL_TIM_ConfigClockSource+0x66>
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d003      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0x68>
 80026e0:	2b30      	cmp	r3, #48	; 0x30
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0x68>
 80026e4:	e01c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
 80026e6:	b9db      	cbnz	r3, 8002720 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026e8:	4619      	mov	r1, r3
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	f7ff fdef 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 80026f0:	e016      	b.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80026f2:	2b50      	cmp	r3, #80	; 0x50
 80026f4:	d114      	bne.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f6:	68ca      	ldr	r2, [r1, #12]
 80026f8:	6849      	ldr	r1, [r1, #4]
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	f7ff fdc2 	bl	8002284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002700:	2150      	movs	r1, #80	; 0x50
 8002702:	6820      	ldr	r0, [r4, #0]
 8002704:	f7ff fde3 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 8002708:	e00a      	b.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800270a:	68cb      	ldr	r3, [r1, #12]
 800270c:	684a      	ldr	r2, [r1, #4]
 800270e:	6889      	ldr	r1, [r1, #8]
 8002710:	6800      	ldr	r0, [r0, #0]
 8002712:	f7ff ffaa 	bl	800266a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800271e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002720:	2301      	movs	r3, #1
 8002722:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002726:	2000      	movs	r0, #0
 8002728:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800272c:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800272e:	68ca      	ldr	r2, [r1, #12]
 8002730:	6849      	ldr	r1, [r1, #4]
 8002732:	6800      	ldr	r0, [r0, #0]
 8002734:	f7ff fdb8 	bl	80022a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002738:	2160      	movs	r1, #96	; 0x60
 800273a:	6820      	ldr	r0, [r4, #0]
 800273c:	f7ff fdc7 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 8002740:	e7ee      	b.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	68ca      	ldr	r2, [r1, #12]
 8002744:	6849      	ldr	r1, [r1, #4]
 8002746:	6800      	ldr	r0, [r0, #0]
 8002748:	f7ff fd9c 	bl	8002284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800274c:	2140      	movs	r1, #64	; 0x40
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	f7ff fdbd 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 8002754:	e7e4      	b.n	8002720 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8002756:	2002      	movs	r0, #2
}
 8002758:	4770      	bx	lr

0800275a <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800275a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d01c      	beq.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002762:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002764:	2601      	movs	r6, #1
 8002766:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002770:	6802      	ldr	r2, [r0, #0]
 8002772:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002774:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002776:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800277a:	680c      	ldr	r4, [r1, #0]
 800277c:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800277e:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002782:	684b      	ldr	r3, [r1, #4]
 8002784:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002786:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002788:	6802      	ldr	r2, [r0, #0]
 800278a:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800278c:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002790:	2300      	movs	r3, #0
 8002792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002796:	4618      	mov	r0, r3
}
 8002798:	bc70      	pop	{r4, r5, r6}
 800279a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800279c:	2002      	movs	r0, #2
}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d022      	beq.n	80027ee <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80027a8:	2301      	movs	r3, #1
 80027aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027ae:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	688a      	ldr	r2, [r1, #8]
 80027b6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027bc:	684a      	ldr	r2, [r1, #4]
 80027be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027c4:	680a      	ldr	r2, [r1, #0]
 80027c6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027cc:	690a      	ldr	r2, [r1, #16]
 80027ce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d4:	694a      	ldr	r2, [r1, #20]
 80027d6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027dc:	69ca      	ldr	r2, [r1, #28]
 80027de:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027e0:	6802      	ldr	r2, [r0, #0]
 80027e2:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027e4:	2300      	movs	r3, #0
 80027e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80027ea:	4618      	mov	r0, r3
 80027ec:	4770      	bx	lr
  __HAL_LOCK(htim);
 80027ee:	2002      	movs	r0, #2
}
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f4:	4770      	bx	lr

080027f6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f6:	6802      	ldr	r2, [r0, #0]
 80027f8:	68d3      	ldr	r3, [r2, #12]
 80027fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027fe:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002800:	6802      	ldr	r2, [r0, #0]
 8002802:	6953      	ldr	r3, [r2, #20]
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800280a:	2320      	movs	r3, #32
 800280c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002810:	4770      	bx	lr

08002812 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002812:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b21      	cmp	r3, #33	; 0x21
 800281a:	d12a      	bne.n	8002872 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800281c:	6883      	ldr	r3, [r0, #8]
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d016      	beq.n	8002852 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002824:	6a03      	ldr	r3, [r0, #32]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	6202      	str	r2, [r0, #32]
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	6803      	ldr	r3, [r0, #0]
 800282e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002830:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002832:	3b01      	subs	r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002838:	b9eb      	cbnz	r3, 8002876 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800283a:	6802      	ldr	r2, [r0, #0]
 800283c:	68d3      	ldr	r3, [r2, #12]
 800283e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002842:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002844:	6802      	ldr	r2, [r0, #0]
 8002846:	68d3      	ldr	r3, [r2, #12]
 8002848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284c:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800284e:	2000      	movs	r0, #0
 8002850:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002852:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285c:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800285e:	6903      	ldr	r3, [r0, #16]
 8002860:	b91b      	cbnz	r3, 800286a <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8002862:	6a03      	ldr	r3, [r0, #32]
 8002864:	3302      	adds	r3, #2
 8002866:	6203      	str	r3, [r0, #32]
 8002868:	e7e2      	b.n	8002830 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 800286a:	6a03      	ldr	r3, [r0, #32]
 800286c:	3301      	adds	r3, #1
 800286e:	6203      	str	r3, [r0, #32]
 8002870:	e7de      	b.n	8002830 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2002      	movs	r0, #2
 8002874:	4770      	bx	lr
    return HAL_OK;
 8002876:	2000      	movs	r0, #0
  }
}
 8002878:	4770      	bx	lr
	...

0800287c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002880:	6802      	ldr	r2, [r0, #0]
 8002882:	6913      	ldr	r3, [r2, #16]
 8002884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002888:	68c1      	ldr	r1, [r0, #12]
 800288a:	430b      	orrs	r3, r1
 800288c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800288e:	6883      	ldr	r3, [r0, #8]
 8002890:	6902      	ldr	r2, [r0, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	6942      	ldr	r2, [r0, #20]
 8002896:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002898:	6801      	ldr	r1, [r0, #0]
 800289a:	68cb      	ldr	r3, [r1, #12]
 800289c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028a0:	f023 030c 	bic.w	r3, r3, #12
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028a8:	6802      	ldr	r2, [r0, #0]
 80028aa:	6953      	ldr	r3, [r2, #20]
 80028ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b0:	6981      	ldr	r1, [r0, #24]
 80028b2:	430b      	orrs	r3, r1
 80028b4:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80028b6:	6802      	ldr	r2, [r0, #0]
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <UART_SetConfig+0xc4>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d01f      	beq.n	80028fe <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028be:	f7ff fb35 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028ca:	6863      	ldr	r3, [r4, #4]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80028d2:	4d1c      	ldr	r5, [pc, #112]	; (8002944 <UART_SetConfig+0xc8>)
 80028d4:	fba5 3200 	umull	r3, r2, r5, r0
 80028d8:	0951      	lsrs	r1, r2, #5
 80028da:	2264      	movs	r2, #100	; 0x64
 80028dc:	fb02 0211 	mls	r2, r2, r1, r0
 80028e0:	0113      	lsls	r3, r2, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	fba5 2303 	umull	r2, r3, r5, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028ee:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	6821      	ldr	r1, [r4, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80028fc:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80028fe:	f7ff fb25 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002902:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002906:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800290a:	6863      	ldr	r3, [r4, #4]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002912:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <UART_SetConfig+0xc8>)
 8002914:	fba5 3200 	umull	r3, r2, r5, r0
 8002918:	0951      	lsrs	r1, r2, #5
 800291a:	2264      	movs	r2, #100	; 0x64
 800291c:	fb02 0211 	mls	r2, r2, r1, r0
 8002920:	0113      	lsls	r3, r2, #4
 8002922:	3332      	adds	r3, #50	; 0x32
 8002924:	fba5 2303 	umull	r2, r3, r5, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800292e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	6821      	ldr	r1, [r4, #0]
 8002938:	4413      	add	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
 800293c:	e7de      	b.n	80028fc <UART_SetConfig+0x80>
 800293e:	bf00      	nop
 8002940:	40013800 	.word	0x40013800
 8002944:	51eb851f 	.word	0x51eb851f

08002948 <HAL_UART_Init>:
  if (huart == NULL)
 8002948:	b358      	cbz	r0, 80029a2 <HAL_UART_Init+0x5a>
{
 800294a:	b510      	push	{r4, lr}
 800294c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800294e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002952:	b30b      	cbz	r3, 8002998 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002954:	2324      	movs	r3, #36	; 0x24
 8002956:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800295a:	6822      	ldr	r2, [r4, #0]
 800295c:	68d3      	ldr	r3, [r2, #12]
 800295e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002962:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002964:	4620      	mov	r0, r4
 8002966:	f7ff ff89 	bl	800287c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6913      	ldr	r3, [r2, #16]
 800296e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002972:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	6953      	ldr	r3, [r2, #20]
 8002978:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800297c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	68d3      	ldr	r3, [r2, #12]
 8002982:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002986:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	2000      	movs	r0, #0
 800298a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800298c:	2320      	movs	r3, #32
 800298e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002992:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002996:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002998:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800299c:	f001 faa4 	bl	8003ee8 <HAL_UART_MspInit>
 80029a0:	e7d8      	b.n	8002954 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
}
 80029a4:	4770      	bx	lr

080029a6 <HAL_UART_TxCpltCallback>:
}
 80029a6:	4770      	bx	lr

080029a8 <UART_EndTransmit_IT>:
{
 80029a8:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029aa:	6801      	ldr	r1, [r0, #0]
 80029ac:	68cb      	ldr	r3, [r1, #12]
 80029ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b2:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80029b4:	2320      	movs	r3, #32
 80029b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80029ba:	f7ff fff4 	bl	80029a6 <HAL_UART_TxCpltCallback>
}
 80029be:	2000      	movs	r0, #0
 80029c0:	bd08      	pop	{r3, pc}

080029c2 <HAL_UART_RxCpltCallback>:
}
 80029c2:	4770      	bx	lr

080029c4 <UART_Receive_IT>:
{
 80029c4:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029c6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b22      	cmp	r3, #34	; 0x22
 80029ce:	d145      	bne.n	8002a5c <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029d0:	6883      	ldr	r3, [r0, #8]
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d00e      	beq.n	80029f6 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029d8:	6903      	ldr	r3, [r0, #16]
 80029da:	bb03      	cbnz	r3, 8002a1e <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029dc:	6803      	ldr	r3, [r0, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	6281      	str	r1, [r0, #40]	; 0x28
 80029e6:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80029e8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80029f0:	b1f3      	cbz	r3, 8002a30 <UART_Receive_IT+0x6c>
    return HAL_OK;
 80029f2:	2000      	movs	r0, #0
 80029f4:	e033      	b.n	8002a5e <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80029f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029f8:	6903      	ldr	r3, [r0, #16]
 80029fa:	b943      	cbnz	r3, 8002a0e <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029fc:	6803      	ldr	r3, [r0, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a04:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002a06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a08:	3302      	adds	r3, #2
 8002a0a:	6283      	str	r3, [r0, #40]	; 0x28
 8002a0c:	e7ec      	b.n	80029e8 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a0e:	6803      	ldr	r3, [r0, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002a16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a18:	3301      	adds	r3, #1
 8002a1a:	6283      	str	r3, [r0, #40]	; 0x28
 8002a1c:	e7e4      	b.n	80029e8 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a1e:	6803      	ldr	r3, [r0, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002a24:	1c51      	adds	r1, r2, #1
 8002a26:	6281      	str	r1, [r0, #40]	; 0x28
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	7013      	strb	r3, [r2, #0]
 8002a2e:	e7db      	b.n	80029e8 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a30:	6802      	ldr	r2, [r0, #0]
 8002a32:	68d3      	ldr	r3, [r2, #12]
 8002a34:	f023 0320 	bic.w	r3, r3, #32
 8002a38:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a3a:	6802      	ldr	r2, [r0, #0]
 8002a3c:	68d3      	ldr	r3, [r2, #12]
 8002a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a42:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a44:	6802      	ldr	r2, [r0, #0]
 8002a46:	6953      	ldr	r3, [r2, #20]
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002a54:	f7ff ffb5 	bl	80029c2 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002a58:	2000      	movs	r0, #0
 8002a5a:	e000      	b.n	8002a5e <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8002a5c:	2002      	movs	r0, #2
}
 8002a5e:	bd08      	pop	{r3, pc}

08002a60 <HAL_UART_ErrorCallback>:
}
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_UART_IRQHandler>:
{
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a68:	6802      	ldr	r2, [r0, #0]
 8002a6a:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a6c:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a6e:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002a70:	f013 000f 	ands.w	r0, r3, #15
 8002a74:	d105      	bne.n	8002a82 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a76:	f013 0f20 	tst.w	r3, #32
 8002a7a:	d002      	beq.n	8002a82 <HAL_UART_IRQHandler+0x1e>
 8002a7c:	f011 0f20 	tst.w	r1, #32
 8002a80:	d153      	bne.n	8002b2a <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d067      	beq.n	8002b56 <HAL_UART_IRQHandler+0xf2>
 8002a86:	f012 0201 	ands.w	r2, r2, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_UART_IRQHandler+0x2e>
 8002a8c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002a90:	d061      	beq.n	8002b56 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a92:	f013 0f01 	tst.w	r3, #1
 8002a96:	d006      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x42>
 8002a98:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002a9c:	d003      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002aa0:	f040 0001 	orr.w	r0, r0, #1
 8002aa4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aa6:	f013 0f04 	tst.w	r3, #4
 8002aaa:	d004      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x52>
 8002aac:	b11a      	cbz	r2, 8002ab6 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ab0:	f040 0002 	orr.w	r0, r0, #2
 8002ab4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ab6:	f013 0f02 	tst.w	r3, #2
 8002aba:	d004      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x62>
 8002abc:	b11a      	cbz	r2, 8002ac6 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002abe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ac0:	f040 0004 	orr.w	r0, r0, #4
 8002ac4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac6:	f013 0f08 	tst.w	r3, #8
 8002aca:	d004      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x72>
 8002acc:	b11a      	cbz	r2, 8002ad6 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ace:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ad0:	f042 0208 	orr.w	r2, r2, #8
 8002ad4:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d048      	beq.n	8002b6e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002adc:	f013 0f20 	tst.w	r3, #32
 8002ae0:	d002      	beq.n	8002ae8 <HAL_UART_IRQHandler+0x84>
 8002ae2:	f011 0f20 	tst.w	r1, #32
 8002ae6:	d124      	bne.n	8002b32 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002af0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002af2:	f012 0f08 	tst.w	r2, #8
 8002af6:	d100      	bne.n	8002afa <HAL_UART_IRQHandler+0x96>
 8002af8:	b33b      	cbz	r3, 8002b4a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff fe7b 	bl	80027f6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b08:	d01b      	beq.n	8002b42 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b10:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b14:	b18b      	cbz	r3, 8002b3a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b16:	4a1a      	ldr	r2, [pc, #104]	; (8002b80 <HAL_UART_IRQHandler+0x11c>)
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002b1c:	f7fe fda8 	bl	8001670 <HAL_DMA_Abort_IT>
 8002b20:	b328      	cbz	r0, 8002b6e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b22:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002b24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b26:	4798      	blx	r3
 8002b28:	e021      	b.n	8002b6e <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7ff ff4a 	bl	80029c4 <UART_Receive_IT>
      return;
 8002b30:	e01d      	b.n	8002b6e <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff ff46 	bl	80029c4 <UART_Receive_IT>
 8002b38:	e7d6      	b.n	8002ae8 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff ff90 	bl	8002a60 <HAL_UART_ErrorCallback>
 8002b40:	e015      	b.n	8002b6e <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8002b42:	4620      	mov	r0, r4
 8002b44:	f7ff ff8c 	bl	8002a60 <HAL_UART_ErrorCallback>
 8002b48:	e011      	b.n	8002b6e <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f7ff ff88 	bl	8002a60 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b54:	e00b      	b.n	8002b6e <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_IRQHandler+0xfe>
 8002b5c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b60:	d106      	bne.n	8002b70 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b66:	d002      	beq.n	8002b6e <HAL_UART_IRQHandler+0x10a>
 8002b68:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002b6c:	d104      	bne.n	8002b78 <HAL_UART_IRQHandler+0x114>
}
 8002b6e:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff fe4e 	bl	8002812 <UART_Transmit_IT>
    return;
 8002b76:	e7fa      	b.n	8002b6e <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff ff15 	bl	80029a8 <UART_EndTransmit_IT>
    return;
 8002b7e:	e7f6      	b.n	8002b6e <HAL_UART_IRQHandler+0x10a>
 8002b80:	08002b85 	.word	0x08002b85

08002b84 <UART_DMAAbortOnError>:
{
 8002b84:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b86:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b8c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002b8e:	f7ff ff67 	bl	8002a60 <HAL_UART_ErrorCallback>
}
 8002b92:	bd08      	pop	{r3, pc}

08002b94 <simple_delay_ms>:



void simple_delay_ms(const uint16_t ms)
{
  uint32_t i = ms * 7200;
 8002b94:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002b98:	fb03 f000 	mul.w	r0, r3, r0
  while (i-- > 0) {
 8002b9c:	e001      	b.n	8002ba2 <simple_delay_ms+0xe>
    asm("nop");
 8002b9e:	bf00      	nop
  while (i-- > 0) {
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	1e43      	subs	r3, r0, #1
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d1fa      	bne.n	8002b9e <simple_delay_ms+0xa>
  }
}
 8002ba8:	4770      	bx	lr

08002baa <simple_delay_us>:

void simple_delay_us(const uint16_t us)
{
  uint16_t i = us * 7;
 8002baa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002bae:	b280      	uxth	r0, r0
  while (i-- > 0) {
 8002bb0:	e001      	b.n	8002bb6 <simple_delay_us+0xc>
    asm("nop");
 8002bb2:	bf00      	nop
  while (i-- > 0) {
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	1e43      	subs	r3, r0, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <simple_delay_us+0x8>
  }
}
 8002bbe:	4770      	bx	lr

08002bc0 <crc8>:
 *      Author: kowma
 */
#include "main.h"
#include "ds18b20.h"

unsigned char crc8(void const *mem, size_t len) {
 8002bc0:	b430      	push	{r4, r5}
	uint8_t crc = 0;
 8002bc2:	2200      	movs	r2, #0
	unsigned char const *data = mem;

		while (len--) {
 8002bc4:	e010      	b.n	8002be8 <crc8+0x28>
			uint8_t inbyte = *data++;
			for (uint8_t i = 8; i; i--) {
				uint8_t mix = (crc ^ inbyte) & 0x01;
				crc >>= 1;
				if (mix) crc ^= 0x8C;
				inbyte >>= 1;
 8002bc6:	0840      	lsrs	r0, r0, #1
			for (uint8_t i = 8; i; i--) {
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	b153      	cbz	r3, 8002be4 <crc8+0x24>
				uint8_t mix = (crc ^ inbyte) & 0x01;
 8002bce:	ea82 0100 	eor.w	r1, r2, r0
				if (mix) crc ^= 0x8C;
 8002bd2:	f011 0f01 	tst.w	r1, #1
 8002bd6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8002bda:	d0f4      	beq.n	8002bc6 <crc8+0x6>
 8002bdc:	f082 028c 	eor.w	r2, r2, #140	; 0x8c
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	e7f0      	b.n	8002bc6 <crc8+0x6>
			uint8_t inbyte = *data++;
 8002be4:	4628      	mov	r0, r5
		while (len--) {
 8002be6:	4621      	mov	r1, r4
 8002be8:	1e4c      	subs	r4, r1, #1
 8002bea:	b119      	cbz	r1, 8002bf4 <crc8+0x34>
			uint8_t inbyte = *data++;
 8002bec:	1c45      	adds	r5, r0, #1
 8002bee:	7800      	ldrb	r0, [r0, #0]
			for (uint8_t i = 8; i; i--) {
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	e7eb      	b.n	8002bcc <crc8+0xc>
			}
		}
		return crc;
}
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	bc30      	pop	{r4, r5}
 8002bf8:	4770      	bx	lr
	...

08002bfc <oneWire_direction_set>:
}scratchpad[MAX_DS18B20_SENSORS_AMOUNT];



void oneWire_direction_set(uint8_t direction)
{
 8002bfc:	b500      	push	{lr}
 8002bfe:	b085      	sub	sp, #20
	GPIO_InitTypeDef	GPIO_InitStruct;
	if(direction == ONE_WIRE_BUS_INPUT)
 8002c00:	2801      	cmp	r0, #1
 8002c02:	d004      	beq.n	8002c0e <oneWire_direction_set+0x12>
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin ;// Pin for 1-Wire bus
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
	}
	else if(direction ==  ONE_WIRE_BUS_OUTPUT)
 8002c04:	2802      	cmp	r0, #2
 8002c06:	d00f      	beq.n	8002c28 <oneWire_direction_set+0x2c>
	else
	{
		// error
	}

}
 8002c08:	b005      	add	sp, #20
 8002c0a:	f85d fb04 	ldr.w	pc, [sp], #4
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002c12:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002c14:	2301      	movs	r3, #1
 8002c16:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin ;// Pin for 1-Wire bus
 8002c18:	a904      	add	r1, sp, #16
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8002c20:	4808      	ldr	r0, [pc, #32]	; (8002c44 <oneWire_direction_set+0x48>)
 8002c22:	f7fe fd71 	bl	8001708 <HAL_GPIO_Init>
 8002c26:	e7ef      	b.n	8002c08 <oneWire_direction_set+0xc>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8002c28:	2311      	movs	r3, #17
 8002c2a:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002c30:	2301      	movs	r3, #1
 8002c32:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin; // Pin for 1-Wire bus
 8002c34:	a904      	add	r1, sp, #16
 8002c36:	2308      	movs	r3, #8
 8002c38:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8002c3c:	4801      	ldr	r0, [pc, #4]	; (8002c44 <oneWire_direction_set+0x48>)
 8002c3e:	f7fe fd63 	bl	8001708 <HAL_GPIO_Init>
}
 8002c42:	e7e1      	b.n	8002c08 <oneWire_direction_set+0xc>
 8002c44:	40010800 	.word	0x40010800

08002c48 <oneWire_init>:

uint8_t oneWire_init(void)
{
 8002c48:	b510      	push	{r4, lr}
	uint8_t i;
	//TIM2->CR1 |= (1<<3); //OPM
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f7ff ffd6 	bl	8002bfc <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8002c50:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <oneWire_init+0x40>)
 8002c52:	68e3      	ldr	r3, [r4, #12]
 8002c54:	f023 0308 	bic.w	r3, r3, #8
 8002c58:	60e3      	str	r3, [r4, #12]
	simple_delay_us(500);
 8002c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c5e:	f7ff ffa4 	bl	8002baa <simple_delay_us>

	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7ff ffca 	bl	8002bfc <oneWire_direction_set>
	simple_delay_us(70);
 8002c68:	2046      	movs	r0, #70	; 0x46
 8002c6a:	f7ff ff9e 	bl	8002baa <simple_delay_us>

	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin) // if 0 - then there is devices on bus
 8002c6e:	68a3      	ldr	r3, [r4, #8]
 8002c70:	f013 0f08 	tst.w	r3, #8
 8002c74:	d106      	bne.n	8002c84 <oneWire_init+0x3c>
	{
		i = ONE_WIRE_PRESENCE_FAIL;
	}
	else i = ONE_WIRE_PRESENCE_SUCCESS;
 8002c76:	2401      	movs	r4, #1
	simple_delay_us(410);
 8002c78:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002c7c:	f7ff ff95 	bl	8002baa <simple_delay_us>
	return i;
}
 8002c80:	4620      	mov	r0, r4
 8002c82:	bd10      	pop	{r4, pc}
		i = ONE_WIRE_PRESENCE_FAIL;
 8002c84:	2400      	movs	r4, #0
 8002c86:	e7f7      	b.n	8002c78 <oneWire_init+0x30>
 8002c88:	40010800 	.word	0x40010800

08002c8c <oneWire_writeBit>:

void oneWire_writeBit(uint8_t value)
{
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	4604      	mov	r4, r0
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin; // todo check
 8002c90:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <oneWire_writeBit+0x40>)
 8002c92:	68d3      	ldr	r3, [r2, #12]
 8002c94:	f023 0308 	bic.w	r3, r3, #8
 8002c98:	60d3      	str	r3, [r2, #12]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f7ff ffae 	bl	8002bfc <oneWire_direction_set>
	if(value)
 8002ca0:	b94c      	cbnz	r4, 8002cb6 <oneWire_writeBit+0x2a>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
		simple_delay_us(64);
	}
	else
	{
		simple_delay_us(60);
 8002ca2:	203c      	movs	r0, #60	; 0x3c
 8002ca4:	f7ff ff81 	bl	8002baa <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7ff ffa7 	bl	8002bfc <oneWire_direction_set>
		simple_delay_us(10);
 8002cae:	200a      	movs	r0, #10
 8002cb0:	f7ff ff7b 	bl	8002baa <simple_delay_us>
	}
}
 8002cb4:	bd10      	pop	{r4, pc}
		simple_delay_us(6);
 8002cb6:	2006      	movs	r0, #6
 8002cb8:	f7ff ff77 	bl	8002baa <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7ff ff9d 	bl	8002bfc <oneWire_direction_set>
		simple_delay_us(64);
 8002cc2:	2040      	movs	r0, #64	; 0x40
 8002cc4:	f7ff ff71 	bl	8002baa <simple_delay_us>
 8002cc8:	e7f4      	b.n	8002cb4 <oneWire_writeBit+0x28>
 8002cca:	bf00      	nop
 8002ccc:	40010800 	.word	0x40010800

08002cd0 <oneWire_writeByte>:
void oneWire_writeByte(uint8_t byte)
{
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4605      	mov	r5, r0
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f7ff ff91 	bl	8002bfc <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <oneWire_writeByte+0x2c>)
 8002cdc:	68d3      	ldr	r3, [r2, #12]
 8002cde:	f023 0308 	bic.w	r3, r3, #8
 8002ce2:	60d3      	str	r3, [r2, #12]
	for(uint8_t i=0; i<8; i++){
 8002ce4:	2400      	movs	r4, #0
 8002ce6:	e006      	b.n	8002cf6 <oneWire_writeByte+0x26>
		oneWire_writeBit(byte & 1<<i);
 8002ce8:	2001      	movs	r0, #1
 8002cea:	40a0      	lsls	r0, r4
 8002cec:	4028      	ands	r0, r5
 8002cee:	f7ff ffcd 	bl	8002c8c <oneWire_writeBit>
	for(uint8_t i=0; i<8; i++){
 8002cf2:	3401      	adds	r4, #1
 8002cf4:	b2e4      	uxtb	r4, r4
 8002cf6:	2c07      	cmp	r4, #7
 8002cf8:	d9f6      	bls.n	8002ce8 <oneWire_writeByte+0x18>
	}
}
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
 8002cfc:	40010800 	.word	0x40010800

08002d00 <oneWire_readbit>:

uint8_t oneWire_readbit(void)
{
 8002d00:	b510      	push	{r4, lr}
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8002d02:	2002      	movs	r0, #2
 8002d04:	f7ff ff7a 	bl	8002bfc <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8002d08:	4c0d      	ldr	r4, [pc, #52]	; (8002d40 <oneWire_readbit+0x40>)
 8002d0a:	68e3      	ldr	r3, [r4, #12]
 8002d0c:	f023 0308 	bic.w	r3, r3, #8
 8002d10:	60e3      	str	r3, [r4, #12]
	simple_delay_us(2);
 8002d12:	2002      	movs	r0, #2
 8002d14:	f7ff ff49 	bl	8002baa <simple_delay_us>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7ff ff6f 	bl	8002bfc <oneWire_direction_set>
	simple_delay_us(10);
 8002d1e:	200a      	movs	r0, #10
 8002d20:	f7ff ff43 	bl	8002baa <simple_delay_us>
	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin)
 8002d24:	68a3      	ldr	r3, [r4, #8]
 8002d26:	f013 0f08 	tst.w	r3, #8
 8002d2a:	d104      	bne.n	8002d36 <oneWire_readbit+0x36>
	{
		simple_delay_us(60);
		return 1;
	}
	else{
		simple_delay_us(60);
 8002d2c:	203c      	movs	r0, #60	; 0x3c
 8002d2e:	f7ff ff3c 	bl	8002baa <simple_delay_us>
		return 0;
 8002d32:	2000      	movs	r0, #0
	}
}
 8002d34:	bd10      	pop	{r4, pc}
		simple_delay_us(60);
 8002d36:	203c      	movs	r0, #60	; 0x3c
 8002d38:	f7ff ff37 	bl	8002baa <simple_delay_us>
		return 1;
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	e7f9      	b.n	8002d34 <oneWire_readbit+0x34>
 8002d40:	40010800 	.word	0x40010800

08002d44 <write_data_to_struct>:
	return devices_counter;
}

void write_data_to_struct(uint8_t bit_cnt, uint8_t bit_data, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 8002d44:	2807      	cmp	r0, #7
 8002d46:	d80e      	bhi.n	8002d66 <write_data_to_struct+0x22>
	{
		 if(bit_data) rom_address[deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 8002d48:	2900      	cmp	r1, #0
 8002d4a:	d040      	beq.n	8002dce <write_data_to_struct+0x8a>
{
 8002d4c:	b410      	push	{r4}
		 if(bit_data) rom_address[deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 8002d4e:	4c20      	ldr	r4, [pc, #128]	; (8002dd0 <write_data_to_struct+0x8c>)
 8002d50:	f814 3032 	ldrb.w	r3, [r4, r2, lsl #3]
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f000 	lsl.w	r0, r1, r0
 8002d5a:	4318      	orrs	r0, r3
 8002d5c:	b2c0      	uxtb	r0, r0
 8002d5e:	f804 0032 	strb.w	r0, [r4, r2, lsl #3]
	}
	else if( bit_cnt >= 56) // CRC
	{
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
	}
}
 8002d62:	bc10      	pop	{r4}
 8002d64:	4770      	bx	lr
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8002d66:	f1a0 0308 	sub.w	r3, r0, #8
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b1f      	cmp	r3, #31
 8002d6e:	d80d      	bhi.n	8002d8c <write_data_to_struct+0x48>
		if(bit_data) rom_address[deviceNo].ROM_NO_FIRST_HALF |= (1 << (bit_cnt - 8));
 8002d70:	b369      	cbz	r1, 8002dce <write_data_to_struct+0x8a>
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <write_data_to_struct+0x8c>)
 8002d74:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002d78:	f8d2 3001 	ldr.w	r3, [r2, #1]
 8002d7c:	f1a0 0108 	sub.w	r1, r0, #8
 8002d80:	2001      	movs	r0, #1
 8002d82:	4088      	lsls	r0, r1
 8002d84:	4318      	orrs	r0, r3
 8002d86:	f8c2 0001 	str.w	r0, [r2, #1]
 8002d8a:	4770      	bx	lr
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) )  // Serial no first half
 8002d8c:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	d80c      	bhi.n	8002db0 <write_data_to_struct+0x6c>
		if(bit_data) rom_address[deviceNo].ROM_NO_SECOUND_HALF |= (1 << (bit_cnt - 40 ));
 8002d96:	b1d1      	cbz	r1, 8002dce <write_data_to_struct+0x8a>
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <write_data_to_struct+0x8c>)
 8002d9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002d9e:	f8b2 1005 	ldrh.w	r1, [r2, #5]
 8002da2:	3828      	subs	r0, #40	; 0x28
 8002da4:	2301      	movs	r3, #1
 8002da6:	4083      	lsls	r3, r0
 8002da8:	430b      	orrs	r3, r1
 8002daa:	f8a2 3005 	strh.w	r3, [r2, #5]
 8002dae:	4770      	bx	lr
	else if( bit_cnt >= 56) // CRC
 8002db0:	2837      	cmp	r0, #55	; 0x37
 8002db2:	d90c      	bls.n	8002dce <write_data_to_struct+0x8a>
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
 8002db4:	b159      	cbz	r1, 8002dce <write_data_to_struct+0x8a>
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <write_data_to_struct+0x8c>)
 8002db8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002dbc:	79d3      	ldrb	r3, [r2, #7]
 8002dbe:	3838      	subs	r0, #56	; 0x38
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f000 	lsl.w	r0, r1, r0
 8002dc6:	4303      	orrs	r3, r0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	71d3      	strb	r3, [r2, #7]
}
 8002dcc:	4770      	bx	lr
 8002dce:	4770      	bx	lr
 8002dd0:	200001bc 	.word	0x200001bc

08002dd4 <read_address_bit_form_struct>:
//	}
//}

uint8_t read_address_bit_form_struct(uint8_t bit_cnt, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 8002dd4:	2807      	cmp	r0, #7
 8002dd6:	d918      	bls.n	8002e0a <read_address_bit_form_struct+0x36>
	{
		 return ((rom_address[deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8002dd8:	f1a0 0308 	sub.w	r3, r0, #8
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b1f      	cmp	r3, #31
 8002de0:	d91e      	bls.n	8002e20 <read_address_bit_form_struct+0x4c>
	{
		return ((rom_address[deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) ) // Serial no first half
 8002de2:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d927      	bls.n	8002e3c <read_address_bit_form_struct+0x68>
	{
		return ((rom_address[deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
	}
	else if( bit_cnt >= 56) // CRC
 8002dec:	2837      	cmp	r0, #55	; 0x37
 8002dee:	d933      	bls.n	8002e58 <read_address_bit_form_struct+0x84>
	{
		return ((rom_address[deviceNo].ROM_CRC & (1 << (bit_cnt - 56) )) > 0) ;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <read_address_bit_form_struct+0x88>)
 8002df2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002df6:	79ca      	ldrb	r2, [r1, #7]
 8002df8:	3838      	subs	r0, #56	; 0x38
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	fa03 f000 	lsl.w	r0, r3, r0
 8002e00:	4202      	tst	r2, r0
 8002e02:	bf14      	ite	ne
 8002e04:	4618      	movne	r0, r3
 8002e06:	2000      	moveq	r0, #0
 8002e08:	4770      	bx	lr
		 return ((rom_address[deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <read_address_bit_form_struct+0x88>)
 8002e0c:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
 8002e10:	2301      	movs	r3, #1
 8002e12:	fa03 f000 	lsl.w	r0, r3, r0
 8002e16:	4202      	tst	r2, r0
 8002e18:	bf14      	ite	ne
 8002e1a:	4618      	movne	r0, r3
 8002e1c:	2000      	moveq	r0, #0
 8002e1e:	4770      	bx	lr
		return ((rom_address[deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <read_address_bit_form_struct+0x88>)
 8002e22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002e26:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8002e2a:	3808      	subs	r0, #8
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8002e32:	4202      	tst	r2, r0
 8002e34:	bf14      	ite	ne
 8002e36:	4618      	movne	r0, r3
 8002e38:	2000      	moveq	r0, #0
 8002e3a:	4770      	bx	lr
		return ((rom_address[deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <read_address_bit_form_struct+0x88>)
 8002e3e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002e42:	f8b1 2005 	ldrh.w	r2, [r1, #5]
 8002e46:	3828      	subs	r0, #40	; 0x28
 8002e48:	2301      	movs	r3, #1
 8002e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e4e:	4202      	tst	r2, r0
 8002e50:	bf14      	ite	ne
 8002e52:	4618      	movne	r0, r3
 8002e54:	2000      	moveq	r0, #0
 8002e56:	4770      	bx	lr
	}
	else // not used // TODO add asset
	{
		return 0;
 8002e58:	2000      	movs	r0, #0
	}

}
 8002e5a:	4770      	bx	lr
 8002e5c:	200001bc 	.word	0x200001bc

08002e60 <ds18b20_check_crc>:
//	}
//}


uint8_t ds18b20_check_crc(uint8_t DS18B20_sensor_no)
{
 8002e60:	b510      	push	{r4, lr}
	uint8_t sensor_crc;
	sensor_crc = crc8(&rom_address[DS18B20_sensor_no], 7);
 8002e62:	4c07      	ldr	r4, [pc, #28]	; (8002e80 <ds18b20_check_crc+0x20>)
 8002e64:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8002e68:	2107      	movs	r1, #7
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7ff fea8 	bl	8002bc0 <crc8>
	if(sensor_crc == rom_address[DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8002e70:	79e3      	ldrb	r3, [r4, #7]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	4283      	cmp	r3, r0
 8002e76:	d001      	beq.n	8002e7c <ds18b20_check_crc+0x1c>
	else return DS18B20_CRC_ACK_FAIL;
 8002e78:	2000      	movs	r0, #0

}
 8002e7a:	bd10      	pop	{r4, pc}
	if(sensor_crc == rom_address[DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	e7fc      	b.n	8002e7a <ds18b20_check_crc+0x1a>
 8002e80:	200001bc 	.word	0x200001bc

08002e84 <ds18b20_search_rom>:
/***
 * searching algorithm based on :
 * https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/187.html
 */
uint8_t ds18b20_search_rom(void)
{
 8002e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
	uint8_t lastDiscrepancy = 0, searchDirection = 0, lastZero = 0; // może byc 0 bo na pierwszych 8 pozycjach zapisana jest rodzina urządzeń
 8002e88:	f04f 0900 	mov.w	r9, #0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
 8002e8c:	464f      	mov	r7, r9
	do{
		if(oneWire_init() == ONE_WIRE_PRESENCE_FAIL) return ROM_SARCHING_ERROR;
 8002e8e:	f7ff fedb 	bl	8002c48 <oneWire_init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d05a      	beq.n	8002f4e <ds18b20_search_rom+0xca>

		// there is at least one sensor - someone send presensce ack
		oneWire_writeByte(0xF0);
 8002e98:	20f0      	movs	r0, #240	; 0xf0
 8002e9a:	f7ff ff19 	bl	8002cd0 <oneWire_writeByte>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 8002e9e:	f04f 0800 	mov.w	r8, #0
 8002ea2:	4644      	mov	r4, r8
 8002ea4:	e016      	b.n	8002ed4 <ds18b20_search_rom+0x50>
			}
			else{
				return ROM_SARCHING_ERROR;
			}
		}
		lastDiscrepancy = lastZero;
 8002ea6:	46c1      	mov	r9, r8
 8002ea8:	e7f1      	b.n	8002e8e <ds18b20_search_rom+0xa>
					searchDirection = read_address_bit_form_struct(bit_counter, devices_counter-1);
 8002eaa:	1e79      	subs	r1, r7, #1
 8002eac:	b2c9      	uxtb	r1, r1
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f7ff ff90 	bl	8002dd4 <read_address_bit_form_struct>
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	e01d      	b.n	8002ef4 <ds18b20_search_rom+0x70>
					searchDirection = 1;
 8002eb8:	2601      	movs	r6, #1
 8002eba:	e01b      	b.n	8002ef4 <ds18b20_search_rom+0x70>
			else if( true_bit != complement_bit)
 8002ebc:	42b5      	cmp	r5, r6
 8002ebe:	d045      	beq.n	8002f4c <ds18b20_search_rom+0xc8>
				write_data_to_struct(bit_counter, true_bit, devices_counter);
 8002ec0:	463a      	mov	r2, r7
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f7ff ff3d 	bl	8002d44 <write_data_to_struct>
				oneWire_writeBit(true_bit);
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f7ff fede 	bl	8002c8c <oneWire_writeBit>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 8002ed0:	3401      	adds	r4, #1
 8002ed2:	b2e4      	uxtb	r4, r4
 8002ed4:	2c3f      	cmp	r4, #63	; 0x3f
 8002ed6:	d81c      	bhi.n	8002f12 <ds18b20_search_rom+0x8e>
			true_bit = oneWire_readbit();
 8002ed8:	f7ff ff12 	bl	8002d00 <oneWire_readbit>
 8002edc:	4605      	mov	r5, r0
			complement_bit = oneWire_readbit();
 8002ede:	f7ff ff0f 	bl	8002d00 <oneWire_readbit>
 8002ee2:	4606      	mov	r6, r0
			if( ( true_bit ==  0 ) && (complement_bit == 0) ) {
 8002ee4:	2d00      	cmp	r5, #0
 8002ee6:	d1e9      	bne.n	8002ebc <ds18b20_search_rom+0x38>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d1e7      	bne.n	8002ebc <ds18b20_search_rom+0x38>
				if((bit_counter + 1) ==  lastDiscrepancy)
 8002eec:	1c63      	adds	r3, r4, #1
 8002eee:	454b      	cmp	r3, r9
 8002ef0:	d0e2      	beq.n	8002eb8 <ds18b20_search_rom+0x34>
				else if((bit_counter + 1) > lastDiscrepancy )
 8002ef2:	ddda      	ble.n	8002eaa <ds18b20_search_rom+0x26>
				oneWire_writeBit(searchDirection);
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f7ff fec9 	bl	8002c8c <oneWire_writeBit>
				write_data_to_struct(bit_counter, searchDirection, devices_counter);
 8002efa:	463a      	mov	r2, r7
 8002efc:	4631      	mov	r1, r6
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7ff ff20 	bl	8002d44 <write_data_to_struct>
				searchDirection ? (lastZero = lastZero) : (lastZero = bit_counter+1);
 8002f04:	2e00      	cmp	r6, #0
 8002f06:	d1e3      	bne.n	8002ed0 <ds18b20_search_rom+0x4c>
 8002f08:	f104 0801 	add.w	r8, r4, #1
 8002f0c:	fa5f f888 	uxtb.w	r8, r8
 8002f10:	e7de      	b.n	8002ed0 <ds18b20_search_rom+0x4c>
		lastZero = 0;
		if(lastDiscrepancy != 0)
 8002f12:	f1b8 0f00 	cmp.w	r8, #0
 8002f16:	d001      	beq.n	8002f1c <ds18b20_search_rom+0x98>
		{
			devices_counter++  ;
 8002f18:	3701      	adds	r7, #1
 8002f1a:	b2ff      	uxtb	r7, r7
		}

	}while(lastDiscrepancy != 0);
 8002f1c:	f1b8 0f00 	cmp.w	r8, #0
 8002f20:	d1c1      	bne.n	8002ea6 <ds18b20_search_rom+0x22>

	ds18b20_sensors_amount = devices_counter + 1; //counter from 0 to device amount - 1
 8002f22:	1c7b      	adds	r3, r7, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <ds18b20_search_rom+0xd0>)
 8002f28:	7013      	strb	r3, [r2, #0]


	// check CRC codes ..

	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <ds18b20_search_rom+0xd0>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4543      	cmp	r3, r8
 8002f32:	d909      	bls.n	8002f48 <ds18b20_search_rom+0xc4>
	{
		if(ds18b20_check_crc(founded_sensor_no) == DS18B20_CRC_ACK_FAIL)
 8002f34:	4640      	mov	r0, r8
 8002f36:	f7ff ff93 	bl	8002e60 <ds18b20_check_crc>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b138      	cbz	r0, 8002f4e <ds18b20_search_rom+0xca>
	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8002f3e:	f108 0801 	add.w	r8, r8, #1
 8002f42:	fa5f f888 	uxtb.w	r8, r8
 8002f46:	e7f0      	b.n	8002f2a <ds18b20_search_rom+0xa6>
		{
			return DS18B20_CRC_ACK_FAIL;
		}
	}
	return ROM_SARCHING_OK;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <ds18b20_search_rom+0xca>
				return ROM_SARCHING_ERROR;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f54:	200000a4 	.word	0x200000a4

08002f58 <ds18b20_initalize>:
	}
	*(temperature_str_hex++) = '\0';
}

void ds18b20_initalize(void)
{
 8002f58:	b508      	push	{r3, lr}
	ds18b20_search_rom();
 8002f5a:	f7ff ff93 	bl	8002e84 <ds18b20_search_rom>
	ui_change_ds18B20_status(ds18b20_sensors_amount);
 8002f5e:	4b02      	ldr	r3, [pc, #8]	; (8002f68 <ds18b20_initalize+0x10>)
 8002f60:	7818      	ldrb	r0, [r3, #0]
 8002f62:	f000 fd6d 	bl	8003a40 <ui_change_ds18B20_status>
}
 8002f66:	bd08      	pop	{r3, pc}
 8002f68:	200000a4 	.word	0x200000a4

08002f6c <LCD_Data_Bus_Input>:
//
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void LCD_Data_Bus_Input(void){
	GPIOB->CRL = 0x88888888;
 8002f6c:	4b02      	ldr	r3, [pc, #8]	; (8002f78 <LCD_Data_Bus_Input+0xc>)
 8002f6e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002f72:	601a      	str	r2, [r3, #0]
}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010c00 	.word	0x40010c00

08002f7c <LCD_Data_Bus_Output>:
void LCD_Data_Bus_Output(void){
	GPIOB->CRL = 0x77777777;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <LCD_Data_Bus_Output+0xc>)
 8002f7e:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
 8002f82:	601a      	str	r2, [r3, #0]
}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010c00 	.word	0x40010c00

08002f8c <_LCD_Write>:


void _LCD_Write(uint8_t data){
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4605      	mov	r5, r0
	LCD_Data_Bus_Output();
 8002f90:	f7ff fff4 	bl	8002f7c <LCD_Data_Bus_Output>

	LCD_RW_GPIO_Port->ODR &= ~LCD_RW_Pin;
 8002f94:	4c0b      	ldr	r4, [pc, #44]	; (8002fc4 <_LCD_Write+0x38>)
 8002f96:	68e3      	ldr	r3, [r4, #12]
 8002f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f9c:	60e3      	str	r3, [r4, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8002f9e:	68e3      	ldr	r3, [r4, #12]
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	60e3      	str	r3, [r4, #12]
	LCD_D0_GPIO_Port->ODR &= 0xff00;
 8002fa6:	68e3      	ldr	r3, [r4, #12]
 8002fa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002fac:	60e3      	str	r3, [r4, #12]
	LCD_D0_GPIO_Port->ODR |= data;
 8002fae:	68e3      	ldr	r3, [r4, #12]
 8002fb0:	431d      	orrs	r5, r3
 8002fb2:	60e5      	str	r5, [r4, #12]
	simple_delay_us(4);
 8002fb4:	2004      	movs	r0, #4
 8002fb6:	f7ff fdf8 	bl	8002baa <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8002fba:	68e3      	ldr	r3, [r4, #12]
 8002fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc0:	60e3      	str	r3, [r4, #12]
}
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	40010c00 	.word	0x40010c00

08002fc8 <_LCD_Read>:
//
// Funkcja odczytu bajtu z wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------

uint8_t _LCD_Read(void){
 8002fc8:	b538      	push	{r3, r4, r5, lr}
	uint8_t tmp = 0;

	LCD_Data_Bus_Input();
 8002fca:	f7ff ffcf 	bl	8002f6c <LCD_Data_Bus_Input>

	LCD_RW_GPIO_Port->ODR |= LCD_RW_Pin;
 8002fce:	4c0b      	ldr	r4, [pc, #44]	; (8002ffc <_LCD_Read+0x34>)
 8002fd0:	68e3      	ldr	r3, [r4, #12]
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd6:	60e3      	str	r3, [r4, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8002fd8:	68e3      	ldr	r3, [r4, #12]
 8002fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fde:	60e3      	str	r3, [r4, #12]
	simple_delay_us(10);
 8002fe0:	200a      	movs	r0, #10
 8002fe2:	f7ff fde2 	bl	8002baa <simple_delay_us>
	tmp = (uint8_t) (LCD_D0_GPIO_Port->IDR & 0x00ff);
 8002fe6:	68a5      	ldr	r5, [r4, #8]
 8002fe8:	b2ed      	uxtb	r5, r5
	simple_delay_us(2);
 8002fea:	2002      	movs	r0, #2
 8002fec:	f7ff fddd 	bl	8002baa <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8002ff0:	68e3      	ldr	r3, [r4, #12]
 8002ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff6:	60e3      	str	r3, [r4, #12]
	return tmp;
}
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}
 8002ffc:	40010c00 	.word	0x40010c00

08003000 <LCD_ReadStatus>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
uint8_t LCD_ReadStatus(void){
 8003000:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <LCD_ReadStatus+0x18>)
 8003004:	68d3      	ldr	r3, [r2, #12]
 8003006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800300a:	60d3      	str	r3, [r2, #12]
	simple_delay_us(2);
 800300c:	2002      	movs	r0, #2
 800300e:	f7ff fdcc 	bl	8002baa <simple_delay_us>
	return _LCD_Read();
 8003012:	f7ff ffd9 	bl	8002fc8 <_LCD_Read>
}
 8003016:	bd08      	pop	{r3, pc}
 8003018:	40010800 	.word	0x40010800

0800301c <LCD_WriteCommand>:
void LCD_WriteCommand(uint8_t command){
 800301c:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 800301e:	4a08      	ldr	r2, [pc, #32]	; (8003040 <LCD_WriteCommand+0x24>)
 8003020:	68d3      	ldr	r3, [r2, #12]
 8003022:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003026:	60d3      	str	r3, [r2, #12]
	_LCD_Write(command);
 8003028:	f7ff ffb0 	bl	8002f8c <_LCD_Write>
	simple_delay_us(2);
 800302c:	2002      	movs	r0, #2
 800302e:	f7ff fdbc 	bl	8002baa <simple_delay_us>
	while(LCD_ReadStatus() & 0x80);
 8003032:	f7ff ffe5 	bl	8003000 <LCD_ReadStatus>
 8003036:	f010 0f80 	tst.w	r0, #128	; 0x80
 800303a:	d1fa      	bne.n	8003032 <LCD_WriteCommand+0x16>
}
 800303c:	bd08      	pop	{r3, pc}
 800303e:	bf00      	nop
 8003040:	40010800 	.word	0x40010800

08003044 <LCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(uint8_t data){
 8003044:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8003046:	4a06      	ldr	r2, [pc, #24]	; (8003060 <LCD_WriteData+0x1c>)
 8003048:	68d3      	ldr	r3, [r2, #12]
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	60d3      	str	r3, [r2, #12]
	_LCD_Write(data);
 8003050:	f7ff ff9c 	bl	8002f8c <_LCD_Write>
	//simple_delay_ms(10);
	while(LCD_ReadStatus() & 0x80);
 8003054:	f7ff ffd4 	bl	8003000 <LCD_ReadStatus>
 8003058:	f010 0f80 	tst.w	r0, #128	; 0x80
 800305c:	d1fa      	bne.n	8003054 <LCD_WriteData+0x10>
}
 800305e:	bd08      	pop	{r3, pc}
 8003060:	40010800 	.word	0x40010800

08003064 <LCD_WriteText>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text){
 8003064:	b510      	push	{r4, lr}
 8003066:	4604      	mov	r4, r0
	while(*text)	LCD_WriteData(*text++);
 8003068:	e002      	b.n	8003070 <LCD_WriteText+0xc>
 800306a:	3401      	adds	r4, #1
 800306c:	f7ff ffea 	bl	8003044 <LCD_WriteData>
 8003070:	7820      	ldrb	r0, [r4, #0]
 8003072:	2800      	cmp	r0, #0
 8003074:	d1f9      	bne.n	800306a <LCD_WriteText+0x6>
}
 8003076:	bd10      	pop	{r4, pc}

08003078 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 8003078:	b510      	push	{r4, lr}


	LCD_Data_Bus_Output();
 800307a:	f7ff ff7f 	bl	8002f7c <LCD_Data_Bus_Output>
	simple_delay_ms(15);
 800307e:	200f      	movs	r0, #15
 8003080:	f7ff fd88 	bl	8002b94 <simple_delay_ms>
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <LCD_Initalize+0x9c>)
 8003086:	68d3      	ldr	r3, [r2, #12]
 8003088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800308c:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <LCD_Initalize+0xa0>)
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003096:	60da      	str	r2, [r3, #12]
	LCD_RW_GPIO_Port->ODR  &= ~LCD_RW_Pin;
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800309e:	60da      	str	r2, [r3, #12]

	for(uint8_t i = 0; i < 3; i++){
 80030a0:	2400      	movs	r4, #0
 80030a2:	e015      	b.n	80030d0 <LCD_Initalize+0x58>
		LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <LCD_Initalize+0xa0>)
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ac:	60da      	str	r2, [r3, #12]
		LCD_D0_GPIO_Port->ODR &= 0xff00;
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80030b4:	60da      	str	r2, [r3, #12]
		LCD_D0_GPIO_Port->ODR |=  0x003F;
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80030bc:	60da      	str	r2, [r3, #12]
		LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c4:	60da      	str	r2, [r3, #12]
		simple_delay_ms(5);
 80030c6:	2005      	movs	r0, #5
 80030c8:	f7ff fd64 	bl	8002b94 <simple_delay_ms>
	for(uint8_t i = 0; i < 3; i++){
 80030cc:	3401      	adds	r4, #1
 80030ce:	b2e4      	uxtb	r4, r4
 80030d0:	2c02      	cmp	r4, #2
 80030d2:	d9e7      	bls.n	80030a4 <LCD_Initalize+0x2c>
	  }

	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_8_BIT);
 80030d4:	2038      	movs	r0, #56	; 0x38
 80030d6:	f7ff ffa1 	bl	800301c <LCD_WriteCommand>
	simple_delay_ms(1);
 80030da:	2001      	movs	r0, #1
 80030dc:	f7ff fd5a 	bl	8002b94 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 80030e0:	2008      	movs	r0, #8
 80030e2:	f7ff ff9b 	bl	800301c <LCD_WriteCommand>
	simple_delay_ms(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7ff fd54 	bl	8002b94 <simple_delay_ms>
	LCD_WriteCommand(HD44780_CLEAR);
 80030ec:	2001      	movs	r0, #1
 80030ee:	f7ff ff95 	bl	800301c <LCD_WriteCommand>
	simple_delay_ms(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7ff fd4e 	bl	8002b94 <simple_delay_ms>
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 80030f8:	2006      	movs	r0, #6
 80030fa:	f7ff ff8f 	bl	800301c <LCD_WriteCommand>
	simple_delay_ms(1);
 80030fe:	2001      	movs	r0, #1
 8003100:	f7ff fd48 	bl	8002b94 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 8003104:	200c      	movs	r0, #12
 8003106:	f7ff ff89 	bl	800301c <LCD_WriteCommand>

	LCD_WriteText("HC_2020");
 800310a:	4804      	ldr	r0, [pc, #16]	; (800311c <LCD_Initalize+0xa4>)
 800310c:	f7ff ffaa 	bl	8003064 <LCD_WriteText>
}
 8003110:	bd10      	pop	{r4, pc}
 8003112:	bf00      	nop
 8003114:	40010800 	.word	0x40010800
 8003118:	40010c00 	.word	0x40010c00
 800311c:	08004190 	.word	0x08004190

08003120 <ntc_TEMP_SENS_calc>:
{
	return ntc_analog_values.TEMP_SENS_temperature;
}

void ntc_TEMP_SENS_calc(void)
{
 8003120:	b508      	push	{r3, lr}
	ntc_analog_values.TEMP_SENS_temperature = (((V25 * 1000.0 - (double)adc_value[3] * 0.8) / AVGSLOPE) + 25.0);
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <ntc_TEMP_SENS_calc+0x58>)
 8003124:	88d8      	ldrh	r0, [r3, #6]
 8003126:	f7fd f955 	bl	80003d4 <__aeabi_ui2d>
 800312a:	a30d      	add	r3, pc, #52	; (adr r3, 8003160 <ntc_TEMP_SENS_calc+0x40>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f7fd f9ca 	bl	80004c8 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	a10b      	add	r1, pc, #44	; (adr r1, 8003168 <ntc_TEMP_SENS_calc+0x48>)
 800313a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800313e:	f7fd f80b 	bl	8000158 <__aeabi_dsub>
 8003142:	a30b      	add	r3, pc, #44	; (adr r3, 8003170 <ntc_TEMP_SENS_calc+0x50>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fae8 	bl	800071c <__aeabi_ddiv>
 800314c:	2200      	movs	r2, #0
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <ntc_TEMP_SENS_calc+0x5c>)
 8003150:	f7fd f804 	bl	800015c <__adddf3>
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <ntc_TEMP_SENS_calc+0x60>)
 8003156:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
}
 800315a:	bd08      	pop	{r3, pc}
 800315c:	f3af 8000 	nop.w
 8003160:	9999999a 	.word	0x9999999a
 8003164:	3fe99999 	.word	0x3fe99999
 8003168:	00000000 	.word	0x00000000
 800316c:	40965800 	.word	0x40965800
 8003170:	33333333 	.word	0x33333333
 8003174:	40113333 	.word	0x40113333
 8003178:	200000f8 	.word	0x200000f8
 800317c:	40390000 	.word	0x40390000
 8003180:	20000200 	.word	0x20000200
 8003184:	00000000 	.word	0x00000000

08003188 <ntc_analog_sensors_calc>:

void ntc_analog_sensors_calc(uint8_t no_sensor)
{
 8003188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const double V_DD = 3.32;
	const uint16_t R_divide = 33000;
	uint8_t iterator = 0;

	if(adc_value[no_sensor] == 0) return ;
 800318c:	4bc4      	ldr	r3, [pc, #784]	; (80034a0 <ntc_analog_sensors_calc+0x318>)
 800318e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 810e 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 8003198:	4605      	mov	r5, r0
	ntc_analog_values.NTC_voltage[no_sensor] = adc_value[no_sensor] * V_DD / 4095;
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f92a 	bl	80003f4 <__aeabi_i2d>
 80031a0:	a3b1      	add	r3, pc, #708	; (adr r3, 8003468 <ntc_analog_sensors_calc+0x2e0>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd f98f 	bl	80004c8 <__aeabi_dmul>
 80031aa:	a3b1      	add	r3, pc, #708	; (adr r3, 8003470 <ntc_analog_sensors_calc+0x2e8>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd fab4 	bl	800071c <__aeabi_ddiv>
 80031b4:	4cbb      	ldr	r4, [pc, #748]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 80031b6:	1ceb      	adds	r3, r5, #3
 80031b8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80031bc:	e9c3 0100 	strd	r0, r1, [r3]
	ntc_analog_values.NTC_resistance[no_sensor] = R_divide * V_DD / ntc_analog_values.NTC_voltage[no_sensor] - R_divide;
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	a1ac      	add	r1, pc, #688	; (adr r1, 8003478 <ntc_analog_sensors_calc+0x2f0>)
 80031c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ca:	f7fd faa7 	bl	800071c <__aeabi_ddiv>
 80031ce:	a3ac      	add	r3, pc, #688	; (adr r3, 8003480 <ntc_analog_sensors_calc+0x2f8>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f7fc ffc0 	bl	8000158 <__aeabi_dsub>
 80031d8:	4606      	mov	r6, r0
 80031da:	460f      	mov	r7, r1
 80031dc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80031e0:	e9c4 6700 	strd	r6, r7, [r4]

	if(ntc_analog_values.NTC_resistance[no_sensor] > 100 && ntc_analog_values.NTC_resistance[no_sensor] <= 1000)
 80031e4:	2200      	movs	r2, #0
 80031e6:	4bb0      	ldr	r3, [pc, #704]	; (80034a8 <ntc_analog_sensors_calc+0x320>)
 80031e8:	f7fd fbfe 	bl	80009e8 <__aeabi_dcmpgt>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d04b      	beq.n	8003288 <ntc_analog_sensors_calc+0x100>
 80031f0:	2200      	movs	r2, #0
 80031f2:	4bae      	ldr	r3, [pc, #696]	; (80034ac <ntc_analog_sensors_calc+0x324>)
 80031f4:	4630      	mov	r0, r6
 80031f6:	4639      	mov	r1, r7
 80031f8:	f7fd fbe2 	bl	80009c0 <__aeabi_dcmple>
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d043      	beq.n	8003288 <ntc_analog_sensors_calc+0x100>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8003200:	1dab      	adds	r3, r5, #6
 8003202:	4aa8      	ldr	r2, [pc, #672]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 8003204:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003208:	2000      	movs	r0, #0
 800320a:	2100      	movs	r1, #0
 800320c:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a1)/4;
 8003210:	f04f 0804 	mov.w	r8, #4
	uint8_t iterator = 0;
 8003214:	f04f 0900 	mov.w	r9, #0
 8003218:	e032      	b.n	8003280 <ntc_analog_sensors_calc+0xf8>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 800321a:	4ba2      	ldr	r3, [pc, #648]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 800321c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003220:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003224:	f7fd f8f8 	bl	8000418 <__aeabi_f2d>
 8003228:	4632      	mov	r2, r6
 800322a:	463b      	mov	r3, r7
 800322c:	f7fd f94c 	bl	80004c8 <__aeabi_dmul>
 8003230:	f7fd fbe4 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003234:	3401      	adds	r4, #1
 8003236:	b2e4      	uxtb	r4, r4
 8003238:	f108 33ff 	add.w	r3, r8, #4294967295
 800323c:	429c      	cmp	r4, r3
 800323e:	dbec      	blt.n	800321a <ntc_analog_sensors_calc+0x92>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a1[iterator++]*power;
 8003240:	f109 0601 	add.w	r6, r9, #1
 8003244:	b2f6      	uxtb	r6, r6
 8003246:	4601      	mov	r1, r0
 8003248:	4b99      	ldr	r3, [pc, #612]	; (80034b0 <ntc_analog_sensors_calc+0x328>)
 800324a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800324e:	f7fd fc25 	bl	8000a9c <__aeabi_fmul>
 8003252:	f7fd f8e1 	bl	8000418 <__aeabi_f2d>
 8003256:	1dac      	adds	r4, r5, #6
 8003258:	4b92      	ldr	r3, [pc, #584]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 800325a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003266:	f7fc ff79 	bl	800015c <__adddf3>
 800326a:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 800326e:	f108 33ff 	add.w	r3, r8, #4294967295
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f1b8 0f00 	cmp.w	r8, #0
 8003278:	f000 809c 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 800327c:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a1[iterator++]*power;
 800327e:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003280:	2400      	movs	r4, #0
			float power = 1;
 8003282:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003286:	e7d7      	b.n	8003238 <ntc_analog_sensors_calc+0xb0>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 1000 && ntc_analog_values.NTC_resistance[no_sensor] <= 5000)
 8003288:	2200      	movs	r2, #0
 800328a:	4b88      	ldr	r3, [pc, #544]	; (80034ac <ntc_analog_sensors_calc+0x324>)
 800328c:	4630      	mov	r0, r6
 800328e:	4639      	mov	r1, r7
 8003290:	f7fd fbaa 	bl	80009e8 <__aeabi_dcmpgt>
 8003294:	2800      	cmp	r0, #0
 8003296:	d04b      	beq.n	8003330 <ntc_analog_sensors_calc+0x1a8>
 8003298:	a37b      	add	r3, pc, #492	; (adr r3, 8003488 <ntc_analog_sensors_calc+0x300>)
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	4630      	mov	r0, r6
 80032a0:	4639      	mov	r1, r7
 80032a2:	f7fd fb8d 	bl	80009c0 <__aeabi_dcmple>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d042      	beq.n	8003330 <ntc_analog_sensors_calc+0x1a8>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 80032aa:	1dab      	adds	r3, r5, #6
 80032ac:	4a7d      	ldr	r2, [pc, #500]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 80032ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80032b2:	2000      	movs	r0, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a2)/4;
 80032ba:	f04f 0804 	mov.w	r8, #4
	uint8_t iterator = 0;
 80032be:	f04f 0900 	mov.w	r9, #0
 80032c2:	e031      	b.n	8003328 <ntc_analog_sensors_calc+0x1a0>
		do {
			float power = 1;
			for(uint8_t i = 0; i < number_of_components - 1; i++)
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 80032c4:	4b77      	ldr	r3, [pc, #476]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 80032c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80032ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 80032ce:	f7fd f8a3 	bl	8000418 <__aeabi_f2d>
 80032d2:	4632      	mov	r2, r6
 80032d4:	463b      	mov	r3, r7
 80032d6:	f7fd f8f7 	bl	80004c8 <__aeabi_dmul>
 80032da:	f7fd fb8f 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80032de:	3401      	adds	r4, #1
 80032e0:	b2e4      	uxtb	r4, r4
 80032e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80032e6:	429c      	cmp	r4, r3
 80032e8:	dbec      	blt.n	80032c4 <ntc_analog_sensors_calc+0x13c>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a2[iterator++]*power;
 80032ea:	f109 0601 	add.w	r6, r9, #1
 80032ee:	b2f6      	uxtb	r6, r6
 80032f0:	4601      	mov	r1, r0
 80032f2:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <ntc_analog_sensors_calc+0x32c>)
 80032f4:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80032f8:	f7fd fbd0 	bl	8000a9c <__aeabi_fmul>
 80032fc:	f7fd f88c 	bl	8000418 <__aeabi_f2d>
 8003300:	1dac      	adds	r4, r5, #6
 8003302:	4b68      	ldr	r3, [pc, #416]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 8003304:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003310:	f7fc ff24 	bl	800015c <__adddf3>
 8003314:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 8003318:	f108 33ff 	add.w	r3, r8, #4294967295
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f1b8 0f00 	cmp.w	r8, #0
 8003322:	d047      	beq.n	80033b4 <ntc_analog_sensors_calc+0x22c>
 8003324:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a2[iterator++]*power;
 8003326:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003328:	2400      	movs	r4, #0
			float power = 1;
 800332a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800332e:	e7d8      	b.n	80032e2 <ntc_analog_sensors_calc+0x15a>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 5000 && ntc_analog_values.NTC_resistance[no_sensor] <= 10000)
 8003330:	a355      	add	r3, pc, #340	; (adr r3, 8003488 <ntc_analog_sensors_calc+0x300>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	4630      	mov	r0, r6
 8003338:	4639      	mov	r1, r7
 800333a:	f7fd fb55 	bl	80009e8 <__aeabi_dcmpgt>
 800333e:	2800      	cmp	r0, #0
 8003340:	d03a      	beq.n	80033b8 <ntc_analog_sensors_calc+0x230>
 8003342:	a353      	add	r3, pc, #332	; (adr r3, 8003490 <ntc_analog_sensors_calc+0x308>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	4630      	mov	r0, r6
 800334a:	4639      	mov	r1, r7
 800334c:	f7fd fb38 	bl	80009c0 <__aeabi_dcmple>
 8003350:	2800      	cmp	r0, #0
 8003352:	d031      	beq.n	80033b8 <ntc_analog_sensors_calc+0x230>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8003354:	1dab      	adds	r3, r5, #6
 8003356:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 8003358:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800335c:	2000      	movs	r0, #0
 800335e:	2100      	movs	r1, #0
 8003360:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a3)/4;
 8003364:	f04f 0804 	mov.w	r8, #4
	uint8_t iterator = 0;
 8003368:	2700      	movs	r7, #0
 800336a:	e000      	b.n	800336e <ntc_analog_sensors_calc+0x1e6>
			float power = 1;
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a3[iterator++]*power;
		} while(number_of_components--);
 800336c:	4698      	mov	r8, r3
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 800336e:	4c4d      	ldr	r4, [pc, #308]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 8003370:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8003374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003378:	f7fd fb40 	bl	80009fc <__aeabi_d2f>
			ntc_analog_values.NTC_temperature[no_sensor] += a3[iterator++]*power;
 800337c:	1c7e      	adds	r6, r7, #1
 800337e:	b2f6      	uxtb	r6, r6
 8003380:	4601      	mov	r1, r0
 8003382:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <ntc_analog_sensors_calc+0x330>)
 8003384:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003388:	f7fd fb88 	bl	8000a9c <__aeabi_fmul>
 800338c:	f7fd f844 	bl	8000418 <__aeabi_f2d>
 8003390:	1dab      	adds	r3, r5, #6
 8003392:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800339e:	f7fc fedd 	bl	800015c <__adddf3>
 80033a2:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 80033a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80033aa:	b2db      	uxtb	r3, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a3[iterator++]*power;
 80033ac:	4637      	mov	r7, r6
		} while(number_of_components--);
 80033ae:	f1b8 0f00 	cmp.w	r8, #0
 80033b2:	d1db      	bne.n	800336c <ntc_analog_sensors_calc+0x1e4>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a9[iterator++]*power;
		} while(number_of_components--);
	}
	//ntc_analog_values.NTC_temperature[no_sensor] = BETA * T_0 / (T_0 * log(ntc_analog_values.NTC_resistance[no_sensor]/10000) + BETA) - 273.15;
}
 80033b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 10000 && ntc_analog_values.NTC_resistance[no_sensor] <= 12000)
 80033b8:	a335      	add	r3, pc, #212	; (adr r3, 8003490 <ntc_analog_sensors_calc+0x308>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	4630      	mov	r0, r6
 80033c0:	4639      	mov	r1, r7
 80033c2:	f7fd fb11 	bl	80009e8 <__aeabi_dcmpgt>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d07a      	beq.n	80034c0 <ntc_analog_sensors_calc+0x338>
 80033ca:	a333      	add	r3, pc, #204	; (adr r3, 8003498 <ntc_analog_sensors_calc+0x310>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	4630      	mov	r0, r6
 80033d2:	4639      	mov	r1, r7
 80033d4:	f7fd faf4 	bl	80009c0 <__aeabi_dcmple>
 80033d8:	2800      	cmp	r0, #0
 80033da:	d071      	beq.n	80034c0 <ntc_analog_sensors_calc+0x338>
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 80033dc:	1dab      	adds	r3, r5, #6
 80033de:	4a31      	ldr	r2, [pc, #196]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 80033e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80033e4:	2000      	movs	r0, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a4)/4;
 80033ec:	f04f 0804 	mov.w	r8, #4
	uint8_t iterator = 0;
 80033f0:	f04f 0900 	mov.w	r9, #0
 80033f4:	e031      	b.n	800345a <ntc_analog_sensors_calc+0x2d2>
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 80033f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80033fc:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003400:	f7fd f80a 	bl	8000418 <__aeabi_f2d>
 8003404:	4632      	mov	r2, r6
 8003406:	463b      	mov	r3, r7
 8003408:	f7fd f85e 	bl	80004c8 <__aeabi_dmul>
 800340c:	f7fd faf6 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003410:	3401      	adds	r4, #1
 8003412:	b2e4      	uxtb	r4, r4
 8003414:	f108 33ff 	add.w	r3, r8, #4294967295
 8003418:	429c      	cmp	r4, r3
 800341a:	dbec      	blt.n	80033f6 <ntc_analog_sensors_calc+0x26e>
			ntc_analog_values.NTC_temperature[no_sensor] += a4[iterator++]*power;
 800341c:	f109 0601 	add.w	r6, r9, #1
 8003420:	b2f6      	uxtb	r6, r6
 8003422:	4601      	mov	r1, r0
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <ntc_analog_sensors_calc+0x334>)
 8003426:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800342a:	f7fd fb37 	bl	8000a9c <__aeabi_fmul>
 800342e:	f7fc fff3 	bl	8000418 <__aeabi_f2d>
 8003432:	1dac      	adds	r4, r5, #6
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <ntc_analog_sensors_calc+0x31c>)
 8003436:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003442:	f7fc fe8b 	bl	800015c <__adddf3>
 8003446:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 800344a:	f108 33ff 	add.w	r3, r8, #4294967295
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f1b8 0f00 	cmp.w	r8, #0
 8003454:	d0ae      	beq.n	80033b4 <ntc_analog_sensors_calc+0x22c>
 8003456:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a4[iterator++]*power;
 8003458:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800345a:	2400      	movs	r4, #0
			float power = 1;
 800345c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003460:	e7d8      	b.n	8003414 <ntc_analog_sensors_calc+0x28c>
 8003462:	bf00      	nop
 8003464:	f3af 8000 	nop.w
 8003468:	28f5c28f 	.word	0x28f5c28f
 800346c:	400a8f5c 	.word	0x400a8f5c
 8003470:	00000000 	.word	0x00000000
 8003474:	40affe00 	.word	0x40affe00
 8003478:	00000000 	.word	0x00000000
 800347c:	40fabf80 	.word	0x40fabf80
 8003480:	00000000 	.word	0x00000000
 8003484:	40e01d00 	.word	0x40e01d00
 8003488:	00000000 	.word	0x00000000
 800348c:	40b38800 	.word	0x40b38800
 8003490:	00000000 	.word	0x00000000
 8003494:	40c38800 	.word	0x40c38800
 8003498:	00000000 	.word	0x00000000
 800349c:	40c77000 	.word	0x40c77000
 80034a0:	200000f8 	.word	0x200000f8
 80034a4:	20000200 	.word	0x20000200
 80034a8:	40590000 	.word	0x40590000
 80034ac:	408f4000 	.word	0x408f4000
 80034b0:	20000008 	.word	0x20000008
 80034b4:	20000018 	.word	0x20000018
 80034b8:	20000028 	.word	0x20000028
 80034bc:	20000038 	.word	0x20000038
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 12000 && ntc_analog_values.NTC_resistance[no_sensor] <= 20000)
 80034c0:	a3bd      	add	r3, pc, #756	; (adr r3, 80037b8 <ntc_analog_sensors_calc+0x630>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	4630      	mov	r0, r6
 80034c8:	4639      	mov	r1, r7
 80034ca:	f7fd fa8d 	bl	80009e8 <__aeabi_dcmpgt>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d04c      	beq.n	800356c <ntc_analog_sensors_calc+0x3e4>
 80034d2:	a3bb      	add	r3, pc, #748	; (adr r3, 80037c0 <ntc_analog_sensors_calc+0x638>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	4630      	mov	r0, r6
 80034da:	4639      	mov	r1, r7
 80034dc:	f7fd fa70 	bl	80009c0 <__aeabi_dcmple>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d043      	beq.n	800356c <ntc_analog_sensors_calc+0x3e4>
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 80034e4:	1dab      	adds	r3, r5, #6
 80034e6:	4ac0      	ldr	r2, [pc, #768]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 80034e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80034ec:	2000      	movs	r0, #0
 80034ee:	2100      	movs	r1, #0
 80034f0:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a5)/4;
 80034f4:	f04f 0804 	mov.w	r8, #4
	uint8_t iterator = 0;
 80034f8:	f04f 0900 	mov.w	r9, #0
 80034fc:	e032      	b.n	8003564 <ntc_analog_sensors_calc+0x3dc>
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 80034fe:	4bba      	ldr	r3, [pc, #744]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 8003500:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003504:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003508:	f7fc ff86 	bl	8000418 <__aeabi_f2d>
 800350c:	4632      	mov	r2, r6
 800350e:	463b      	mov	r3, r7
 8003510:	f7fc ffda 	bl	80004c8 <__aeabi_dmul>
 8003514:	f7fd fa72 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003518:	3401      	adds	r4, #1
 800351a:	b2e4      	uxtb	r4, r4
 800351c:	f108 33ff 	add.w	r3, r8, #4294967295
 8003520:	429c      	cmp	r4, r3
 8003522:	dbec      	blt.n	80034fe <ntc_analog_sensors_calc+0x376>
			ntc_analog_values.NTC_temperature[no_sensor] += a5[iterator++]*power;
 8003524:	f109 0601 	add.w	r6, r9, #1
 8003528:	b2f6      	uxtb	r6, r6
 800352a:	4601      	mov	r1, r0
 800352c:	4baf      	ldr	r3, [pc, #700]	; (80037ec <ntc_analog_sensors_calc+0x664>)
 800352e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8003532:	f7fd fab3 	bl	8000a9c <__aeabi_fmul>
 8003536:	f7fc ff6f 	bl	8000418 <__aeabi_f2d>
 800353a:	1dac      	adds	r4, r5, #6
 800353c:	4baa      	ldr	r3, [pc, #680]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 800353e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	e9d4 0100 	ldrd	r0, r1, [r4]
 800354a:	f7fc fe07 	bl	800015c <__adddf3>
 800354e:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 8003552:	f108 33ff 	add.w	r3, r8, #4294967295
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f1b8 0f00 	cmp.w	r8, #0
 800355c:	f43f af2a 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 8003560:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a5[iterator++]*power;
 8003562:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003564:	2400      	movs	r4, #0
			float power = 1;
 8003566:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800356a:	e7d7      	b.n	800351c <ntc_analog_sensors_calc+0x394>
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 20000 && ntc_analog_values.NTC_resistance[no_sensor] <= 40000)
 800356c:	a394      	add	r3, pc, #592	; (adr r3, 80037c0 <ntc_analog_sensors_calc+0x638>)
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	4630      	mov	r0, r6
 8003574:	4639      	mov	r1, r7
 8003576:	f7fd fa37 	bl	80009e8 <__aeabi_dcmpgt>
 800357a:	2800      	cmp	r0, #0
 800357c:	d04c      	beq.n	8003618 <ntc_analog_sensors_calc+0x490>
 800357e:	a392      	add	r3, pc, #584	; (adr r3, 80037c8 <ntc_analog_sensors_calc+0x640>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	4630      	mov	r0, r6
 8003586:	4639      	mov	r1, r7
 8003588:	f7fd fa1a 	bl	80009c0 <__aeabi_dcmple>
 800358c:	2800      	cmp	r0, #0
 800358e:	d043      	beq.n	8003618 <ntc_analog_sensors_calc+0x490>
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8003590:	1dab      	adds	r3, r5, #6
 8003592:	4a95      	ldr	r2, [pc, #596]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 8003594:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003598:	2000      	movs	r0, #0
 800359a:	2100      	movs	r1, #0
 800359c:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a6)/4;
 80035a0:	f04f 0803 	mov.w	r8, #3
	uint8_t iterator = 0;
 80035a4:	f04f 0900 	mov.w	r9, #0
 80035a8:	e032      	b.n	8003610 <ntc_analog_sensors_calc+0x488>
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 80035aa:	4b8f      	ldr	r3, [pc, #572]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 80035ac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80035b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80035b4:	f7fc ff30 	bl	8000418 <__aeabi_f2d>
 80035b8:	4632      	mov	r2, r6
 80035ba:	463b      	mov	r3, r7
 80035bc:	f7fc ff84 	bl	80004c8 <__aeabi_dmul>
 80035c0:	f7fd fa1c 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80035c4:	3401      	adds	r4, #1
 80035c6:	b2e4      	uxtb	r4, r4
 80035c8:	f108 33ff 	add.w	r3, r8, #4294967295
 80035cc:	429c      	cmp	r4, r3
 80035ce:	dbec      	blt.n	80035aa <ntc_analog_sensors_calc+0x422>
			ntc_analog_values.NTC_temperature[no_sensor] += a6[iterator++]*power;
 80035d0:	f109 0601 	add.w	r6, r9, #1
 80035d4:	b2f6      	uxtb	r6, r6
 80035d6:	4601      	mov	r1, r0
 80035d8:	4b85      	ldr	r3, [pc, #532]	; (80037f0 <ntc_analog_sensors_calc+0x668>)
 80035da:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80035de:	f7fd fa5d 	bl	8000a9c <__aeabi_fmul>
 80035e2:	f7fc ff19 	bl	8000418 <__aeabi_f2d>
 80035e6:	1dac      	adds	r4, r5, #6
 80035e8:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 80035ea:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80035f6:	f7fc fdb1 	bl	800015c <__adddf3>
 80035fa:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 80035fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f1b8 0f00 	cmp.w	r8, #0
 8003608:	f43f aed4 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 800360c:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a6[iterator++]*power;
 800360e:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003610:	2400      	movs	r4, #0
			float power = 1;
 8003612:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003616:	e7d7      	b.n	80035c8 <ntc_analog_sensors_calc+0x440>
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 40000 && ntc_analog_values.NTC_resistance[no_sensor] <= 60000 )
 8003618:	a36b      	add	r3, pc, #428	; (adr r3, 80037c8 <ntc_analog_sensors_calc+0x640>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	4630      	mov	r0, r6
 8003620:	4639      	mov	r1, r7
 8003622:	f7fd f9e1 	bl	80009e8 <__aeabi_dcmpgt>
 8003626:	2800      	cmp	r0, #0
 8003628:	d04c      	beq.n	80036c4 <ntc_analog_sensors_calc+0x53c>
 800362a:	a369      	add	r3, pc, #420	; (adr r3, 80037d0 <ntc_analog_sensors_calc+0x648>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	4630      	mov	r0, r6
 8003632:	4639      	mov	r1, r7
 8003634:	f7fd f9c4 	bl	80009c0 <__aeabi_dcmple>
 8003638:	2800      	cmp	r0, #0
 800363a:	d043      	beq.n	80036c4 <ntc_analog_sensors_calc+0x53c>
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 800363c:	1daa      	adds	r2, r5, #6
 800363e:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 8003640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003644:	2000      	movs	r0, #0
 8003646:	2100      	movs	r1, #0
 8003648:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a7)/4;
 800364c:	f04f 0803 	mov.w	r8, #3
	uint8_t iterator = 0;
 8003650:	f04f 0900 	mov.w	r9, #0
 8003654:	e032      	b.n	80036bc <ntc_analog_sensors_calc+0x534>
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8003656:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 8003658:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800365c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003660:	f7fc feda 	bl	8000418 <__aeabi_f2d>
 8003664:	4632      	mov	r2, r6
 8003666:	463b      	mov	r3, r7
 8003668:	f7fc ff2e 	bl	80004c8 <__aeabi_dmul>
 800366c:	f7fd f9c6 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003670:	3401      	adds	r4, #1
 8003672:	b2e4      	uxtb	r4, r4
 8003674:	f108 33ff 	add.w	r3, r8, #4294967295
 8003678:	429c      	cmp	r4, r3
 800367a:	dbec      	blt.n	8003656 <ntc_analog_sensors_calc+0x4ce>
			ntc_analog_values.NTC_temperature[no_sensor] += a7[iterator++]*power;
 800367c:	f109 0601 	add.w	r6, r9, #1
 8003680:	b2f6      	uxtb	r6, r6
 8003682:	4601      	mov	r1, r0
 8003684:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <ntc_analog_sensors_calc+0x66c>)
 8003686:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800368a:	f7fd fa07 	bl	8000a9c <__aeabi_fmul>
 800368e:	f7fc fec3 	bl	8000418 <__aeabi_f2d>
 8003692:	1dac      	adds	r4, r5, #6
 8003694:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 8003696:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80036a2:	f7fc fd5b 	bl	800015c <__adddf3>
 80036a6:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 80036aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f1b8 0f00 	cmp.w	r8, #0
 80036b4:	f43f ae7e 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 80036b8:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a7[iterator++]*power;
 80036ba:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80036bc:	2400      	movs	r4, #0
			float power = 1;
 80036be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80036c2:	e7d7      	b.n	8003674 <ntc_analog_sensors_calc+0x4ec>
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 60000 && ntc_analog_values.NTC_resistance[no_sensor] <= 100000 )
 80036c4:	a342      	add	r3, pc, #264	; (adr r3, 80037d0 <ntc_analog_sensors_calc+0x648>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	4630      	mov	r0, r6
 80036cc:	4639      	mov	r1, r7
 80036ce:	f7fd f98b 	bl	80009e8 <__aeabi_dcmpgt>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d04c      	beq.n	8003770 <ntc_analog_sensors_calc+0x5e8>
 80036d6:	a340      	add	r3, pc, #256	; (adr r3, 80037d8 <ntc_analog_sensors_calc+0x650>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	4630      	mov	r0, r6
 80036de:	4639      	mov	r1, r7
 80036e0:	f7fd f96e 	bl	80009c0 <__aeabi_dcmple>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d043      	beq.n	8003770 <ntc_analog_sensors_calc+0x5e8>
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 80036e8:	1daa      	adds	r2, r5, #6
 80036ea:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 80036ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036f0:	2000      	movs	r0, #0
 80036f2:	2100      	movs	r1, #0
 80036f4:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a8)/4;
 80036f8:	f04f 0802 	mov.w	r8, #2
	uint8_t iterator = 0;
 80036fc:	f04f 0900 	mov.w	r9, #0
 8003700:	e032      	b.n	8003768 <ntc_analog_sensors_calc+0x5e0>
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 8003704:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003708:	e9d3 6700 	ldrd	r6, r7, [r3]
 800370c:	f7fc fe84 	bl	8000418 <__aeabi_f2d>
 8003710:	4632      	mov	r2, r6
 8003712:	463b      	mov	r3, r7
 8003714:	f7fc fed8 	bl	80004c8 <__aeabi_dmul>
 8003718:	f7fd f970 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800371c:	3401      	adds	r4, #1
 800371e:	b2e4      	uxtb	r4, r4
 8003720:	f108 33ff 	add.w	r3, r8, #4294967295
 8003724:	429c      	cmp	r4, r3
 8003726:	dbec      	blt.n	8003702 <ntc_analog_sensors_calc+0x57a>
			ntc_analog_values.NTC_temperature[no_sensor] += a8[iterator++]*power;
 8003728:	f109 0601 	add.w	r6, r9, #1
 800372c:	b2f6      	uxtb	r6, r6
 800372e:	4601      	mov	r1, r0
 8003730:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <ntc_analog_sensors_calc+0x670>)
 8003732:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8003736:	f7fd f9b1 	bl	8000a9c <__aeabi_fmul>
 800373a:	f7fc fe6d 	bl	8000418 <__aeabi_f2d>
 800373e:	1dac      	adds	r4, r5, #6
 8003740:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 8003742:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800374e:	f7fc fd05 	bl	800015c <__adddf3>
 8003752:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 8003756:	f108 33ff 	add.w	r3, r8, #4294967295
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f1b8 0f00 	cmp.w	r8, #0
 8003760:	f43f ae28 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 8003764:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a8[iterator++]*power;
 8003766:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003768:	2400      	movs	r4, #0
			float power = 1;
 800376a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800376e:	e7d7      	b.n	8003720 <ntc_analog_sensors_calc+0x598>
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 100000 && ntc_analog_values.NTC_resistance[no_sensor] <= 200000 )
 8003770:	a319      	add	r3, pc, #100	; (adr r3, 80037d8 <ntc_analog_sensors_calc+0x650>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	4630      	mov	r0, r6
 8003778:	4639      	mov	r1, r7
 800377a:	f7fd f935 	bl	80009e8 <__aeabi_dcmpgt>
 800377e:	2800      	cmp	r0, #0
 8003780:	f43f ae18 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 8003784:	a316      	add	r3, pc, #88	; (adr r3, 80037e0 <ntc_analog_sensors_calc+0x658>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	4630      	mov	r0, r6
 800378c:	4639      	mov	r1, r7
 800378e:	f7fd f917 	bl	80009c0 <__aeabi_dcmple>
 8003792:	2800      	cmp	r0, #0
 8003794:	f43f ae0e 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8003798:	1daa      	adds	r2, r5, #6
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <ntc_analog_sensors_calc+0x660>)
 800379c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037a0:	2000      	movs	r0, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	e9c3 0100 	strd	r0, r1, [r3]
		uint8_t number_of_components = sizeof(a9)/4;
 80037a8:	f04f 0802 	mov.w	r8, #2
	uint8_t iterator = 0;
 80037ac:	f04f 0900 	mov.w	r9, #0
 80037b0:	e057      	b.n	8003862 <ntc_analog_sensors_calc+0x6da>
 80037b2:	bf00      	nop
 80037b4:	f3af 8000 	nop.w
 80037b8:	00000000 	.word	0x00000000
 80037bc:	40c77000 	.word	0x40c77000
 80037c0:	00000000 	.word	0x00000000
 80037c4:	40d38800 	.word	0x40d38800
 80037c8:	00000000 	.word	0x00000000
 80037cc:	40e38800 	.word	0x40e38800
 80037d0:	00000000 	.word	0x00000000
 80037d4:	40ed4c00 	.word	0x40ed4c00
 80037d8:	00000000 	.word	0x00000000
 80037dc:	40f86a00 	.word	0x40f86a00
 80037e0:	00000000 	.word	0x00000000
 80037e4:	41086a00 	.word	0x41086a00
 80037e8:	20000200 	.word	0x20000200
 80037ec:	20000048 	.word	0x20000048
 80037f0:	20000058 	.word	0x20000058
 80037f4:	20000064 	.word	0x20000064
 80037f8:	20000070 	.word	0x20000070
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <ntc_analog_sensors_calc+0x6e4>)
 80037fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003802:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003806:	f7fc fe07 	bl	8000418 <__aeabi_f2d>
 800380a:	4632      	mov	r2, r6
 800380c:	463b      	mov	r3, r7
 800380e:	f7fc fe5b 	bl	80004c8 <__aeabi_dmul>
 8003812:	f7fd f8f3 	bl	80009fc <__aeabi_d2f>
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003816:	3401      	adds	r4, #1
 8003818:	b2e4      	uxtb	r4, r4
 800381a:	f108 33ff 	add.w	r3, r8, #4294967295
 800381e:	429c      	cmp	r4, r3
 8003820:	dbec      	blt.n	80037fc <ntc_analog_sensors_calc+0x674>
			ntc_analog_values.NTC_temperature[no_sensor] += a9[iterator++]*power;
 8003822:	f109 0601 	add.w	r6, r9, #1
 8003826:	b2f6      	uxtb	r6, r6
 8003828:	4601      	mov	r1, r0
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <ntc_analog_sensors_calc+0x6e8>)
 800382c:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8003830:	f7fd f934 	bl	8000a9c <__aeabi_fmul>
 8003834:	f7fc fdf0 	bl	8000418 <__aeabi_f2d>
 8003838:	1dac      	adds	r4, r5, #6
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <ntc_analog_sensors_calc+0x6e4>)
 800383c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003848:	f7fc fc88 	bl	800015c <__adddf3>
 800384c:	e9c4 0100 	strd	r0, r1, [r4]
		} while(number_of_components--);
 8003850:	f108 33ff 	add.w	r3, r8, #4294967295
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f1b8 0f00 	cmp.w	r8, #0
 800385a:	f43f adab 	beq.w	80033b4 <ntc_analog_sensors_calc+0x22c>
 800385e:	4698      	mov	r8, r3
			ntc_analog_values.NTC_temperature[no_sensor] += a9[iterator++]*power;
 8003860:	46b1      	mov	r9, r6
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003862:	2400      	movs	r4, #0
			float power = 1;
 8003864:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8003868:	e7d7      	b.n	800381a <ntc_analog_sensors_calc+0x692>
 800386a:	bf00      	nop
 800386c:	20000200 	.word	0x20000200
 8003870:	20000078 	.word	0x20000078

08003874 <ntc_handler>:
	if(ntc_handler_flag == NTC_HANDLER_FLAG_BUSY) return ;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <ntc_handler+0x34>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <ntc_handler+0x1a>
	ntc_handler_flag = NTC_HANDLER_FLAG_BUSY;
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <ntc_handler+0x34>)
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
	if(ms_time_counter != ms_counter) return;
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <ntc_handler+0x38>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4283      	cmp	r3, r0
 800388c:	d000      	beq.n	8003890 <ntc_handler+0x1c>
 800388e:	4770      	bx	lr
{
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	460c      	mov	r4, r1
	LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 8003894:	4d06      	ldr	r5, [pc, #24]	; (80038b0 <ntc_handler+0x3c>)
 8003896:	2640      	movs	r6, #64	; 0x40
 8003898:	612e      	str	r6, [r5, #16]
	ntc_TEMP_SENS_calc();
 800389a:	f7ff fc41 	bl	8003120 <ntc_TEMP_SENS_calc>
	ntc_analog_sensors_calc(no_sensor);
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fc72 	bl	8003188 <ntc_analog_sensors_calc>
	LED_GREEN_GPIO_Port->BRR = LED_GREEN_Pin;
 80038a4:	616e      	str	r6, [r5, #20]
}
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	200000ac 	.word	0x200000ac
 80038ac:	200000f6 	.word	0x200000f6
 80038b0:	40010800 	.word	0x40010800

080038b4 <ntc_check_analog_sensors_status>:

uint8_t ntc_check_analog_sensors_status(void)
{
 80038b4:	b538      	push	{r3, r4, r5, lr}
	uint8_t ntc_counter;
	for(uint8_t analog_sens_count = 0; analog_sens_count < (ADC_CHANNELS - 1) ; analog_sens_count++ )
 80038b6:	2400      	movs	r4, #0
 80038b8:	e001      	b.n	80038be <ntc_check_analog_sensors_status+0xa>
 80038ba:	3401      	adds	r4, #1
 80038bc:	b2e4      	uxtb	r4, r4
 80038be:	2c02      	cmp	r4, #2
 80038c0:	d80e      	bhi.n	80038e0 <ntc_check_analog_sensors_status+0x2c>
	{
		if(ntc_analog_values.NTC_temperature[analog_sens_count] != 0) ntc_counter++;
 80038c2:	1da1      	adds	r1, r4, #6
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <ntc_check_analog_sensors_status+0x30>)
 80038c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80038ca:	2200      	movs	r2, #0
 80038cc:	2300      	movs	r3, #0
 80038ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038d2:	f7fd f861 	bl	8000998 <__aeabi_dcmpeq>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d1ef      	bne.n	80038ba <ntc_check_analog_sensors_status+0x6>
 80038da:	3501      	adds	r5, #1
 80038dc:	b2ed      	uxtb	r5, r5
 80038de:	e7ec      	b.n	80038ba <ntc_check_analog_sensors_status+0x6>
	}
	return ntc_counter;
}
 80038e0:	4628      	mov	r0, r5
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	20000200 	.word	0x20000200

080038e8 <ntc_init>:
{
 80038e8:	b508      	push	{r3, lr}
	ui_change_ntc_status(ntc_check_analog_sensors_status());
 80038ea:	f7ff ffe3 	bl	80038b4 <ntc_check_analog_sensors_status>
 80038ee:	f000 f8ad 	bl	8003a4c <ui_change_ntc_status>
}
 80038f2:	bd08      	pop	{r3, pc}

080038f4 <ui_handler>:



void ui_handler()
{
	if(ui_handler_flag == UI_HANDLER_FLAG_BUSY) return;
 80038f4:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <ui_handler+0x128>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d061      	beq.n	80039c2 <ui_handler+0xce>

	//red led control 

	if( (HC_status.ds18b20_amount == 0) && (HC_status.ntc_amount == 0))
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <ui_handler+0x12c>)
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	bb5b      	cbnz	r3, 800395c <ui_handler+0x68>
	{
		if(ms_counter % 200 == 0)	LED_RED_GPIO_Port -> ODR ^= LED_RED_Pin;
 8003904:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <ui_handler+0x130>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b29a      	uxth	r2, r3
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <ui_handler+0x134>)
 800390c:	fba3 1302 	umull	r1, r3, r3, r2
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	21c8      	movs	r1, #200	; 0xc8
 8003914:	fb01 2313 	mls	r3, r1, r3, r2
 8003918:	b29b      	uxth	r3, r3
 800391a:	b923      	cbnz	r3, 8003926 <ui_handler+0x32>
 800391c:	4a43      	ldr	r2, [pc, #268]	; (8003a2c <ui_handler+0x138>)
 800391e:	68d3      	ldr	r3, [r2, #12]
 8003920:	f083 0320 	eor.w	r3, r3, #32
 8003924:	60d3      	str	r3, [r2, #12]
		if(ms_counter % 500 == 0) LED_RED_GPIO_Port -> ODR ^= LED_RED_Pin;
	}

	// green led control 

	if(HC_status.heating_status == HEATING_STATUS_RUN)
 8003926:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <ui_handler+0x12c>)
 8003928:	789b      	ldrb	r3, [r3, #2]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d031      	beq.n	8003992 <ui_handler+0x9e>
		if((ms_counter/10)%20 == 0)
		{
			LED_GREEN_GPIO_Port->ODR ^=  LED_GREEN_Pin;
		}
	}
	else if(HC_status.heating_status == HEATING_STATUS_STOP)
 800392e:	2b00      	cmp	r3, #0
 8003930:	d148      	bne.n	80039c4 <ui_handler+0xd0>
	{
		if(ms_counter % 499 == 0)
 8003932:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <ui_handler+0x130>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <ui_handler+0x13c>)
 800393a:	fba3 1302 	umull	r1, r3, r3, r2
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	f240 11f3 	movw	r1, #499	; 0x1f3
 8003944:	fb01 2313 	mls	r3, r1, r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d136      	bne.n	80039bc <ui_handler+0xc8>
		{
			LED_GREEN_GPIO_Port->BRR = LED_GREEN_Pin;
 800394e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003952:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	615a      	str	r2, [r3, #20]
 800395a:	e02f      	b.n	80039bc <ui_handler+0xc8>
	else if(HC_status.ds18b20_amount == 0 || (HC_status.ntc_amount == 0))
 800395c:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <ui_handler+0x12c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b11b      	cbz	r3, 800396a <ui_handler+0x76>
 8003962:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <ui_handler+0x12c>)
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1dd      	bne.n	8003926 <ui_handler+0x32>
		if(ms_counter % 500 == 0) LED_RED_GPIO_Port -> ODR ^= LED_RED_Pin;
 800396a:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <ui_handler+0x130>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29a      	uxth	r2, r3
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <ui_handler+0x140>)
 8003972:	fba3 1302 	umull	r1, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800397c:	fb01 2313 	mls	r3, r1, r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1cf      	bne.n	8003926 <ui_handler+0x32>
 8003986:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <ui_handler+0x138>)
 8003988:	68d3      	ldr	r3, [r2, #12]
 800398a:	f083 0320 	eor.w	r3, r3, #32
 800398e:	60d3      	str	r3, [r2, #12]
 8003990:	e7c9      	b.n	8003926 <ui_handler+0x32>
		if((ms_counter/10)%20 == 0)
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <ui_handler+0x130>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <ui_handler+0x144>)
 800399a:	fba2 1303 	umull	r1, r3, r2, r3
 800399e:	08db      	lsrs	r3, r3, #3
 80039a0:	fba2 1203 	umull	r1, r2, r2, r3
 80039a4:	0912      	lsrs	r2, r2, #4
 80039a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80039aa:	0091      	lsls	r1, r2, #2
 80039ac:	1a5b      	subs	r3, r3, r1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	b923      	cbnz	r3, 80039bc <ui_handler+0xc8>
			LED_GREEN_GPIO_Port->ODR ^=  LED_GREEN_Pin;
 80039b2:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <ui_handler+0x138>)
 80039b4:	68d3      	ldr	r3, [r2, #12]
 80039b6:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80039ba:	60d3      	str	r3, [r2, #12]
		}
	}

	// buzzer contorl

	ui_handler_flag = UI_HANDLER_FLAG_BUSY;
 80039bc:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <ui_handler+0x128>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
}
 80039c2:	4770      	bx	lr
	else if(HC_status.heating_status == HEATING_STATUS_ENDING)
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d016      	beq.n	80039f6 <ui_handler+0x102>
	else if(HC_status.heating_status == HEATING_STATUS_END)
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d1f7      	bne.n	80039bc <ui_handler+0xc8>
		if( ( ms_counter % 90 ) == 0)
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <ui_handler+0x130>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	0853      	lsrs	r3, r2, #1
 80039d4:	4919      	ldr	r1, [pc, #100]	; (8003a3c <ui_handler+0x148>)
 80039d6:	fba1 1303 	umull	r1, r3, r1, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	215a      	movs	r1, #90	; 0x5a
 80039de:	fb01 2313 	mls	r3, r1, r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e9      	bne.n	80039bc <ui_handler+0xc8>
			LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 80039e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ec:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80039f0:	2240      	movs	r2, #64	; 0x40
 80039f2:	611a      	str	r2, [r3, #16]
 80039f4:	e7e2      	b.n	80039bc <ui_handler+0xc8>
		if( (ms_counter % 200) == 0 )
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <ui_handler+0x130>)
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <ui_handler+0x134>)
 80039fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	21c8      	movs	r1, #200	; 0xc8
 8003a06:	fb01 2313 	mls	r3, r1, r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1d5      	bne.n	80039bc <ui_handler+0xc8>
			LED_GREEN_GPIO_Port->ODR ^= LED_GREEN_Pin;
 8003a10:	4a06      	ldr	r2, [pc, #24]	; (8003a2c <ui_handler+0x138>)
 8003a12:	68d3      	ldr	r3, [r2, #12]
 8003a14:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003a18:	60d3      	str	r3, [r2, #12]
 8003a1a:	e7cf      	b.n	80039bc <ui_handler+0xc8>
 8003a1c:	20000170 	.word	0x20000170
 8003a20:	20000250 	.word	0x20000250
 8003a24:	200000f6 	.word	0x200000f6
 8003a28:	51eb851f 	.word	0x51eb851f
 8003a2c:	40010800 	.word	0x40010800
 8003a30:	20d56b39 	.word	0x20d56b39
 8003a34:	10624dd3 	.word	0x10624dd3
 8003a38:	cccccccd 	.word	0xcccccccd
 8003a3c:	b60b60b7 	.word	0xb60b60b7

08003a40 <ui_change_ds18B20_status>:

void ui_change_ds18B20_status(uint8_t status)
{
	HC_status.ds18b20_amount = status;
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <ui_change_ds18B20_status+0x8>)
 8003a42:	7018      	strb	r0, [r3, #0]
}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000250 	.word	0x20000250

08003a4c <ui_change_ntc_status>:

void ui_change_ntc_status(uint8_t status)
{
	HC_status.ds18b20_amount = status;
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <ui_change_ntc_status+0x8>)
 8003a4e:	7018      	strb	r0, [r3, #0]
}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000250 	.word	0x20000250

08003a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a5c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5e:	2400      	movs	r4, #0
 8003a60:	9404      	str	r4, [sp, #16]
 8003a62:	9405      	str	r4, [sp, #20]
 8003a64:	9406      	str	r4, [sp, #24]
 8003a66:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a68:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <MX_GPIO_Init+0x10c>)
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	f042 0210 	orr.w	r2, r2, #16
 8003a70:	619a      	str	r2, [r3, #24]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	f002 0210 	and.w	r2, r2, #16
 8003a78:	9200      	str	r2, [sp, #0]
 8003a7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	f042 0220 	orr.w	r2, r2, #32
 8003a82:	619a      	str	r2, [r3, #24]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	f002 0220 	and.w	r2, r2, #32
 8003a8a:	9201      	str	r2, [sp, #4]
 8003a8c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	f042 0204 	orr.w	r2, r2, #4
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	f002 0204 	and.w	r2, r2, #4
 8003a9c:	9202      	str	r2, [sp, #8]
 8003a9e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	f042 0208 	orr.w	r2, r2, #8
 8003aa6:	619a      	str	r2, [r3, #24]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	9303      	str	r3, [sp, #12]
 8003ab0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 8003ab2:	4e2d      	ldr	r6, [pc, #180]	; (8003b68 <MX_GPIO_Init+0x110>)
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	f248 7178 	movw	r1, #34680	; 0x8778
 8003aba:	4630      	mov	r0, r6
 8003abc:	f7fd ff10 	bl	80018e0 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 8003ac0:	4d2a      	ldr	r5, [pc, #168]	; (8003b6c <MX_GPIO_Init+0x114>)
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f7fd ff09 	bl	80018e0 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_EXIT_Pin BUTTON_OK_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_EXIT_Pin|BUTTON_OK_Pin;
 8003ace:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003ad2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ad4:	4f26      	ldr	r7, [pc, #152]	; (8003b70 <MX_GPIO_Init+0x118>)
 8003ad6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ada:	a904      	add	r1, sp, #16
 8003adc:	4825      	ldr	r0, [pc, #148]	; (8003b74 <MX_GPIO_Init+0x11c>)
 8003ade:	f7fd fe13 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONE_WIRE_DATA1_Pin ONE_WIRE_DATA2_Pin LED_RED_Pin LED_GREEN_Pin 
                           BUZZER_Pin FAN_CTRL_Pin HEATER_CTRL_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 8003ae2:	f248 7378 	movw	r3, #34680	; 0x8778
 8003ae6:	9304      	str	r3, [sp, #16]
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae8:	f04f 0901 	mov.w	r9, #1
 8003aec:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	f04f 0802 	mov.w	r8, #2
 8003af6:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afa:	a904      	add	r1, sp, #16
 8003afc:	4630      	mov	r0, r6
 8003afe:	f7fd fe03 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <MX_GPIO_Init+0x120>)
 8003b08:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8003b0c:	a904      	add	r1, sp, #16
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f7fd fdfa 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D1B2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin 
                           LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 8003b14:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003b18:	9304      	str	r3, [sp, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1a:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b24:	a904      	add	r1, sp, #16
 8003b26:	4628      	mov	r0, r5
 8003b28:	f7fd fdee 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 8003b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b30:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b32:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 8003b36:	a904      	add	r1, sp, #16
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f7fd fde5 	bl	8001708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b3e:	4622      	mov	r2, r4
 8003b40:	4621      	mov	r1, r4
 8003b42:	2017      	movs	r0, #23
 8003b44:	f7fd fcb6 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b48:	2017      	movs	r0, #23
 8003b4a:	f7fd fce7 	bl	800151c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b4e:	4622      	mov	r2, r4
 8003b50:	4621      	mov	r1, r4
 8003b52:	2028      	movs	r0, #40	; 0x28
 8003b54:	f7fd fcae 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b58:	2028      	movs	r0, #40	; 0x28
 8003b5a:	f7fd fcdf 	bl	800151c <HAL_NVIC_EnableIRQ>

}
 8003b5e:	b009      	add	sp, #36	; 0x24
 8003b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40010800 	.word	0x40010800
 8003b6c:	40010c00 	.word	0x40010c00
 8003b70:	10210000 	.word	0x10210000
 8003b74:	40011000 	.word	0x40011000
 8003b78:	10310000 	.word	0x10310000

08003b7c <MX_ADC1_Init>:
{
 8003b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b80:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b82:	2600      	movs	r6, #0
 8003b84:	9601      	str	r6, [sp, #4]
 8003b86:	9602      	str	r6, [sp, #8]
 8003b88:	9603      	str	r6, [sp, #12]
  hadc1.Instance = ADC1;
 8003b8a:	4c2f      	ldr	r4, [pc, #188]	; (8003c48 <MX_ADC1_Init+0xcc>)
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <MX_ADC1_Init+0xd0>)
 8003b8e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003b90:	f44f 7880 	mov.w	r8, #256	; 0x100
 8003b94:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b98:	2501      	movs	r5, #1
 8003b9a:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b9c:	7526      	strb	r6, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b9e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8003ba2:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ba4:	6066      	str	r6, [r4, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003ba6:	2704      	movs	r7, #4
 8003ba8:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7fd fb70 	bl	8001290 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8003bb0:	9601      	str	r6, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bb2:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bb8:	eb0d 0107 	add.w	r1, sp, r7
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7fd f9cd 	bl	8000f5c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8003bc2:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003bc4:	2502      	movs	r5, #2
 8003bc6:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bc8:	eb0d 0107 	add.w	r1, sp, r7
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f7fd f9c5 	bl	8000f5c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8003bd2:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bd8:	eb0d 0107 	add.w	r1, sp, r7
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7fd f9bd 	bl	8000f5c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003be2:	2310      	movs	r3, #16
 8003be4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003be6:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003be8:	eb0d 0107 	add.w	r1, sp, r7
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7fd f9b5 	bl	8000f5c <HAL_ADC_ConfigChannel>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <MX_ADC1_Init+0xd4>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	615a      	str	r2, [r3, #20]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	9b00      	ldr	r3, [sp, #0]
  hdma1.Instance = DMA1_Channel1;
 8003c06:	4d13      	ldr	r5, [pc, #76]	; (8003c54 <MX_ADC1_Init+0xd8>)
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <MX_ADC1_Init+0xdc>)
 8003c0a:	602b      	str	r3, [r5, #0]
  hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c0c:	606e      	str	r6, [r5, #4]
  hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c0e:	60ae      	str	r6, [r5, #8]
  hdma1.Init.MemInc = DMA_MINC_ENABLE;
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	60eb      	str	r3, [r5, #12]
  hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c14:	f8c5 8010 	str.w	r8, [r5, #16]
  hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1c:	616b      	str	r3, [r5, #20]
  hdma1.Init.Mode = DMA_CIRCULAR;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	61ab      	str	r3, [r5, #24]
  hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 8003c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c26:	61eb      	str	r3, [r5, #28]
  HAL_ADCEx_Calibration_Start(&hadc1);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7fd fbb9 	bl	80013a0 <HAL_ADCEx_Calibration_Start>
  HAL_DMA_Init(&hdma1);
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f7fd fcae 	bl	8001590 <HAL_DMA_Init>
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 8003c34:	6225      	str	r5, [r4, #32]
 8003c36:	626c      	str	r4, [r5, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, ADC_CHANNELS);
 8003c38:	463a      	mov	r2, r7
 8003c3a:	4908      	ldr	r1, [pc, #32]	; (8003c5c <MX_ADC1_Init+0xe0>)
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd fa69 	bl	8001114 <HAL_ADC_Start_DMA>
}
 8003c42:	b004      	add	sp, #16
 8003c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c48:	20000100 	.word	0x20000100
 8003c4c:	40012400 	.word	0x40012400
 8003c50:	40021000 	.word	0x40021000
 8003c54:	200000b0 	.word	0x200000b0
 8003c58:	40020008 	.word	0x40020008
 8003c5c:	200000f8 	.word	0x200000f8

08003c60 <MX_TIM1_Init>:
{
 8003c60:	b530      	push	{r4, r5, lr}
 8003c62:	b097      	sub	sp, #92	; 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c64:	2400      	movs	r4, #0
 8003c66:	9412      	str	r4, [sp, #72]	; 0x48
 8003c68:	9413      	str	r4, [sp, #76]	; 0x4c
 8003c6a:	9414      	str	r4, [sp, #80]	; 0x50
 8003c6c:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6e:	9410      	str	r4, [sp, #64]	; 0x40
 8003c70:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c72:	9409      	str	r4, [sp, #36]	; 0x24
 8003c74:	940a      	str	r4, [sp, #40]	; 0x28
 8003c76:	940b      	str	r4, [sp, #44]	; 0x2c
 8003c78:	940c      	str	r4, [sp, #48]	; 0x30
 8003c7a:	940d      	str	r4, [sp, #52]	; 0x34
 8003c7c:	940e      	str	r4, [sp, #56]	; 0x38
 8003c7e:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c80:	2220      	movs	r2, #32
 8003c82:	4621      	mov	r1, r4
 8003c84:	a801      	add	r0, sp, #4
 8003c86:	f000 fa5b 	bl	8004140 <memset>
  htim1.Instance = TIM1;
 8003c8a:	4d1f      	ldr	r5, [pc, #124]	; (8003d08 <MX_TIM1_Init+0xa8>)
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <MX_TIM1_Init+0xac>)
 8003c8e:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 71;
 8003c90:	2347      	movs	r3, #71	; 0x47
 8003c92:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c94:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 9800;
 8003c96:	f242 6348 	movw	r3, #9800	; 0x2648
 8003c9a:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c9e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7fe fc2a 	bl	80024fc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cac:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cae:	a912      	add	r1, sp, #72	; 0x48
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f7fe fce5 	bl	8002680 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f7fe fc39 	bl	800252e <HAL_TIM_OC_Init>
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f7fe fc4e 	bl	8002560 <HAL_TIM_OnePulse_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc4:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cc6:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cc8:	a910      	add	r1, sp, #64	; 0x40
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f7fe fd45 	bl	800275a <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003cd0:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003cd2:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cd4:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003cd6:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cd8:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cda:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cdc:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cde:	4622      	mov	r2, r4
 8003ce0:	a909      	add	r1, sp, #36	; 0x24
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f7fe fc92 	bl	800260c <HAL_TIM_OC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ce8:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cea:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003cec:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cee:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003cf0:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf6:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003cf8:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003cfa:	a901      	add	r1, sp, #4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f7fe fd4f 	bl	80027a0 <HAL_TIMEx_ConfigBreakDeadTime>
}
 8003d02:	b017      	add	sp, #92	; 0x5c
 8003d04:	bd30      	pop	{r4, r5, pc}
 8003d06:	bf00      	nop
 8003d08:	20000130 	.word	0x20000130
 8003d0c:	40012c00 	.word	0x40012c00

08003d10 <MX_USART3_UART_Init>:
{
 8003d10:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8003d12:	4808      	ldr	r0, [pc, #32]	; (8003d34 <MX_USART3_UART_Init+0x24>)
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <MX_USART3_UART_Init+0x28>)
 8003d16:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8003d18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003d1c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d22:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d24:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d26:	220c      	movs	r2, #12
 8003d28:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d2a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d2c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d2e:	f7fe fe0b 	bl	8002948 <HAL_UART_Init>
}
 8003d32:	bd08      	pop	{r3, pc}
 8003d34:	200002b8 	.word	0x200002b8
 8003d38:	40004800 	.word	0x40004800

08003d3c <SystemClock_Config>:
{
 8003d3c:	b530      	push	{r4, r5, lr}
 8003d3e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d40:	2400      	movs	r4, #0
 8003d42:	940c      	str	r4, [sp, #48]	; 0x30
 8003d44:	940d      	str	r4, [sp, #52]	; 0x34
 8003d46:	940f      	str	r4, [sp, #60]	; 0x3c
 8003d48:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d4a:	9405      	str	r4, [sp, #20]
 8003d4c:	9406      	str	r4, [sp, #24]
 8003d4e:	9407      	str	r4, [sp, #28]
 8003d50:	9408      	str	r4, [sp, #32]
 8003d52:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d54:	9401      	str	r4, [sp, #4]
 8003d56:	9402      	str	r4, [sp, #8]
 8003d58:	9403      	str	r4, [sp, #12]
 8003d5a:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d64:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d66:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d68:	2502      	movs	r5, #2
 8003d6a:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d6c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003d6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003d72:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d74:	a80a      	add	r0, sp, #40	; 0x28
 8003d76:	f7fd fddf 	bl	8001938 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d7a:	230f      	movs	r3, #15
 8003d7c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d7e:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d80:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d86:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d88:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	a805      	add	r0, sp, #20
 8003d8e:	f7fe f813 	bl	8001db8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003d92:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d98:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d9a:	a801      	add	r0, sp, #4
 8003d9c:	f7fe f8e6 	bl	8001f6c <HAL_RCCEx_PeriphCLKConfig>
}
 8003da0:	b015      	add	sp, #84	; 0x54
 8003da2:	bd30      	pop	{r4, r5, pc}

08003da4 <main>:
{
 8003da4:	b508      	push	{r3, lr}
  HAL_Init();
 8003da6:	f7fc ffef 	bl	8000d88 <HAL_Init>
  SystemClock_Config();
 8003daa:	f7ff ffc7 	bl	8003d3c <SystemClock_Config>
  MX_GPIO_Init();
 8003dae:	f7ff fe53 	bl	8003a58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003db2:	f7ff fee3 	bl	8003b7c <MX_ADC1_Init>
  MX_TIM1_Init();
 8003db6:	f7ff ff53 	bl	8003c60 <MX_TIM1_Init>
  simple_delay_ms(500);
 8003dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dbe:	f7fe fee9 	bl	8002b94 <simple_delay_ms>
  MX_USART3_UART_Init();
 8003dc2:	f7ff ffa5 	bl	8003d10 <MX_USART3_UART_Init>
  LCD_Initalize();
 8003dc6:	f7ff f957 	bl	8003078 <LCD_Initalize>
  ds18b20_initalize();
 8003dca:	f7ff f8c5 	bl	8002f58 <ds18b20_initalize>
  ntc_init();
 8003dce:	f7ff fd8b 	bl	80038e8 <ntc_init>
	  ui_handler();
 8003dd2:	f7ff fd8f 	bl	80038f4 <ui_handler>
	  ntc_handler(500, 0);
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ddc:	f7ff fd4a 	bl	8003874 <ntc_handler>
 8003de0:	e7f7      	b.n	8003dd2 <main+0x2e>
	...

08003de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003de4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_MspInit+0x3c>)
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	619a      	str	r2, [r3, #24]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	f002 0201 	and.w	r2, r2, #1
 8003df6:	9200      	str	r2, [sp, #0]
 8003df8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e00:	61da      	str	r2, [r3, #28]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e0c:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <HAL_MspInit+0x40>)
 8003e0e:	6853      	ldr	r3, [r2, #4]
 8003e10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e1a:	b002      	add	sp, #8
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40010000 	.word	0x40010000

08003e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e28:	b500      	push	{lr}
 8003e2a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9302      	str	r3, [sp, #8]
 8003e30:	9303      	str	r3, [sp, #12]
 8003e32:	9304      	str	r3, [sp, #16]
 8003e34:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8003e36:	6802      	ldr	r2, [r0, #0]
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <HAL_ADC_MspInit+0x68>)
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d002      	beq.n	8003e44 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e3e:	b007      	add	sp, #28
 8003e40:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e44:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4e:	619a      	str	r2, [r3, #24]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003e56:	9200      	str	r2, [sp, #0]
 8003e58:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	f042 0204 	orr.w	r2, r2, #4
 8003e60:	619a      	str	r2, [r3, #24]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003e6c:	2307      	movs	r3, #7
 8003e6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e70:	2303      	movs	r3, #3
 8003e72:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	a902      	add	r1, sp, #8
 8003e76:	4807      	ldr	r0, [pc, #28]	; (8003e94 <HAL_ADC_MspInit+0x6c>)
 8003e78:	f7fd fc46 	bl	8001708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4611      	mov	r1, r2
 8003e80:	2012      	movs	r0, #18
 8003e82:	f7fd fb17 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003e86:	2012      	movs	r0, #18
 8003e88:	f7fd fb48 	bl	800151c <HAL_NVIC_EnableIRQ>
}
 8003e8c:	e7d7      	b.n	8003e3e <HAL_ADC_MspInit+0x16>
 8003e8e:	bf00      	nop
 8003e90:	40012400 	.word	0x40012400
 8003e94:	40010800 	.word	0x40010800

08003e98 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003e98:	6802      	ldr	r2, [r0, #0]
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_TIM_Base_MspInit+0x4c>)
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d000      	beq.n	8003ea2 <HAL_TIM_Base_MspInit+0xa>
 8003ea0:	4770      	bx	lr
{
 8003ea2:	b500      	push	{lr}
 8003ea4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ea6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb0:	619a      	str	r2, [r3, #24]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	2019      	movs	r0, #25
 8003ec2:	f7fd faf7 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003ec6:	2019      	movs	r0, #25
 8003ec8:	f7fd fb28 	bl	800151c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4611      	mov	r1, r2
 8003ed0:	201b      	movs	r0, #27
 8003ed2:	f7fd faef 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003ed6:	201b      	movs	r0, #27
 8003ed8:	f7fd fb20 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003edc:	b003      	add	sp, #12
 8003ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00

08003ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ee8:	b530      	push	{r4, r5, lr}
 8003eea:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	2300      	movs	r3, #0
 8003eee:	9302      	str	r3, [sp, #8]
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8003ef6:	6802      	ldr	r2, [r0, #0]
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_UART_MspInit+0x80>)
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003efe:	b007      	add	sp, #28
 8003f00:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f02:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f0c:	61da      	str	r2, [r3, #28]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003f14:	9200      	str	r2, [sp, #0]
 8003f16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	f042 0208 	orr.w	r2, r2, #8
 8003f1e:	619a      	str	r2, [r3, #24]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f34:	2303      	movs	r3, #3
 8003f36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	4d0c      	ldr	r5, [pc, #48]	; (8003f6c <HAL_UART_MspInit+0x84>)
 8003f3a:	a902      	add	r1, sp, #8
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f7fd fbe3 	bl	8001708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f48:	2400      	movs	r4, #0
 8003f4a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4e:	a902      	add	r1, sp, #8
 8003f50:	4628      	mov	r0, r5
 8003f52:	f7fd fbd9 	bl	8001708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003f56:	4622      	mov	r2, r4
 8003f58:	4621      	mov	r1, r4
 8003f5a:	2027      	movs	r0, #39	; 0x27
 8003f5c:	f7fd faaa 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f60:	2027      	movs	r0, #39	; 0x27
 8003f62:	f7fd fadb 	bl	800151c <HAL_NVIC_EnableIRQ>
}
 8003f66:	e7ca      	b.n	8003efe <HAL_UART_MspInit+0x16>
 8003f68:	40004800 	.word	0x40004800
 8003f6c:	40010c00 	.word	0x40010c00

08003f70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f70:	4770      	bx	lr

08003f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f72:	e7fe      	b.n	8003f72 <HardFault_Handler>

08003f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f74:	e7fe      	b.n	8003f74 <MemManage_Handler>

08003f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f76:	e7fe      	b.n	8003f76 <BusFault_Handler>

08003f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f78:	e7fe      	b.n	8003f78 <UsageFault_Handler>

08003f7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f7a:	4770      	bx	lr

08003f7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f7c:	4770      	bx	lr

08003f7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f7e:	4770      	bx	lr

08003f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8003f82:	f7fc ff13 	bl	8000dac <HAL_IncTick>
	ui_handler_flag = UI_HANDLER_FLAG_FREE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <SysTick_Handler+0x28>)
 8003f8a:	7013      	strb	r3, [r2, #0]
	ntc_handler_flag = NTC_HANDLER_FLAG_FREE;
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <SysTick_Handler+0x2c>)
 8003f8e:	7013      	strb	r3, [r2, #0]
	if(++ms_counter >= 1000)
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <SysTick_Handler+0x30>)
 8003f92:	8813      	ldrh	r3, [r2, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8013      	strh	r3, [r2, #0]
 8003f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9e:	d302      	bcc.n	8003fa6 <SysTick_Handler+0x26>
	{
		ms_counter = 0;
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fa6:	bd08      	pop	{r3, pc}
 8003fa8:	20000170 	.word	0x20000170
 8003fac:	200000ac 	.word	0x200000ac
 8003fb0:	200000f6 	.word	0x200000f6

08003fb4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003fb6:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <ADC1_2_IRQHandler+0xc>)
 8003fb8:	f7fc ff3b 	bl	8000e32 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003fbc:	bd08      	pop	{r3, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000100 	.word	0x20000100

08003fc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ZCD_Pin))
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <EXTI9_5_IRQHandler+0x24>)
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003fce:	d103      	bne.n	8003fd8 <EXTI9_5_IRQHandler+0x14>
		HAL_TIM_Base_Start_IT(&htim1);
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
		//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003fd0:	2080      	movs	r0, #128	; 0x80
 8003fd2:	f7fd fc8d 	bl	80018f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fd6:	bd08      	pop	{r3, pc}
		HAL_TIM_Base_Start_IT(&htim1);
 8003fd8:	4804      	ldr	r0, [pc, #16]	; (8003fec <EXTI9_5_IRQHandler+0x28>)
 8003fda:	f7fe f980 	bl	80022de <HAL_TIM_Base_Start_IT>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <EXTI9_5_IRQHandler+0x2c>)
 8003fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe4:	615a      	str	r2, [r3, #20]
 8003fe6:	e7f3      	b.n	8003fd0 <EXTI9_5_IRQHandler+0xc>
 8003fe8:	40010400 	.word	0x40010400
 8003fec:	20000130 	.word	0x20000130
 8003ff0:	40010800 	.word	0x40010800

08003ff4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003ff4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;

	// for a test
	//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 8003ff6:	4b04      	ldr	r3, [pc, #16]	; (8004008 <TIM1_UP_IRQHandler+0x14>)
 8003ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ffc:	615a      	str	r2, [r3, #20]


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ffe:	4803      	ldr	r0, [pc, #12]	; (800400c <TIM1_UP_IRQHandler+0x18>)
 8004000:	f7fe f985 	bl	800230e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004004:	bd08      	pop	{r3, pc}
 8004006:	bf00      	nop
 8004008:	40010800 	.word	0x40010800
 800400c:	20000130 	.word	0x20000130

08004010 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
	// for a test	//LED_RED_GPIO_Port->BSRR = LED_RED_Pin;

	HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <TIM1_CC_IRQHandler+0x14>)
 8004014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004018:	611a      	str	r2, [r3, #16]

	/* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800401a:	4803      	ldr	r0, [pc, #12]	; (8004028 <TIM1_CC_IRQHandler+0x18>)
 800401c:	f7fe f977 	bl	800230e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004020:	bd08      	pop	{r3, pc}
 8004022:	bf00      	nop
 8004024:	40010800 	.word	0x40010800
 8004028:	20000130 	.word	0x20000130

0800402c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800402c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800402e:	4802      	ldr	r0, [pc, #8]	; (8004038 <USART3_IRQHandler+0xc>)
 8004030:	f7fe fd18 	bl	8002a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004034:	bd08      	pop	{r3, pc}
 8004036:	bf00      	nop
 8004038:	200002b8 	.word	0x200002b8

0800403c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800403c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800403e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004042:	f7fd fc55 	bl	80018f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004046:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800404a:	f7fd fc51 	bl	80018f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800404e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004052:	f7fd fc4d 	bl	80018f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004056:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800405a:	f7fd fc49 	bl	80018f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800405e:	bd08      	pop	{r3, pc}

08004060 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <SystemInit+0x40>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <SystemInit+0x44>)
 800406e:	400a      	ands	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004078:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800407c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004084:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800408c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800408e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004092:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <SystemInit+0x48>)
 8004096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800409a:	609a      	str	r2, [r3, #8]
#endif 
}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	f8ff0000 	.word	0xf8ff0000
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80040ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80040ae:	e003      	b.n	80040b8 <LoopCopyDataInit>

080040b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80040b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80040b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80040b6:	3104      	adds	r1, #4

080040b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80040b8:	480a      	ldr	r0, [pc, #40]	; (80040e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80040bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80040be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80040c0:	d3f6      	bcc.n	80040b0 <CopyDataInit>
  ldr r2, =_sbss
 80040c2:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80040c4:	e002      	b.n	80040cc <LoopFillZerobss>

080040c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80040c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80040c8:	f842 3b04 	str.w	r3, [r2], #4

080040cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80040ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80040d0:	d3f9      	bcc.n	80040c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040d2:	f7ff ffc5 	bl	8004060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040d6:	f000 f80f 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040da:	f7ff fe63 	bl	8003da4 <main>
  bx lr
 80040de:	4770      	bx	lr
  ldr r3, =_sidata
 80040e0:	080041b8 	.word	0x080041b8
  ldr r0, =_sdata
 80040e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80040e8:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 80040ec:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 80040f0:	200002f8 	.word	0x200002f8

080040f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040f4:	e7fe      	b.n	80040f4 <CAN1_RX1_IRQHandler>
	...

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	2500      	movs	r5, #0
 80040fc:	4e0c      	ldr	r6, [pc, #48]	; (8004130 <__libc_init_array+0x38>)
 80040fe:	4c0d      	ldr	r4, [pc, #52]	; (8004134 <__libc_init_array+0x3c>)
 8004100:	1ba4      	subs	r4, r4, r6
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	42a5      	cmp	r5, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	f000 f822 	bl	8004150 <_init>
 800410c:	2500      	movs	r5, #0
 800410e:	4e0a      	ldr	r6, [pc, #40]	; (8004138 <__libc_init_array+0x40>)
 8004110:	4c0a      	ldr	r4, [pc, #40]	; (800413c <__libc_init_array+0x44>)
 8004112:	1ba4      	subs	r4, r4, r6
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	42a5      	cmp	r5, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004120:	4798      	blx	r3
 8004122:	3501      	adds	r5, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800412a:	4798      	blx	r3
 800412c:	3501      	adds	r5, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	080041b0 	.word	0x080041b0
 8004134:	080041b0 	.word	0x080041b0
 8004138:	080041b0 	.word	0x080041b0
 800413c:	080041b4 	.word	0x080041b4

08004140 <memset>:
 8004140:	4603      	mov	r3, r0
 8004142:	4402      	add	r2, r0
 8004144:	4293      	cmp	r3, r2
 8004146:	d100      	bne.n	800414a <memset+0xa>
 8004148:	4770      	bx	lr
 800414a:	f803 1b01 	strb.w	r1, [r3], #1
 800414e:	e7f9      	b.n	8004144 <memset+0x4>

08004150 <_init>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr

0800415c <_fini>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	bf00      	nop
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr
