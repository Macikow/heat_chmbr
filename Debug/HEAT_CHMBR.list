
HEAT_CHMBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800680c  0800680c  000207b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800680c  0800680c  000207b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800680c  0800680c  000207b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  08006818  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200007b8  08006fcc  000207b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000804  20000a94  08006fcc  00020a94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ca5  00000000  00000000  000207dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003069  00000000  00000000  00036482  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  000394f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  0003a568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001655d  00000000  00000000  0003b488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e095  00000000  00000000  000519e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ee8  00000000  00000000  0005fa7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c4  00000000  00000000  000d89e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200007b8 	.word	0x200007b8
 800012c:	00000000 	.word	0x00000000
 8000130:	080066e4 	.word	0x080066e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200007bc 	.word	0x200007bc
 800014c:	080066e4 	.word	0x080066e4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_fmul>:
 8000adc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aea:	ea92 0f0c 	teqne	r2, ip
 8000aee:	ea93 0f0c 	teqne	r3, ip
 8000af2:	d06f      	beq.n	8000bd4 <__aeabi_fmul+0xf8>
 8000af4:	441a      	add	r2, r3
 8000af6:	ea80 0c01 	eor.w	ip, r0, r1
 8000afa:	0240      	lsls	r0, r0, #9
 8000afc:	bf18      	it	ne
 8000afe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b02:	d01e      	beq.n	8000b42 <__aeabi_fmul+0x66>
 8000b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b10:	fba0 3101 	umull	r3, r1, r0, r1
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b1c:	bf3e      	ittt	cc
 8000b1e:	0049      	lslcc	r1, r1, #1
 8000b20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b24:	005b      	lslcc	r3, r3, #1
 8000b26:	ea40 0001 	orr.w	r0, r0, r1
 8000b2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b2e:	2afd      	cmp	r2, #253	; 0xfd
 8000b30:	d81d      	bhi.n	8000b6e <__aeabi_fmul+0x92>
 8000b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	4770      	bx	lr
 8000b42:	f090 0f00 	teq	r0, #0
 8000b46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b4a:	bf08      	it	eq
 8000b4c:	0249      	lsleq	r1, r1, #9
 8000b4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b56:	3a7f      	subs	r2, #127	; 0x7f
 8000b58:	bfc2      	ittt	gt
 8000b5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b62:	4770      	bxgt	lr
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	dc5d      	bgt.n	8000c2c <__aeabi_fmul+0x150>
 8000b70:	f112 0f19 	cmn.w	r2, #25
 8000b74:	bfdc      	itt	le
 8000b76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b7a:	4770      	bxle	lr
 8000b7c:	f1c2 0200 	rsb	r2, r2, #0
 8000b80:	0041      	lsls	r1, r0, #1
 8000b82:	fa21 f102 	lsr.w	r1, r1, r2
 8000b86:	f1c2 0220 	rsb	r2, r2, #32
 8000b8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b92:	f140 0000 	adc.w	r0, r0, #0
 8000b96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b9a:	bf08      	it	eq
 8000b9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba0:	4770      	bx	lr
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000baa:	bf02      	ittt	eq
 8000bac:	0040      	lsleq	r0, r0, #1
 8000bae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bb2:	3a01      	subeq	r2, #1
 8000bb4:	d0f9      	beq.n	8000baa <__aeabi_fmul+0xce>
 8000bb6:	ea40 000c 	orr.w	r0, r0, ip
 8000bba:	f093 0f00 	teq	r3, #0
 8000bbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc2:	bf02      	ittt	eq
 8000bc4:	0049      	lsleq	r1, r1, #1
 8000bc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bca:	3b01      	subeq	r3, #1
 8000bcc:	d0f9      	beq.n	8000bc2 <__aeabi_fmul+0xe6>
 8000bce:	ea41 010c 	orr.w	r1, r1, ip
 8000bd2:	e78f      	b.n	8000af4 <__aeabi_fmul+0x18>
 8000bd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd8:	ea92 0f0c 	teq	r2, ip
 8000bdc:	bf18      	it	ne
 8000bde:	ea93 0f0c 	teqne	r3, ip
 8000be2:	d00a      	beq.n	8000bfa <__aeabi_fmul+0x11e>
 8000be4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000be8:	bf18      	it	ne
 8000bea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bee:	d1d8      	bne.n	8000ba2 <__aeabi_fmul+0xc6>
 8000bf0:	ea80 0001 	eor.w	r0, r0, r1
 8000bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f090 0f00 	teq	r0, #0
 8000bfe:	bf17      	itett	ne
 8000c00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c04:	4608      	moveq	r0, r1
 8000c06:	f091 0f00 	teqne	r1, #0
 8000c0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c0e:	d014      	beq.n	8000c3a <__aeabi_fmul+0x15e>
 8000c10:	ea92 0f0c 	teq	r2, ip
 8000c14:	d101      	bne.n	8000c1a <__aeabi_fmul+0x13e>
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	d10f      	bne.n	8000c3a <__aeabi_fmul+0x15e>
 8000c1a:	ea93 0f0c 	teq	r3, ip
 8000c1e:	d103      	bne.n	8000c28 <__aeabi_fmul+0x14c>
 8000c20:	024b      	lsls	r3, r1, #9
 8000c22:	bf18      	it	ne
 8000c24:	4608      	movne	r0, r1
 8000c26:	d108      	bne.n	8000c3a <__aeabi_fmul+0x15e>
 8000c28:	ea80 0001 	eor.w	r0, r0, r1
 8000c2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fdiv>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d069      	beq.n	8000d30 <__aeabi_fdiv+0xec>
 8000c5c:	eba2 0203 	sub.w	r2, r2, r3
 8000c60:	ea80 0c01 	eor.w	ip, r0, r1
 8000c64:	0249      	lsls	r1, r1, #9
 8000c66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c6a:	d037      	beq.n	8000cdc <__aeabi_fdiv+0x98>
 8000c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	bf38      	it	cc
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	bf24      	itt	cs
 8000c8e:	1a5b      	subcs	r3, r3, r1
 8000c90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c98:	bf24      	itt	cs
 8000c9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ca2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ca6:	bf24      	itt	cs
 8000ca8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cb4:	bf24      	itt	cs
 8000cb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	bf18      	it	ne
 8000cc2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cc6:	d1e0      	bne.n	8000c8a <__aeabi_fdiv+0x46>
 8000cc8:	2afd      	cmp	r2, #253	; 0xfd
 8000cca:	f63f af50 	bhi.w	8000b6e <__aeabi_fmul+0x92>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd4:	bf08      	it	eq
 8000cd6:	f020 0001 	biceq.w	r0, r0, #1
 8000cda:	4770      	bx	lr
 8000cdc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ce0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ce4:	327f      	adds	r2, #127	; 0x7f
 8000ce6:	bfc2      	ittt	gt
 8000ce8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cf0:	4770      	bxgt	lr
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	e737      	b.n	8000b6e <__aeabi_fmul+0x92>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fdiv+0xc2>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fdiv+0xda>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e795      	b.n	8000c5c <__aeabi_fdiv+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	d108      	bne.n	8000d4c <__aeabi_fdiv+0x108>
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	f47f af7d 	bne.w	8000c3a <__aeabi_fmul+0x15e>
 8000d40:	ea93 0f0c 	teq	r3, ip
 8000d44:	f47f af70 	bne.w	8000c28 <__aeabi_fmul+0x14c>
 8000d48:	4608      	mov	r0, r1
 8000d4a:	e776      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d4c:	ea93 0f0c 	teq	r3, ip
 8000d50:	d104      	bne.n	8000d5c <__aeabi_fdiv+0x118>
 8000d52:	024b      	lsls	r3, r1, #9
 8000d54:	f43f af4c 	beq.w	8000bf0 <__aeabi_fmul+0x114>
 8000d58:	4608      	mov	r0, r1
 8000d5a:	e76e      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d60:	bf18      	it	ne
 8000d62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	d1ca      	bne.n	8000cfe <__aeabi_fdiv+0xba>
 8000d68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d6c:	f47f af5c 	bne.w	8000c28 <__aeabi_fmul+0x14c>
 8000d70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d74:	f47f af3c 	bne.w	8000bf0 <__aeabi_fmul+0x114>
 8000d78:	e75f      	b.n	8000c3a <__aeabi_fmul+0x15e>
 8000d7a:	bf00      	nop

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x28>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x28>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 fe51 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f005 f9de 	bl	8006158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fe69 	bl	8001a9e <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 fe31 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000384 	.word	0x20000384
 8000e00:	20000004 	.word	0x20000004
 8000e04:	20000000 	.word	0x20000000

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x20>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <HAL_IncTick+0x20>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	20000004 	.word	0x20000004
 8000e28:	200007dc 	.word	0x200007dc

08000e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	200007dc 	.word	0x200007dc

08000e40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e0be      	b.n	8000fe0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d109      	bne.n	8000e84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f005 f99c 	bl	80061bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 fbc3 	bl	8001610 <ADC_ConversionStop_Disable>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 8099 	bne.w	8000fce <HAL_ADC_Init+0x18e>
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 8095 	bne.w	8000fce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eac:	f023 0302 	bic.w	r3, r3, #2
 8000eb0:	f043 0202 	orr.w	r2, r3, #2
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ec0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7b1b      	ldrb	r3, [r3, #12]
 8000ec6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ec8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed8:	d003      	beq.n	8000ee2 <HAL_ADC_Init+0xa2>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d102      	bne.n	8000ee8 <HAL_ADC_Init+0xa8>
 8000ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee6:	e000      	b.n	8000eea <HAL_ADC_Init+0xaa>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7d1b      	ldrb	r3, [r3, #20]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d119      	bne.n	8000f2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7b1b      	ldrb	r3, [r3, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d109      	bne.n	8000f14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	035a      	lsls	r2, r3, #13
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e00b      	b.n	8000f2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	f043 0220 	orr.w	r2, r3, #32
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_ADC_Init+0x1a8>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f5c:	d003      	beq.n	8000f66 <HAL_ADC_Init+0x126>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d104      	bne.n	8000f70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	051b      	lsls	r3, r3, #20
 8000f6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_ADC_Init+0x1ac>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d10b      	bne.n	8000fac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000faa:	e018      	b.n	8000fde <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f023 0312 	bic.w	r3, r3, #18
 8000fb4:	f043 0210 	orr.w	r2, r3, #16
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fcc:	e007      	b.n	8000fde <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f043 0210 	orr.w	r2, r3, #16
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	ffe1f7fd 	.word	0xffe1f7fd
 8000fec:	ff1f0efe 	.word	0xff1f0efe

08000ff0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a64      	ldr	r2, [pc, #400]	; (8001198 <HAL_ADC_Start_DMA+0x1a8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d004      	beq.n	8001014 <HAL_ADC_Start_DMA+0x24>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a63      	ldr	r2, [pc, #396]	; (800119c <HAL_ADC_Start_DMA+0x1ac>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d106      	bne.n	8001022 <HAL_ADC_Start_DMA+0x32>
 8001014:	4b60      	ldr	r3, [pc, #384]	; (8001198 <HAL_ADC_Start_DMA+0x1a8>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f040 80b3 	bne.w	8001188 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_ADC_Start_DMA+0x40>
 800102c:	2302      	movs	r3, #2
 800102e:	e0ae      	b.n	800118e <HAL_ADC_Start_DMA+0x19e>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 fa97 	bl	800156c <ADC_Enable>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b00      	cmp	r3, #0
 8001046:	f040 809a 	bne.w	800117e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a4e      	ldr	r2, [pc, #312]	; (800119c <HAL_ADC_Start_DMA+0x1ac>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d105      	bne.n	8001074 <HAL_ADC_Start_DMA+0x84>
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <HAL_ADC_Start_DMA+0x1a8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d115      	bne.n	80010a0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108a:	2b00      	cmp	r3, #0
 800108c:	d026      	beq.n	80010dc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001096:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109e:	e01d      	b.n	80010dc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a39      	ldr	r2, [pc, #228]	; (8001198 <HAL_ADC_Start_DMA+0x1a8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d004      	beq.n	80010c0 <HAL_ADC_Start_DMA+0xd0>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a38      	ldr	r2, [pc, #224]	; (800119c <HAL_ADC_Start_DMA+0x1ac>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d10d      	bne.n	80010dc <HAL_ADC_Start_DMA+0xec>
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <HAL_ADC_Start_DMA+0x1a8>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	f023 0206 	bic.w	r2, r3, #6
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <HAL_ADC_Start_DMA+0x1b0>)
 800110a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_ADC_Start_DMA+0x1b4>)
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <HAL_ADC_Start_DMA+0x1b8>)
 800111a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f06f 0202 	mvn.w	r2, #2
 8001124:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001134:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a18      	ldr	r0, [r3, #32]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	334c      	adds	r3, #76	; 0x4c
 8001140:	4619      	mov	r1, r3
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f000 fd11 	bl	8001b6c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001154:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001158:	d108      	bne.n	800116c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001168:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800116a:	e00f      	b.n	800118c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800117a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800117c:	e006      	b.n	800118c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001186:	e001      	b.n	800118c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800118c:	7dfb      	ldrb	r3, [r7, #23]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40012400 	.word	0x40012400
 800119c:	40012800 	.word	0x40012800
 80011a0:	08001685 	.word	0x08001685
 80011a4:	08001701 	.word	0x08001701
 80011a8:	0800171d 	.word	0x0800171d

080011ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	2b20      	cmp	r3, #32
 80011c0:	d140      	bne.n	8001244 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d139      	bne.n	8001244 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011f6:	d11d      	bne.n	8001234 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d119      	bne.n	8001234 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0220 	bic.w	r2, r2, #32
 800120e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f87c 	bl	8001332 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f06f 0212 	mvn.w	r2, #18
 8001242:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	2b80      	cmp	r3, #128	; 0x80
 8001250:	d14f      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b04      	cmp	r3, #4
 800125e:	d148      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	d105      	bne.n	8001278 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001282:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001286:	d012      	beq.n	80012ae <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001292:	2b00      	cmp	r3, #0
 8001294:	d125      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012a4:	d11d      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d119      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fad0 	bl	8001888 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f06f 020c 	mvn.w	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fc:	2b40      	cmp	r3, #64	; 0x40
 80012fe:	d114      	bne.n	800132a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10d      	bne.n	800132a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f81b 	bl	8001356 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f06f 0201 	mvn.w	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
	...

0800137c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x20>
 8001398:	2302      	movs	r3, #2
 800139a:	e0dc      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1da>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d81c      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b05      	subs	r3, #5
 80013be:	221f      	movs	r2, #31
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4019      	ands	r1, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b05      	subs	r3, #5
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
 80013e4:	e03c      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d81c      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	; 0x23
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4019      	ands	r1, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b23      	subs	r3, #35	; 0x23
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	631a      	str	r2, [r3, #48]	; 0x30
 8001426:	e01b      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b41      	subs	r3, #65	; 0x41
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b41      	subs	r3, #65	; 0x41
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d91c      	bls.n	80014a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	3b1e      	subs	r3, #30
 800147a:	2207      	movs	r2, #7
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	4019      	ands	r1, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6898      	ldr	r0, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	3b1e      	subs	r3, #30
 8001494:	fa00 f203 	lsl.w	r2, r0, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	e019      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4019      	ands	r1, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d003      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d132      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_ADC_ConfigChannel+0x1e4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d125      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d126      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800150c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d11a      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_ADC_ConfigChannel+0x1e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_ADC_ConfigChannel+0x1ec>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9a      	lsrs	r2, r3, #18
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152c:	e002      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_ConfigChannel+0x1b2>
 800153a:	e007      	b.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40012400 	.word	0x40012400
 8001564:	20000384 	.word	0x20000384
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d039      	beq.n	80015fe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <ADC_Enable+0x9c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <ADC_Enable+0xa0>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a8:	e002      	b.n	80015b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015b6:	f7ff fc39 	bl	8000e2c <HAL_GetTick>
 80015ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015bc:	e018      	b.n	80015f0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015be:	f7ff fc35 	bl	8000e2c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d911      	bls.n	80015f0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f043 0210 	orr.w	r2, r3, #16
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e007      	b.n	8001600 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d1df      	bne.n	80015be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000384 	.word	0x20000384
 800160c:	431bde83 	.word	0x431bde83

08001610 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d127      	bne.n	800167a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800163a:	f7ff fbf7 	bl	8000e2c <HAL_GetTick>
 800163e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001640:	e014      	b.n	800166c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001642:	f7ff fbf3 	bl	8000e2c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d90d      	bls.n	800166c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f043 0210 	orr.w	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e007      	b.n	800167c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d0e3      	beq.n	8001642 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800169a:	2b00      	cmp	r3, #0
 800169c:	d127      	bne.n	80016ee <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016b8:	d115      	bne.n	80016e6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d111      	bne.n	80016e6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff fe23 	bl	8001332 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016ec:	e004      	b.n	80016f8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff fe18 	bl	8001344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f043 0204 	orr.w	r2, r3, #4
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff fe10 	bl	8001368 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADCEx_Calibration_Start+0x1e>
 800176a:	2302      	movs	r3, #2
 800176c:	e086      	b.n	800187c <HAL_ADCEx_Calibration_Start+0x12c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff4a 	bl	8001610 <ADC_ConversionStop_Disable>
 800177c:	4603      	mov	r3, r0
 800177e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d175      	bne.n	8001872 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178e:	f023 0302 	bic.w	r3, r3, #2
 8001792:	f043 0202 	orr.w	r2, r3, #2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800179a:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <HAL_ADCEx_Calibration_Start+0x134>)
 800179c:	681c      	ldr	r4, [r3, #0]
 800179e:	2002      	movs	r0, #2
 80017a0:	f001 f94e 	bl	8002a40 <HAL_RCCEx_GetPeriphCLKFreq>
 80017a4:	4603      	mov	r3, r0
 80017a6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80017aa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80017ac:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80017ae:	e002      	b.n	80017b6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f9      	bne.n	80017b0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fed5 	bl	800156c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0208 	orr.w	r2, r2, #8
 80017d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80017d2:	f7ff fb2b 	bl	8000e2c <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017d8:	e014      	b.n	8001804 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017da:	f7ff fb27 	bl	8000e2c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b0a      	cmp	r3, #10
 80017e6:	d90d      	bls.n	8001804 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f023 0312 	bic.w	r3, r3, #18
 80017f0:	f043 0210 	orr.w	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e03b      	b.n	800187c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1e3      	bne.n	80017da <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0204 	orr.w	r2, r2, #4
 8001820:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001822:	f7ff fb03 	bl	8000e2c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001828:	e014      	b.n	8001854 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800182a:	f7ff faff 	bl	8000e2c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b0a      	cmp	r3, #10
 8001836:	d90d      	bls.n	8001854 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f023 0312 	bic.w	r3, r3, #18
 8001840:	f043 0210 	orr.w	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e013      	b.n	800187c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1e3      	bne.n	800182a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
}
 800187c:	4618      	mov	r0, r3
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}
 8001884:	20000384 	.word	0x20000384

08001888 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
	...

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4906      	ldr	r1, [pc, #24]	; (8001934 <__NVIC_EnableIRQ+0x34>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff90 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff2d 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff42 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff90 	bl	800198c <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5f 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff35 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e043      	b.n	8001b56 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_DMA_Init+0xa8>)
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <HAL_DMA_Init+0xac>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	009a      	lsls	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <HAL_DMA_Init+0xb0>)
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	bffdfff8 	.word	0xbffdfff8
 8001b64:	cccccccd 	.word	0xcccccccd
 8001b68:	40020000 	.word	0x40020000

08001b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_DMA_Start_IT+0x20>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e04a      	b.n	8001c22 <HAL_DMA_Start_IT+0xb6>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d13a      	bne.n	8001c14 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f8a8 	bl	8001d18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 020e 	orr.w	r2, r2, #14
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e00f      	b.n	8001c02 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0204 	bic.w	r2, r2, #4
 8001bf0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 020a 	orr.w	r2, r2, #10
 8001c00:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e005      	b.n	8001c20 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d005      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e051      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 020e 	bic.w	r2, r2, #14
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <HAL_DMA_Abort_IT+0xd0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d029      	beq.n	8001ccc <HAL_DMA_Abort_IT+0xa0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <HAL_DMA_Abort_IT+0xd4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d022      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x9c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_DMA_Abort_IT+0xd8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d01a      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x96>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_DMA_Abort_IT+0xdc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d012      	beq.n	8001cbc <HAL_DMA_Abort_IT+0x90>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_DMA_Abort_IT+0xe0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x8a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_DMA_Abort_IT+0xe4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d102      	bne.n	8001cb0 <HAL_DMA_Abort_IT+0x84>
 8001caa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cae:	e00e      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb4:	e00b      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cba:	e008      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	e005      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	e002      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cc8:	2310      	movs	r3, #16
 8001cca:	e000      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_DMA_Abort_IT+0xe8>)
 8001cd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    } 
  }
  return status;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020008 	.word	0x40020008
 8001d00:	4002001c 	.word	0x4002001c
 8001d04:	40020030 	.word	0x40020030
 8001d08:	40020044 	.word	0x40020044
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	4002006c 	.word	0x4002006c
 8001d14:	40020000 	.word	0x40020000

08001d18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d108      	bne.n	8001d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d56:	e007      	b.n	8001d68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b08b      	sub	sp, #44	; 0x2c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	e127      	b.n	8001fd8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8116 	bne.w	8001fd2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d034      	beq.n	8001e18 <HAL_GPIO_Init+0xa4>
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d80d      	bhi.n	8001dce <HAL_GPIO_Init+0x5a>
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d02b      	beq.n	8001e0e <HAL_GPIO_Init+0x9a>
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d804      	bhi.n	8001dc4 <HAL_GPIO_Init+0x50>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d031      	beq.n	8001e22 <HAL_GPIO_Init+0xae>
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d01c      	beq.n	8001dfc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dc2:	e048      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d043      	beq.n	8001e50 <HAL_GPIO_Init+0xdc>
 8001dc8:	2b11      	cmp	r3, #17
 8001dca:	d01b      	beq.n	8001e04 <HAL_GPIO_Init+0x90>
          break;
 8001dcc:	e043      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dce:	4a89      	ldr	r2, [pc, #548]	; (8001ff4 <HAL_GPIO_Init+0x280>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d026      	beq.n	8001e22 <HAL_GPIO_Init+0xae>
 8001dd4:	4a87      	ldr	r2, [pc, #540]	; (8001ff4 <HAL_GPIO_Init+0x280>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d806      	bhi.n	8001de8 <HAL_GPIO_Init+0x74>
 8001dda:	4a87      	ldr	r2, [pc, #540]	; (8001ff8 <HAL_GPIO_Init+0x284>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d020      	beq.n	8001e22 <HAL_GPIO_Init+0xae>
 8001de0:	4a86      	ldr	r2, [pc, #536]	; (8001ffc <HAL_GPIO_Init+0x288>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01d      	beq.n	8001e22 <HAL_GPIO_Init+0xae>
          break;
 8001de6:	e036      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001de8:	4a85      	ldr	r2, [pc, #532]	; (8002000 <HAL_GPIO_Init+0x28c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0xae>
 8001dee:	4a85      	ldr	r2, [pc, #532]	; (8002004 <HAL_GPIO_Init+0x290>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d016      	beq.n	8001e22 <HAL_GPIO_Init+0xae>
 8001df4:	4a84      	ldr	r2, [pc, #528]	; (8002008 <HAL_GPIO_Init+0x294>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0xae>
          break;
 8001dfa:	e02c      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e028      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e023      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	3308      	adds	r3, #8
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e01e      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	330c      	adds	r3, #12
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e019      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e012      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	611a      	str	r2, [r3, #16]
          break;
 8001e42:	e008      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	615a      	str	r2, [r3, #20]
          break;
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2bff      	cmp	r3, #255	; 0xff
 8001e5a:	d801      	bhi.n	8001e60 <HAL_GPIO_Init+0xec>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	e001      	b.n	8001e64 <HAL_GPIO_Init+0xf0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2bff      	cmp	r3, #255	; 0xff
 8001e6a:	d802      	bhi.n	8001e72 <HAL_GPIO_Init+0xfe>
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_Init+0x104>
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	3b08      	subs	r3, #8
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	210f      	movs	r1, #15
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	6a39      	ldr	r1, [r7, #32]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	431a      	orrs	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8096 	beq.w	8001fd2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea6:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_GPIO_Init+0x298>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_GPIO_Init+0x298>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_GPIO_Init+0x298>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ebe:	4a54      	ldr	r2, [pc, #336]	; (8002010 <HAL_GPIO_Init+0x29c>)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_GPIO_Init+0x2a0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x19e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4a      	ldr	r2, [pc, #296]	; (8002018 <HAL_GPIO_Init+0x2a4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x19a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_GPIO_Init+0x2a8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x196>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2ac>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x192>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x1a0>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e004      	b.n	8001f14 <HAL_GPIO_Init+0x1a0>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_Init+0x1a0>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x1a0>
 8001f12:	2300      	movs	r3, #0
 8001f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f16:	f002 0203 	and.w	r2, r2, #3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f24:	493a      	ldr	r1, [pc, #232]	; (8002010 <HAL_GPIO_Init+0x29c>)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4938      	ldr	r1, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
 8001f4a:	e006      	b.n	8001f5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4933      	ldr	r1, [pc, #204]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	492e      	ldr	r1, [pc, #184]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	4929      	ldr	r1, [pc, #164]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	4924      	ldr	r1, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	491f      	ldr	r1, [pc, #124]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	491a      	ldr	r1, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60cb      	str	r3, [r1, #12]
 8001fc2:	e006      	b.n	8001fd2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4915      	ldr	r1, [pc, #84]	; (8002024 <HAL_GPIO_Init+0x2b0>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f47f aed0 	bne.w	8001d88 <HAL_GPIO_Init+0x14>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	372c      	adds	r7, #44	; 0x2c
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	10210000 	.word	0x10210000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	10120000 	.word	0x10120000
 8002000:	10310000 	.word	0x10310000
 8002004:	10320000 	.word	0x10320000
 8002008:	10220000 	.word	0x10220000
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	40010800 	.word	0x40010800
 8002018:	40010c00 	.word	0x40010c00
 800201c:	40011000 	.word	0x40011000
 8002020:	40011400 	.word	0x40011400
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f806 	bl	8002088 <HAL_GPIO_EXTI_Callback>
  }
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40010400 	.word	0x40010400

08002088 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e26c      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8087 	beq.w	80021ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020bc:	4b92      	ldr	r3, [pc, #584]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d00c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c8:	4b8f      	ldr	r3, [pc, #572]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d112      	bne.n	80020fa <HAL_RCC_OscConfig+0x5e>
 80020d4:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d10b      	bne.n	80020fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e2:	4b89      	ldr	r3, [pc, #548]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d06c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x12c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d168      	bne.n	80021c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e246      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x76>
 8002104:	4b80      	ldr	r3, [pc, #512]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a7f      	ldr	r2, [pc, #508]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e02e      	b.n	8002170 <HAL_RCC_OscConfig+0xd4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x98>
 800211a:	4b7b      	ldr	r3, [pc, #492]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a7a      	ldr	r2, [pc, #488]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b78      	ldr	r3, [pc, #480]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a77      	ldr	r2, [pc, #476]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e01d      	b.n	8002170 <HAL_RCC_OscConfig+0xd4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0xbc>
 800213e:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a71      	ldr	r2, [pc, #452]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6e      	ldr	r2, [pc, #440]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0xd4>
 8002158:	4b6b      	ldr	r3, [pc, #428]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a6a      	ldr	r2, [pc, #424]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a67      	ldr	r2, [pc, #412]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe fe58 	bl	8000e2c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe fe54 	bl	8000e2c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e1fa      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0xe4>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe44 	bl	8000e2c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fe40 	bl	8000e2c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1e6      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x10c>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d063      	beq.n	800229e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d6:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e2:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d11c      	bne.n	8002228 <HAL_RCC_OscConfig+0x18c>
 80021ee:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d116      	bne.n	8002228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_RCC_OscConfig+0x176>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1ba      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4939      	ldr	r1, [pc, #228]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	e03a      	b.n	800229e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_RCC_OscConfig+0x270>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fdf9 	bl	8000e2c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223e:	f7fe fdf5 	bl	8000e2c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e19b      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4927      	ldr	r1, [pc, #156]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_RCC_OscConfig+0x270>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fdd8 	bl	8000e2c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002280:	f7fe fdd4 	bl	8000e2c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e17a      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d03a      	beq.n	8002320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d019      	beq.n	80022e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7fe fdb8 	bl	8000e2c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7fe fdb4 	bl	8000e2c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e15a      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f000 fada 	bl	8002898 <RCC_Delay>
 80022e4:	e01c      	b.n	8002320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7fe fd9e 	bl	8000e2c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f2:	e00f      	b.n	8002314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7fe fd9a 	bl	8000e2c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d908      	bls.n	8002314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e140      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	42420000 	.word	0x42420000
 8002310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e9      	bne.n	80022f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a6 	beq.w	800247a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002332:	4b97      	ldr	r3, [pc, #604]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b94      	ldr	r3, [pc, #592]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a93      	ldr	r2, [pc, #588]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]
 800234a:	4b91      	ldr	r3, [pc, #580]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b8e      	ldr	r3, [pc, #568]	; (8002594 <HAL_RCC_OscConfig+0x4f8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x4f8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a8a      	ldr	r2, [pc, #552]	; (8002594 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7fe fd5b 	bl	8000e2c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe fd57 	bl	8000e2c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0fd      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x4f8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x312>
 80023a0:	4b7b      	ldr	r3, [pc, #492]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a7a      	ldr	r2, [pc, #488]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e02d      	b.n	800240a <HAL_RCC_OscConfig+0x36e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x334>
 80023b6:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a75      	ldr	r2, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a72      	ldr	r2, [pc, #456]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	e01c      	b.n	800240a <HAL_RCC_OscConfig+0x36e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x356>
 80023d8:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a69      	ldr	r2, [pc, #420]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0x36e>
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a66      	ldr	r2, [pc, #408]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a63      	ldr	r2, [pc, #396]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7fe fd0b 	bl	8000e2c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fd07 	bl	8000e2c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0ab      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	4b57      	ldr	r3, [pc, #348]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ee      	beq.n	800241a <HAL_RCC_OscConfig+0x37e>
 800243c:	e014      	b.n	8002468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe fcf5 	bl	8000e2c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7fe fcf1 	bl	8000e2c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e095      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ee      	bne.n	8002446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a47      	ldr	r2, [pc, #284]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8081 	beq.w	8002586 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d061      	beq.n	8002554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d146      	bne.n	8002526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x4fc>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fcc5 	bl	8000e2c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7fe fcc1 	bl	8000e2c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e067      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d108      	bne.n	80024e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ce:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	492d      	ldr	r1, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a19      	ldr	r1, [r3, #32]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	430b      	orrs	r3, r1
 80024f2:	4927      	ldr	r1, [pc, #156]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x4fc>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe fc95 	bl	8000e2c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe fc91 	bl	8000e2c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e037      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x46a>
 8002524:	e02f      	b.n	8002586 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <HAL_RCC_OscConfig+0x4fc>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe fc7e 	bl	8000e2c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fc7a 	bl	8000e2c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e020      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x498>
 8002552:	e018      	b.n	8002586 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e013      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	42420060 	.word	0x42420060

0800259c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0d0      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b6a      	ldr	r3, [pc, #424]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d910      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b67      	ldr	r3, [pc, #412]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	4965      	ldr	r1, [pc, #404]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b8      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002602:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800261a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	494d      	ldr	r1, [pc, #308]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d040      	beq.n	80026bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d115      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e073      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e06b      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4936      	ldr	r1, [pc, #216]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7fe fbce 	bl	8000e2c <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7fe fbca 	bl	8000e2c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e053      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d210      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4922      	ldr	r1, [pc, #136]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e032      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4916      	ldr	r1, [pc, #88]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	490e      	ldr	r1, [pc, #56]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800272a:	f000 f821 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800272e:	4601      	mov	r1, r0
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	fa21 f303 	lsr.w	r3, r1, r3
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1cc>)
 8002744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fb2c 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40022000 	.word	0x40022000
 8002760:	40021000 	.word	0x40021000
 8002764:	080067f0 	.word	0x080067f0
 8002768:	20000384 	.word	0x20000384
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	b490      	push	{r4, r7}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002776:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002778:	1d3c      	adds	r4, r7, #4
 800277a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800277c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800279a:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d002      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x40>
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x46>
 80027ae:	e02d      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b2:	623b      	str	r3, [r7, #32]
      break;
 80027b4:	e02d      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	0c9b      	lsrs	r3, r3, #18
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027c2:	4413      	add	r3, r2
 80027c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	0c5b      	lsrs	r3, r3, #17
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e2:	4413      	add	r3, r2
 80027e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ee:	fb02 f203 	mul.w	r2, r2, r3
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	e004      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	623b      	str	r3, [r7, #32]
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCC_GetSysClockFreq+0xbc>)
 800280e:	623b      	str	r3, [r7, #32]
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	6a3b      	ldr	r3, [r7, #32]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3728      	adds	r7, #40	; 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc90      	pop	{r4, r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	080066fc 	.word	0x080066fc
 8002824:	0800670c 	.word	0x0800670c
 8002828:	40021000 	.word	0x40021000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	003d0900 	.word	0x003d0900

08002834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b02      	ldr	r3, [pc, #8]	; (8002844 <HAL_RCC_GetHCLKFreq+0x10>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	20000384 	.word	0x20000384

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff2 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002850:	4601      	mov	r1, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4a03      	ldr	r2, [pc, #12]	; (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	08006800 	.word	0x08006800

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002874:	f7ff ffde 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002878:	4601      	mov	r1, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	0adb      	lsrs	r3, r3, #11
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4a03      	ldr	r2, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	fa21 f303 	lsr.w	r3, r1, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	08006800 	.word	0x08006800

08002898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCC_Delay+0x34>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <RCC_Delay+0x38>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a5b      	lsrs	r3, r3, #9
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b4:	bf00      	nop
  }
  while (Delay --);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <RCC_Delay+0x1c>
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000384 	.word	0x20000384
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d07d      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f4:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	4a4b      	ldr	r2, [pc, #300]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	61d3      	str	r3, [r2, #28]
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002918:	2301      	movs	r3, #1
 800291a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d118      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002934:	f7fe fa7a 	bl	8000e2c <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	e008      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe fa76 	bl	8000e2c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e06d      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800295a:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002962:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d02e      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d027      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002978:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002988:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800298e:	4a29      	ldr	r2, [pc, #164]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d014      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe fa45 	bl	8000e2c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fa41 	bl	8000e2c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e036      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ee      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4917      	ldr	r1, [pc, #92]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	490b      	ldr	r1, [pc, #44]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	42420440 	.word	0x42420440

08002a40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b08d      	sub	sp, #52	; 0x34
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a48:	4b55      	ldr	r3, [pc, #340]	; (8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a4a:	f107 040c 	add.w	r4, r7, #12
 8002a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d07f      	beq.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d002      	beq.n	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d048      	beq.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a7c:	e08b      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a84:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d07f      	beq.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	0c9b      	lsrs	r3, r3, #18
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aa2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d018      	beq.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	0c5b      	lsrs	r3, r3, #17
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002abc:	4413      	add	r3, r2
 8002abe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00d      	beq.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ace:	4a37      	ldr	r2, [pc, #220]	; (8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ade:	e004      	b.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af6:	d102      	bne.n	8002afe <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002afc:	e048      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b0c:	e040      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1e:	d108      	bne.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b30:	e01f      	b.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002b4a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b50:	e00f      	b.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b5c:	d11a      	bne.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d014      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002b6a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b70:	e010      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b72:	e00f      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b74:	f7ff fe7c 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0b9b      	lsrs	r3, r3, #14
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	3301      	adds	r3, #1
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002b94:	bf00      	nop
    }
  }
  return (frequency);
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3734      	adds	r7, #52	; 0x34
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd90      	pop	{r4, r7, pc}
 8002ba0:	08006710 	.word	0x08006710
 8002ba4:	08006720 	.word	0x08006720
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	007a1200 	.word	0x007a1200
 8002bb0:	003d0900 	.word	0x003d0900
 8002bb4:	aaaaaaab 	.word	0xaaaaaaab

08002bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e01d      	b.n	8002c06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f003 fb30 	bl	8006244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 faf2 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d007      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e01d      	b.n	8002ca2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f815 	bl	8002caa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 faa4 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e02d      	b.n	8002d2c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f825 	bl	8002d34 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f000 fa6f 	bl	80031e0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d122      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d11b      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0202 	mvn.w	r2, #2
 8002d72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa0e 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002d8e:	e005      	b.n	8002d9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa01 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa10 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d122      	bne.n	8002df6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d11b      	bne.n	8002df6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0204 	mvn.w	r2, #4
 8002dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f9e4 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002de2:	e005      	b.n	8002df0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f9d7 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9e6 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d122      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d11b      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0208 	mvn.w	r2, #8
 8002e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f9ba 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002e36:	e005      	b.n	8002e44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f9ad 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9bc 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d122      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d11b      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0210 	mvn.w	r2, #16
 8002e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2208      	movs	r2, #8
 8002e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f990 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e005      	b.n	8002e98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f983 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f992 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10e      	bne.n	8002eca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0201 	mvn.w	r2, #1
 8002ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f95e 	bl	8003186 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b80      	cmp	r3, #128	; 0x80
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d107      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fc93 	bl	800381c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d10e      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d107      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f956 	bl	80031ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d10e      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d107      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0220 	mvn.w	r2, #32
 8002f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fc5e 	bl	800380a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e04e      	b.n	8003010 <HAL_TIM_OC_ConfigChannel+0xb8>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d839      	bhi.n	8002ffc <HAL_TIM_OC_ConfigChannel+0xa4>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_TIM_OC_ConfigChannel+0x38>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	08002ffd 	.word	0x08002ffd
 8002f98:	08002ffd 	.word	0x08002ffd
 8002f9c:	08002ffd 	.word	0x08002ffd
 8002fa0:	08002fd3 	.word	0x08002fd3
 8002fa4:	08002ffd 	.word	0x08002ffd
 8002fa8:	08002ffd 	.word	0x08002ffd
 8002fac:	08002ffd 	.word	0x08002ffd
 8002fb0:	08002fe1 	.word	0x08002fe1
 8002fb4:	08002ffd 	.word	0x08002ffd
 8002fb8:	08002ffd 	.word	0x08002ffd
 8002fbc:	08002ffd 	.word	0x08002ffd
 8002fc0:	08002fef 	.word	0x08002fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f96a 	bl	80032a4 <TIM_OC1_SetConfig>
      break;
 8002fd0:	e015      	b.n	8002ffe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f9c9 	bl	8003370 <TIM_OC2_SetConfig>
      break;
 8002fde:	e00e      	b.n	8002ffe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fa2c 	bl	8003444 <TIM_OC3_SetConfig>
      break;
 8002fec:	e007      	b.n	8002ffe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fa8f 	bl	8003518 <TIM_OC4_SetConfig>
      break;
 8002ffa:	e000      	b.n	8002ffe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002ffc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIM_ConfigClockSource+0x18>
 800302c:	2302      	movs	r3, #2
 800302e:	e0a6      	b.n	800317e <HAL_TIM_ConfigClockSource+0x166>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800304e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d067      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0x120>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d80b      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x6c>
 800306c:	2b10      	cmp	r3, #16
 800306e:	d073      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d802      	bhi.n	800307a <HAL_TIM_ConfigClockSource+0x62>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d06f      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003078:	e078      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800307a:	2b20      	cmp	r3, #32
 800307c:	d06c      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
 800307e:	2b30      	cmp	r3, #48	; 0x30
 8003080:	d06a      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003082:	e073      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003084:	2b70      	cmp	r3, #112	; 0x70
 8003086:	d00d      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0x8c>
 8003088:	2b70      	cmp	r3, #112	; 0x70
 800308a:	d804      	bhi.n	8003096 <HAL_TIM_ConfigClockSource+0x7e>
 800308c:	2b50      	cmp	r3, #80	; 0x50
 800308e:	d033      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xe0>
 8003090:	2b60      	cmp	r3, #96	; 0x60
 8003092:	d041      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003094:	e06a      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d066      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x152>
 800309c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a0:	d017      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030a2:	e063      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f000 faf5 	bl	80036a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]
      break;
 80030d0:	e04c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f000 fade 	bl	80036a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f4:	609a      	str	r2, [r3, #8]
      break;
 80030f6:	e039      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	461a      	mov	r2, r3
 8003106:	f000 fa55 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2150      	movs	r1, #80	; 0x50
 8003110:	4618      	mov	r0, r3
 8003112:	f000 faac 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003116:	e029      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	f000 fa73 	bl	8003610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2160      	movs	r1, #96	; 0x60
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fa9c 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003136:	e019      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	461a      	mov	r2, r3
 8003146:	f000 fa35 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2140      	movs	r1, #64	; 0x40
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fa8c 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003156:	e009      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 fa83 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003168:	e000      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800316a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a29      	ldr	r2, [pc, #164]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a26      	ldr	r2, [pc, #152]	; (800329c <TIM_Base_SetConfig+0xbc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <TIM_Base_SetConfig+0xc0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a19      	ldr	r2, [pc, #100]	; (800329c <TIM_Base_SetConfig+0xbc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <TIM_Base_SetConfig+0xc0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	615a      	str	r2, [r3, #20]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800

080032a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0201 	bic.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 0302 	bic.w	r3, r3, #2
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <TIM_OC1_SetConfig+0xc8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10c      	bne.n	800331a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0308 	bic.w	r3, r3, #8
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <TIM_OC1_SetConfig+0xc8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40012c00 	.word	0x40012c00

08003370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0210 	bic.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0320 	bic.w	r3, r3, #32
 80033ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <TIM_OC2_SetConfig+0xd0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10d      	bne.n	80033ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <TIM_OC2_SetConfig+0xd0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d113      	bne.n	800341c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00

08003444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800348c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <TIM_OC3_SetConfig+0xd0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10d      	bne.n	80034be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a14      	ldr	r2, [pc, #80]	; (8003514 <TIM_OC3_SetConfig+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d113      	bne.n	80034ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	621a      	str	r2, [r3, #32]
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00

08003518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0f      	ldr	r2, [pc, #60]	; (80035b0 <TIM_OC4_SetConfig+0x98>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d109      	bne.n	800358c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00

080035b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 030a 	bic.w	r3, r3, #10
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 0210 	bic.w	r2, r3, #16
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800363a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	031b      	lsls	r3, r3, #12
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800364c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	f043 0307 	orr.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b087      	sub	sp, #28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	609a      	str	r2, [r3, #8]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e032      	b.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003730:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003780:	2302      	movs	r3, #2
 8003782:	e03d      	b.n	8003800 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e03f      	b.n	80038c0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f002 fd23 	bl	80062a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	; 0x24
 800385e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa5e 	bl	8003d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003886:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003896:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_UART_IRQHandler+0x52>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f98d 	bl	8003c32 <UART_Receive_IT>
      return;
 8003918:	e0cc      	b.n	8003ab4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80ab 	beq.w	8003a78 <HAL_UART_IRQHandler+0x1b0>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <HAL_UART_IRQHandler+0x70>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80a0 	beq.w	8003a78 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_UART_IRQHandler+0x90>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_UART_IRQHandler+0xb0>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_UART_IRQHandler+0xd0>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_UART_IRQHandler+0xf0>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	f043 0208 	orr.w	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d078      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_UART_IRQHandler+0x112>
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f92c 	bl	8003c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <HAL_UART_IRQHandler+0x13a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d031      	beq.n	8003a66 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f877 	bl	8003af6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d023      	beq.n	8003a5e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d013      	beq.n	8003a56 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	4a22      	ldr	r2, [pc, #136]	; (8003abc <HAL_UART_IRQHandler+0x1f4>)
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe f8f6 	bl	8001c2c <HAL_DMA_Abort_IT>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a50:	4610      	mov	r0, r2
 8003a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	e00e      	b.n	8003a74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f844 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	e00a      	b.n	8003a74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f840 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e006      	b.n	8003a74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f83c 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a72:	e01e      	b.n	8003ab2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	bf00      	nop
    return;
 8003a76:	e01c      	b.n	8003ab2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_UART_IRQHandler+0x1cc>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f863 	bl	8003b58 <UART_Transmit_IT>
    return;
 8003a92:	e00f      	b.n	8003ab4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x1ec>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f8aa 	bl	8003c02 <UART_EndTransmit_IT>
    return;
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003ab2:	bf00      	nop
  }
}
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08003b31 	.word	0x08003b31

08003ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b0c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ffca 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b21      	cmp	r3, #33	; 0x21
 8003b6a:	d144      	bne.n	8003bf6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d11a      	bne.n	8003bac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]
 8003b9e:	e00e      	b.n	8003bbe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]
 8003baa:	e008      	b.n	8003bbe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	1c59      	adds	r1, r3, #1
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6211      	str	r1, [r2, #32]
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ff4c 	bl	8003ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b22      	cmp	r3, #34	; 0x22
 8003c44:	d171      	bne.n	8003d2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d123      	bne.n	8003c98 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10e      	bne.n	8003c7c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7a:	e029      	b.n	8003cd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
 8003c96:	e01b      	b.n	8003cd0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6858      	ldr	r0, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	1c59      	adds	r1, r3, #1
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6291      	str	r1, [r2, #40]	; 0x28
 8003cb0:	b2c2      	uxtb	r2, r0
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	e00c      	b.n	8003cd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	1c58      	adds	r0, r3, #1
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	6288      	str	r0, [r1, #40]	; 0x28
 8003cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d120      	bne.n	8003d26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0220 	bic.w	r2, r2, #32
 8003cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fed8 	bl	8003ad2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e002      	b.n	8003d2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d6e:	f023 030c 	bic.w	r3, r3, #12
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <UART_SetConfig+0x1ac>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d14e      	bne.n	8003e3a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe fd68 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8003da0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009a      	lsls	r2, r3, #2
 8003dac:	441a      	add	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	4a4a      	ldr	r2, [pc, #296]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	0119      	lsls	r1, r3, #4
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd8:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003dda:	fba3 0302 	umull	r0, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2064      	movs	r0, #100	; 0x64
 8003de2:	fb00 f303 	mul.w	r3, r0, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	3332      	adds	r3, #50	; 0x32
 8003dec:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df8:	4419      	add	r1, r3
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009a      	lsls	r2, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003e12:	fba3 0302 	umull	r0, r3, r3, r2
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2064      	movs	r0, #100	; 0x64
 8003e1a:	fb00 f303 	mul.w	r3, r0, r3
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	3332      	adds	r3, #50	; 0x32
 8003e24:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	f003 020f 	and.w	r2, r3, #15
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	440a      	add	r2, r1
 8003e36:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003e38:	e04d      	b.n	8003ed6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e3a:	f7fe fd05 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8003e3e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009a      	lsls	r2, r3, #2
 8003e4a:	441a      	add	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	0119      	lsls	r1, r3, #4
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009a      	lsls	r2, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003e78:	fba3 0302 	umull	r0, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2064      	movs	r0, #100	; 0x64
 8003e80:	fb00 f303 	mul.w	r3, r0, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e96:	4419      	add	r1, r3
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009a      	lsls	r2, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003eb0:	fba3 0302 	umull	r0, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2064      	movs	r0, #100	; 0x64
 8003eb8:	fb00 f303 	mul.w	r3, r0, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <UART_SetConfig+0x1b0>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	609a      	str	r2, [r3, #8]
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	51eb851f 	.word	0x51eb851f

08003ee8 <simple_delay_ms>:




void simple_delay_ms(const uint16_t ms)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t i = ms * 7200;
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	60fb      	str	r3, [r7, #12]
  while (i-- > 0) {
 8003efe:	e000      	b.n	8003f02 <simple_delay_ms+0x1a>
    asm("nop");
 8003f00:	bf00      	nop
  while (i-- > 0) {
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1e5a      	subs	r2, r3, #1
 8003f06:	60fa      	str	r2, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f9      	bne.n	8003f00 <simple_delay_ms+0x18>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <simple_delay_us>:

void simple_delay_us(const uint16_t us)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	80fb      	strh	r3, [r7, #6]
  uint16_t i = us * 7;
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	461a      	mov	r2, r3
 8003f24:	00d2      	lsls	r2, r2, #3
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	81fb      	strh	r3, [r7, #14]
  while (i-- > 0) {
 8003f2a:	e000      	b.n	8003f2e <simple_delay_us+0x18>
    asm("nop");
 8003f2c:	bf00      	nop
  while (i-- > 0) {
 8003f2e:	89fb      	ldrh	r3, [r7, #14]
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	81fa      	strh	r2, [r7, #14]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f9      	bne.n	8003f2c <simple_delay_us+0x16>
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <crc8>:
 *      Author: kowma
 */
#include "main.h"
#include "ds18b20.h"

unsigned char crc8(void const *mem, size_t len) {
 8003f42:	b480      	push	{r7}
 8003f44:	b087      	sub	sp, #28
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	75fb      	strb	r3, [r7, #23]
	unsigned char const *data = mem;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	613b      	str	r3, [r7, #16]

		while (len--) {
 8003f54:	e022      	b.n	8003f9c <crc8+0x5a>
			uint8_t inbyte = *data++;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	613a      	str	r2, [r7, #16]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 8; i; i--) {
 8003f60:	2308      	movs	r3, #8
 8003f62:	73bb      	strb	r3, [r7, #14]
 8003f64:	e017      	b.n	8003f96 <crc8+0x54>
				uint8_t mix = (crc ^ inbyte) & 0x01;
 8003f66:	7dfa      	ldrb	r2, [r7, #23]
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	4053      	eors	r3, r2
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	737b      	strb	r3, [r7, #13]
				crc >>= 1;
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
				if (mix) crc ^= 0x8C;
 8003f7a:	7b7b      	ldrb	r3, [r7, #13]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <crc8+0x48>
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003f86:	43db      	mvns	r3, r3
 8003f88:	75fb      	strb	r3, [r7, #23]
				inbyte >>= 1;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 8; i; i--) {
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	73bb      	strb	r3, [r7, #14]
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e4      	bne.n	8003f66 <crc8+0x24>
		while (len--) {
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1e5a      	subs	r2, r3, #1
 8003fa0:	603a      	str	r2, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1d7      	bne.n	8003f56 <crc8+0x14>
			}
		}
		return crc;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
	...

08003fb4 <oneWire_direction_set>:
}scratchpad[MAX_DS18B20_SENSORS_AMOUNT];



void oneWire_direction_set(uint8_t direction)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef	GPIO_InitStruct;
	if(direction == ONE_WIRE_BUS_INPUT)
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10e      	bne.n	8003fe2 <oneWire_direction_set+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8003fcc:	2301      	movs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin ;// Pin for 1-Wire bus
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	4619      	mov	r1, r3
 8003fda:	480c      	ldr	r0, [pc, #48]	; (800400c <oneWire_direction_set+0x58>)
 8003fdc:	f7fd feca 	bl	8001d74 <HAL_GPIO_Init>
	else
	{
		// error
	}

}
 8003fe0:	e010      	b.n	8004004 <oneWire_direction_set+0x50>
	else if(direction ==  ONE_WIRE_BUS_OUTPUT)
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d10d      	bne.n	8004004 <oneWire_direction_set+0x50>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8003fe8:	2311      	movs	r3, #17
 8003fea:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin; // Pin for 1-Wire bus
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8003ff8:	f107 0308 	add.w	r3, r7, #8
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4803      	ldr	r0, [pc, #12]	; (800400c <oneWire_direction_set+0x58>)
 8004000:	f7fd feb8 	bl	8001d74 <HAL_GPIO_Init>
}
 8004004:	bf00      	nop
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40010800 	.word	0x40010800

08004010 <oneWire_init>:

uint8_t oneWire_init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
	uint8_t i;
	//TIM2->CR1 |= (1<<3); //OPM
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8004016:	2002      	movs	r0, #2
 8004018:	f7ff ffcc 	bl	8003fb4 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <oneWire_init+0x54>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a10      	ldr	r2, [pc, #64]	; (8004064 <oneWire_init+0x54>)
 8004022:	f023 0308 	bic.w	r3, r3, #8
 8004026:	60d3      	str	r3, [r2, #12]
	simple_delay_us(500);
 8004028:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800402c:	f7ff ff73 	bl	8003f16 <simple_delay_us>

	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8004030:	2001      	movs	r0, #1
 8004032:	f7ff ffbf 	bl	8003fb4 <oneWire_direction_set>
	simple_delay_us(70);
 8004036:	2046      	movs	r0, #70	; 0x46
 8004038:	f7ff ff6d 	bl	8003f16 <simple_delay_us>

	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin) // if 0 - then there is devices on bus
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <oneWire_init+0x54>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <oneWire_init+0x3e>
	{
		i = ONE_WIRE_PRESENCE_FAIL;
 8004048:	2300      	movs	r3, #0
 800404a:	71fb      	strb	r3, [r7, #7]
 800404c:	e001      	b.n	8004052 <oneWire_init+0x42>
	}
	else i = ONE_WIRE_PRESENCE_SUCCESS;
 800404e:	2301      	movs	r3, #1
 8004050:	71fb      	strb	r3, [r7, #7]
	simple_delay_us(410);
 8004052:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8004056:	f7ff ff5e 	bl	8003f16 <simple_delay_us>
	return i;
 800405a:	79fb      	ldrb	r3, [r7, #7]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40010800 	.word	0x40010800

08004068 <oneWire_writeBit>:

void oneWire_writeBit(uint8_t value)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin; // todo check
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <oneWire_writeBit+0x50>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <oneWire_writeBit+0x50>)
 8004078:	f023 0308 	bic.w	r3, r3, #8
 800407c:	60d3      	str	r3, [r2, #12]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 800407e:	2002      	movs	r0, #2
 8004080:	f7ff ff98 	bl	8003fb4 <oneWire_direction_set>
	if(value)
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <oneWire_writeBit+0x36>
	{
		simple_delay_us(6);
 800408a:	2006      	movs	r0, #6
 800408c:	f7ff ff43 	bl	8003f16 <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8004090:	2001      	movs	r0, #1
 8004092:	f7ff ff8f 	bl	8003fb4 <oneWire_direction_set>
		simple_delay_us(64);
 8004096:	2040      	movs	r0, #64	; 0x40
 8004098:	f7ff ff3d 	bl	8003f16 <simple_delay_us>
	{
		simple_delay_us(60);
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
		simple_delay_us(10);
	}
}
 800409c:	e008      	b.n	80040b0 <oneWire_writeBit+0x48>
		simple_delay_us(60);
 800409e:	203c      	movs	r0, #60	; 0x3c
 80040a0:	f7ff ff39 	bl	8003f16 <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7ff ff85 	bl	8003fb4 <oneWire_direction_set>
		simple_delay_us(10);
 80040aa:	200a      	movs	r0, #10
 80040ac:	f7ff ff33 	bl	8003f16 <simple_delay_us>
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40010800 	.word	0x40010800

080040bc <oneWire_writeByte>:
void oneWire_writeByte(uint8_t byte)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 80040c6:	2002      	movs	r0, #2
 80040c8:	f7ff ff74 	bl	8003fb4 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <oneWire_writeByte+0x50>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <oneWire_writeByte+0x50>)
 80040d2:	f023 0308 	bic.w	r3, r3, #8
 80040d6:	60d3      	str	r3, [r2, #12]
	for(uint8_t i=0; i<8; i++){
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	e00f      	b.n	80040fe <oneWire_writeByte+0x42>
		oneWire_writeBit(byte & 1<<i);
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2201      	movs	r2, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	b25a      	sxtb	r2, r3
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b25b      	sxtb	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ffb8 	bl	8004068 <oneWire_writeBit>
	for(uint8_t i=0; i<8; i++){
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	3301      	adds	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b07      	cmp	r3, #7
 8004102:	d9ec      	bls.n	80040de <oneWire_writeByte+0x22>
	}
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40010800 	.word	0x40010800

08004110 <oneWire_readbit>:

uint8_t oneWire_readbit(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8004114:	2002      	movs	r0, #2
 8004116:	f7ff ff4d 	bl	8003fb4 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <oneWire_readbit+0x4c>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4a0f      	ldr	r2, [pc, #60]	; (800415c <oneWire_readbit+0x4c>)
 8004120:	f023 0308 	bic.w	r3, r3, #8
 8004124:	60d3      	str	r3, [r2, #12]
	simple_delay_us(2);
 8004126:	2002      	movs	r0, #2
 8004128:	f7ff fef5 	bl	8003f16 <simple_delay_us>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 800412c:	2001      	movs	r0, #1
 800412e:	f7ff ff41 	bl	8003fb4 <oneWire_direction_set>
	simple_delay_us(10);
 8004132:	200a      	movs	r0, #10
 8004134:	f7ff feef 	bl	8003f16 <simple_delay_us>
	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin)
 8004138:	4b08      	ldr	r3, [pc, #32]	; (800415c <oneWire_readbit+0x4c>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <oneWire_readbit+0x3e>
	{
		simple_delay_us(60);
 8004144:	203c      	movs	r0, #60	; 0x3c
 8004146:	f7ff fee6 	bl	8003f16 <simple_delay_us>
		return 1;
 800414a:	2301      	movs	r3, #1
 800414c:	e003      	b.n	8004156 <oneWire_readbit+0x46>
	}
	else{
		simple_delay_us(60);
 800414e:	203c      	movs	r0, #60	; 0x3c
 8004150:	f7ff fee1 	bl	8003f16 <simple_delay_us>
		return 0;
 8004154:	2300      	movs	r3, #0
	}
}
 8004156:	4618      	mov	r0, r3
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40010800 	.word	0x40010800

08004160 <write_data_to_struct>:
	}
	return devices_counter;
}

void write_data_to_struct(uint8_t bit_cnt, uint8_t bit_data, uint8_t deviceNo)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
 800416a:	460b      	mov	r3, r1
 800416c:	71bb      	strb	r3, [r7, #6]
 800416e:	4613      	mov	r3, r2
 8004170:	717b      	strb	r3, [r7, #5]
	if(bit_cnt < 8) // write to family no
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	2b07      	cmp	r3, #7
 8004176:	d815      	bhi.n	80041a4 <write_data_to_struct+0x44>
	{
		 if(bit_data) rom_address[deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 8004178:	79bb      	ldrb	r3, [r7, #6]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d06e      	beq.n	800425c <write_data_to_struct+0xfc>
 800417e:	797b      	ldrb	r3, [r7, #5]
 8004180:	4a39      	ldr	r2, [pc, #228]	; (8004268 <write_data_to_struct+0x108>)
 8004182:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	b25a      	sxtb	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	b25b      	sxtb	r3, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	b25a      	sxtb	r2, r3
 8004198:	797b      	ldrb	r3, [r7, #5]
 800419a:	b2d1      	uxtb	r1, r2
 800419c:	4a32      	ldr	r2, [pc, #200]	; (8004268 <write_data_to_struct+0x108>)
 800419e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	}
	else if( bit_cnt >= 56) // CRC
	{
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
	}
}
 80041a2:	e05b      	b.n	800425c <write_data_to_struct+0xfc>
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	d919      	bls.n	80041de <write_data_to_struct+0x7e>
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b27      	cmp	r3, #39	; 0x27
 80041ae:	d816      	bhi.n	80041de <write_data_to_struct+0x7e>
		if(bit_data) rom_address[deviceNo].ROM_NO_FIRST_HALF |= (1 << (bit_cnt - 8));
 80041b0:	79bb      	ldrb	r3, [r7, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d052      	beq.n	800425c <write_data_to_struct+0xfc>
 80041b6:	797b      	ldrb	r3, [r7, #5]
 80041b8:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <write_data_to_struct+0x108>)
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	3b08      	subs	r3, #8
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	797b      	ldrb	r3, [r7, #5]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	4925      	ldr	r1, [pc, #148]	; (8004268 <write_data_to_struct+0x108>)
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	440b      	add	r3, r1
 80041d8:	f8c3 2001 	str.w	r2, [r3, #1]
 80041dc:	e03e      	b.n	800425c <write_data_to_struct+0xfc>
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) )  // Serial no first half
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b27      	cmp	r3, #39	; 0x27
 80041e2:	d91e      	bls.n	8004222 <write_data_to_struct+0xc2>
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b37      	cmp	r3, #55	; 0x37
 80041e8:	d81b      	bhi.n	8004222 <write_data_to_struct+0xc2>
		if(bit_data) rom_address[deviceNo].ROM_NO_SECOUND_HALF |= (1 << (bit_cnt - 40 ));
 80041ea:	79bb      	ldrb	r3, [r7, #6]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d035      	beq.n	800425c <write_data_to_struct+0xfc>
 80041f0:	797b      	ldrb	r3, [r7, #5]
 80041f2:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <write_data_to_struct+0x108>)
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	b21a      	sxth	r2, r3
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	3b28      	subs	r3, #40	; 0x28
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	b21b      	sxth	r3, r3
 800420c:	4313      	orrs	r3, r2
 800420e:	b21a      	sxth	r2, r3
 8004210:	797b      	ldrb	r3, [r7, #5]
 8004212:	b291      	uxth	r1, r2
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <write_data_to_struct+0x108>)
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	460a      	mov	r2, r1
 800421c:	f8a3 2005 	strh.w	r2, [r3, #5]
 8004220:	e01c      	b.n	800425c <write_data_to_struct+0xfc>
	else if( bit_cnt >= 56) // CRC
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b37      	cmp	r3, #55	; 0x37
 8004226:	d919      	bls.n	800425c <write_data_to_struct+0xfc>
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
 8004228:	79bb      	ldrb	r3, [r7, #6]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d016      	beq.n	800425c <write_data_to_struct+0xfc>
 800422e:	797b      	ldrb	r3, [r7, #5]
 8004230:	4a0d      	ldr	r2, [pc, #52]	; (8004268 <write_data_to_struct+0x108>)
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	79db      	ldrb	r3, [r3, #7]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	b25a      	sxtb	r2, r3
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	3b38      	subs	r3, #56	; 0x38
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	b25b      	sxtb	r3, r3
 8004248:	4313      	orrs	r3, r2
 800424a:	b25a      	sxtb	r2, r3
 800424c:	797b      	ldrb	r3, [r7, #5]
 800424e:	b2d1      	uxtb	r1, r2
 8004250:	4a05      	ldr	r2, [pc, #20]	; (8004268 <write_data_to_struct+0x108>)
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	460a      	mov	r2, r1
 8004258:	71da      	strb	r2, [r3, #7]
}
 800425a:	e7ff      	b.n	800425c <write_data_to_struct+0xfc>
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	200008f0 	.word	0x200008f0

0800426c <read_address_bit_form_struct>:
//		if(bit_data) ROM_CRC[deviceNo] |= (1 << (bit_cnt - 56));
//	}
//}

uint8_t read_address_bit_form_struct(uint8_t bit_cnt, uint8_t deviceNo)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	460a      	mov	r2, r1
 8004276:	71fb      	strb	r3, [r7, #7]
 8004278:	4613      	mov	r3, r2
 800427a:	71bb      	strb	r3, [r7, #6]
	if(bit_cnt < 8) // write to family no
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	2b07      	cmp	r3, #7
 8004280:	d810      	bhi.n	80042a4 <read_address_bit_form_struct+0x38>
	{
		 return ((rom_address[deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
 8004282:	79bb      	ldrb	r3, [r7, #6]
 8004284:	4a2e      	ldr	r2, [pc, #184]	; (8004340 <read_address_bit_form_struct+0xd4>)
 8004286:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	4619      	mov	r1, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2201      	movs	r2, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	400b      	ands	r3, r1
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfcc      	ite	gt
 800429c:	2301      	movgt	r3, #1
 800429e:	2300      	movle	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e048      	b.n	8004336 <read_address_bit_form_struct+0xca>
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	d914      	bls.n	80042d4 <read_address_bit_form_struct+0x68>
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	2b27      	cmp	r3, #39	; 0x27
 80042ae:	d811      	bhi.n	80042d4 <read_address_bit_form_struct+0x68>
	{
		return ((rom_address[deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
 80042b0:	79bb      	ldrb	r3, [r7, #6]
 80042b2:	4a23      	ldr	r2, [pc, #140]	; (8004340 <read_address_bit_form_struct+0xd4>)
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80042bc:	79fa      	ldrb	r2, [r7, #7]
 80042be:	3a08      	subs	r2, #8
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f202 	lsl.w	r2, r1, r2
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e030      	b.n	8004336 <read_address_bit_form_struct+0xca>
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) ) // Serial no first half
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	2b27      	cmp	r3, #39	; 0x27
 80042d8:	d916      	bls.n	8004308 <read_address_bit_form_struct+0x9c>
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	2b37      	cmp	r3, #55	; 0x37
 80042de:	d813      	bhi.n	8004308 <read_address_bit_form_struct+0x9c>
	{
		return ((rom_address[deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
 80042e0:	79bb      	ldrb	r3, [r7, #6]
 80042e2:	4a17      	ldr	r2, [pc, #92]	; (8004340 <read_address_bit_form_struct+0xd4>)
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	4619      	mov	r1, r3
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	3b28      	subs	r3, #40	; 0x28
 80042f4:	2201      	movs	r2, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	400b      	ands	r3, r1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bfcc      	ite	gt
 8004300:	2301      	movgt	r3, #1
 8004302:	2300      	movle	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e016      	b.n	8004336 <read_address_bit_form_struct+0xca>
	}
	else if( bit_cnt >= 56) // CRC
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	2b37      	cmp	r3, #55	; 0x37
 800430c:	d912      	bls.n	8004334 <read_address_bit_form_struct+0xc8>
	{
		return ((rom_address[deviceNo].ROM_CRC & (1 << (bit_cnt - 56) )) > 0) ;
 800430e:	79bb      	ldrb	r3, [r7, #6]
 8004310:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <read_address_bit_form_struct+0xd4>)
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	79db      	ldrb	r3, [r3, #7]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	4619      	mov	r1, r3
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	3b38      	subs	r3, #56	; 0x38
 8004320:	2201      	movs	r2, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	400b      	ands	r3, r1
 8004328:	2b00      	cmp	r3, #0
 800432a:	bfcc      	ite	gt
 800432c:	2301      	movgt	r3, #1
 800432e:	2300      	movle	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	e000      	b.n	8004336 <read_address_bit_form_struct+0xca>
	}
	else // not used // TODO add asset
	{
		return 0;
 8004334:	2300      	movs	r3, #0
	}

}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	200008f0 	.word	0x200008f0

08004344 <ds18b20_check_crc>:
//	}
//}


uint8_t ds18b20_check_crc(uint8_t DS18B20_sensor_no)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
	uint8_t sensor_crc;
	sensor_crc = crc8(&rom_address[DS18B20_sensor_no], 7);
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <ds18b20_check_crc+0x40>)
 8004354:	4413      	add	r3, r2
 8004356:	2107      	movs	r1, #7
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fdf2 	bl	8003f42 <crc8>
 800435e:	4603      	mov	r3, r0
 8004360:	73fb      	strb	r3, [r7, #15]
	if(sensor_crc == rom_address[DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	4a07      	ldr	r2, [pc, #28]	; (8004384 <ds18b20_check_crc+0x40>)
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4413      	add	r3, r2
 800436a:	79db      	ldrb	r3, [r3, #7]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	429a      	cmp	r2, r3
 8004372:	d101      	bne.n	8004378 <ds18b20_check_crc+0x34>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <ds18b20_check_crc+0x36>
	else return DS18B20_CRC_ACK_FAIL;
 8004378:	2300      	movs	r3, #0

}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200008f0 	.word	0x200008f0

08004388 <ds18b20_search_rom>:
/***
 * searching algorithm based on :
 * https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/187.html
 */
uint8_t ds18b20_search_rom(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
 800438e:	2300      	movs	r3, #0
 8004390:	71fb      	strb	r3, [r7, #7]
 8004392:	2300      	movs	r3, #0
 8004394:	707b      	strb	r3, [r7, #1]
 8004396:	2300      	movs	r3, #0
 8004398:	703b      	strb	r3, [r7, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	71bb      	strb	r3, [r7, #6]
	uint8_t lastDiscrepancy = 0, searchDirection = 0, lastZero = 0; // może byc 0 bo na pierwszych 8 pozycjach zapisana jest rodzina urządzeń
 800439e:	2300      	movs	r3, #0
 80043a0:	717b      	strb	r3, [r7, #5]
 80043a2:	2300      	movs	r3, #0
 80043a4:	713b      	strb	r3, [r7, #4]
 80043a6:	2300      	movs	r3, #0
 80043a8:	70fb      	strb	r3, [r7, #3]
	do{
		if(oneWire_init() == ONE_WIRE_PRESENCE_FAIL) return ROM_SARCHING_ERROR;
 80043aa:	f7ff fe31 	bl	8004010 <oneWire_init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <ds18b20_search_rom+0x30>
 80043b4:	2300      	movs	r3, #0
 80043b6:	e07d      	b.n	80044b4 <ds18b20_search_rom+0x12c>

		// there is at least one sensor - someone send presensce ack
		oneWire_writeByte(0xF0);
 80043b8:	20f0      	movs	r0, #240	; 0xf0
 80043ba:	f7ff fe7f 	bl	80040bc <oneWire_writeByte>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 80043be:	2300      	movs	r3, #0
 80043c0:	71fb      	strb	r3, [r7, #7]
 80043c2:	e04c      	b.n	800445e <ds18b20_search_rom+0xd6>
		{
			true_bit = oneWire_readbit();
 80043c4:	f7ff fea4 	bl	8004110 <oneWire_readbit>
 80043c8:	4603      	mov	r3, r0
 80043ca:	707b      	strb	r3, [r7, #1]
			complement_bit = oneWire_readbit();
 80043cc:	f7ff fea0 	bl	8004110 <oneWire_readbit>
 80043d0:	4603      	mov	r3, r0
 80043d2:	703b      	strb	r3, [r7, #0]
			if( ( true_bit ==  0 ) && (complement_bit == 0) ) {
 80043d4:	787b      	ldrb	r3, [r7, #1]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d12d      	bne.n	8004436 <ds18b20_search_rom+0xae>
 80043da:	783b      	ldrb	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d12a      	bne.n	8004436 <ds18b20_search_rom+0xae>

				if((bit_counter + 1) ==  lastDiscrepancy)
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	797b      	ldrb	r3, [r7, #5]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d102      	bne.n	80043f0 <ds18b20_search_rom+0x68>
				{
					searchDirection = 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	713b      	strb	r3, [r7, #4]
 80043ee:	e011      	b.n	8004414 <ds18b20_search_rom+0x8c>
				}
				else if((bit_counter + 1) > lastDiscrepancy )
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	797b      	ldrb	r3, [r7, #5]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	dd02      	ble.n	8004400 <ds18b20_search_rom+0x78>
				{
					searchDirection = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	713b      	strb	r3, [r7, #4]
 80043fe:	e009      	b.n	8004414 <ds18b20_search_rom+0x8c>

				}
				else // (bit_counter + 1) < lastDiscrepancy
				{
					searchDirection = read_address_bit_form_struct(bit_counter, devices_counter-1);
 8004400:	79bb      	ldrb	r3, [r7, #6]
 8004402:	3b01      	subs	r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ff2e 	bl	800426c <read_address_bit_form_struct>
 8004410:	4603      	mov	r3, r0
 8004412:	713b      	strb	r3, [r7, #4]
				}

				oneWire_writeBit(searchDirection);
 8004414:	793b      	ldrb	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fe26 	bl	8004068 <oneWire_writeBit>
				write_data_to_struct(bit_counter, searchDirection, devices_counter);
 800441c:	79ba      	ldrb	r2, [r7, #6]
 800441e:	7939      	ldrb	r1, [r7, #4]
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fe9c 	bl	8004160 <write_data_to_struct>
				//write_data_to_tables(bit_counter, searchDirection, devices_counter); // ROM tables


				searchDirection ? (lastZero = lastZero) : (lastZero = bit_counter+1);
 8004428:	793b      	ldrb	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d114      	bne.n	8004458 <ds18b20_search_rom+0xd0>
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	3301      	adds	r3, #1
 8004432:	70fb      	strb	r3, [r7, #3]
 8004434:	e010      	b.n	8004458 <ds18b20_search_rom+0xd0>
			}
			else if( true_bit != complement_bit)
 8004436:	787a      	ldrb	r2, [r7, #1]
 8004438:	783b      	ldrb	r3, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d00a      	beq.n	8004454 <ds18b20_search_rom+0xcc>
			{
				write_data_to_struct(bit_counter, true_bit, devices_counter);
 800443e:	79ba      	ldrb	r2, [r7, #6]
 8004440:	7879      	ldrb	r1, [r7, #1]
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fe8b 	bl	8004160 <write_data_to_struct>
				//write_data_to_tables(bit_counter, true_bit, devices_counter); // ROM tables
				oneWire_writeBit(true_bit);
 800444a:	787b      	ldrb	r3, [r7, #1]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fe0b 	bl	8004068 <oneWire_writeBit>
 8004452:	e001      	b.n	8004458 <ds18b20_search_rom+0xd0>
			}
			else{
				return ROM_SARCHING_ERROR;
 8004454:	2300      	movs	r3, #0
 8004456:	e02d      	b.n	80044b4 <ds18b20_search_rom+0x12c>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	3301      	adds	r3, #1
 800445c:	71fb      	strb	r3, [r7, #7]
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b3f      	cmp	r3, #63	; 0x3f
 8004462:	d9af      	bls.n	80043c4 <ds18b20_search_rom+0x3c>
			}
		}
		lastDiscrepancy = lastZero;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	717b      	strb	r3, [r7, #5]
		lastZero = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	70fb      	strb	r3, [r7, #3]
		if(lastDiscrepancy != 0)
 800446c:	797b      	ldrb	r3, [r7, #5]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <ds18b20_search_rom+0xf0>
		{
			devices_counter++  ;
 8004472:	79bb      	ldrb	r3, [r7, #6]
 8004474:	3301      	adds	r3, #1
 8004476:	71bb      	strb	r3, [r7, #6]
		}

	}while(lastDiscrepancy != 0);
 8004478:	797b      	ldrb	r3, [r7, #5]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d195      	bne.n	80043aa <ds18b20_search_rom+0x22>

	ds18b20_sensors_amount = devices_counter + 1; //counter from 0 to device amount - 1
 800447e:	79bb      	ldrb	r3, [r7, #6]
 8004480:	3301      	adds	r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <ds18b20_search_rom+0x134>)
 8004486:	701a      	strb	r2, [r3, #0]


	// check CRC codes ..

	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8004488:	2300      	movs	r3, #0
 800448a:	70bb      	strb	r3, [r7, #2]
 800448c:	e00b      	b.n	80044a6 <ds18b20_search_rom+0x11e>
	{
		if(ds18b20_check_crc(founded_sensor_no) == DS18B20_CRC_ACK_FAIL)
 800448e:	78bb      	ldrb	r3, [r7, #2]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff57 	bl	8004344 <ds18b20_check_crc>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <ds18b20_search_rom+0x118>
		{
			return DS18B20_CRC_ACK_FAIL;
 800449c:	2300      	movs	r3, #0
 800449e:	e009      	b.n	80044b4 <ds18b20_search_rom+0x12c>
	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 80044a0:	78bb      	ldrb	r3, [r7, #2]
 80044a2:	3301      	adds	r3, #1
 80044a4:	70bb      	strb	r3, [r7, #2]
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <ds18b20_search_rom+0x134>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	78ba      	ldrb	r2, [r7, #2]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d3ed      	bcc.n	800448e <ds18b20_search_rom+0x106>
		}
	}
	return ROM_SARCHING_OK;
 80044b2:	2301      	movs	r3, #1
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200007d4 	.word	0x200007d4

080044c0 <ds18b20_initalize>:
	}
	*(temperature_str_hex++) = '\0';
}

void ds18b20_initalize(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
	ds18b20_search_rom();
 80044c4:	f7ff ff60 	bl	8004388 <ds18b20_search_rom>
	ui_change_ds18B20_status(ds18b20_sensors_amount);
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <ds18b20_initalize+0x18>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 fb6e 	bl	8005bb0 <ui_change_ds18B20_status>
}
 80044d4:	bf00      	nop
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	200007d4 	.word	0x200007d4

080044dc <LCD_Data_Bus_Input>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void LCD_Data_Bus_Input(void){
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
	GPIOB->CRL = 0x88888888;
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <LCD_Data_Bus_Input+0x14>)
 80044e2:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	40010c00 	.word	0x40010c00

080044f4 <LCD_Data_Bus_Output>:
void LCD_Data_Bus_Output(void){
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
	GPIOB->CRL = 0x77777777;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <LCD_Data_Bus_Output+0x14>)
 80044fa:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
 80044fe:	601a      	str	r2, [r3, #0]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40010c00 	.word	0x40010c00

0800450c <_LCD_Write>:


void _LCD_Write(uint8_t data){
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
	LCD_Data_Bus_Output();
 8004516:	f7ff ffed 	bl	80044f4 <LCD_Data_Bus_Output>

	LCD_RW_GPIO_Port->ODR &= ~LCD_RW_Pin;
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <_LCD_Write+0x58>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4a11      	ldr	r2, [pc, #68]	; (8004564 <_LCD_Write+0x58>)
 8004520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004524:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <_LCD_Write+0x58>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <_LCD_Write+0x58>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	60d3      	str	r3, [r2, #12]
	LCD_D0_GPIO_Port->ODR &= 0xff00;
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <_LCD_Write+0x58>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a0b      	ldr	r2, [pc, #44]	; (8004564 <_LCD_Write+0x58>)
 8004538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800453c:	60d3      	str	r3, [r2, #12]
	LCD_D0_GPIO_Port->ODR |= data;
 800453e:	4b09      	ldr	r3, [pc, #36]	; (8004564 <_LCD_Write+0x58>)
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	4907      	ldr	r1, [pc, #28]	; (8004564 <_LCD_Write+0x58>)
 8004546:	4313      	orrs	r3, r2
 8004548:	60cb      	str	r3, [r1, #12]
	simple_delay_us(4);
 800454a:	2004      	movs	r0, #4
 800454c:	f7ff fce3 	bl	8003f16 <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <_LCD_Write+0x58>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a03      	ldr	r2, [pc, #12]	; (8004564 <_LCD_Write+0x58>)
 8004556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800455a:	60d3      	str	r3, [r2, #12]
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40010c00 	.word	0x40010c00

08004568 <_LCD_Read>:
//
// Funkcja odczytu bajtu z wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------

uint8_t _LCD_Read(void){
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	71fb      	strb	r3, [r7, #7]

	LCD_Data_Bus_Input();
 8004572:	f7ff ffb3 	bl	80044dc <LCD_Data_Bus_Input>

	LCD_RW_GPIO_Port->ODR |= LCD_RW_Pin;
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <_LCD_Read+0x50>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <_LCD_Read+0x50>)
 800457c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004580:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <_LCD_Read+0x50>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <_LCD_Read+0x50>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	60d3      	str	r3, [r2, #12]
	simple_delay_us(10);
 800458e:	200a      	movs	r0, #10
 8004590:	f7ff fcc1 	bl	8003f16 <simple_delay_us>
	tmp = (uint8_t) (LCD_D0_GPIO_Port->IDR & 0x00ff);
 8004594:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <_LCD_Read+0x50>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	71fb      	strb	r3, [r7, #7]
	simple_delay_us(2);
 800459a:	2002      	movs	r0, #2
 800459c:	f7ff fcbb 	bl	8003f16 <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <_LCD_Read+0x50>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <_LCD_Read+0x50>)
 80045a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045aa:	60d3      	str	r3, [r2, #12]
	return tmp;
 80045ac:	79fb      	ldrb	r3, [r7, #7]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40010c00 	.word	0x40010c00

080045bc <LCD_WriteCommand>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(uint8_t command){
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <LCD_WriteCommand+0x3c>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	4a0b      	ldr	r2, [pc, #44]	; (80045f8 <LCD_WriteCommand+0x3c>)
 80045cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045d0:	60d3      	str	r3, [r2, #12]
	_LCD_Write(command);
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff99 	bl	800450c <_LCD_Write>
	simple_delay_us(2);
 80045da:	2002      	movs	r0, #2
 80045dc:	f7ff fc9b 	bl	8003f16 <simple_delay_us>
	while(LCD_ReadStatus() & 0x80);
 80045e0:	bf00      	nop
 80045e2:	f000 f80b 	bl	80045fc <LCD_ReadStatus>
 80045e6:	4603      	mov	r3, r0
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dbf9      	blt.n	80045e2 <LCD_WriteCommand+0x26>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40010800 	.word	0x40010800

080045fc <LCD_ReadStatus>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
uint8_t LCD_ReadStatus(void){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <LCD_ReadStatus+0x20>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a05      	ldr	r2, [pc, #20]	; (800461c <LCD_ReadStatus+0x20>)
 8004606:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800460a:	60d3      	str	r3, [r2, #12]
	simple_delay_us(2);
 800460c:	2002      	movs	r0, #2
 800460e:	f7ff fc82 	bl	8003f16 <simple_delay_us>
	return _LCD_Read();
 8004612:	f7ff ffa9 	bl	8004568 <_LCD_Read>
 8004616:	4603      	mov	r3, r0
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40010800 	.word	0x40010800

08004620 <LCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(uint8_t data){
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <LCD_WriteData+0x28>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4a06      	ldr	r2, [pc, #24]	; (8004648 <LCD_WriteData+0x28>)
 8004630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004634:	60d3      	str	r3, [r2, #12]
	_LCD_Write(data);
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ff67 	bl	800450c <_LCD_Write>
	//simple_delay_ms(10);
	//while(LCD_ReadStatus() & 0x80);
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40010800 	.word	0x40010800

0800464c <LCD_GoTo>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja ustawienia współrzędnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(uint8_t x, uint8_t y){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	460a      	mov	r2, r1
 8004656:	71fb      	strb	r3, [r7, #7]
 8004658:	4613      	mov	r3, r2
 800465a:	71bb      	strb	r3, [r7, #6]
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 800465c:	79bb      	ldrb	r3, [r7, #6]
 800465e:	019b      	lsls	r3, r3, #6
 8004660:	b2da      	uxtb	r2, r3
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	4413      	add	r3, r2
 8004666:	b2db      	uxtb	r3, r3
 8004668:	b25b      	sxtb	r3, r3
 800466a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800466e:	b25b      	sxtb	r3, r3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff ffa2 	bl	80045bc <LCD_WriteCommand>
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0


	LCD_Data_Bus_Output();
 8004686:	f7ff ff35 	bl	80044f4 <LCD_Data_Bus_Output>
	simple_delay_ms(15);
 800468a:	200f      	movs	r0, #15
 800468c:	f7ff fc2c 	bl	8003ee8 <simple_delay_ms>
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8004690:	4b2a      	ldr	r3, [pc, #168]	; (800473c <LCD_Initalize+0xbc>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4a29      	ldr	r2, [pc, #164]	; (800473c <LCD_Initalize+0xbc>)
 8004696:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800469a:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 800469c:	4b28      	ldr	r3, [pc, #160]	; (8004740 <LCD_Initalize+0xc0>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a27      	ldr	r2, [pc, #156]	; (8004740 <LCD_Initalize+0xc0>)
 80046a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a6:	60d3      	str	r3, [r2, #12]
	LCD_RW_GPIO_Port->ODR  &= ~LCD_RW_Pin;
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <LCD_Initalize+0xc0>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a24      	ldr	r2, [pc, #144]	; (8004740 <LCD_Initalize+0xc0>)
 80046ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b2:	60d3      	str	r3, [r2, #12]

	for(uint8_t i = 0; i < 3; i++){
 80046b4:	2300      	movs	r3, #0
 80046b6:	71fb      	strb	r3, [r7, #7]
 80046b8:	e01d      	b.n	80046f6 <LCD_Initalize+0x76>
		LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 80046ba:	4b21      	ldr	r3, [pc, #132]	; (8004740 <LCD_Initalize+0xc0>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <LCD_Initalize+0xc0>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c4:	60d3      	str	r3, [r2, #12]
		LCD_D0_GPIO_Port->ODR &= 0xff00;
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <LCD_Initalize+0xc0>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <LCD_Initalize+0xc0>)
 80046cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046d0:	60d3      	str	r3, [r2, #12]
		LCD_D0_GPIO_Port->ODR |=  0x003F;
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <LCD_Initalize+0xc0>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <LCD_Initalize+0xc0>)
 80046d8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80046dc:	60d3      	str	r3, [r2, #12]
		LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <LCD_Initalize+0xc0>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <LCD_Initalize+0xc0>)
 80046e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e8:	60d3      	str	r3, [r2, #12]
		simple_delay_ms(5);
 80046ea:	2005      	movs	r0, #5
 80046ec:	f7ff fbfc 	bl	8003ee8 <simple_delay_ms>
	for(uint8_t i = 0; i < 3; i++){
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	3301      	adds	r3, #1
 80046f4:	71fb      	strb	r3, [r7, #7]
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d9de      	bls.n	80046ba <LCD_Initalize+0x3a>
	  }

	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_8_BIT);
 80046fc:	2038      	movs	r0, #56	; 0x38
 80046fe:	f7ff ff5d 	bl	80045bc <LCD_WriteCommand>
	simple_delay_ms(1);
 8004702:	2001      	movs	r0, #1
 8004704:	f7ff fbf0 	bl	8003ee8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8004708:	2008      	movs	r0, #8
 800470a:	f7ff ff57 	bl	80045bc <LCD_WriteCommand>
	simple_delay_ms(1);
 800470e:	2001      	movs	r0, #1
 8004710:	f7ff fbea 	bl	8003ee8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_CLEAR);
 8004714:	2001      	movs	r0, #1
 8004716:	f7ff ff51 	bl	80045bc <LCD_WriteCommand>
	simple_delay_ms(1);
 800471a:	2001      	movs	r0, #1
 800471c:	f7ff fbe4 	bl	8003ee8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 8004720:	2006      	movs	r0, #6
 8004722:	f7ff ff4b 	bl	80045bc <LCD_WriteCommand>
	simple_delay_ms(1);
 8004726:	2001      	movs	r0, #1
 8004728:	f7ff fbde 	bl	8003ee8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 800472c:	200c      	movs	r0, #12
 800472e:	f7ff ff45 	bl	80045bc <LCD_WriteCommand>

}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40010800 	.word	0x40010800
 8004740:	40010c00 	.word	0x40010c00

08004744 <lcd_buf_go_to>:


void lcd_buf_go_to(uint8_t buf_x, uint8_t buf_y )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	460a      	mov	r2, r1
 800474e:	71fb      	strb	r3, [r7, #7]
 8004750:	4613      	mov	r3, r2
 8004752:	71bb      	strb	r3, [r7, #6]
	write_buf_x_pos = buf_x;
 8004754:	4a05      	ldr	r2, [pc, #20]	; (800476c <lcd_buf_go_to+0x28>)
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	7013      	strb	r3, [r2, #0]
	write_buf_y_pos = buf_y;
 800475a:	4a05      	ldr	r2, [pc, #20]	; (8004770 <lcd_buf_go_to+0x2c>)
 800475c:	79bb      	ldrb	r3, [r7, #6]
 800475e:	7013      	strb	r3, [r2, #0]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	200007d5 	.word	0x200007d5
 8004770:	200007d6 	.word	0x200007d6

08004774 <lcd_char>:


void lcd_char(char c)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
	lcd_buf[write_buf_y_pos][write_buf_x_pos] = c;
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <lcd_char+0x34>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	4619      	mov	r1, r3
 8004784:	4b09      	ldr	r3, [pc, #36]	; (80047ac <lcd_char+0x38>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <lcd_char+0x3c>)
 800478c:	460b      	mov	r3, r1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	4403      	add	r3, r0
 8004798:	79fa      	ldrb	r2, [r7, #7]
 800479a:	701a      	strb	r2, [r3, #0]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	200007d6 	.word	0x200007d6
 80047ac:	200007d5 	.word	0x200007d5
 80047b0:	20000930 	.word	0x20000930

080047b4 <lcd_buf_clear>:


void lcd_buf_clear(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 80047ba:	2300      	movs	r3, #0
 80047bc:	71fb      	strb	r3, [r7, #7]
 80047be:	e016      	b.n	80047ee <lcd_buf_clear+0x3a>
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 80047c0:	2300      	movs	r3, #0
 80047c2:	71bb      	strb	r3, [r7, #6]
 80047c4:	e00d      	b.n	80047e2 <lcd_buf_clear+0x2e>
		{
			lcd_buf[iy][ix] = ' ';
 80047c6:	79fa      	ldrb	r2, [r7, #7]
 80047c8:	79b9      	ldrb	r1, [r7, #6]
 80047ca:	480d      	ldr	r0, [pc, #52]	; (8004800 <lcd_buf_clear+0x4c>)
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4403      	add	r3, r0
 80047d6:	440b      	add	r3, r1
 80047d8:	2220      	movs	r2, #32
 80047da:	701a      	strb	r2, [r3, #0]
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 80047dc:	79bb      	ldrb	r3, [r7, #6]
 80047de:	3301      	adds	r3, #1
 80047e0:	71bb      	strb	r3, [r7, #6]
 80047e2:	79bb      	ldrb	r3, [r7, #6]
 80047e4:	2b13      	cmp	r3, #19
 80047e6:	d9ee      	bls.n	80047c6 <lcd_buf_clear+0x12>
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	3301      	adds	r3, #1
 80047ec:	71fb      	strb	r3, [r7, #7]
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d9e5      	bls.n	80047c0 <lcd_buf_clear+0xc>
		}
	}
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000930 	.word	0x20000930

08004804 <lcd_buf_write_text>:


void lcd_buf_write_text(char * text)
{
 8004804:	b490      	push	{r4, r7}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	while(*text)
 800480c:	e016      	b.n	800483c <lcd_buf_write_text+0x38>
	{
		lcd_buf[write_buf_y_pos][write_buf_x_pos++] = *text++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <lcd_buf_write_text+0x4c>)
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	4610      	mov	r0, r2
 800481a:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <lcd_buf_write_text+0x50>)
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	1c51      	adds	r1, r2, #1
 8004820:	b2cc      	uxtb	r4, r1
 8004822:	490c      	ldr	r1, [pc, #48]	; (8004854 <lcd_buf_write_text+0x50>)
 8004824:	700c      	strb	r4, [r1, #0]
 8004826:	4614      	mov	r4, r2
 8004828:	7819      	ldrb	r1, [r3, #0]
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <lcd_buf_write_text+0x54>)
 800482c:	4603      	mov	r3, r0
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4403      	add	r3, r0
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	4423      	add	r3, r4
 8004838:	460a      	mov	r2, r1
 800483a:	701a      	strb	r2, [r3, #0]
	while(*text)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e4      	bne.n	800480e <lcd_buf_write_text+0xa>
	}
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bc90      	pop	{r4, r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	200007d6 	.word	0x200007d6
 8004854:	200007d5 	.word	0x200007d5
 8004858:	20000930 	.word	0x20000930

0800485c <lcd_handler>:


void lcd_handler()
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	af00      	add	r7, sp, #0
	static uint8_t locate_flag = 0;
	static uint8_t x = 0, y = 0;


	if((LCD_ReadStatus() & 0x80) == 0)
 8004860:	f7ff fecc 	bl	80045fc <LCD_ReadStatus>
 8004864:	4603      	mov	r3, r0
 8004866:	b25b      	sxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	f2c0 8081 	blt.w	8004970 <lcd_handler+0x114>
	{
		if(x == LCD_COLS)
 800486e:	4b41      	ldr	r3, [pc, #260]	; (8004974 <lcd_handler+0x118>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b14      	cmp	r3, #20
 8004874:	d116      	bne.n	80048a4 <lcd_handler+0x48>
		{
				x = 0;
 8004876:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <lcd_handler+0x118>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
				y++;
 800487c:	4b3e      	ldr	r3, [pc, #248]	; (8004978 <lcd_handler+0x11c>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <lcd_handler+0x11c>)
 8004886:	701a      	strb	r2, [r3, #0]
				if(y == LCD_ROWS)
 8004888:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <lcd_handler+0x11c>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d109      	bne.n	80048a4 <lcd_handler+0x48>
				{
					y=0;
 8004890:	4b39      	ldr	r3, [pc, #228]	; (8004978 <lcd_handler+0x11c>)
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
					LCD_GoTo(0,y);
 8004896:	4b38      	ldr	r3, [pc, #224]	; (8004978 <lcd_handler+0x11c>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	2000      	movs	r0, #0
 800489e:	f7ff fed5 	bl	800464c <LCD_GoTo>
					return;
 80048a2:	e065      	b.n	8004970 <lcd_handler+0x114>
				}
		}
		if( lcd_buf[y][x] != lcd_buf_old[y][x] )
 80048a4:	4b34      	ldr	r3, [pc, #208]	; (8004978 <lcd_handler+0x11c>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	4b32      	ldr	r3, [pc, #200]	; (8004974 <lcd_handler+0x118>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	4a32      	ldr	r2, [pc, #200]	; (800497c <lcd_handler+0x120>)
 80048b2:	460b      	mov	r3, r1
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	4403      	add	r3, r0
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <lcd_handler+0x11c>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <lcd_handler+0x118>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	461c      	mov	r4, r3
 80048cc:	492c      	ldr	r1, [pc, #176]	; (8004980 <lcd_handler+0x124>)
 80048ce:	4603      	mov	r3, r0
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4403      	add	r3, r0
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	4423      	add	r3, r4
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d03e      	beq.n	800495e <lcd_handler+0x102>
		{
			if(!locate_flag)
 80048e0:	4b28      	ldr	r3, [pc, #160]	; (8004984 <lcd_handler+0x128>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <lcd_handler+0xa4>
			{
				LCD_GoTo(x,y);
 80048e8:	4b22      	ldr	r3, [pc, #136]	; (8004974 <lcd_handler+0x118>)
 80048ea:	781a      	ldrb	r2, [r3, #0]
 80048ec:	4b22      	ldr	r3, [pc, #136]	; (8004978 <lcd_handler+0x11c>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7ff feaa 	bl	800464c <LCD_GoTo>
				locate_flag = 1;
 80048f8:	4b22      	ldr	r3, [pc, #136]	; (8004984 <lcd_handler+0x128>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
				return;
 80048fe:	e037      	b.n	8004970 <lcd_handler+0x114>
			}
			LCD_WriteData(lcd_buf[y][x]);
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <lcd_handler+0x11c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	4619      	mov	r1, r3
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <lcd_handler+0x118>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	4a1b      	ldr	r2, [pc, #108]	; (800497c <lcd_handler+0x120>)
 800490e:	460b      	mov	r3, r1
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	4403      	add	r3, r0
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fe7f 	bl	8004620 <LCD_WriteData>
			lcd_buf_old[y][x] = lcd_buf[y][x];
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <lcd_handler+0x11c>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <lcd_handler+0x118>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	461d      	mov	r5, r3
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <lcd_handler+0x11c>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <lcd_handler+0x118>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	461c      	mov	r4, r3
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <lcd_handler+0x120>)
 800493c:	4603      	mov	r3, r0
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4403      	add	r3, r0
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	442b      	add	r3, r5
 8004948:	7818      	ldrb	r0, [r3, #0]
 800494a:	4a0d      	ldr	r2, [pc, #52]	; (8004980 <lcd_handler+0x124>)
 800494c:	460b      	mov	r3, r1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	4423      	add	r3, r4
 8004958:	4602      	mov	r2, r0
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e002      	b.n	8004964 <lcd_handler+0x108>
		}
		else
		{
			locate_flag = 0;
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <lcd_handler+0x128>)
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]
		}
		x++;
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <lcd_handler+0x118>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	3301      	adds	r3, #1
 800496a:	b2da      	uxtb	r2, r3
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <lcd_handler+0x118>)
 800496e:	701a      	strb	r2, [r3, #0]
	}
}
 8004970:	bdb0      	pop	{r4, r5, r7, pc}
 8004972:	bf00      	nop
 8004974:	200007d7 	.word	0x200007d7
 8004978:	200007d8 	.word	0x200007d8
 800497c:	20000930 	.word	0x20000930
 8004980:	20000958 	.word	0x20000958
 8004984:	200007d9 	.word	0x200007d9

08004988 <ntc_init>:

	double TEMP_SENS_temperature;
}ntc_analog_values;

void ntc_init()
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
	ui_change_ntc_status(ntc_check_analog_sensors_status());
 800498c:	f000 fdb6 	bl	80054fc <ntc_check_analog_sensors_status>
 8004990:	4603      	mov	r3, r0
 8004992:	4618      	mov	r0, r3
 8004994:	f001 f91c 	bl	8005bd0 <ui_change_ntc_status>
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}

0800499c <ntc_handler>:



void ntc_handler(uint16_t ms_time_counter, uint8_t no_sensor)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	460a      	mov	r2, r1
 80049a6:	80fb      	strh	r3, [r7, #6]
 80049a8:	4613      	mov	r3, r2
 80049aa:	717b      	strb	r3, [r7, #5]
	if(ntc_handler_flag == NTC_HANDLER_FLAG_BUSY) return ;
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <ntc_handler+0x54>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d015      	beq.n	80049e2 <ntc_handler+0x46>
	ntc_handler_flag = NTC_HANDLER_FLAG_BUSY;
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <ntc_handler+0x54>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
	if(ms_time_counter != ms_counter) return;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <ntc_handler+0x58>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d10e      	bne.n	80049e6 <ntc_handler+0x4a>

	LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <ntc_handler+0x5c>)
 80049ca:	2240      	movs	r2, #64	; 0x40
 80049cc:	611a      	str	r2, [r3, #16]
		  //ntc_handler(500);

	ntc_TEMP_SENS_calc();
 80049ce:	f000 f817 	bl	8004a00 <ntc_TEMP_SENS_calc>
	ntc_analog_sensors_calc(no_sensor);
 80049d2:	797b      	ldrb	r3, [r7, #5]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f857 	bl	8004a88 <ntc_analog_sensors_calc>

	LED_GREEN_GPIO_Port->BRR = LED_GREEN_Pin;
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <ntc_handler+0x5c>)
 80049dc:	2240      	movs	r2, #64	; 0x40
 80049de:	615a      	str	r2, [r3, #20]
 80049e0:	e002      	b.n	80049e8 <ntc_handler+0x4c>
	if(ntc_handler_flag == NTC_HANDLER_FLAG_BUSY) return ;
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <ntc_handler+0x4c>
	if(ms_time_counter != ms_counter) return;
 80049e6:	bf00      	nop
}
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200007e0 	.word	0x200007e0
 80049f4:	2000082a 	.word	0x2000082a
 80049f8:	40010800 	.word	0x40010800
 80049fc:	00000000 	.word	0x00000000

08004a00 <ntc_TEMP_SENS_calc>:
{
	return ntc_analog_values.TEMP_SENS_temperature;
}

void ntc_TEMP_SENS_calc(void)
{
 8004a00:	b598      	push	{r3, r4, r7, lr}
 8004a02:	af00      	add	r7, sp, #0
	ntc_analog_values.TEMP_SENS_temperature = (((V25 * 1000.0 - (double)adc_value[3] * 0.8) / AVGSLOPE) + 25.0);
 8004a04:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <ntc_TEMP_SENS_calc+0x78>)
 8004a06:	88db      	ldrh	r3, [r3, #6]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fce3 	bl	80003d4 <__aeabi_ui2d>
 8004a0e:	a314      	add	r3, pc, #80	; (adr r3, 8004a60 <ntc_TEMP_SENS_calc+0x60>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fd58 	bl	80004c8 <__aeabi_dmul>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	a111      	add	r1, pc, #68	; (adr r1, 8004a68 <ntc_TEMP_SENS_calc+0x68>)
 8004a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a26:	f7fb fb97 	bl	8000158 <__aeabi_dsub>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	4621      	mov	r1, r4
 8004a32:	a30f      	add	r3, pc, #60	; (adr r3, 8004a70 <ntc_TEMP_SENS_calc+0x70>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fb fe70 	bl	800071c <__aeabi_ddiv>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	4618      	mov	r0, r3
 8004a42:	4621      	mov	r1, r4
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <ntc_TEMP_SENS_calc+0x7c>)
 8004a4a:	f7fb fb87 	bl	800015c <__adddf3>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	460c      	mov	r4, r1
 8004a52:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <ntc_TEMP_SENS_calc+0x80>)
 8004a54:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
}
 8004a58:	bf00      	nop
 8004a5a:	bd98      	pop	{r3, r4, r7, pc}
 8004a5c:	f3af 8000 	nop.w
 8004a60:	9999999a 	.word	0x9999999a
 8004a64:	3fe99999 	.word	0x3fe99999
 8004a68:	00000000 	.word	0x00000000
 8004a6c:	40965800 	.word	0x40965800
 8004a70:	33333333 	.word	0x33333333
 8004a74:	40113333 	.word	0x40113333
 8004a78:	2000082c 	.word	0x2000082c
 8004a7c:	40390000 	.word	0x40390000
 8004a80:	20000980 	.word	0x20000980
 8004a84:	00000000 	.word	0x00000000

08004a88 <ntc_analog_sensors_calc>:


// ze względu na szybkość obliczeń wykoanano aproksymacje wielomianową przedziałami
// dokumentacja znajduje sie w pliku ln_aprox.m
void ntc_analog_sensors_calc(uint8_t no_sensor)
{
 8004a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a8c:	b099      	sub	sp, #100	; 0x64
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	71fb      	strb	r3, [r7, #7]
	const double V_DD = 3.32;
 8004a94:	a4b0      	add	r4, pc, #704	; (adr r4, 8004d58 <ntc_analog_sensors_calc+0x2d0>)
 8004a96:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004a9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	const uint16_t R_divide = 33000;
 8004a9e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8004aa2:	81fb      	strh	r3, [r7, #14]
	uint8_t iterator = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	if(adc_value[no_sensor] == 0) return ;
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4ab0      	ldr	r2, [pc, #704]	; (8004d70 <ntc_analog_sensors_calc+0x2e8>)
 8004aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 850a 	beq.w	80054cc <ntc_analog_sensors_calc+0xa44>
	ntc_analog_values.NTC_voltage[no_sensor] = adc_value[no_sensor] * V_DD / 4095;
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	4aad      	ldr	r2, [pc, #692]	; (8004d70 <ntc_analog_sensors_calc+0x2e8>)
 8004abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fb fc97 	bl	80003f4 <__aeabi_i2d>
 8004ac6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004aca:	f7fb fcfd 	bl	80004c8 <__aeabi_dmul>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	79fd      	ldrb	r5, [r7, #7]
 8004ad8:	a3a1      	add	r3, pc, #644	; (adr r3, 8004d60 <ntc_analog_sensors_calc+0x2d8>)
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f7fb fe1d 	bl	800071c <__aeabi_ddiv>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	49a3      	ldr	r1, [pc, #652]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004ae8:	1cea      	adds	r2, r5, #3
 8004aea:	00d2      	lsls	r2, r2, #3
 8004aec:	440a      	add	r2, r1
 8004aee:	e9c2 3400 	strd	r3, r4, [r2]
	ntc_analog_values.NTC_resistance[no_sensor] = R_divide * V_DD / ntc_analog_values.NTC_voltage[no_sensor] - R_divide;
 8004af2:	89fb      	ldrh	r3, [r7, #14]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fb fc7d 	bl	80003f4 <__aeabi_i2d>
 8004afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004afe:	f7fb fce3 	bl	80004c8 <__aeabi_dmul>
 8004b02:	4603      	mov	r3, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	4618      	mov	r0, r3
 8004b08:	4621      	mov	r1, r4
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	4a99      	ldr	r2, [pc, #612]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004b0e:	3303      	adds	r3, #3
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	cb18      	ldmia	r3, {r3, r4}
 8004b16:	461a      	mov	r2, r3
 8004b18:	4623      	mov	r3, r4
 8004b1a:	f7fb fdff 	bl	800071c <__aeabi_ddiv>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	460c      	mov	r4, r1
 8004b22:	4698      	mov	r8, r3
 8004b24:	46a1      	mov	r9, r4
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fb fc63 	bl	80003f4 <__aeabi_i2d>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	79fd      	ldrb	r5, [r7, #7]
 8004b34:	461a      	mov	r2, r3
 8004b36:	4623      	mov	r3, r4
 8004b38:	4640      	mov	r0, r8
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	f7fb fb0c 	bl	8000158 <__aeabi_dsub>
 8004b40:	4603      	mov	r3, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	498b      	ldr	r1, [pc, #556]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004b46:	00ea      	lsls	r2, r5, #3
 8004b48:	440a      	add	r2, r1
 8004b4a:	e9c2 3400 	strd	r3, r4, [r2]

	if(ntc_analog_values.NTC_resistance[no_sensor] > 100 && ntc_analog_values.NTC_resistance[no_sensor] <= 1000)
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	4a88      	ldr	r2, [pc, #544]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	4b86      	ldr	r3, [pc, #536]	; (8004d78 <ntc_analog_sensors_calc+0x2f0>)
 8004b60:	f7fb ff42 	bl	80009e8 <__aeabi_dcmpgt>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d073      	beq.n	8004c52 <ntc_analog_sensors_calc+0x1ca>
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	4a81      	ldr	r2, [pc, #516]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	4b80      	ldr	r3, [pc, #512]	; (8004d7c <ntc_analog_sensors_calc+0x2f4>)
 8004b7c:	f7fb ff20 	bl	80009c0 <__aeabi_dcmple>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d065      	beq.n	8004c52 <ntc_analog_sensors_calc+0x1ca>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	4a7a      	ldr	r2, [pc, #488]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004b8a:	3306      	adds	r3, #6
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	441a      	add	r2, r3
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	f04f 0400 	mov.w	r4, #0
 8004b98:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a1)/4;
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		do {
			float power = 1;
 8004ba2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004ba6:	65bb      	str	r3, [r7, #88]	; 0x58
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004bae:	e018      	b.n	8004be2 <ntc_analog_sensors_calc+0x15a>
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8004bb0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004bb2:	f7fb fc31 	bl	8000418 <__aeabi_f2d>
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	4a6e      	ldr	r2, [pc, #440]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	cb18      	ldmia	r3, {r3, r4}
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	f7fb fc80 	bl	80004c8 <__aeabi_dmul>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	4621      	mov	r1, r4
 8004bd0:	f7fb ff34 	bl	8000a3c <__aeabi_d2f>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	65bb      	str	r3, [r7, #88]	; 0x58
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004be2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004be6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004bea:	3b01      	subs	r3, #1
 8004bec:	429a      	cmp	r2, r3
 8004bee:	dbdf      	blt.n	8004bb0 <ntc_analog_sensors_calc+0x128>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a1[iterator++]*power;
 8004bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b60      	ldr	r3, [pc, #384]	; (8004d80 <ntc_analog_sensors_calc+0x2f8>)
 8004bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb ff69 	bl	8000adc <__aeabi_fmul>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	4a58      	ldr	r2, [pc, #352]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004c12:	3306      	adds	r3, #6
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4413      	add	r3, r2
 8004c18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	f7fb fbfb 	bl	8000418 <__aeabi_f2d>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	79fe      	ldrb	r6, [r7, #7]
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	f7fb fa96 	bl	800015c <__adddf3>
 8004c30:	4603      	mov	r3, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	494f      	ldr	r1, [pc, #316]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004c36:	1db2      	adds	r2, r6, #6
 8004c38:	00d2      	lsls	r2, r2, #3
 8004c3a:	440a      	add	r2, r1
 8004c3c:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 8004c40:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1a9      	bne.n	8004ba2 <ntc_analog_sensors_calc+0x11a>
	{
 8004c4e:	f000 bc3e 	b.w	80054ce <ntc_analog_sensors_calc+0xa46>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 1000 && ntc_analog_values.NTC_resistance[no_sensor] <= 5000)
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	4a47      	ldr	r2, [pc, #284]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <ntc_analog_sensors_calc+0x2f4>)
 8004c64:	f7fb fec0 	bl	80009e8 <__aeabi_dcmpgt>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 808c 	beq.w	8004d88 <ntc_analog_sensors_calc+0x300>
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c7c:	a33a      	add	r3, pc, #232	; (adr r3, 8004d68 <ntc_analog_sensors_calc+0x2e0>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fe9d 	bl	80009c0 <__aeabi_dcmple>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d07d      	beq.n	8004d88 <ntc_analog_sensors_calc+0x300>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	4a39      	ldr	r2, [pc, #228]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004c90:	3306      	adds	r3, #6
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	441a      	add	r2, r3
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	f04f 0400 	mov.w	r4, #0
 8004c9e:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a2)/4;
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		do {
			float power = 1;
 8004ca8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004cac:	653b      	str	r3, [r7, #80]	; 0x50
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004cb4:	e018      	b.n	8004ce8 <ntc_analog_sensors_calc+0x260>
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8004cb6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004cb8:	f7fb fbae 	bl	8000418 <__aeabi_f2d>
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	4a2d      	ldr	r2, [pc, #180]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	cb18      	ldmia	r3, {r3, r4}
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4623      	mov	r3, r4
 8004cca:	f7fb fbfd 	bl	80004c8 <__aeabi_dmul>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	f7fb feb1 	bl	8000a3c <__aeabi_d2f>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004cde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004ce8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004cec:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	dbdf      	blt.n	8004cb6 <ntc_analog_sensors_calc+0x22e>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a2[iterator++]*power;
 8004cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8004d00:	461a      	mov	r2, r3
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <ntc_analog_sensors_calc+0x2fc>)
 8004d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fee6 	bl	8000adc <__aeabi_fmul>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4619      	mov	r1, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004d18:	3306      	adds	r3, #6
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d22:	4608      	mov	r0, r1
 8004d24:	f7fb fb78 	bl	8000418 <__aeabi_f2d>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	79fe      	ldrb	r6, [r7, #7]
 8004d2e:	4620      	mov	r0, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	f7fb fa13 	bl	800015c <__adddf3>
 8004d36:	4603      	mov	r3, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	490e      	ldr	r1, [pc, #56]	; (8004d74 <ntc_analog_sensors_calc+0x2ec>)
 8004d3c:	1db2      	adds	r2, r6, #6
 8004d3e:	00d2      	lsls	r2, r2, #3
 8004d40:	440a      	add	r2, r1
 8004d42:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 8004d46:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004d4a:	1e5a      	subs	r2, r3, #1
 8004d4c:	f887 2056 	strb.w	r2, [r7, #86]	; 0x56
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1a9      	bne.n	8004ca8 <ntc_analog_sensors_calc+0x220>
	{
 8004d54:	e3bb      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
 8004d56:	bf00      	nop
 8004d58:	28f5c28f 	.word	0x28f5c28f
 8004d5c:	400a8f5c 	.word	0x400a8f5c
 8004d60:	00000000 	.word	0x00000000
 8004d64:	40affe00 	.word	0x40affe00
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	40b38800 	.word	0x40b38800
 8004d70:	2000082c 	.word	0x2000082c
 8004d74:	20000980 	.word	0x20000980
 8004d78:	40590000 	.word	0x40590000
 8004d7c:	408f4000 	.word	0x408f4000
 8004d80:	20000008 	.word	0x20000008
 8004d84:	20000018 	.word	0x20000018
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 5000 && ntc_analog_values.NTC_resistance[no_sensor] <= 10000)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	4a99      	ldr	r2, [pc, #612]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d94:	a38e      	add	r3, pc, #568	; (adr r3, 8004fd0 <ntc_analog_sensors_calc+0x548>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fe25 	bl	80009e8 <__aeabi_dcmpgt>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d062      	beq.n	8004e6a <ntc_analog_sensors_calc+0x3e2>
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	4a92      	ldr	r2, [pc, #584]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	4413      	add	r3, r2
 8004dac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004db0:	a389      	add	r3, pc, #548	; (adr r3, 8004fd8 <ntc_analog_sensors_calc+0x550>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fe03 	bl	80009c0 <__aeabi_dcmple>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d054      	beq.n	8004e6a <ntc_analog_sensors_calc+0x3e2>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	4a8b      	ldr	r2, [pc, #556]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004dc4:	3306      	adds	r3, #6
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	441a      	add	r2, r3
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	f04f 0400 	mov.w	r4, #0
 8004dd2:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a3)/4;
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		do {
			float power = 1;
 8004ddc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004de0:	60bb      	str	r3, [r7, #8]
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8004de2:	68b8      	ldr	r0, [r7, #8]
 8004de4:	f7fb fb18 	bl	8000418 <__aeabi_f2d>
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	4a81      	ldr	r2, [pc, #516]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	cb18      	ldmia	r3, {r3, r4}
 8004df2:	461a      	mov	r2, r3
 8004df4:	4623      	mov	r3, r4
 8004df6:	f7fb fb67 	bl	80004c8 <__aeabi_dmul>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	4621      	mov	r1, r4
 8004e02:	f7fb fe1b 	bl	8000a3c <__aeabi_d2f>
 8004e06:	4603      	mov	r3, r0
 8004e08:	60bb      	str	r3, [r7, #8]
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a3[iterator++]*power;
 8004e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b77      	ldr	r3, [pc, #476]	; (8004ff4 <ntc_analog_sensors_calc+0x56c>)
 8004e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fb fe5c 	bl	8000adc <__aeabi_fmul>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4619      	mov	r1, r3
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	4a71      	ldr	r2, [pc, #452]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004e2c:	3306      	adds	r3, #6
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e36:	4608      	mov	r0, r1
 8004e38:	f7fb faee 	bl	8000418 <__aeabi_f2d>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	79fe      	ldrb	r6, [r7, #7]
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	f7fb f989 	bl	800015c <__adddf3>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	4968      	ldr	r1, [pc, #416]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004e50:	1db2      	adds	r2, r6, #6
 8004e52:	00d2      	lsls	r2, r2, #3
 8004e54:	440a      	add	r2, r1
 8004e56:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 8004e5a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004e5e:	1e5a      	subs	r2, r3, #1
 8004e60:	f887 204e 	strb.w	r2, [r7, #78]	; 0x4e
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1b9      	bne.n	8004ddc <ntc_analog_sensors_calc+0x354>
	{
 8004e68:	e331      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 10000 && ntc_analog_values.NTC_resistance[no_sensor] <= 12000)
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	4a60      	ldr	r2, [pc, #384]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e76:	a358      	add	r3, pc, #352	; (adr r3, 8004fd8 <ntc_analog_sensors_calc+0x550>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f7fb fdb4 	bl	80009e8 <__aeabi_dcmpgt>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d072      	beq.n	8004f6c <ntc_analog_sensors_calc+0x4e4>
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	4a59      	ldr	r2, [pc, #356]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e92:	a353      	add	r3, pc, #332	; (adr r3, 8004fe0 <ntc_analog_sensors_calc+0x558>)
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f7fb fd92 	bl	80009c0 <__aeabi_dcmple>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d064      	beq.n	8004f6c <ntc_analog_sensors_calc+0x4e4>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004ea6:	3306      	adds	r3, #6
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	441a      	add	r2, r3
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a4)/4;
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		do {
			float power = 1;
 8004ebe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004eca:	e018      	b.n	8004efe <ntc_analog_sensors_calc+0x476>
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8004ecc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ece:	f7fb faa3 	bl	8000418 <__aeabi_f2d>
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	4a46      	ldr	r2, [pc, #280]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	cb18      	ldmia	r3, {r3, r4}
 8004edc:	461a      	mov	r2, r3
 8004ede:	4623      	mov	r3, r4
 8004ee0:	f7fb faf2 	bl	80004c8 <__aeabi_dmul>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	4618      	mov	r0, r3
 8004eea:	4621      	mov	r1, r4
 8004eec:	f7fb fda6 	bl	8000a3c <__aeabi_d2f>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	64bb      	str	r3, [r7, #72]	; 0x48
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004efe:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004f02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f06:	3b01      	subs	r3, #1
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	dbdf      	blt.n	8004ecc <ntc_analog_sensors_calc+0x444>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a4[iterator++]*power;
 8004f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <ntc_analog_sensors_calc+0x570>)
 8004f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fb fddb 	bl	8000adc <__aeabi_fmul>
 8004f26:	4603      	mov	r3, r0
 8004f28:	4619      	mov	r1, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	4a30      	ldr	r2, [pc, #192]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004f2e:	3306      	adds	r3, #6
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004f38:	4608      	mov	r0, r1
 8004f3a:	f7fb fa6d 	bl	8000418 <__aeabi_f2d>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	79fe      	ldrb	r6, [r7, #7]
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb f908 	bl	800015c <__adddf3>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	4927      	ldr	r1, [pc, #156]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004f52:	1db2      	adds	r2, r6, #6
 8004f54:	00d2      	lsls	r2, r2, #3
 8004f56:	440a      	add	r2, r1
 8004f58:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 8004f5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f60:	1e5a      	subs	r2, r3, #1
 8004f62:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1a9      	bne.n	8004ebe <ntc_analog_sensors_calc+0x436>
	{
 8004f6a:	e2b0      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 12000 && ntc_analog_values.NTC_resistance[no_sensor] <= 20000)
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4413      	add	r3, r2
 8004f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f78:	a319      	add	r3, pc, #100	; (adr r3, 8004fe0 <ntc_analog_sensors_calc+0x558>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb fd33 	bl	80009e8 <__aeabi_dcmpgt>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8089 	beq.w	800509c <ntc_analog_sensors_calc+0x614>
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f96:	a314      	add	r3, pc, #80	; (adr r3, 8004fe8 <ntc_analog_sensors_calc+0x560>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb fd10 	bl	80009c0 <__aeabi_dcmple>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d07a      	beq.n	800509c <ntc_analog_sensors_calc+0x614>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <ntc_analog_sensors_calc+0x568>)
 8004faa:	3306      	adds	r3, #6
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	441a      	add	r2, r3
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a5)/4;
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		do {
			float power = 1;
 8004fc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004fc6:	643b      	str	r3, [r7, #64]	; 0x40
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004fce:	e02e      	b.n	800502e <ntc_analog_sensors_calc+0x5a6>
 8004fd0:	00000000 	.word	0x00000000
 8004fd4:	40b38800 	.word	0x40b38800
 8004fd8:	00000000 	.word	0x00000000
 8004fdc:	40c38800 	.word	0x40c38800
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	40c77000 	.word	0x40c77000
 8004fe8:	00000000 	.word	0x00000000
 8004fec:	40d38800 	.word	0x40d38800
 8004ff0:	20000980 	.word	0x20000980
 8004ff4:	20000028 	.word	0x20000028
 8004ff8:	20000038 	.word	0x20000038
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8004ffc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ffe:	f7fb fa0b 	bl	8000418 <__aeabi_f2d>
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	4aae      	ldr	r2, [pc, #696]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	cb18      	ldmia	r3, {r3, r4}
 800500c:	461a      	mov	r2, r3
 800500e:	4623      	mov	r3, r4
 8005010:	f7fb fa5a 	bl	80004c8 <__aeabi_dmul>
 8005014:	4603      	mov	r3, r0
 8005016:	460c      	mov	r4, r1
 8005018:	4618      	mov	r0, r3
 800501a:	4621      	mov	r1, r4
 800501c:	f7fb fd0e 	bl	8000a3c <__aeabi_d2f>
 8005020:	4603      	mov	r3, r0
 8005022:	643b      	str	r3, [r7, #64]	; 0x40
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8005024:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005028:	3301      	adds	r3, #1
 800502a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800502e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005032:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005036:	3b01      	subs	r3, #1
 8005038:	429a      	cmp	r2, r3
 800503a:	dbdf      	blt.n	8004ffc <ntc_analog_sensors_calc+0x574>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a5[iterator++]*power;
 800503c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005046:	461a      	mov	r2, r3
 8005048:	4b9e      	ldr	r3, [pc, #632]	; (80052c4 <ntc_analog_sensors_calc+0x83c>)
 800504a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fd43 	bl	8000adc <__aeabi_fmul>
 8005056:	4603      	mov	r3, r0
 8005058:	4619      	mov	r1, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	4a98      	ldr	r2, [pc, #608]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 800505e:	3306      	adds	r3, #6
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005068:	4608      	mov	r0, r1
 800506a:	f7fb f9d5 	bl	8000418 <__aeabi_f2d>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	79fe      	ldrb	r6, [r7, #7]
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb f870 	bl	800015c <__adddf3>
 800507c:	4603      	mov	r3, r0
 800507e:	460c      	mov	r4, r1
 8005080:	498f      	ldr	r1, [pc, #572]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 8005082:	1db2      	adds	r2, r6, #6
 8005084:	00d2      	lsls	r2, r2, #3
 8005086:	440a      	add	r2, r1
 8005088:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 800508c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
 8005096:	2b00      	cmp	r3, #0
 8005098:	d193      	bne.n	8004fc2 <ntc_analog_sensors_calc+0x53a>
	{
 800509a:	e218      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 20000 && ntc_analog_values.NTC_resistance[no_sensor] <= 40000)
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	4a88      	ldr	r2, [pc, #544]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4413      	add	r3, r2
 80050a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050a8:	a37f      	add	r3, pc, #508	; (adr r3, 80052a8 <ntc_analog_sensors_calc+0x820>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb fc9b 	bl	80009e8 <__aeabi_dcmpgt>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d072      	beq.n	800519e <ntc_analog_sensors_calc+0x716>
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	4a81      	ldr	r2, [pc, #516]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050c4:	a37a      	add	r3, pc, #488	; (adr r3, 80052b0 <ntc_analog_sensors_calc+0x828>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb fc79 	bl	80009c0 <__aeabi_dcmple>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d064      	beq.n	800519e <ntc_analog_sensors_calc+0x716>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	4a7a      	ldr	r2, [pc, #488]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 80050d8:	3306      	adds	r3, #6
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	441a      	add	r2, r3
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a6)/4;
 80050ea:	2303      	movs	r3, #3
 80050ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		do {
			float power = 1;
 80050f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80050fc:	e018      	b.n	8005130 <ntc_analog_sensors_calc+0x6a8>
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 80050fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005100:	f7fb f98a 	bl	8000418 <__aeabi_f2d>
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	4a6e      	ldr	r2, [pc, #440]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4413      	add	r3, r2
 800510c:	cb18      	ldmia	r3, {r3, r4}
 800510e:	461a      	mov	r2, r3
 8005110:	4623      	mov	r3, r4
 8005112:	f7fb f9d9 	bl	80004c8 <__aeabi_dmul>
 8005116:	4603      	mov	r3, r0
 8005118:	460c      	mov	r4, r1
 800511a:	4618      	mov	r0, r3
 800511c:	4621      	mov	r1, r4
 800511e:	f7fb fc8d 	bl	8000a3c <__aeabi_d2f>
 8005122:	4603      	mov	r3, r0
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 8005126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800512a:	3301      	adds	r3, #1
 800512c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005130:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005134:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005138:	3b01      	subs	r3, #1
 800513a:	429a      	cmp	r2, r3
 800513c:	dbdf      	blt.n	80050fe <ntc_analog_sensors_calc+0x676>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a6[iterator++]*power;
 800513e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005148:	461a      	mov	r2, r3
 800514a:	4b5f      	ldr	r3, [pc, #380]	; (80052c8 <ntc_analog_sensors_calc+0x840>)
 800514c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005152:	4618      	mov	r0, r3
 8005154:	f7fb fcc2 	bl	8000adc <__aeabi_fmul>
 8005158:	4603      	mov	r3, r0
 800515a:	4619      	mov	r1, r3
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	4a58      	ldr	r2, [pc, #352]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 8005160:	3306      	adds	r3, #6
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	e9d3 4500 	ldrd	r4, r5, [r3]
 800516a:	4608      	mov	r0, r1
 800516c:	f7fb f954 	bl	8000418 <__aeabi_f2d>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	79fe      	ldrb	r6, [r7, #7]
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fa ffef 	bl	800015c <__adddf3>
 800517e:	4603      	mov	r3, r0
 8005180:	460c      	mov	r4, r1
 8005182:	494f      	ldr	r1, [pc, #316]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 8005184:	1db2      	adds	r2, r6, #6
 8005186:	00d2      	lsls	r2, r2, #3
 8005188:	440a      	add	r2, r1
 800518a:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 800518e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005192:	1e5a      	subs	r2, r3, #1
 8005194:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1a9      	bne.n	80050f0 <ntc_analog_sensors_calc+0x668>
	{
 800519c:	e197      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 40000 && ntc_analog_values.NTC_resistance[no_sensor] <= 60000 )
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	4a47      	ldr	r2, [pc, #284]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051aa:	a341      	add	r3, pc, #260	; (adr r3, 80052b0 <ntc_analog_sensors_calc+0x828>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb fc1a 	bl	80009e8 <__aeabi_dcmpgt>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 808a 	beq.w	80052d0 <ntc_analog_sensors_calc+0x848>
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	4a40      	ldr	r2, [pc, #256]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051c8:	a33b      	add	r3, pc, #236	; (adr r3, 80052b8 <ntc_analog_sensors_calc+0x830>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f7fb fbf7 	bl	80009c0 <__aeabi_dcmple>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d07b      	beq.n	80052d0 <ntc_analog_sensors_calc+0x848>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	4a39      	ldr	r2, [pc, #228]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 80051dc:	3306      	adds	r3, #6
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	441a      	add	r2, r3
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a7)/4;
 80051ee:	2303      	movs	r3, #3
 80051f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		do {
			float power = 1;
 80051f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80051f8:	633b      	str	r3, [r7, #48]	; 0x30
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005200:	e018      	b.n	8005234 <ntc_analog_sensors_calc+0x7ac>
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8005202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005204:	f7fb f908 	bl	8000418 <__aeabi_f2d>
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	cb18      	ldmia	r3, {r3, r4}
 8005212:	461a      	mov	r2, r3
 8005214:	4623      	mov	r3, r4
 8005216:	f7fb f957 	bl	80004c8 <__aeabi_dmul>
 800521a:	4603      	mov	r3, r0
 800521c:	460c      	mov	r4, r1
 800521e:	4618      	mov	r0, r3
 8005220:	4621      	mov	r1, r4
 8005222:	f7fb fc0b 	bl	8000a3c <__aeabi_d2f>
 8005226:	4603      	mov	r3, r0
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800522a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800522e:	3301      	adds	r3, #1
 8005230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005234:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005238:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800523c:	3b01      	subs	r3, #1
 800523e:	429a      	cmp	r2, r3
 8005240:	dbdf      	blt.n	8005202 <ntc_analog_sensors_calc+0x77a>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a7[iterator++]*power;
 8005242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 800524c:	461a      	mov	r2, r3
 800524e:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <ntc_analog_sensors_calc+0x844>)
 8005250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb fc40 	bl	8000adc <__aeabi_fmul>
 800525c:	4603      	mov	r3, r0
 800525e:	4619      	mov	r1, r3
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 8005264:	3306      	adds	r3, #6
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800526e:	4608      	mov	r0, r1
 8005270:	f7fb f8d2 	bl	8000418 <__aeabi_f2d>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	79fe      	ldrb	r6, [r7, #7]
 800527a:	4620      	mov	r0, r4
 800527c:	4629      	mov	r1, r5
 800527e:	f7fa ff6d 	bl	800015c <__adddf3>
 8005282:	4603      	mov	r3, r0
 8005284:	460c      	mov	r4, r1
 8005286:	490e      	ldr	r1, [pc, #56]	; (80052c0 <ntc_analog_sensors_calc+0x838>)
 8005288:	1db2      	adds	r2, r6, #6
 800528a:	00d2      	lsls	r2, r2, #3
 800528c:	440a      	add	r2, r1
 800528e:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 8005292:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005296:	1e5a      	subs	r2, r3, #1
 8005298:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1a9      	bne.n	80051f4 <ntc_analog_sensors_calc+0x76c>
	{
 80052a0:	e115      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
 80052a2:	bf00      	nop
 80052a4:	f3af 8000 	nop.w
 80052a8:	00000000 	.word	0x00000000
 80052ac:	40d38800 	.word	0x40d38800
 80052b0:	00000000 	.word	0x00000000
 80052b4:	40e38800 	.word	0x40e38800
 80052b8:	00000000 	.word	0x00000000
 80052bc:	40ed4c00 	.word	0x40ed4c00
 80052c0:	20000980 	.word	0x20000980
 80052c4:	20000048 	.word	0x20000048
 80052c8:	20000058 	.word	0x20000058
 80052cc:	20000064 	.word	0x20000064
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 60000 && ntc_analog_values.NTC_resistance[no_sensor] <= 100000 )
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	4a87      	ldr	r2, [pc, #540]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052dc:	a37e      	add	r3, pc, #504	; (adr r3, 80054d8 <ntc_analog_sensors_calc+0xa50>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb fb81 	bl	80009e8 <__aeabi_dcmpgt>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d072      	beq.n	80053d2 <ntc_analog_sensors_calc+0x94a>
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	4a80      	ldr	r2, [pc, #512]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4413      	add	r3, r2
 80052f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052f8:	a379      	add	r3, pc, #484	; (adr r3, 80054e0 <ntc_analog_sensors_calc+0xa58>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb fb5f 	bl	80009c0 <__aeabi_dcmple>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d064      	beq.n	80053d2 <ntc_analog_sensors_calc+0x94a>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	4a79      	ldr	r2, [pc, #484]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 800530c:	3306      	adds	r3, #6
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	441a      	add	r2, r3
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a8)/4;
 800531e:	2302      	movs	r3, #2
 8005320:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		do {
			float power = 1;
 8005324:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800532a:	2300      	movs	r3, #0
 800532c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005330:	e018      	b.n	8005364 <ntc_analog_sensors_calc+0x8dc>
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8005332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005334:	f7fb f870 	bl	8000418 <__aeabi_f2d>
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	4a6d      	ldr	r2, [pc, #436]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	cb18      	ldmia	r3, {r3, r4}
 8005342:	461a      	mov	r2, r3
 8005344:	4623      	mov	r3, r4
 8005346:	f7fb f8bf 	bl	80004c8 <__aeabi_dmul>
 800534a:	4603      	mov	r3, r0
 800534c:	460c      	mov	r4, r1
 800534e:	4618      	mov	r0, r3
 8005350:	4621      	mov	r1, r4
 8005352:	f7fb fb73 	bl	8000a3c <__aeabi_d2f>
 8005356:	4603      	mov	r3, r0
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800535a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800535e:	3301      	adds	r3, #1
 8005360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005364:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005368:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800536c:	3b01      	subs	r3, #1
 800536e:	429a      	cmp	r2, r3
 8005370:	dbdf      	blt.n	8005332 <ntc_analog_sensors_calc+0x8aa>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a8[iterator++]*power;
 8005372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 800537c:	461a      	mov	r2, r3
 800537e:	4b5d      	ldr	r3, [pc, #372]	; (80054f4 <ntc_analog_sensors_calc+0xa6c>)
 8005380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005386:	4618      	mov	r0, r3
 8005388:	f7fb fba8 	bl	8000adc <__aeabi_fmul>
 800538c:	4603      	mov	r3, r0
 800538e:	4619      	mov	r1, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	4a57      	ldr	r2, [pc, #348]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 8005394:	3306      	adds	r3, #6
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800539e:	4608      	mov	r0, r1
 80053a0:	f7fb f83a 	bl	8000418 <__aeabi_f2d>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	79fe      	ldrb	r6, [r7, #7]
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fa fed5 	bl	800015c <__adddf3>
 80053b2:	4603      	mov	r3, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	494e      	ldr	r1, [pc, #312]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 80053b8:	1db2      	adds	r2, r6, #6
 80053ba:	00d2      	lsls	r2, r2, #3
 80053bc:	440a      	add	r2, r1
 80053be:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 80053c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1a9      	bne.n	8005324 <ntc_analog_sensors_calc+0x89c>
	{
 80053d0:	e07d      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
	}
	else if(ntc_analog_values.NTC_resistance[no_sensor] > 100000 && ntc_analog_values.NTC_resistance[no_sensor] <= 200000 )
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4a46      	ldr	r2, [pc, #280]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053de:	a340      	add	r3, pc, #256	; (adr r3, 80054e0 <ntc_analog_sensors_calc+0xa58>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f7fb fb00 	bl	80009e8 <__aeabi_dcmpgt>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d06f      	beq.n	80054ce <ntc_analog_sensors_calc+0xa46>
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053fa:	a33b      	add	r3, pc, #236	; (adr r3, 80054e8 <ntc_analog_sensors_calc+0xa60>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fb fade 	bl	80009c0 <__aeabi_dcmple>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d061      	beq.n	80054ce <ntc_analog_sensors_calc+0xa46>
	{
		ntc_analog_values.NTC_temperature[no_sensor] = 0;
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	4a38      	ldr	r2, [pc, #224]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 800540e:	3306      	adds	r3, #6
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	441a      	add	r2, r3
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t number_of_components = sizeof(a9)/4;
 8005420:	2302      	movs	r3, #2
 8005422:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		do {
			float power = 1;
 8005426:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800542a:	623b      	str	r3, [r7, #32]
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800542c:	2300      	movs	r3, #0
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e016      	b.n	8005460 <ntc_analog_sensors_calc+0x9d8>
			{
				power = power*ntc_analog_values.NTC_resistance[no_sensor];
 8005432:	6a38      	ldr	r0, [r7, #32]
 8005434:	f7fa fff0 	bl	8000418 <__aeabi_f2d>
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4a2d      	ldr	r2, [pc, #180]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	4413      	add	r3, r2
 8005440:	cb18      	ldmia	r3, {r3, r4}
 8005442:	461a      	mov	r2, r3
 8005444:	4623      	mov	r3, r4
 8005446:	f7fb f83f 	bl	80004c8 <__aeabi_dmul>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	4618      	mov	r0, r3
 8005450:	4621      	mov	r1, r4
 8005452:	f7fb faf3 	bl	8000a3c <__aeabi_d2f>
 8005456:	4603      	mov	r3, r0
 8005458:	623b      	str	r3, [r7, #32]
			for(uint8_t i = 0; i < number_of_components - 1; i++)
 800545a:	7ffb      	ldrb	r3, [r7, #31]
 800545c:	3301      	adds	r3, #1
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	7ffa      	ldrb	r2, [r7, #31]
 8005462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005466:	3b01      	subs	r3, #1
 8005468:	429a      	cmp	r2, r3
 800546a:	dbe2      	blt.n	8005432 <ntc_analog_sensors_calc+0x9aa>
			}
			ntc_analog_values.NTC_temperature[no_sensor] += a9[iterator++]*power;
 800546c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005476:	461a      	mov	r2, r3
 8005478:	4b1f      	ldr	r3, [pc, #124]	; (80054f8 <ntc_analog_sensors_calc+0xa70>)
 800547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547e:	6a39      	ldr	r1, [r7, #32]
 8005480:	4618      	mov	r0, r3
 8005482:	f7fb fb2b 	bl	8000adc <__aeabi_fmul>
 8005486:	4603      	mov	r3, r0
 8005488:	4619      	mov	r1, r3
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 800548e:	3306      	adds	r3, #6
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005498:	4608      	mov	r0, r1
 800549a:	f7fa ffbd 	bl	8000418 <__aeabi_f2d>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	79fe      	ldrb	r6, [r7, #7]
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fa fe58 	bl	800015c <__adddf3>
 80054ac:	4603      	mov	r3, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	490f      	ldr	r1, [pc, #60]	; (80054f0 <ntc_analog_sensors_calc+0xa68>)
 80054b2:	1db2      	adds	r2, r6, #6
 80054b4:	00d2      	lsls	r2, r2, #3
 80054b6:	440a      	add	r2, r1
 80054b8:	e9c2 3400 	strd	r3, r4, [r2]
		} while(number_of_components--);
 80054bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1ad      	bne.n	8005426 <ntc_analog_sensors_calc+0x99e>
 80054ca:	e000      	b.n	80054ce <ntc_analog_sensors_calc+0xa46>
	if(adc_value[no_sensor] == 0) return ;
 80054cc:	bf00      	nop
	}
	//ntc_analog_values.NTC_temperature[no_sensor] = BETA * T_0 / (T_0 * log(ntc_analog_values.NTC_resistance[no_sensor]/10000) + BETA) - 273.15;
}
 80054ce:	3764      	adds	r7, #100	; 0x64
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054d6:	bf00      	nop
 80054d8:	00000000 	.word	0x00000000
 80054dc:	40ed4c00 	.word	0x40ed4c00
 80054e0:	00000000 	.word	0x00000000
 80054e4:	40f86a00 	.word	0x40f86a00
 80054e8:	00000000 	.word	0x00000000
 80054ec:	41086a00 	.word	0x41086a00
 80054f0:	20000980 	.word	0x20000980
 80054f4:	20000070 	.word	0x20000070
 80054f8:	20000078 	.word	0x20000078

080054fc <ntc_check_analog_sensors_status>:

uint8_t ntc_check_analog_sensors_status(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
	uint8_t ntc_counter =0;
 8005502:	2300      	movs	r3, #0
 8005504:	71fb      	strb	r3, [r7, #7]
	for(uint8_t analog_sens_count = 0; analog_sens_count < (ADC_CHANNELS - 1) ; analog_sens_count++ )
 8005506:	2300      	movs	r3, #0
 8005508:	71bb      	strb	r3, [r7, #6]
 800550a:	e015      	b.n	8005538 <ntc_check_analog_sensors_status+0x3c>
	{
		if(ntc_analog_values.NTC_temperature[analog_sens_count] != 0) ntc_counter++;
 800550c:	79bb      	ldrb	r3, [r7, #6]
 800550e:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <ntc_check_analog_sensors_status+0x4c>)
 8005510:	3306      	adds	r3, #6
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	f7fb fa39 	bl	8000998 <__aeabi_dcmpeq>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <ntc_check_analog_sensors_status+0x36>
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	3301      	adds	r3, #1
 8005530:	71fb      	strb	r3, [r7, #7]
	for(uint8_t analog_sens_count = 0; analog_sens_count < (ADC_CHANNELS - 1) ; analog_sens_count++ )
 8005532:	79bb      	ldrb	r3, [r7, #6]
 8005534:	3301      	adds	r3, #1
 8005536:	71bb      	strb	r3, [r7, #6]
 8005538:	79bb      	ldrb	r3, [r7, #6]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d9e6      	bls.n	800550c <ntc_check_analog_sensors_status+0x10>
	}
	return ntc_counter;
 800553e:	79fb      	ldrb	r3, [r7, #7]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000980 	.word	0x20000980

0800554c <convert_time_to_str>:
//{
//
//}
//
void convert_time_to_str(uint8_t time_h, uint8_t time_m)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	460a      	mov	r2, r1
 8005556:	71fb      	strb	r3, [r7, #7]
 8005558:	4613      	mov	r3, r2
 800555a:	71bb      	strb	r3, [r7, #6]
	char zero_str = 48;
 800555c:	2330      	movs	r3, #48	; 0x30
 800555e:	73fb      	strb	r3, [r7, #15]
	time_string[0] = '[';
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <convert_time_to_str+0xa4>)
 8005562:	225b      	movs	r2, #91	; 0x5b
 8005564:	701a      	strb	r2, [r3, #0]
	time_string[1] = time_h/10 + zero_str;
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <convert_time_to_str+0xa8>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	b2da      	uxtb	r2, r3
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	4413      	add	r3, r2
 8005576:	b2da      	uxtb	r2, r3
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <convert_time_to_str+0xa4>)
 800557a:	705a      	strb	r2, [r3, #1]
	time_string[2] = time_h%10 + zero_str;
 800557c:	79fa      	ldrb	r2, [r7, #7]
 800557e:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <convert_time_to_str+0xa8>)
 8005580:	fba3 1302 	umull	r1, r3, r3, r2
 8005584:	08d9      	lsrs	r1, r3, #3
 8005586:	460b      	mov	r3, r1
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	b2da      	uxtb	r2, r3
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	4413      	add	r3, r2
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <convert_time_to_str+0xa4>)
 800559a:	709a      	strb	r2, [r3, #2]
	time_string[3] = ':';
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <convert_time_to_str+0xa4>)
 800559e:	223a      	movs	r2, #58	; 0x3a
 80055a0:	70da      	strb	r2, [r3, #3]
	time_string[4] = time_m/10 + zero_str;
 80055a2:	79bb      	ldrb	r3, [r7, #6]
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <convert_time_to_str+0xa8>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	08db      	lsrs	r3, r3, #3
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	4413      	add	r3, r2
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <convert_time_to_str+0xa4>)
 80055b6:	711a      	strb	r2, [r3, #4]
	time_string[5] = time_m%10 + zero_str;
 80055b8:	79ba      	ldrb	r2, [r7, #6]
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <convert_time_to_str+0xa8>)
 80055bc:	fba3 1302 	umull	r1, r3, r3, r2
 80055c0:	08d9      	lsrs	r1, r3, #3
 80055c2:	460b      	mov	r3, r1
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	4413      	add	r3, r2
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <convert_time_to_str+0xa4>)
 80055d6:	715a      	strb	r2, [r3, #5]
	time_string[6] = ']';
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <convert_time_to_str+0xa4>)
 80055da:	225d      	movs	r2, #93	; 0x5d
 80055dc:	719a      	strb	r2, [r3, #6]
	time_string[7] = '\0';
 80055de:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <convert_time_to_str+0xa4>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	71da      	strb	r2, [r3, #7]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	200009e0 	.word	0x200009e0
 80055f4:	cccccccd 	.word	0xcccccccd

080055f8 <convert_temp_to_str>:
void convert_temp_to_str(double temp_double)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t temp_int = (uint16_t)(temp_double*10);
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <convert_temp_to_str+0xc8>)
 8005608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800560c:	f7fa ff5c 	bl	80004c8 <__aeabi_dmul>
 8005610:	4603      	mov	r3, r0
 8005612:	460c      	mov	r4, r1
 8005614:	4618      	mov	r0, r3
 8005616:	4621      	mov	r1, r4
 8005618:	f7fb f9f0 	bl	80009fc <__aeabi_d2uiz>
 800561c:	4603      	mov	r3, r0
 800561e:	81fb      	strh	r3, [r7, #14]
	char zero_str = 48;
 8005620:	2330      	movs	r3, #48	; 0x30
 8005622:	737b      	strb	r3, [r7, #13]
	temp_string[0] = '[';
 8005624:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <convert_temp_to_str+0xcc>)
 8005626:	225b      	movs	r2, #91	; 0x5b
 8005628:	701a      	strb	r2, [r3, #0]
	temp_string[1] = temp_int/100 + zero_str;
 800562a:	89fb      	ldrh	r3, [r7, #14]
 800562c:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <convert_temp_to_str+0xd0>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	b29b      	uxth	r3, r3
 8005636:	b2da      	uxtb	r2, r3
 8005638:	7b7b      	ldrb	r3, [r7, #13]
 800563a:	4413      	add	r3, r2
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <convert_temp_to_str+0xcc>)
 8005640:	705a      	strb	r2, [r3, #1]
	temp_string[2] = (temp_int%100)/10 +zero_str;
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <convert_temp_to_str+0xd0>)
 8005646:	fba2 1203 	umull	r1, r2, r2, r3
 800564a:	0952      	lsrs	r2, r2, #5
 800564c:	2164      	movs	r1, #100	; 0x64
 800564e:	fb01 f202 	mul.w	r2, r1, r2
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	b29b      	uxth	r3, r3
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <convert_temp_to_str+0xd4>)
 8005658:	fba2 2303 	umull	r2, r3, r2, r3
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	b29b      	uxth	r3, r3
 8005660:	b2da      	uxtb	r2, r3
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	4413      	add	r3, r2
 8005666:	b2da      	uxtb	r2, r3
 8005668:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <convert_temp_to_str+0xcc>)
 800566a:	709a      	strb	r2, [r3, #2]
	temp_string[3] = '.';
 800566c:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <convert_temp_to_str+0xcc>)
 800566e:	222e      	movs	r2, #46	; 0x2e
 8005670:	70da      	strb	r2, [r3, #3]
	temp_string[4] = (temp_int%100)%10+zero_str;
 8005672:	89fb      	ldrh	r3, [r7, #14]
 8005674:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <convert_temp_to_str+0xd0>)
 8005676:	fba2 1203 	umull	r1, r2, r2, r3
 800567a:	0952      	lsrs	r2, r2, #5
 800567c:	2164      	movs	r1, #100	; 0x64
 800567e:	fb01 f202 	mul.w	r2, r1, r2
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	b29a      	uxth	r2, r3
 8005686:	4b11      	ldr	r3, [pc, #68]	; (80056cc <convert_temp_to_str+0xd4>)
 8005688:	fba3 1302 	umull	r1, r3, r3, r2
 800568c:	08d9      	lsrs	r1, r3, #3
 800568e:	460b      	mov	r3, r1
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	b29b      	uxth	r3, r3
 800569a:	b2da      	uxtb	r2, r3
 800569c:	7b7b      	ldrb	r3, [r7, #13]
 800569e:	4413      	add	r3, r2
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <convert_temp_to_str+0xcc>)
 80056a4:	711a      	strb	r2, [r3, #4]
	temp_string[5] = 0xdf;
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <convert_temp_to_str+0xcc>)
 80056a8:	22df      	movs	r2, #223	; 0xdf
 80056aa:	715a      	strb	r2, [r3, #5]
	temp_string[6] = ']';
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <convert_temp_to_str+0xcc>)
 80056ae:	225d      	movs	r2, #93	; 0x5d
 80056b0:	719a      	strb	r2, [r3, #6]
	temp_string[7] = '\0';
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <convert_temp_to_str+0xcc>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	71da      	strb	r2, [r3, #7]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd90      	pop	{r4, r7, pc}
 80056c0:	40240000 	.word	0x40240000
 80056c4:	200009e8 	.word	0x200009e8
 80056c8:	51eb851f 	.word	0x51eb851f
 80056cc:	cccccccd 	.word	0xcccccccd

080056d0 <menu_refresh>:
{
	char *p = "Test";
	return p;
}

void menu_refresh(void) {
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0

	menu_t *temp;
	uint8_t i;
	char string_table[7];
	if (currentPointer->parent) temp = (currentPointer->parent)->child;
 80056d6:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <menu_refresh+0x100>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <menu_refresh+0x1c>
 80056e0:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <menu_refresh+0x100>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e001      	b.n	80056f0 <menu_refresh+0x20>
	else temp = &new_settings;
 80056ec:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <menu_refresh+0x104>)
 80056ee:	60fb      	str	r3, [r7, #12]
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
 80056f0:	2300      	movs	r3, #0
 80056f2:	72fb      	strb	r3, [r7, #11]
 80056f4:	e005      	b.n	8005702 <menu_refresh+0x32>
		temp = temp->next;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60fb      	str	r3, [r7, #12]
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
 80056fc:	7afb      	ldrb	r3, [r7, #11]
 80056fe:	3301      	adds	r3, #1
 8005700:	72fb      	strb	r3, [r7, #11]
 8005702:	7afa      	ldrb	r2, [r7, #11]
 8005704:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <menu_refresh+0x108>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	4b34      	ldr	r3, [pc, #208]	; (80057dc <menu_refresh+0x10c>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	1acb      	subs	r3, r1, r3
 8005710:	429a      	cmp	r2, r3
 8005712:	d1f0      	bne.n	80056f6 <menu_refresh+0x26>
	}

	lcd_buf_clear();
 8005714:	f7ff f84e 	bl	80047b4 <lcd_buf_clear>
	for (i = 0; i < LCD_ROWS; i++) {
 8005718:	2300      	movs	r3, #0
 800571a:	72fb      	strb	r3, [r7, #11]
 800571c:	e04f      	b.n	80057be <menu_refresh+0xee>

		lcd_buf_go_to(0,i);
 800571e:	7afb      	ldrb	r3, [r7, #11]
 8005720:	4619      	mov	r1, r3
 8005722:	2000      	movs	r0, #0
 8005724:	f7ff f80e 	bl	8004744 <lcd_buf_go_to>
		if (temp == currentPointer) lcd_char(62);
 8005728:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <menu_refresh+0x100>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	429a      	cmp	r2, r3
 8005730:	d103      	bne.n	800573a <menu_refresh+0x6a>
 8005732:	203e      	movs	r0, #62	; 0x3e
 8005734:	f7ff f81e 	bl	8004774 <lcd_char>
 8005738:	e002      	b.n	8005740 <menu_refresh+0x70>
		else lcd_char(' ');
 800573a:	2020      	movs	r0, #32
 800573c:	f7ff f81a 	bl	8004774 <lcd_char>

		lcd_buf_go_to(2, i);
 8005740:	7afb      	ldrb	r3, [r7, #11]
 8005742:	4619      	mov	r1, r3
 8005744:	2002      	movs	r0, #2
 8005746:	f7fe fffd 	bl	8004744 <lcd_buf_go_to>
		lcd_buf_write_text(temp->name);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff f858 	bl	8004804 <lcd_buf_write_text>

		if(temp->set_option == SET_OPTION_TIME)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	7e1b      	ldrb	r3, [r3, #24]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d112      	bne.n	8005782 <menu_refresh+0xb2>
		{
			lcd_buf_go_to(12, i);
 800575c:	7afb      	ldrb	r3, [r7, #11]
 800575e:	4619      	mov	r1, r3
 8005760:	200c      	movs	r0, #12
 8005762:	f7fe ffef 	bl	8004744 <lcd_buf_go_to>
			convert_time_to_str(temp->hours, temp->minutes);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005772:	4619      	mov	r1, r3
 8005774:	4610      	mov	r0, r2
 8005776:	f7ff fee9 	bl	800554c <convert_time_to_str>
			lcd_buf_write_text(time_string);
 800577a:	4819      	ldr	r0, [pc, #100]	; (80057e0 <menu_refresh+0x110>)
 800577c:	f7ff f842 	bl	8004804 <lcd_buf_write_text>
 8005780:	e014      	b.n	80057ac <menu_refresh+0xdc>
			//lcd_buf_write_text(ui_convert_inttime_to_str(temp->hours, temp->minutes));
		}
		else if(temp->set_option == SET_OPTION_TEMP)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	7e1b      	ldrb	r3, [r3, #24]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d110      	bne.n	80057ac <menu_refresh+0xdc>
		{
			lcd_buf_go_to(12, i);
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	4619      	mov	r1, r3
 800578e:	200c      	movs	r0, #12
 8005790:	f7fe ffd8 	bl	8004744 <lcd_buf_go_to>
			convert_temp_to_str(temp->temp);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f103 0420 	add.w	r4, r3, #32
 800579a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800579e:	4618      	mov	r0, r3
 80057a0:	4621      	mov	r1, r4
 80057a2:	f7ff ff29 	bl	80055f8 <convert_temp_to_str>
			lcd_buf_write_text(temp_string);
 80057a6:	480f      	ldr	r0, [pc, #60]	; (80057e4 <menu_refresh+0x114>)
 80057a8:	f7ff f82c 	bl	8004804 <lcd_buf_write_text>
		}

		temp = temp->next;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
		if (!temp) break;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d006      	beq.n	80057c6 <menu_refresh+0xf6>
	for (i = 0; i < LCD_ROWS; i++) {
 80057b8:	7afb      	ldrb	r3, [r7, #11]
 80057ba:	3301      	adds	r3, #1
 80057bc:	72fb      	strb	r3, [r7, #11]
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d9ac      	bls.n	800571e <menu_refresh+0x4e>

	}
}
 80057c4:	e000      	b.n	80057c8 <menu_refresh+0xf8>
		if (!temp) break;
 80057c6:	bf00      	nop
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd90      	pop	{r4, r7, pc}
 80057d0:	20000380 	.word	0x20000380
 80057d4:	20000200 	.word	0x20000200
 80057d8:	200007da 	.word	0x200007da
 80057dc:	200007db 	.word	0x200007db
 80057e0:	200009e0 	.word	0x200009e0
 80057e4:	200009e8 	.word	0x200009e8

080057e8 <menu_get_index>:


uint8_t menu_get_index(menu_t *q) {
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

	menu_t *temp;
	uint8_t i = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	72fb      	strb	r3, [r7, #11]

	if (q->parent) temp = (q->parent)->child;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <menu_get_index+0x1e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e008      	b.n	8005818 <menu_get_index+0x30>
	else temp = &new_settings;
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <menu_get_index+0x44>)
 8005808:	60fb      	str	r3, [r7, #12]

	while (temp != q) {
 800580a:	e005      	b.n	8005818 <menu_get_index+0x30>
		temp = temp->next;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
		i++;
 8005812:	7afb      	ldrb	r3, [r7, #11]
 8005814:	3301      	adds	r3, #1
 8005816:	72fb      	strb	r3, [r7, #11]
	while (temp != q) {
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	429a      	cmp	r2, r3
 800581e:	d1f5      	bne.n	800580c <menu_get_index+0x24>
	}

	return i;
 8005820:	7afb      	ldrb	r3, [r7, #11]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr
 800582c:	20000200 	.word	0x20000200

08005830 <ui_menu_next>:

void ui_menu_next(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
	if (currentPointer->next)
 8005834:	4b10      	ldr	r3, [pc, #64]	; (8005878 <ui_menu_next+0x48>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d017      	beq.n	800586e <ui_menu_next+0x3e>
	{
		currentPointer = currentPointer->next;
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <ui_menu_next+0x48>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <ui_menu_next+0x48>)
 8005846:	6013      	str	r3, [r2, #0]
		menu_index++;
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <ui_menu_next+0x4c>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <ui_menu_next+0x4c>)
 8005852:	701a      	strb	r2, [r3, #0]
		if (++lcd_row_pos > LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <ui_menu_next+0x50>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	b2da      	uxtb	r2, r3
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <ui_menu_next+0x50>)
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <ui_menu_next+0x50>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d902      	bls.n	800586e <ui_menu_next+0x3e>
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <ui_menu_next+0x50>)
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
		//lcd_row_pos = 0;

		//if (currentPointer->parent) currentPointer = (currentPointer->parent)->child;
		//else currentPointer = &new_settings;
	}
	menu_refresh();
 800586e:	f7ff ff2f 	bl	80056d0 <menu_refresh>
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000380 	.word	0x20000380
 800587c:	200007da 	.word	0x200007da
 8005880:	200007db 	.word	0x200007db

08005884 <ui_menu_prev>:

void ui_menu_prev(void) {
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0


	if(currentPointer->prev)
 8005888:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <ui_menu_prev+0x74>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d02e      	beq.n	80058f0 <ui_menu_prev+0x6c>
	{
		currentPointer = currentPointer->prev;
 8005892:	4b19      	ldr	r3, [pc, #100]	; (80058f8 <ui_menu_prev+0x74>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <ui_menu_prev+0x74>)
 800589a:	6013      	str	r3, [r2, #0]
		if (menu_index)
 800589c:	4b17      	ldr	r3, [pc, #92]	; (80058fc <ui_menu_prev+0x78>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <ui_menu_prev+0x42>
		{
			menu_index--;
 80058a4:	4b15      	ldr	r3, [pc, #84]	; (80058fc <ui_menu_prev+0x78>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	4b13      	ldr	r3, [pc, #76]	; (80058fc <ui_menu_prev+0x78>)
 80058ae:	701a      	strb	r2, [r3, #0]
			if (lcd_row_pos > 0) lcd_row_pos--;
 80058b0:	4b13      	ldr	r3, [pc, #76]	; (8005900 <ui_menu_prev+0x7c>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01b      	beq.n	80058f0 <ui_menu_prev+0x6c>
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <ui_menu_prev+0x7c>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	3b01      	subs	r3, #1
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <ui_menu_prev+0x7c>)
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	e014      	b.n	80058f0 <ui_menu_prev+0x6c>
		}
		else
		{
			menu_index = menu_get_index(currentPointer);
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <ui_menu_prev+0x74>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff ff8c 	bl	80057e8 <menu_get_index>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <ui_menu_prev+0x78>)
 80058d6:	701a      	strb	r2, [r3, #0]

			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 80058d8:	4b08      	ldr	r3, [pc, #32]	; (80058fc <ui_menu_prev+0x78>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <ui_menu_prev+0x64>
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <ui_menu_prev+0x7c>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e003      	b.n	80058f0 <ui_menu_prev+0x6c>
			else lcd_row_pos = menu_index;
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <ui_menu_prev+0x78>)
 80058ea:	781a      	ldrb	r2, [r3, #0]
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <ui_menu_prev+0x7c>)
 80058ee:	701a      	strb	r2, [r3, #0]
		}
	}
	menu_refresh();
 80058f0:	f7ff feee 	bl	80056d0 <menu_refresh>
}
 80058f4:	bf00      	nop
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000380 	.word	0x20000380
 80058fc:	200007da 	.word	0x200007da
 8005900:	200007db 	.word	0x200007db

08005904 <menu_get_level>:

uint8_t menu_get_level(menu_t *q) {
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

	menu_t *temp = q;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	72fb      	strb	r3, [r7, #11]

	if (!q->parent) return 0;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <menu_get_level+0x28>
 800591c:	2300      	movs	r3, #0
 800591e:	e00a      	b.n	8005936 <menu_get_level+0x32>

	while (temp->parent != NULL) {
		temp = temp->parent;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	60fb      	str	r3, [r7, #12]
		i++;
 8005926:	7afb      	ldrb	r3, [r7, #11]
 8005928:	3301      	adds	r3, #1
 800592a:	72fb      	strb	r3, [r7, #11]
	while (temp->parent != NULL) {
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f5      	bne.n	8005920 <menu_get_level+0x1c>
	}

	return i;
 8005934:	7afb      	ldrb	r3, [r7, #11]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <ui_menu_enter>:


void ui_menu_enter(void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0

	if (currentPointer->menu_function) currentPointer->menu_function();
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <ui_menu_enter+0x68>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <ui_menu_enter+0x16>
 800594e:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <ui_menu_enter+0x68>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	4798      	blx	r3

	if (currentPointer->child)
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <ui_menu_enter+0x68>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d021      	beq.n	80059a4 <ui_menu_enter+0x64>
	{

		switch (menu_get_level(currentPointer)) {
 8005960:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <ui_menu_enter+0x68>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ffcd 	bl	8005904 <menu_get_level>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <ui_menu_enter+0x36>
 8005970:	2b01      	cmp	r3, #1
 8005972:	d005      	beq.n	8005980 <ui_menu_enter+0x40>
 8005974:	e009      	b.n	800598a <ui_menu_enter+0x4a>
			case 0:
				lcd_row_pos_level_1 = lcd_row_pos;
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <ui_menu_enter+0x6c>)
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <ui_menu_enter+0x70>)
 800597c:	701a      	strb	r2, [r3, #0]
				break;
 800597e:	e004      	b.n	800598a <ui_menu_enter+0x4a>

			case 1:
				lcd_row_pos_level_2 = lcd_row_pos;
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <ui_menu_enter+0x6c>)
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <ui_menu_enter+0x74>)
 8005986:	701a      	strb	r2, [r3, #0]
				break;
 8005988:	bf00      	nop
		}

		// switch...case can be replaced by:
		// lcd_row_pos_level[ menu_get_level(currentPointer) ] = lcd_row_pos;

		menu_index = 0;
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <ui_menu_enter+0x78>)
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
		lcd_row_pos = 0;
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <ui_menu_enter+0x6c>)
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]

		currentPointer = currentPointer->child;
 8005996:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <ui_menu_enter+0x68>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4a02      	ldr	r2, [pc, #8]	; (80059a8 <ui_menu_enter+0x68>)
 800599e:	6013      	str	r3, [r2, #0]

		menu_refresh();
 80059a0:	f7ff fe96 	bl	80056d0 <menu_refresh>
	}
}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000380 	.word	0x20000380
 80059ac:	200007db 	.word	0x200007db
 80059b0:	200009de 	.word	0x200009de
 80059b4:	200009df 	.word	0x200009df
 80059b8:	200007da 	.word	0x200007da

080059bc <ui_menu_back>:



void ui_menu_back(void) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0

	if (currentPointer->parent) {
 80059c0:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <ui_menu_back+0x5c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d024      	beq.n	8005a14 <ui_menu_back+0x58>

		switch (menu_get_level(currentPointer)) {
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <ui_menu_back+0x5c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff ff98 	bl	8005904 <menu_get_level>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d002      	beq.n	80059e0 <ui_menu_back+0x24>
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d005      	beq.n	80059ea <ui_menu_back+0x2e>
 80059de:	e009      	b.n	80059f4 <ui_menu_back+0x38>
			case 1:
				lcd_row_pos = lcd_row_pos_level_1;
 80059e0:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <ui_menu_back+0x60>)
 80059e2:	781a      	ldrb	r2, [r3, #0]
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <ui_menu_back+0x64>)
 80059e6:	701a      	strb	r2, [r3, #0]
				break;
 80059e8:	e004      	b.n	80059f4 <ui_menu_back+0x38>

			case 2:
				lcd_row_pos = lcd_row_pos_level_2;
 80059ea:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <ui_menu_back+0x68>)
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <ui_menu_back+0x64>)
 80059f0:	701a      	strb	r2, [r3, #0]
				break;
 80059f2:	bf00      	nop
			}

		currentPointer = currentPointer->parent;
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <ui_menu_back+0x5c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <ui_menu_back+0x5c>)
 80059fc:	6013      	str	r3, [r2, #0]
		menu_index = menu_get_index(currentPointer);
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <ui_menu_back+0x5c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fef0 	bl	80057e8 <menu_get_index>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <ui_menu_back+0x6c>)
 8005a0e:	701a      	strb	r2, [r3, #0]

		menu_refresh();
 8005a10:	f7ff fe5e 	bl	80056d0 <menu_refresh>

	}
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000380 	.word	0x20000380
 8005a1c:	200009de 	.word	0x200009de
 8005a20:	200007db 	.word	0x200007db
 8005a24:	200009df 	.word	0x200009df
 8005a28:	200007da 	.word	0x200007da

08005a2c <ui_handler>:
 * entering to ui_handler() few times with this same ms_counter value */



void ui_handler()
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
	if(ui_handler_flag == UI_HANDLER_FLAG_BUSY) return;
 8005a30:	4b56      	ldr	r3, [pc, #344]	; (8005b8c <ui_handler+0x160>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	f000 80a3 	beq.w	8005b82 <ui_handler+0x156>

	//red led control

	if( (HC_status.ds18b20_amount == 0) && (HC_status.ntc_amount == 0))
 8005a3c:	4b54      	ldr	r3, [pc, #336]	; (8005b90 <ui_handler+0x164>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d118      	bne.n	8005a76 <ui_handler+0x4a>
 8005a44:	4b52      	ldr	r3, [pc, #328]	; (8005b90 <ui_handler+0x164>)
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d114      	bne.n	8005a76 <ui_handler+0x4a>
	{
		if(ms_counter % 200 == 0)	LED_RED_GPIO_Port -> ODR ^= LED_RED_Pin;
 8005a4c:	4b51      	ldr	r3, [pc, #324]	; (8005b94 <ui_handler+0x168>)
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	4a51      	ldr	r2, [pc, #324]	; (8005b98 <ui_handler+0x16c>)
 8005a54:	fba2 1203 	umull	r1, r2, r2, r3
 8005a58:	0992      	lsrs	r2, r2, #6
 8005a5a:	21c8      	movs	r1, #200	; 0xc8
 8005a5c:	fb01 f202 	mul.w	r2, r1, r2
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d123      	bne.n	8005ab0 <ui_handler+0x84>
 8005a68:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <ui_handler+0x170>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a4b      	ldr	r2, [pc, #300]	; (8005b9c <ui_handler+0x170>)
 8005a6e:	f083 0320 	eor.w	r3, r3, #32
 8005a72:	60d3      	str	r3, [r2, #12]
 8005a74:	e01c      	b.n	8005ab0 <ui_handler+0x84>
	}
	else if(HC_status.ds18b20_amount == 0 || (HC_status.ntc_amount == 0))
 8005a76:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <ui_handler+0x164>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <ui_handler+0x5a>
 8005a7e:	4b44      	ldr	r3, [pc, #272]	; (8005b90 <ui_handler+0x164>)
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d114      	bne.n	8005ab0 <ui_handler+0x84>
	{
		if(ms_counter % 500 == 0) LED_RED_GPIO_Port -> ODR ^= LED_RED_Pin;
 8005a86:	4b43      	ldr	r3, [pc, #268]	; (8005b94 <ui_handler+0x168>)
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4a44      	ldr	r2, [pc, #272]	; (8005ba0 <ui_handler+0x174>)
 8005a8e:	fba2 1203 	umull	r1, r2, r2, r3
 8005a92:	0952      	lsrs	r2, r2, #5
 8005a94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a98:	fb01 f202 	mul.w	r2, r1, r2
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <ui_handler+0x84>
 8005aa4:	4b3d      	ldr	r3, [pc, #244]	; (8005b9c <ui_handler+0x170>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a3c      	ldr	r2, [pc, #240]	; (8005b9c <ui_handler+0x170>)
 8005aaa:	f083 0320 	eor.w	r3, r3, #32
 8005aae:	60d3      	str	r3, [r2, #12]
	}

	// green led control

	if(HC_status.heating_status == HEATING_STATUS_RUN)
 8005ab0:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <ui_handler+0x164>)
 8005ab2:	789b      	ldrb	r3, [r3, #2]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d11a      	bne.n	8005aee <ui_handler+0xc2>
	{
		if((ms_counter/10)%20 == 0)
 8005ab8:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <ui_handler+0x168>)
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	4a39      	ldr	r2, [pc, #228]	; (8005ba4 <ui_handler+0x178>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	08db      	lsrs	r3, r3, #3
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <ui_handler+0x178>)
 8005aca:	fba3 1302 	umull	r1, r3, r3, r2
 8005ace:	0919      	lsrs	r1, r3, #4
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d14c      	bne.n	8005b7a <ui_handler+0x14e>
		{
			LED_GREEN_GPIO_Port->ODR ^=  LED_GREEN_Pin;
 8005ae0:	4b2e      	ldr	r3, [pc, #184]	; (8005b9c <ui_handler+0x170>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <ui_handler+0x170>)
 8005ae6:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8005aea:	60d3      	str	r3, [r2, #12]
 8005aec:	e045      	b.n	8005b7a <ui_handler+0x14e>
		}
	}
	else if(HC_status.heating_status == HEATING_STATUS_STOP)
 8005aee:	4b28      	ldr	r3, [pc, #160]	; (8005b90 <ui_handler+0x164>)
 8005af0:	789b      	ldrb	r3, [r3, #2]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d112      	bne.n	8005b1c <ui_handler+0xf0>
	{
		if(ms_counter % 499 == 0)
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <ui_handler+0x168>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <ui_handler+0x17c>)
 8005afe:	fba2 1203 	umull	r1, r2, r2, r3
 8005b02:	0992      	lsrs	r2, r2, #6
 8005b04:	f240 11f3 	movw	r1, #499	; 0x1f3
 8005b08:	fb01 f202 	mul.w	r2, r1, r2
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d132      	bne.n	8005b7a <ui_handler+0x14e>
		{
			LED_GREEN_GPIO_Port->BRR = LED_GREEN_Pin;
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <ui_handler+0x170>)
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	615a      	str	r2, [r3, #20]
 8005b1a:	e02e      	b.n	8005b7a <ui_handler+0x14e>
		}
	}
	else if(HC_status.heating_status == HEATING_STATUS_ENDING)
 8005b1c:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <ui_handler+0x164>)
 8005b1e:	789b      	ldrb	r3, [r3, #2]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d114      	bne.n	8005b4e <ui_handler+0x122>
	{
		if( (ms_counter % 200) == 0 )
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <ui_handler+0x168>)
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <ui_handler+0x16c>)
 8005b2c:	fba2 1203 	umull	r1, r2, r2, r3
 8005b30:	0992      	lsrs	r2, r2, #6
 8005b32:	21c8      	movs	r1, #200	; 0xc8
 8005b34:	fb01 f202 	mul.w	r2, r1, r2
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11c      	bne.n	8005b7a <ui_handler+0x14e>
		{
			LED_GREEN_GPIO_Port->ODR ^= LED_GREEN_Pin;
 8005b40:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <ui_handler+0x170>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <ui_handler+0x170>)
 8005b46:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8005b4a:	60d3      	str	r3, [r2, #12]
 8005b4c:	e015      	b.n	8005b7a <ui_handler+0x14e>
		}
	}
	else if(HC_status.heating_status == HEATING_STATUS_END)
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <ui_handler+0x164>)
 8005b50:	789b      	ldrb	r3, [r3, #2]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d111      	bne.n	8005b7a <ui_handler+0x14e>
	{
		if( ( ms_counter % 90 ) == 0)
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <ui_handler+0x168>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	085a      	lsrs	r2, r3, #1
 8005b5e:	4913      	ldr	r1, [pc, #76]	; (8005bac <ui_handler+0x180>)
 8005b60:	fba1 1202 	umull	r1, r2, r1, r2
 8005b64:	0952      	lsrs	r2, r2, #5
 8005b66:	215a      	movs	r1, #90	; 0x5a
 8005b68:	fb01 f202 	mul.w	r2, r1, r2
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <ui_handler+0x14e>
		{
			LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <ui_handler+0x170>)
 8005b76:	2240      	movs	r2, #64	; 0x40
 8005b78:	611a      	str	r2, [r3, #16]
		}
	}

	// buzzer contorl

	ui_handler_flag = UI_HANDLER_FLAG_BUSY;
 8005b7a:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <ui_handler+0x160>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	e000      	b.n	8005b84 <ui_handler+0x158>
	if(ui_handler_flag == UI_HANDLER_FLAG_BUSY) return;
 8005b82:	bf00      	nop
}
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200008a4 	.word	0x200008a4
 8005b90:	200009d0 	.word	0x200009d0
 8005b94:	2000082a 	.word	0x2000082a
 8005b98:	51eb851f 	.word	0x51eb851f
 8005b9c:	40010800 	.word	0x40010800
 8005ba0:	10624dd3 	.word	0x10624dd3
 8005ba4:	cccccccd 	.word	0xcccccccd
 8005ba8:	20d56b39 	.word	0x20d56b39
 8005bac:	b60b60b7 	.word	0xb60b60b7

08005bb0 <ui_change_ds18B20_status>:

void ui_change_ds18B20_status(uint8_t status)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
	HC_status.ds18b20_amount = status;
 8005bba:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <ui_change_ds18B20_status+0x1c>)
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	7013      	strb	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	200009d0 	.word	0x200009d0

08005bd0 <ui_change_ntc_status>:

void ui_change_ntc_status(uint8_t status)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
	HC_status.ds18b20_amount = status;
 8005bda:	4a04      	ldr	r2, [pc, #16]	; (8005bec <ui_change_ntc_status+0x1c>)
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	7013      	strb	r3, [r2, #0]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	200009d0 	.word	0x200009d0

08005bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005bf4:	f7fb f8c2 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005bf8:	f000 f828 	bl	8005c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005bfc:	f000 f9fc 	bl	8005ff8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8005c00:	f000 f880 	bl	8005d04 <MX_ADC1_Init>
 // MX_SPI2_Init();
  MX_TIM1_Init();
 8005c04:	f000 f928 	bl	8005e58 <MX_TIM1_Init>
  simple_delay_ms(500);
 8005c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c0c:	f7fe f96c 	bl	8003ee8 <simple_delay_ms>
  MX_USART3_UART_Init();
 8005c10:	f000 f9c8 	bl	8005fa4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Initalize();
 8005c14:	f7fe fd34 	bl	8004680 <LCD_Initalize>
  ds18b20_initalize();
 8005c18:	f7fe fc52 	bl	80044c0 <ds18b20_initalize>
  ntc_init();
 8005c1c:	f7fe feb4 	bl	8004988 <ntc_init>
  //ui_list_init();
  //pwmctrl_enable_timer_irq();
  /* USER CODE END 2 */
  lcd_buf_clear();
 8005c20:	f7fe fdc8 	bl	80047b4 <lcd_buf_clear>
  lcd_buf_go_to(0, 5);
 8005c24:	2105      	movs	r1, #5
 8005c26:	2000      	movs	r0, #0
 8005c28:	f7fe fd8c 	bl	8004744 <lcd_buf_go_to>
  lcd_buf_write_text("dupa");
 8005c2c:	4806      	ldr	r0, [pc, #24]	; (8005c48 <main+0x58>)
 8005c2e:	f7fe fde9 	bl	8004804 <lcd_buf_write_text>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_handler();
 8005c32:	f7fe fe13 	bl	800485c <lcd_handler>
	  ui_handler();
 8005c36:	f7ff fef9 	bl	8005a2c <ui_handler>
	  ntc_handler(500, 0);
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c40:	f7fe feac 	bl	800499c <ntc_handler>
	  lcd_handler();
 8005c44:	e7f5      	b.n	8005c32 <main+0x42>
 8005c46:	bf00      	nop
 8005c48:	080067e8 	.word	0x080067e8

08005c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b094      	sub	sp, #80	; 0x50
 8005c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c56:	2228      	movs	r2, #40	; 0x28
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fcbe 	bl	80065dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c60:	f107 0314 	add.w	r3, r7, #20
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005c86:	2300      	movs	r3, #0
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005c98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fc f9fa 	bl	800209c <HAL_RCC_OscConfig>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005cae:	f000 fa4d 	bl	800614c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cb2:	230f      	movs	r3, #15
 8005cb4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005cc8:	f107 0314 	add.w	r3, r7, #20
 8005ccc:	2102      	movs	r1, #2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fc fc64 	bl	800259c <HAL_RCC_ClockConfig>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005cda:	f000 fa37 	bl	800614c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fc fdf2 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005cf6:	f000 fa29 	bl	800614c <Error_Handler>
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	3750      	adds	r7, #80	; 0x50
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005d0a:	1d3b      	adds	r3, r7, #4
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005d14:	4b4a      	ldr	r3, [pc, #296]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d16:	4a4b      	ldr	r2, [pc, #300]	; (8005e44 <MX_ADC1_Init+0x140>)
 8005d18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005d1a:	4b49      	ldr	r3, [pc, #292]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005d22:	4b47      	ldr	r3, [pc, #284]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d28:	4b45      	ldr	r3, [pc, #276]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d2e:	4b44      	ldr	r3, [pc, #272]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d30:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005d34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d36:	4b42      	ldr	r3, [pc, #264]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8005d3c:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d3e:	2204      	movs	r2, #4
 8005d40:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d42:	483f      	ldr	r0, [pc, #252]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d44:	f7fb f87c 	bl	8000e40 <HAL_ADC_Init>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8005d4e:	f000 f9fd 	bl	800614c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d56:	2301      	movs	r3, #1
 8005d58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005d5a:	2307      	movs	r3, #7
 8005d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4837      	ldr	r0, [pc, #220]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d64:	f7fb fb0a 	bl	800137c <HAL_ADC_ConfigChannel>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8005d6e:	f000 f9ed 	bl	800614c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005d72:	2301      	movs	r3, #1
 8005d74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005d76:	2302      	movs	r3, #2
 8005d78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4830      	ldr	r0, [pc, #192]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d80:	f7fb fafc 	bl	800137c <HAL_ADC_ConfigChannel>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8005d8a:	f000 f9df 	bl	800614c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005d92:	2303      	movs	r3, #3
 8005d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4829      	ldr	r0, [pc, #164]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005d9c:	f7fb faee 	bl	800137c <HAL_ADC_ConfigChannel>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8005da6:	f000 f9d1 	bl	800614c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005daa:	2310      	movs	r3, #16
 8005dac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005dae:	2304      	movs	r3, #4
 8005db0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4822      	ldr	r0, [pc, #136]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005db8:	f7fb fae0 	bl	800137c <HAL_ADC_ConfigChannel>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8005dc2:	f000 f9c3 	bl	800614c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <MX_ADC1_Init+0x144>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	4a1f      	ldr	r2, [pc, #124]	; (8005e48 <MX_ADC1_Init+0x144>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	6153      	str	r3, [r2, #20]
 8005dd2:	4b1d      	ldr	r3, [pc, #116]	; (8005e48 <MX_ADC1_Init+0x144>)
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]

  hdma1.Instance = DMA1_Channel1;
 8005dde:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <MX_ADC1_Init+0x14c>)
 8005de2:	601a      	str	r2, [r3, #0]
  hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	605a      	str	r2, [r3, #4]
  hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dea:	4b18      	ldr	r3, [pc, #96]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	609a      	str	r2, [r3, #8]
  hdma1.Init.MemInc = DMA_MINC_ENABLE;
 8005df0:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	60da      	str	r2, [r3, #12]
  hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dfc:	611a      	str	r2, [r3, #16]
  hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005dfe:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e04:	615a      	str	r2, [r3, #20]
  hdma1.Init.Mode = DMA_CIRCULAR;
 8005e06:	4b11      	ldr	r3, [pc, #68]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005e08:	2220      	movs	r2, #32
 8005e0a:	619a      	str	r2, [r3, #24]
  hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e12:	61da      	str	r2, [r3, #28]


  HAL_ADCEx_Calibration_Start(&hadc1);
 8005e14:	480a      	ldr	r0, [pc, #40]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005e16:	f7fb fc9b 	bl	8001750 <HAL_ADCEx_Calibration_Start>
  HAL_DMA_Init(&hdma1);
 8005e1a:	480c      	ldr	r0, [pc, #48]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005e1c:	f7fb fe4c 	bl	8001ab8 <HAL_DMA_Init>
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005e22:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005e24:	621a      	str	r2, [r3, #32]
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <MX_ADC1_Init+0x148>)
 8005e28:	4a05      	ldr	r2, [pc, #20]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, ADC_CHANNELS);
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	4909      	ldr	r1, [pc, #36]	; (8005e54 <MX_ADC1_Init+0x150>)
 8005e30:	4803      	ldr	r0, [pc, #12]	; (8005e40 <MX_ADC1_Init+0x13c>)
 8005e32:	f7fb f8dd 	bl	8000ff0 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC1_Init 2 */

}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000834 	.word	0x20000834
 8005e44:	40012400 	.word	0x40012400
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	200007e4 	.word	0x200007e4
 8005e50:	40020008 	.word	0x40020008
 8005e54:	2000082c 	.word	0x2000082c

08005e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b096      	sub	sp, #88	; 0x58
 8005e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	605a      	str	r2, [r3, #4]
 8005e68:	609a      	str	r2, [r3, #8]
 8005e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	611a      	str	r2, [r3, #16]
 8005e86:	615a      	str	r2, [r3, #20]
 8005e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e8a:	1d3b      	adds	r3, r7, #4
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fba3 	bl	80065dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005e96:	4b41      	ldr	r3, [pc, #260]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005e98:	4a41      	ldr	r2, [pc, #260]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8005e9c:	4b3f      	ldr	r3, [pc, #252]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005e9e:	2247      	movs	r2, #71	; 0x47
 8005ea0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ea2:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9800;
 8005ea8:	4b3c      	ldr	r3, [pc, #240]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005eaa:	f242 6248 	movw	r2, #9800	; 0x2648
 8005eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb0:	4b3a      	ldr	r3, [pc, #232]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005eb6:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ebc:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005ec2:	4836      	ldr	r0, [pc, #216]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005ec4:	f7fc fe78 	bl	8002bb8 <HAL_TIM_Base_Init>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005ece:	f000 f93d 	bl	800614c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005ed8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005edc:	4619      	mov	r1, r3
 8005ede:	482f      	ldr	r0, [pc, #188]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005ee0:	f7fd f89a 	bl	8003018 <HAL_TIM_ConfigClockSource>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005eea:	f000 f92f 	bl	800614c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005eee:	482b      	ldr	r0, [pc, #172]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005ef0:	f7fc feb0 	bl	8002c54 <HAL_TIM_OC_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005efa:	f000 f927 	bl	800614c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8005efe:	2108      	movs	r1, #8
 8005f00:	4826      	ldr	r0, [pc, #152]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005f02:	f7fc fedb 	bl	8002cbc <HAL_TIM_OnePulse_Init>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8005f0c:	f000 f91e 	bl	800614c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f10:	2300      	movs	r3, #0
 8005f12:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005f18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	481f      	ldr	r0, [pc, #124]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005f20:	f7fd fbde 	bl	80036e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8005f2a:	f000 f90f 	bl	800614c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f36:	2300      	movs	r3, #0
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f46:	2300      	movs	r3, #0
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4619      	mov	r1, r3
 8005f52:	4812      	ldr	r0, [pc, #72]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005f54:	f7fd f800 	bl	8002f58 <HAL_TIM_OC_ConfigChannel>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8005f5e:	f000 f8f5 	bl	800614c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	4619      	mov	r1, r3
 8005f84:	4805      	ldr	r0, [pc, #20]	; (8005f9c <MX_TIM1_Init+0x144>)
 8005f86:	f7fd fbef 	bl	8003768 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8005f90:	f000 f8dc 	bl	800614c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005f94:	bf00      	nop
 8005f96:	3758      	adds	r7, #88	; 0x58
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000864 	.word	0x20000864
 8005fa0:	40012c00 	.word	0x40012c00

08005fa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005faa:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <MX_USART3_UART_Init+0x50>)
 8005fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fca:	220c      	movs	r2, #12
 8005fcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005fda:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <MX_USART3_UART_Init+0x4c>)
 8005fdc:	f7fd fc27 	bl	800382e <HAL_UART_Init>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005fe6:	f000 f8b1 	bl	800614c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000a48 	.word	0x20000a48
 8005ff4:	40004800 	.word	0x40004800

08005ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ffe:	f107 0310 	add.w	r3, r7, #16
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	609a      	str	r2, [r3, #8]
 800600a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800600c:	4b49      	ldr	r3, [pc, #292]	; (8006134 <MX_GPIO_Init+0x13c>)
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4a48      	ldr	r2, [pc, #288]	; (8006134 <MX_GPIO_Init+0x13c>)
 8006012:	f043 0310 	orr.w	r3, r3, #16
 8006016:	6193      	str	r3, [r2, #24]
 8006018:	4b46      	ldr	r3, [pc, #280]	; (8006134 <MX_GPIO_Init+0x13c>)
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006024:	4b43      	ldr	r3, [pc, #268]	; (8006134 <MX_GPIO_Init+0x13c>)
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	4a42      	ldr	r2, [pc, #264]	; (8006134 <MX_GPIO_Init+0x13c>)
 800602a:	f043 0320 	orr.w	r3, r3, #32
 800602e:	6193      	str	r3, [r2, #24]
 8006030:	4b40      	ldr	r3, [pc, #256]	; (8006134 <MX_GPIO_Init+0x13c>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800603c:	4b3d      	ldr	r3, [pc, #244]	; (8006134 <MX_GPIO_Init+0x13c>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	4a3c      	ldr	r2, [pc, #240]	; (8006134 <MX_GPIO_Init+0x13c>)
 8006042:	f043 0304 	orr.w	r3, r3, #4
 8006046:	6193      	str	r3, [r2, #24]
 8006048:	4b3a      	ldr	r3, [pc, #232]	; (8006134 <MX_GPIO_Init+0x13c>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006054:	4b37      	ldr	r3, [pc, #220]	; (8006134 <MX_GPIO_Init+0x13c>)
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	4a36      	ldr	r2, [pc, #216]	; (8006134 <MX_GPIO_Init+0x13c>)
 800605a:	f043 0308 	orr.w	r3, r3, #8
 800605e:	6193      	str	r3, [r2, #24]
 8006060:	4b34      	ldr	r3, [pc, #208]	; (8006134 <MX_GPIO_Init+0x13c>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 800606c:	2200      	movs	r2, #0
 800606e:	f248 7178 	movw	r1, #34680	; 0x8778
 8006072:	4831      	ldr	r0, [pc, #196]	; (8006138 <MX_GPIO_Init+0x140>)
 8006074:	f7fb ffd8 	bl	8002028 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 8006078:	2200      	movs	r2, #0
 800607a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800607e:	482f      	ldr	r0, [pc, #188]	; (800613c <MX_GPIO_Init+0x144>)
 8006080:	f7fb ffd2 	bl	8002028 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_EXIT_Pin BUTTON_OK_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_EXIT_Pin|BUTTON_OK_Pin;
 8006084:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800608a:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <MX_GPIO_Init+0x148>)
 800608c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006092:	f107 0310 	add.w	r3, r7, #16
 8006096:	4619      	mov	r1, r3
 8006098:	482a      	ldr	r0, [pc, #168]	; (8006144 <MX_GPIO_Init+0x14c>)
 800609a:	f7fb fe6b 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONE_WIRE_DATA1_Pin ONE_WIRE_DATA2_Pin LED_RED_Pin LED_GREEN_Pin 
                           BUZZER_Pin FAN_CTRL_Pin HEATER_CTRL_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 800609e:	f248 7378 	movw	r3, #34680	; 0x8778
 80060a2:	613b      	str	r3, [r7, #16]
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060a4:	2301      	movs	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ac:	2302      	movs	r3, #2
 80060ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060b0:	f107 0310 	add.w	r3, r7, #16
 80060b4:	4619      	mov	r1, r3
 80060b6:	4820      	ldr	r0, [pc, #128]	; (8006138 <MX_GPIO_Init+0x140>)
 80060b8:	f7fb fe5c 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <MX_GPIO_Init+0x150>)
 80060c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 80060c8:	f107 0310 	add.w	r3, r7, #16
 80060cc:	4619      	mov	r1, r3
 80060ce:	481a      	ldr	r0, [pc, #104]	; (8006138 <MX_GPIO_Init+0x140>)
 80060d0:	f7fb fe50 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D1B2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin 
                           LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 80060d4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80060d8:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060da:	2301      	movs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e2:	2302      	movs	r3, #2
 80060e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e6:	f107 0310 	add.w	r3, r7, #16
 80060ea:	4619      	mov	r1, r3
 80060ec:	4813      	ldr	r0, [pc, #76]	; (800613c <MX_GPIO_Init+0x144>)
 80060ee:	f7fb fe41 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 80060f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80060f8:	4b11      	ldr	r3, [pc, #68]	; (8006140 <MX_GPIO_Init+0x148>)
 80060fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	4619      	mov	r1, r3
 8006106:	480d      	ldr	r0, [pc, #52]	; (800613c <MX_GPIO_Init+0x144>)
 8006108:	f7fb fe34 	bl	8001d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	2017      	movs	r0, #23
 8006112:	f7fb fc9a 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006116:	2017      	movs	r0, #23
 8006118:	f7fb fcb3 	bl	8001a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800611c:	2200      	movs	r2, #0
 800611e:	2100      	movs	r1, #0
 8006120:	2028      	movs	r0, #40	; 0x28
 8006122:	f7fb fc92 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006126:	2028      	movs	r0, #40	; 0x28
 8006128:	f7fb fcab 	bl	8001a82 <HAL_NVIC_EnableIRQ>

}
 800612c:	bf00      	nop
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40021000 	.word	0x40021000
 8006138:	40010800 	.word	0x40010800
 800613c:	40010c00 	.word	0x40010c00
 8006140:	10210000 	.word	0x10210000
 8006144:	40011000 	.word	0x40011000
 8006148:	10310000 	.word	0x10310000

0800614c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <HAL_MspInit+0x5c>)
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <HAL_MspInit+0x5c>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	6193      	str	r3, [r2, #24]
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <HAL_MspInit+0x5c>)
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006176:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <HAL_MspInit+0x5c>)
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4a0e      	ldr	r2, [pc, #56]	; (80061b4 <HAL_MspInit+0x5c>)
 800617c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006180:	61d3      	str	r3, [r2, #28]
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <HAL_MspInit+0x5c>)
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800618e:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <HAL_MspInit+0x60>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <HAL_MspInit+0x60>)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	40021000 	.word	0x40021000
 80061b8:	40010000 	.word	0x40010000

080061bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c4:	f107 0310 	add.w	r3, r7, #16
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	609a      	str	r2, [r3, #8]
 80061d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_ADC_MspInit+0x7c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d129      	bne.n	8006230 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80061dc:	4b17      	ldr	r3, [pc, #92]	; (800623c <HAL_ADC_MspInit+0x80>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	4a16      	ldr	r2, [pc, #88]	; (800623c <HAL_ADC_MspInit+0x80>)
 80061e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061e6:	6193      	str	r3, [r2, #24]
 80061e8:	4b14      	ldr	r3, [pc, #80]	; (800623c <HAL_ADC_MspInit+0x80>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061f4:	4b11      	ldr	r3, [pc, #68]	; (800623c <HAL_ADC_MspInit+0x80>)
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	4a10      	ldr	r2, [pc, #64]	; (800623c <HAL_ADC_MspInit+0x80>)
 80061fa:	f043 0304 	orr.w	r3, r3, #4
 80061fe:	6193      	str	r3, [r2, #24]
 8006200:	4b0e      	ldr	r3, [pc, #56]	; (800623c <HAL_ADC_MspInit+0x80>)
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800620c:	2307      	movs	r3, #7
 800620e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006210:	2303      	movs	r3, #3
 8006212:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006214:	f107 0310 	add.w	r3, r7, #16
 8006218:	4619      	mov	r1, r3
 800621a:	4809      	ldr	r0, [pc, #36]	; (8006240 <HAL_ADC_MspInit+0x84>)
 800621c:	f7fb fdaa 	bl	8001d74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8006220:	2200      	movs	r2, #0
 8006222:	2100      	movs	r1, #0
 8006224:	2012      	movs	r0, #18
 8006226:	f7fb fc10 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800622a:	2012      	movs	r0, #18
 800622c:	f7fb fc29 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006230:	bf00      	nop
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40012400 	.word	0x40012400
 800623c:	40021000 	.word	0x40021000
 8006240:	40010800 	.word	0x40010800

08006244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a11      	ldr	r2, [pc, #68]	; (8006298 <HAL_TIM_Base_MspInit+0x54>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d11b      	bne.n	800628e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <HAL_TIM_Base_MspInit+0x58>)
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	4a10      	ldr	r2, [pc, #64]	; (800629c <HAL_TIM_Base_MspInit+0x58>)
 800625c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006260:	6193      	str	r3, [r2, #24]
 8006262:	4b0e      	ldr	r3, [pc, #56]	; (800629c <HAL_TIM_Base_MspInit+0x58>)
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800626e:	2200      	movs	r2, #0
 8006270:	2100      	movs	r1, #0
 8006272:	2019      	movs	r0, #25
 8006274:	f7fb fbe9 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006278:	2019      	movs	r0, #25
 800627a:	f7fb fc02 	bl	8001a82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	201b      	movs	r0, #27
 8006284:	f7fb fbe1 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006288:	201b      	movs	r0, #27
 800628a:	f7fb fbfa 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40021000 	.word	0x40021000

080062a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a8:	f107 0310 	add.w	r3, r7, #16
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a20      	ldr	r2, [pc, #128]	; (800633c <HAL_UART_MspInit+0x9c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d139      	bne.n	8006334 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80062c0:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <HAL_UART_MspInit+0xa0>)
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	4a1e      	ldr	r2, [pc, #120]	; (8006340 <HAL_UART_MspInit+0xa0>)
 80062c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ca:	61d3      	str	r3, [r2, #28]
 80062cc:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <HAL_UART_MspInit+0xa0>)
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <HAL_UART_MspInit+0xa0>)
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_UART_MspInit+0xa0>)
 80062de:	f043 0308 	orr.w	r3, r3, #8
 80062e2:	6193      	str	r3, [r2, #24]
 80062e4:	4b16      	ldr	r3, [pc, #88]	; (8006340 <HAL_UART_MspInit+0xa0>)
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80062f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f6:	2302      	movs	r3, #2
 80062f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062fa:	2303      	movs	r3, #3
 80062fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062fe:	f107 0310 	add.w	r3, r7, #16
 8006302:	4619      	mov	r1, r3
 8006304:	480f      	ldr	r0, [pc, #60]	; (8006344 <HAL_UART_MspInit+0xa4>)
 8006306:	f7fb fd35 	bl	8001d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800630a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800630e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006318:	f107 0310 	add.w	r3, r7, #16
 800631c:	4619      	mov	r1, r3
 800631e:	4809      	ldr	r0, [pc, #36]	; (8006344 <HAL_UART_MspInit+0xa4>)
 8006320:	f7fb fd28 	bl	8001d74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006324:	2200      	movs	r2, #0
 8006326:	2100      	movs	r1, #0
 8006328:	2027      	movs	r0, #39	; 0x27
 800632a:	f7fb fb8e 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800632e:	2027      	movs	r0, #39	; 0x27
 8006330:	f7fb fba7 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006334:	bf00      	nop
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40004800 	.word	0x40004800
 8006340:	40021000 	.word	0x40021000
 8006344:	40010c00 	.word	0x40010c00

08006348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800634c:	bf00      	nop
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006358:	e7fe      	b.n	8006358 <HardFault_Handler+0x4>

0800635a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800635a:	b480      	push	{r7}
 800635c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800635e:	e7fe      	b.n	800635e <MemManage_Handler+0x4>

08006360 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006364:	e7fe      	b.n	8006364 <BusFault_Handler+0x4>

08006366 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006366:	b480      	push	{r7}
 8006368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800636a:	e7fe      	b.n	800636a <UsageFault_Handler+0x4>

0800636c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8006394:	f7fa fd38 	bl	8000e08 <HAL_IncTick>
	ui_handler_flag = UI_HANDLER_FLAG_FREE;
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <SysTick_Handler+0x34>)
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
	ntc_handler_flag = NTC_HANDLER_FLAG_FREE;
 800639e:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <SysTick_Handler+0x38>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
	if(++ms_counter >= 1000)
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <SysTick_Handler+0x3c>)
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3301      	adds	r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	4a07      	ldr	r2, [pc, #28]	; (80063cc <SysTick_Handler+0x3c>)
 80063b0:	4619      	mov	r1, r3
 80063b2:	8011      	strh	r1, [r2, #0]
 80063b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b8:	d302      	bcc.n	80063c0 <SysTick_Handler+0x30>
	{
		ms_counter = 0;
 80063ba:	4b04      	ldr	r3, [pc, #16]	; (80063cc <SysTick_Handler+0x3c>)
 80063bc:	2200      	movs	r2, #0
 80063be:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063c0:	bf00      	nop
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200008a4 	.word	0x200008a4
 80063c8:	200007e0 	.word	0x200007e0
 80063cc:	2000082a 	.word	0x2000082a

080063d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80063d4:	4802      	ldr	r0, [pc, #8]	; (80063e0 <ADC1_2_IRQHandler+0x10>)
 80063d6:	f7fa fee9 	bl	80011ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000834 	.word	0x20000834

080063e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ZCD_Pin))
 80063e8:	4b08      	ldr	r3, [pc, #32]	; (800640c <EXTI9_5_IRQHandler+0x28>)
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d006      	beq.n	8006402 <EXTI9_5_IRQHandler+0x1e>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 80063f4:	4806      	ldr	r0, [pc, #24]	; (8006410 <EXTI9_5_IRQHandler+0x2c>)
 80063f6:	f7fc fc0a 	bl	8002c0e <HAL_TIM_Base_Start_IT>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 80063fa:	4b06      	ldr	r3, [pc, #24]	; (8006414 <EXTI9_5_IRQHandler+0x30>)
 80063fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006400:	615a      	str	r2, [r3, #20]
		//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8006402:	2080      	movs	r0, #128	; 0x80
 8006404:	f7fb fe28 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006408:	bf00      	nop
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40010400 	.word	0x40010400
 8006410:	20000864 	.word	0x20000864
 8006414:	40010800 	.word	0x40010800

08006418 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;

	// for a test
	//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <TIM1_UP_IRQHandler+0x18>)
 800641e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006422:	615a      	str	r2, [r3, #20]


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006424:	4803      	ldr	r0, [pc, #12]	; (8006434 <TIM1_UP_IRQHandler+0x1c>)
 8006426:	f7fc fc8e 	bl	8002d46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40010800 	.word	0x40010800
 8006434:	20000864 	.word	0x20000864

08006438 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
	// for a test	//LED_RED_GPIO_Port->BSRR = LED_RED_Pin;

	HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
 800643c:	4b04      	ldr	r3, [pc, #16]	; (8006450 <TIM1_CC_IRQHandler+0x18>)
 800643e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006442:	611a      	str	r2, [r3, #16]

	/* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006444:	4803      	ldr	r0, [pc, #12]	; (8006454 <TIM1_CC_IRQHandler+0x1c>)
 8006446:	f7fc fc7e 	bl	8002d46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40010800 	.word	0x40010800
 8006454:	20000864 	.word	0x20000864

08006458 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800645c:	4802      	ldr	r0, [pc, #8]	; (8006468 <USART3_IRQHandler+0x10>)
 800645e:	f7fd fa33 	bl	80038c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006462:	bf00      	nop
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000a48 	.word	0x20000a48

0800646c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if((EXTI->PR & BUTTON_EXIT_Pin) != 0x00u)
 8006470:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <EXTI15_10_IRQHandler+0x70>)
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <EXTI15_10_IRQHandler+0x16>
	{
		ui_menu_back();
 800647c:	f7ff fa9e 	bl	80059bc <ui_menu_back>
 8006480:	e019      	b.n	80064b6 <EXTI15_10_IRQHandler+0x4a>
	}
	else if((EXTI->PR & BUTTON_OK_Pin) != 0x00u)
 8006482:	4b16      	ldr	r3, [pc, #88]	; (80064dc <EXTI15_10_IRQHandler+0x70>)
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <EXTI15_10_IRQHandler+0x28>
	{
		ui_menu_enter();
 800648e:	f7ff fa57 	bl	8005940 <ui_menu_enter>
 8006492:	e010      	b.n	80064b6 <EXTI15_10_IRQHandler+0x4a>
	}
	else if((EXTI->PR & BUTTON_DOWN_Pin) != 0x00u)
 8006494:	4b11      	ldr	r3, [pc, #68]	; (80064dc <EXTI15_10_IRQHandler+0x70>)
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <EXTI15_10_IRQHandler+0x3a>
	{
		ui_menu_next();
 80064a0:	f7ff f9c6 	bl	8005830 <ui_menu_next>
 80064a4:	e007      	b.n	80064b6 <EXTI15_10_IRQHandler+0x4a>
	}
	else if((EXTI->PR & BUTTON_UP_Pin) != 0x00u)
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <EXTI15_10_IRQHandler+0x70>)
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <EXTI15_10_IRQHandler+0x4a>
	{
		ui_menu_prev();
 80064b2:	f7ff f9e7 	bl	8005884 <ui_menu_prev>
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80064b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80064ba:	f7fb fdcd 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80064be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80064c2:	f7fb fdc9 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80064c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80064ca:	f7fb fdc5 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80064ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80064d2:	f7fb fdc1 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40010400 	.word	0x40010400

080064e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80064e4:	4b15      	ldr	r3, [pc, #84]	; (800653c <SystemInit+0x5c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a14      	ldr	r2, [pc, #80]	; (800653c <SystemInit+0x5c>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80064f0:	4b12      	ldr	r3, [pc, #72]	; (800653c <SystemInit+0x5c>)
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	4911      	ldr	r1, [pc, #68]	; (800653c <SystemInit+0x5c>)
 80064f6:	4b12      	ldr	r3, [pc, #72]	; (8006540 <SystemInit+0x60>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <SystemInit+0x5c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0e      	ldr	r2, [pc, #56]	; (800653c <SystemInit+0x5c>)
 8006502:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <SystemInit+0x5c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0a      	ldr	r2, [pc, #40]	; (800653c <SystemInit+0x5c>)
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006518:	4b08      	ldr	r3, [pc, #32]	; (800653c <SystemInit+0x5c>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a07      	ldr	r2, [pc, #28]	; (800653c <SystemInit+0x5c>)
 800651e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006522:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006524:	4b05      	ldr	r3, [pc, #20]	; (800653c <SystemInit+0x5c>)
 8006526:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800652a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <SystemInit+0x64>)
 800652e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006532:	609a      	str	r2, [r3, #8]
#endif 
}
 8006534:	bf00      	nop
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr
 800653c:	40021000 	.word	0x40021000
 8006540:	f8ff0000 	.word	0xf8ff0000
 8006544:	e000ed00 	.word	0xe000ed00

08006548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006548:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800654a:	e003      	b.n	8006554 <LoopCopyDataInit>

0800654c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800654e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006550:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006552:	3104      	adds	r1, #4

08006554 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006554:	480a      	ldr	r0, [pc, #40]	; (8006580 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006558:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800655a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800655c:	d3f6      	bcc.n	800654c <CopyDataInit>
  ldr r2, =_sbss
 800655e:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006560:	e002      	b.n	8006568 <LoopFillZerobss>

08006562 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006562:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006564:	f842 3b04 	str.w	r3, [r2], #4

08006568 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006568:	4b08      	ldr	r3, [pc, #32]	; (800658c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800656a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800656c:	d3f9      	bcc.n	8006562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800656e:	f7ff ffb7 	bl	80064e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006572:	f000 f80f 	bl	8006594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006576:	f7ff fb3b 	bl	8005bf0 <main>
  bx lr
 800657a:	4770      	bx	lr
  ldr r3, =_sidata
 800657c:	08006818 	.word	0x08006818
  ldr r0, =_sdata
 8006580:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006584:	200007b4 	.word	0x200007b4
  ldr r2, =_sbss
 8006588:	200007b8 	.word	0x200007b8
  ldr r3, = _ebss
 800658c:	20000a94 	.word	0x20000a94

08006590 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006590:	e7fe      	b.n	8006590 <CAN1_RX1_IRQHandler>
	...

08006594 <__libc_init_array>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	2500      	movs	r5, #0
 8006598:	4e0c      	ldr	r6, [pc, #48]	; (80065cc <__libc_init_array+0x38>)
 800659a:	4c0d      	ldr	r4, [pc, #52]	; (80065d0 <__libc_init_array+0x3c>)
 800659c:	1ba4      	subs	r4, r4, r6
 800659e:	10a4      	asrs	r4, r4, #2
 80065a0:	42a5      	cmp	r5, r4
 80065a2:	d109      	bne.n	80065b8 <__libc_init_array+0x24>
 80065a4:	f000 f89e 	bl	80066e4 <_init>
 80065a8:	2500      	movs	r5, #0
 80065aa:	4e0a      	ldr	r6, [pc, #40]	; (80065d4 <__libc_init_array+0x40>)
 80065ac:	4c0a      	ldr	r4, [pc, #40]	; (80065d8 <__libc_init_array+0x44>)
 80065ae:	1ba4      	subs	r4, r4, r6
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	42a5      	cmp	r5, r4
 80065b4:	d105      	bne.n	80065c2 <__libc_init_array+0x2e>
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065bc:	4798      	blx	r3
 80065be:	3501      	adds	r5, #1
 80065c0:	e7ee      	b.n	80065a0 <__libc_init_array+0xc>
 80065c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065c6:	4798      	blx	r3
 80065c8:	3501      	adds	r5, #1
 80065ca:	e7f2      	b.n	80065b2 <__libc_init_array+0x1e>
 80065cc:	0800680c 	.word	0x0800680c
 80065d0:	0800680c 	.word	0x0800680c
 80065d4:	0800680c 	.word	0x0800680c
 80065d8:	08006814 	.word	0x08006814

080065dc <memset>:
 80065dc:	4603      	mov	r3, r0
 80065de:	4402      	add	r2, r0
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d100      	bne.n	80065e6 <memset+0xa>
 80065e4:	4770      	bx	lr
 80065e6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ea:	e7f9      	b.n	80065e0 <memset+0x4>

080065ec <register_fini>:
 80065ec:	4b02      	ldr	r3, [pc, #8]	; (80065f8 <register_fini+0xc>)
 80065ee:	b113      	cbz	r3, 80065f6 <register_fini+0xa>
 80065f0:	4802      	ldr	r0, [pc, #8]	; (80065fc <register_fini+0x10>)
 80065f2:	f000 b805 	b.w	8006600 <atexit>
 80065f6:	4770      	bx	lr
 80065f8:	00000000 	.word	0x00000000
 80065fc:	0800660d 	.word	0x0800660d

08006600 <atexit>:
 8006600:	2300      	movs	r3, #0
 8006602:	4601      	mov	r1, r0
 8006604:	461a      	mov	r2, r3
 8006606:	4618      	mov	r0, r3
 8006608:	f000 b816 	b.w	8006638 <__register_exitproc>

0800660c <__libc_fini_array>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	; (800662c <__libc_fini_array+0x20>)
 8006610:	4c07      	ldr	r4, [pc, #28]	; (8006630 <__libc_fini_array+0x24>)
 8006612:	1b64      	subs	r4, r4, r5
 8006614:	10a4      	asrs	r4, r4, #2
 8006616:	b91c      	cbnz	r4, 8006620 <__libc_fini_array+0x14>
 8006618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800661c:	f000 b868 	b.w	80066f0 <_fini>
 8006620:	3c01      	subs	r4, #1
 8006622:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006626:	4798      	blx	r3
 8006628:	e7f5      	b.n	8006616 <__libc_fini_array+0xa>
 800662a:	bf00      	nop
 800662c:	08006814 	.word	0x08006814
 8006630:	08006818 	.word	0x08006818

08006634 <__retarget_lock_acquire_recursive>:
 8006634:	4770      	bx	lr

08006636 <__retarget_lock_release_recursive>:
 8006636:	4770      	bx	lr

08006638 <__register_exitproc>:
 8006638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800663c:	4c26      	ldr	r4, [pc, #152]	; (80066d8 <__register_exitproc+0xa0>)
 800663e:	4606      	mov	r6, r0
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	4698      	mov	r8, r3
 8006644:	460f      	mov	r7, r1
 8006646:	4691      	mov	r9, r2
 8006648:	f7ff fff4 	bl	8006634 <__retarget_lock_acquire_recursive>
 800664c:	4b23      	ldr	r3, [pc, #140]	; (80066dc <__register_exitproc+0xa4>)
 800664e:	681d      	ldr	r5, [r3, #0]
 8006650:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8006654:	b918      	cbnz	r0, 800665e <__register_exitproc+0x26>
 8006656:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800665a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800665e:	6843      	ldr	r3, [r0, #4]
 8006660:	2b1f      	cmp	r3, #31
 8006662:	dd19      	ble.n	8006698 <__register_exitproc+0x60>
 8006664:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <__register_exitproc+0xa8>)
 8006666:	b933      	cbnz	r3, 8006676 <__register_exitproc+0x3e>
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	f7ff ffe4 	bl	8006636 <__retarget_lock_release_recursive>
 800666e:	f04f 30ff 	mov.w	r0, #4294967295
 8006672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006676:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800667a:	f3af 8000 	nop.w
 800667e:	2800      	cmp	r0, #0
 8006680:	d0f2      	beq.n	8006668 <__register_exitproc+0x30>
 8006682:	2200      	movs	r2, #0
 8006684:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8006688:	6042      	str	r2, [r0, #4]
 800668a:	6003      	str	r3, [r0, #0]
 800668c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006690:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8006694:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8006698:	6843      	ldr	r3, [r0, #4]
 800669a:	b19e      	cbz	r6, 80066c4 <__register_exitproc+0x8c>
 800669c:	2201      	movs	r2, #1
 800669e:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80066a2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80066a6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80066aa:	409a      	lsls	r2, r3
 80066ac:	4311      	orrs	r1, r2
 80066ae:	2e02      	cmp	r6, #2
 80066b0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80066b4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80066b8:	bf02      	ittt	eq
 80066ba:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80066be:	430a      	orreq	r2, r1
 80066c0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	3302      	adds	r3, #2
 80066c8:	6042      	str	r2, [r0, #4]
 80066ca:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	f7ff ffb1 	bl	8006636 <__retarget_lock_release_recursive>
 80066d4:	2000      	movs	r0, #0
 80066d6:	e7cc      	b.n	8006672 <__register_exitproc+0x3a>
 80066d8:	200007b0 	.word	0x200007b0
 80066dc:	08006808 	.word	0x08006808
 80066e0:	00000000 	.word	0x00000000

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
