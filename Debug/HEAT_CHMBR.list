
HEAT_CHMBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f3c  08006f3c  0002049c  2**0
                  CONTENTS
  4 .ARM          00000000  08006f3c  08006f3c  0002049c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f3c  08006f3c  0002049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  08006f48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c74  200004a0  080073e4  000204a0  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  20001114  080073e4  00021114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028843  00000000  00000000  000204c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000473d  00000000  00000000  00048d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dfa7  00000000  00000000  0004d445  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001638  00000000  00000000  0005b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016e8  00000000  00000000  0005ca28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00017d3f  00000000  00000000  0005e110  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00013417  00000000  00000000  00075e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007c067  00000000  00000000  00089266  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001052cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004098  00000000  00000000  00105348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004a0 	.word	0x200004a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006044 	.word	0x08006044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004a4 	.word	0x200004a4
 800014c:	08006044 	.word	0x08006044

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bec:	d1ed      	bne.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__gesf2>:
 8000fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fec:	e006      	b.n	8000ffc <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__lesf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	e002      	b.n	8000ffc <__cmpsf2+0x4>
 8000ff6:	bf00      	nop

08000ff8 <__cmpsf2>:
 8000ff8:	f04f 0c01 	mov.w	ip, #1
 8000ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001000:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001004:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	bf18      	it	ne
 800100e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001012:	d011      	beq.n	8001038 <__cmpsf2+0x40>
 8001014:	b001      	add	sp, #4
 8001016:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101a:	bf18      	it	ne
 800101c:	ea90 0f01 	teqne	r0, r1
 8001020:	bf58      	it	pl
 8001022:	ebb2 0003 	subspl.w	r0, r2, r3
 8001026:	bf88      	it	hi
 8001028:	17c8      	asrhi	r0, r1, #31
 800102a:	bf38      	it	cc
 800102c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001030:	bf18      	it	ne
 8001032:	f040 0001 	orrne.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__cmpsf2+0x4c>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d105      	bne.n	8001050 <__cmpsf2+0x58>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d1e4      	bne.n	8001014 <__cmpsf2+0x1c>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d0e1      	beq.n	8001014 <__cmpsf2+0x1c>
 8001050:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__aeabi_cfrcmple>:
 8001058:	4684      	mov	ip, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4661      	mov	r1, ip
 800105e:	e7ff      	b.n	8001060 <__aeabi_cfcmpeq>

08001060 <__aeabi_cfcmpeq>:
 8001060:	b50f      	push	{r0, r1, r2, r3, lr}
 8001062:	f7ff ffc9 	bl	8000ff8 <__cmpsf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	bf48      	it	mi
 800106a:	f110 0f00 	cmnmi.w	r0, #0
 800106e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001070 <__aeabi_fcmpeq>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff fff4 	bl	8001060 <__aeabi_cfcmpeq>
 8001078:	bf0c      	ite	eq
 800107a:	2001      	moveq	r0, #1
 800107c:	2000      	movne	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmplt>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffea 	bl	8001060 <__aeabi_cfcmpeq>
 800108c:	bf34      	ite	cc
 800108e:	2001      	movcc	r0, #1
 8001090:	2000      	movcs	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmple>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffe0 	bl	8001060 <__aeabi_cfcmpeq>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpge>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffd2 	bl	8001058 <__aeabi_cfrcmple>
 80010b4:	bf94      	ite	ls
 80010b6:	2001      	movls	r0, #1
 80010b8:	2000      	movhi	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpgt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffc8 	bl	8001058 <__aeabi_cfrcmple>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_InitTick+0x40>)
 80010da:	7818      	ldrb	r0, [r3, #0]
 80010dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80010e4:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_InitTick+0x44>)
 80010e6:	6810      	ldr	r0, [r2, #0]
 80010e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ec:	f000 fc66 	bl	80019bc <HAL_SYSTICK_Config>
 80010f0:	b968      	cbnz	r0, 800110e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	2c0f      	cmp	r4, #15
 80010f4:	d901      	bls.n	80010fa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
 80010f8:	e00a      	b.n	8001110 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fa:	2200      	movs	r2, #0
 80010fc:	4621      	mov	r1, r4
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001102:	f000 fc19 	bl	8001938 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_InitTick+0x48>)
 8001108:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2000      	movs	r0, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800110e:	2001      	movs	r0, #1
}
 8001110:	bd10      	pop	{r4, pc}
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000
 8001118:	20000068 	.word	0x20000068
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_Init>:
{
 8001120:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x20>)
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 fbf1 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ffce 	bl	80010d4 <HAL_InitTick>
  HAL_MspInit();
 8001138:	f004 fcd8 	bl	8005aec <HAL_MspInit>
}
 800113c:	2000      	movs	r0, #0
 800113e:	bd08      	pop	{r3, pc}
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x10>)
 8001146:	6811      	ldr	r1, [r2, #0]
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_IncTick+0x14>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	440b      	add	r3, r1
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200004d8 	.word	0x200004d8
 8001158:	20000000 	.word	0x20000000

0800115c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800115c:	4b01      	ldr	r3, [pc, #4]	; (8001164 <HAL_GetTick+0x8>)
 800115e:	6818      	ldr	r0, [r3, #0]
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200004d8 	.word	0x200004d8

08001168 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001168:	4770      	bx	lr

0800116a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800116a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800116c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800116e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001170:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001174:	d003      	beq.n	800117e <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4798      	blx	r3
  }
}
 800117c:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800117e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	6892      	ldr	r2, [r2, #8]
 800118a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800118e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001192:	d003      	beq.n	800119c <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffe7 	bl	8001168 <HAL_ADC_ConvCpltCallback>
 800119a:	e7ef      	b.n	800117c <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800119c:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800119e:	2a00      	cmp	r2, #0
 80011a0:	d1f8      	bne.n	8001194 <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ac:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80011b0:	d1f0      	bne.n	8001194 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
 80011ba:	e7eb      	b.n	8001194 <ADC_DMAConvCplt+0x2a>

080011bc <HAL_ADC_ConvHalfCpltCallback>:
}
 80011bc:	4770      	bx	lr

080011be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011be:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80011c2:	f7ff fffb 	bl	80011bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011c6:	bd08      	pop	{r3, pc}

080011c8 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80011c8:	4770      	bx	lr

080011ca <HAL_ADC_IRQHandler>:
{
 80011ca:	b510      	push	{r4, lr}
 80011cc:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011ce:	6803      	ldr	r3, [r0, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	f012 0f20 	tst.w	r2, #32
 80011d6:	d018      	beq.n	800120a <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	f012 0f02 	tst.w	r2, #2
 80011de:	d014      	beq.n	800120a <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80011e2:	f012 0f10 	tst.w	r2, #16
 80011e6:	d103      	bne.n	80011f0 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80011ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ee:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80011f6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80011fa:	d038      	beq.n	800126e <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff ffb3 	bl	8001168 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	f06f 0212 	mvn.w	r2, #18
 8001208:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001212:	d022      	beq.n	800125a <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f012 0f04 	tst.w	r2, #4
 800121a:	d01e      	beq.n	800125a <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800121e:	f012 0f10 	tst.w	r2, #16
 8001222:	d103      	bne.n	800122c <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001226:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800122a:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001232:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001236:	d031      	beq.n	800129c <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001238:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800123a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800123e:	d105      	bne.n	800124c <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001246:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800124a:	d024      	beq.n	8001296 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800124c:	4620      	mov	r0, r4
 800124e:	f000 fb5f 	bl	8001910 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	f06f 020c 	mvn.w	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001262:	d003      	beq.n	800126c <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f013 0f01 	tst.w	r3, #1
 800126a:	d128      	bne.n	80012be <HAL_ADC_IRQHandler+0xf4>
}
 800126c:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800126e:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001270:	2a00      	cmp	r2, #0
 8001272:	d1c3      	bne.n	80011fc <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	f022 0220 	bic.w	r2, r2, #32
 800127a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800127e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001282:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001286:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800128a:	d1b7      	bne.n	80011fc <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	62a3      	str	r3, [r4, #40]	; 0x28
 8001294:	e7b2      	b.n	80011fc <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001296:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001298:	2a00      	cmp	r2, #0
 800129a:	d1d7      	bne.n	800124c <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a2:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012aa:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012b2:	d1cb      	bne.n	800124c <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80012bc:	e7c6      	b.n	800124c <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012c6:	4620      	mov	r0, r4
 80012c8:	f7ff ff7e 	bl	80011c8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	f06f 0201 	mvn.w	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	e7ca      	b.n	800126c <HAL_ADC_IRQHandler+0xa2>

080012d6 <HAL_ADC_ErrorCallback>:
}
 80012d6:	4770      	bx	lr

080012d8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012d8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012da:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e2:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012ec:	f7ff fff3 	bl	80012d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012f0:	bd08      	pop	{r3, pc}
	...

080012f4 <HAL_ADC_ConfigChannel>:
{ 
 80012f4:	b430      	push	{r4, r5}
 80012f6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80012fc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001300:	2b01      	cmp	r3, #1
 8001302:	f000 808b 	beq.w	800141c <HAL_ADC_ConfigChannel+0x128>
 8001306:	4602      	mov	r2, r0
 8001308:	2301      	movs	r3, #1
 800130a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800130e:	684b      	ldr	r3, [r1, #4]
 8001310:	2b06      	cmp	r3, #6
 8001312:	d829      	bhi.n	8001368 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001314:	6805      	ldr	r5, [r0, #0]
 8001316:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800131c:	3b05      	subs	r3, #5
 800131e:	241f      	movs	r4, #31
 8001320:	409c      	lsls	r4, r3
 8001322:	ea20 0004 	bic.w	r0, r0, r4
 8001326:	680c      	ldr	r4, [r1, #0]
 8001328:	fa04 f303 	lsl.w	r3, r4, r3
 800132c:	4303      	orrs	r3, r0
 800132e:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001330:	680b      	ldr	r3, [r1, #0]
 8001332:	2b09      	cmp	r3, #9
 8001334:	d938      	bls.n	80013a8 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001336:	6815      	ldr	r5, [r2, #0]
 8001338:	68e8      	ldr	r0, [r5, #12]
 800133a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800133e:	3b1e      	subs	r3, #30
 8001340:	2407      	movs	r4, #7
 8001342:	409c      	lsls	r4, r3
 8001344:	ea20 0004 	bic.w	r0, r0, r4
 8001348:	688c      	ldr	r4, [r1, #8]
 800134a:	fa04 f303 	lsl.w	r3, r4, r3
 800134e:	4303      	orrs	r3, r0
 8001350:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001352:	680b      	ldr	r3, [r1, #0]
 8001354:	3b10      	subs	r3, #16
 8001356:	2b01      	cmp	r3, #1
 8001358:	d934      	bls.n	80013c4 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800135c:	2300      	movs	r3, #0
 800135e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8001362:	b002      	add	sp, #8
 8001364:	bc30      	pop	{r4, r5}
 8001366:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d80e      	bhi.n	800138a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800136c:	6805      	ldr	r5, [r0, #0]
 800136e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001370:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001374:	3b23      	subs	r3, #35	; 0x23
 8001376:	241f      	movs	r4, #31
 8001378:	409c      	lsls	r4, r3
 800137a:	ea20 0004 	bic.w	r0, r0, r4
 800137e:	680c      	ldr	r4, [r1, #0]
 8001380:	fa04 f303 	lsl.w	r3, r4, r3
 8001384:	4303      	orrs	r3, r0
 8001386:	632b      	str	r3, [r5, #48]	; 0x30
 8001388:	e7d2      	b.n	8001330 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800138a:	6805      	ldr	r5, [r0, #0]
 800138c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800138e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001392:	3b41      	subs	r3, #65	; 0x41
 8001394:	241f      	movs	r4, #31
 8001396:	409c      	lsls	r4, r3
 8001398:	ea20 0004 	bic.w	r0, r0, r4
 800139c:	680c      	ldr	r4, [r1, #0]
 800139e:	fa04 f303 	lsl.w	r3, r4, r3
 80013a2:	4303      	orrs	r3, r0
 80013a4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80013a6:	e7c3      	b.n	8001330 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013a8:	6815      	ldr	r5, [r2, #0]
 80013aa:	6928      	ldr	r0, [r5, #16]
 80013ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013b0:	2407      	movs	r4, #7
 80013b2:	409c      	lsls	r4, r3
 80013b4:	ea20 0004 	bic.w	r0, r0, r4
 80013b8:	688c      	ldr	r4, [r1, #8]
 80013ba:	fa04 f303 	lsl.w	r3, r4, r3
 80013be:	4303      	orrs	r3, r0
 80013c0:	612b      	str	r3, [r5, #16]
 80013c2:	e7c6      	b.n	8001352 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	4816      	ldr	r0, [pc, #88]	; (8001420 <HAL_ADC_ConfigChannel+0x12c>)
 80013c8:	4283      	cmp	r3, r0
 80013ca:	d005      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80013d4:	2001      	movs	r0, #1
 80013d6:	e7c1      	b.n	800135c <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013d8:	6898      	ldr	r0, [r3, #8]
 80013da:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80013de:	d11b      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013e0:	6898      	ldr	r0, [r3, #8]
 80013e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013e6:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013e8:	680b      	ldr	r3, [r1, #0]
 80013ea:	2b10      	cmp	r3, #16
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7b4      	b.n	800135c <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_ADC_ConfigChannel+0x130>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <HAL_ADC_ConfigChannel+0x134>)
 80013f8:	fba1 1303 	umull	r1, r3, r1, r3
 80013fc:	0c9b      	lsrs	r3, r3, #18
 80013fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001402:	0059      	lsls	r1, r3, #1
 8001404:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001406:	e002      	b.n	800140e <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8001408:	9b01      	ldr	r3, [sp, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800140e:	9b01      	ldr	r3, [sp, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f9      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2000      	movs	r0, #0
 8001416:	e7a1      	b.n	800135c <HAL_ADC_ConfigChannel+0x68>
 8001418:	2000      	movs	r0, #0
 800141a:	e79f      	b.n	800135c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 800141c:	2002      	movs	r0, #2
 800141e:	e7a0      	b.n	8001362 <HAL_ADC_ConfigChannel+0x6e>
 8001420:	40012400 	.word	0x40012400
 8001424:	20000068 	.word	0x20000068
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_Enable>:
{
 800142c:	b530      	push	{r4, r5, lr}
 800142e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001434:	6803      	ldr	r3, [r0, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	f012 0f01 	tst.w	r2, #1
 800143c:	d12e      	bne.n	800149c <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <ADC_Enable+0x78>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <ADC_Enable+0x7c>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9b      	lsrs	r3, r3, #18
 8001452:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001454:	e002      	b.n	800145c <ADC_Enable+0x30>
      wait_loop_index--;
 8001456:	9b01      	ldr	r3, [sp, #4]
 8001458:	3b01      	subs	r3, #1
 800145a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f9      	bne.n	8001456 <ADC_Enable+0x2a>
 8001462:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001464:	f7ff fe7a 	bl	800115c <HAL_GetTick>
 8001468:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f013 0f01 	tst.w	r3, #1
 8001472:	d111      	bne.n	8001498 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001474:	f7ff fe72 	bl	800115c <HAL_GetTick>
 8001478:	1b40      	subs	r0, r0, r5
 800147a:	2802      	cmp	r0, #2
 800147c:	d9f5      	bls.n	800146a <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800148e:	2300      	movs	r3, #0
 8001490:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001494:	2001      	movs	r0, #1
 8001496:	e002      	b.n	800149e <ADC_Enable+0x72>
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	e000      	b.n	800149e <ADC_Enable+0x72>
 800149c:	2000      	movs	r0, #0
}
 800149e:	b003      	add	sp, #12
 80014a0:	bd30      	pop	{r4, r5, pc}
 80014a2:	bf00      	nop
 80014a4:	20000068 	.word	0x20000068
 80014a8:	431bde83 	.word	0x431bde83

080014ac <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80014ac:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d06a      	beq.n	800158a <HAL_ADC_Start+0xde>
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80014b8:	2301      	movs	r3, #1
 80014ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80014be:	f7ff ffb5 	bl	800142c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80014c2:	4602      	mov	r2, r0
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d15b      	bne.n	8001580 <HAL_ADC_Start+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 80014c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	492d      	ldr	r1, [pc, #180]	; (8001590 <HAL_ADC_Start+0xe4>)
 80014dc:	428b      	cmp	r3, r1
 80014de:	d027      	beq.n	8001530 <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014e2:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 80014e6:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80014ee:	d005      	beq.n	80014fc <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014f2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80014f6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80014fa:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014fe:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8001502:	d02b      	beq.n	800155c <HAL_ADC_Start+0xb0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001504:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001506:	f021 0106 	bic.w	r1, r1, #6
 800150a:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800150c:	2100      	movs	r1, #0
 800150e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001512:	f06f 0102 	mvn.w	r1, #2
 8001516:	6019      	str	r1, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 8001520:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 8001524:	d01d      	beq.n	8001562 <HAL_ADC_Start+0xb6>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001526:	6899      	ldr	r1, [r3, #8]
 8001528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800152c:	6099      	str	r1, [r3, #8]
 800152e:	e02a      	b.n	8001586 <HAL_ADC_Start+0xda>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001530:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001534:	6849      	ldr	r1, [r1, #4]
 8001536:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800153a:	d0d1      	beq.n	80014e0 <HAL_ADC_Start+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800153c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800153e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001542:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001544:	4913      	ldr	r1, [pc, #76]	; (8001594 <HAL_ADC_Start+0xe8>)
 8001546:	6849      	ldr	r1, [r1, #4]
 8001548:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800154c:	d0d6      	beq.n	80014fc <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800154e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001550:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001554:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001558:	62a1      	str	r1, [r4, #40]	; 0x28
 800155a:	e7cf      	b.n	80014fc <HAL_ADC_Start+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800155c:	2100      	movs	r1, #0
 800155e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001560:	e7d4      	b.n	800150c <HAL_ADC_Start+0x60>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001562:	490b      	ldr	r1, [pc, #44]	; (8001590 <HAL_ADC_Start+0xe4>)
 8001564:	428b      	cmp	r3, r1
 8001566:	d004      	beq.n	8001572 <HAL_ADC_Start+0xc6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 800156e:	6099      	str	r1, [r3, #8]
 8001570:	e009      	b.n	8001586 <HAL_ADC_Start+0xda>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001572:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001576:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001578:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800157c:	d1d3      	bne.n	8001526 <HAL_ADC_Start+0x7a>
 800157e:	e7f3      	b.n	8001568 <HAL_ADC_Start+0xbc>
    __HAL_UNLOCK(hadc);
 8001580:	2300      	movs	r3, #0
 8001582:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001586:	4610      	mov	r0, r2
 8001588:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800158a:	2202      	movs	r2, #2
}
 800158c:	4610      	mov	r0, r2
 800158e:	4770      	bx	lr
 8001590:	40012800 	.word	0x40012800
 8001594:	40012400 	.word	0x40012400

08001598 <HAL_ADC_Start_DMA>:
{
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800159a:	6804      	ldr	r4, [r0, #0]
 800159c:	4d45      	ldr	r5, [pc, #276]	; (80016b4 <HAL_ADC_Start_DMA+0x11c>)
 800159e:	42ac      	cmp	r4, r5
 80015a0:	d05b      	beq.n	800165a <HAL_ADC_Start_DMA+0xc2>
 80015a2:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_ADC_Start_DMA+0x120>)
 80015a4:	429c      	cmp	r4, r3
 80015a6:	d058      	beq.n	800165a <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 80015a8:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80015ac:	2c01      	cmp	r4, #1
 80015ae:	d07e      	beq.n	80016ae <HAL_ADC_Start_DMA+0x116>
 80015b0:	4616      	mov	r6, r2
 80015b2:	460d      	mov	r5, r1
 80015b4:	4604      	mov	r4, r0
 80015b6:	2301      	movs	r3, #1
 80015b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80015bc:	f7ff ff36 	bl	800142c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80015c0:	4607      	mov	r7, r0
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d16e      	bne.n	80016a4 <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 80015c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_ADC_Start_DMA+0x120>)
 80015da:	429a      	cmp	r2, r3
 80015dc:	d044      	beq.n	8001668 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015e4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015e6:	6853      	ldr	r3, [r2, #4]
 80015e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80015ec:	d005      	beq.n	80015fa <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001600:	d048      	beq.n	8001694 <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001604:	f023 0306 	bic.w	r3, r3, #6
 8001608:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800160a:	2300      	movs	r3, #0
 800160c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001610:	6a23      	ldr	r3, [r4, #32]
 8001612:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <HAL_ADC_Start_DMA+0x124>)
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001616:	6a23      	ldr	r3, [r4, #32]
 8001618:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <HAL_ADC_Start_DMA+0x128>)
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800161c:	6a23      	ldr	r3, [r4, #32]
 800161e:	4a29      	ldr	r2, [pc, #164]	; (80016c4 <HAL_ADC_Start_DMA+0x12c>)
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	f06f 0202 	mvn.w	r2, #2
 8001628:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	6893      	ldr	r3, [r2, #8]
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001634:	6821      	ldr	r1, [r4, #0]
 8001636:	4633      	mov	r3, r6
 8001638:	462a      	mov	r2, r5
 800163a:	314c      	adds	r1, #76	; 0x4c
 800163c:	6a20      	ldr	r0, [r4, #32]
 800163e:	f000 fa1f 	bl	8001a80 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800164a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800164e:	d024      	beq.n	800169a <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001650:	6893      	ldr	r3, [r2, #8]
 8001652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001656:	6093      	str	r3, [r2, #8]
 8001658:	e027      	b.n	80016aa <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_ADC_Start_DMA+0x11c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001662:	d0a1      	beq.n	80015a8 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 8001664:	2701      	movs	r7, #1
 8001666:	e020      	b.n	80016aa <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001668:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001672:	d0b4      	beq.n	80015de <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001674:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800167a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_ADC_Start_DMA+0x11c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001684:	d0b9      	beq.n	80015fa <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800168c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001690:	62a3      	str	r3, [r4, #40]	; 0x28
 8001692:	e7b2      	b.n	80015fa <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 8001694:	2300      	movs	r3, #0
 8001696:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001698:	e7b7      	b.n	800160a <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800169a:	6893      	ldr	r3, [r2, #8]
 800169c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80016a0:	6093      	str	r3, [r2, #8]
 80016a2:	e002      	b.n	80016aa <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 80016a4:	2300      	movs	r3, #0
 80016a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80016aa:	4638      	mov	r0, r7
 80016ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80016ae:	2702      	movs	r7, #2
 80016b0:	e7fb      	b.n	80016aa <HAL_ADC_Start_DMA+0x112>
 80016b2:	bf00      	nop
 80016b4:	40012400 	.word	0x40012400
 80016b8:	40012800 	.word	0x40012800
 80016bc:	0800116b 	.word	0x0800116b
 80016c0:	080011bf 	.word	0x080011bf
 80016c4:	080012d9 	.word	0x080012d9

080016c8 <ADC_ConversionStop_Disable>:
{
 80016c8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016ca:	6803      	ldr	r3, [r0, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	f012 0f01 	tst.w	r2, #1
 80016d2:	d101      	bne.n	80016d8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80016d4:	2000      	movs	r0, #0
}
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80016e2:	f7ff fd3b 	bl	800115c <HAL_GetTick>
 80016e6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f013 0f01 	tst.w	r3, #1
 80016f0:	d00e      	beq.n	8001710 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016f2:	f7ff fd33 	bl	800115c <HAL_GetTick>
 80016f6:	1b40      	subs	r0, r0, r5
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d9f5      	bls.n	80016e8 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001704:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 800170c:	2001      	movs	r0, #1
 800170e:	e7e2      	b.n	80016d6 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001710:	2000      	movs	r0, #0
 8001712:	e7e0      	b.n	80016d6 <ADC_ConversionStop_Disable+0xe>

08001714 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001714:	2800      	cmp	r0, #0
 8001716:	d07f      	beq.n	8001818 <HAL_ADC_Init+0x104>
{
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800171c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800171e:	2b00      	cmp	r3, #0
 8001720:	d033      	beq.n	800178a <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ffd0 	bl	80016c8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800172a:	f013 0310 	ands.w	r3, r3, #16
 800172e:	d16d      	bne.n	800180c <HAL_ADC_Init+0xf8>
 8001730:	2800      	cmp	r0, #0
 8001732:	d16b      	bne.n	800180c <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001736:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800173a:	f022 0202 	bic.w	r2, r2, #2
 800173e:	f042 0202 	orr.w	r2, r2, #2
 8001742:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001746:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001748:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800174a:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800174c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001750:	68a1      	ldr	r1, [r4, #8]
 8001752:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001756:	d021      	beq.n	800179c <HAL_ADC_Init+0x88>
 8001758:	2901      	cmp	r1, #1
 800175a:	d01c      	beq.n	8001796 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800175c:	7d21      	ldrb	r1, [r4, #20]
 800175e:	2901      	cmp	r1, #1
 8001760:	d01f      	beq.n	80017a2 <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 8001762:	6825      	ldr	r5, [r4, #0]
 8001764:	6869      	ldr	r1, [r5, #4]
 8001766:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800176a:	430b      	orrs	r3, r1
 800176c:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800176e:	6821      	ldr	r1, [r4, #0]
 8001770:	688d      	ldr	r5, [r1, #8]
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_ADC_Init+0x108>)
 8001774:	402b      	ands	r3, r5
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800177a:	68a3      	ldr	r3, [r4, #8]
 800177c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001780:	d020      	beq.n	80017c4 <HAL_ADC_Init+0xb0>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d01e      	beq.n	80017c4 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8001786:	2100      	movs	r1, #0
 8001788:	e01f      	b.n	80017ca <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 800178a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800178c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001790:	f004 f9ce 	bl	8005b30 <HAL_ADC_MspInit>
 8001794:	e7c5      	b.n	8001722 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179a:	e7df      	b.n	800175c <HAL_ADC_Init+0x48>
 800179c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a0:	e7dc      	b.n	800175c <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a2:	b935      	cbnz	r5, 80017b2 <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017a4:	69a1      	ldr	r1, [r4, #24]
 80017a6:	3901      	subs	r1, #1
 80017a8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 80017ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b0:	e7d7      	b.n	8001762 <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80017b4:	f041 0120 	orr.w	r1, r1, #32
 80017b8:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017bc:	f041 0101 	orr.w	r1, r1, #1
 80017c0:	62e1      	str	r1, [r4, #44]	; 0x2c
 80017c2:	e7ce      	b.n	8001762 <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017c4:	6923      	ldr	r3, [r4, #16]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80017ca:	6825      	ldr	r5, [r4, #0]
 80017cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80017d2:	430b      	orrs	r3, r1
 80017d4:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_ADC_Init+0x10c>)
 80017dc:	400b      	ands	r3, r1
 80017de:	429a      	cmp	r2, r3
 80017e0:	d00b      	beq.n	80017fa <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 80017e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017e4:	f023 0312 	bic.w	r3, r3, #18
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
 80017f8:	e00d      	b.n	8001816 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80017fa:	2300      	movs	r3, #0
 80017fc:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80017fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001800:	f023 0303 	bic.w	r3, r3, #3
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	62a3      	str	r3, [r4, #40]	; 0x28
 800180a:	e004      	b.n	8001816 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001814:	2001      	movs	r0, #1
}
 8001816:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
}
 800181a:	4770      	bx	lr
 800181c:	ffe1f7fd 	.word	0xffe1f7fd
 8001820:	ff1f0efe 	.word	0xff1f0efe

08001824 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001830:	2b01      	cmp	r3, #1
 8001832:	d068      	beq.n	8001906 <HAL_ADCEx_Calibration_Start+0xe2>
 8001834:	4604      	mov	r4, r0
 8001836:	2301      	movs	r3, #1
 8001838:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800183c:	f7ff ff44 	bl	80016c8 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001840:	4605      	mov	r5, r0
 8001842:	b128      	cbz	r0, 8001850 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001844:	2300      	movs	r3, #0
 8001846:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800184a:	4628      	mov	r0, r5
 800184c:	b002      	add	sp, #8
 800184e:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001850:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001852:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001856:	f023 0302 	bic.w	r3, r3, #2
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_ADCEx_Calibration_Start+0xe8>)
 8001862:	681e      	ldr	r6, [r3, #0]
 8001864:	2002      	movs	r0, #2
 8001866:	f000 ff8f 	bl	8002788 <HAL_RCCEx_GetPeriphCLKFreq>
 800186a:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800186e:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8001870:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001872:	e002      	b.n	800187a <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 8001874:	9b01      	ldr	r3, [sp, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800187a:	9b01      	ldr	r3, [sp, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f9      	bne.n	8001874 <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff fdd3 	bl	800142c <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	6893      	ldr	r3, [r2, #8]
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001890:	f7ff fc64 	bl	800115c <HAL_GetTick>
 8001894:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	f012 0f08 	tst.w	r2, #8
 800189e:	d00f      	beq.n	80018c0 <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018a0:	f7ff fc5c 	bl	800115c <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	280a      	cmp	r0, #10
 80018a8:	d9f5      	bls.n	8001896 <HAL_ADCEx_Calibration_Start+0x72>
        ADC_STATE_CLR_SET(hadc->State,
 80018aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018ac:	f023 0312 	bic.w	r3, r3, #18
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80018b6:	2300      	movs	r3, #0
 80018b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80018bc:	2501      	movs	r5, #1
 80018be:	e7c4      	b.n	800184a <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	f042 0204 	orr.w	r2, r2, #4
 80018c6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80018c8:	f7ff fc48 	bl	800115c <HAL_GetTick>
 80018cc:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f013 0f04 	tst.w	r3, #4
 80018d6:	d00f      	beq.n	80018f8 <HAL_ADCEx_Calibration_Start+0xd4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018d8:	f7ff fc40 	bl	800115c <HAL_GetTick>
 80018dc:	1b80      	subs	r0, r0, r6
 80018de:	280a      	cmp	r0, #10
 80018e0:	d9f5      	bls.n	80018ce <HAL_ADCEx_Calibration_Start+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 80018e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018e4:	f023 0312 	bic.w	r3, r3, #18
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80018ee:	2300      	movs	r3, #0
 80018f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80018f4:	2501      	movs	r5, #1
 80018f6:	e7a8      	b.n	800184a <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	62a3      	str	r3, [r4, #40]	; 0x28
 8001904:	e79e      	b.n	8001844 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8001906:	2502      	movs	r5, #2
 8001908:	e79f      	b.n	800184a <HAL_ADCEx_Calibration_Start+0x26>
 800190a:	bf00      	nop
 800190c:	20000068 	.word	0x20000068

08001910 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001910:	4770      	bx	lr
	...

08001914 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001916:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001918:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001920:	0200      	lsls	r0, r0, #8
 8001922:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001926:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001928:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800192c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001930:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001938:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_NVIC_SetPriority+0x60>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001942:	f1c3 0407 	rsb	r4, r3, #7
 8001946:	2c04      	cmp	r4, #4
 8001948:	bf28      	it	cs
 800194a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194c:	1d1d      	adds	r5, r3, #4
 800194e:	2d06      	cmp	r5, #6
 8001950:	d918      	bls.n	8001984 <HAL_NVIC_SetPriority+0x4c>
 8001952:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 35ff 	mov.w	r5, #4294967295
 8001958:	fa05 f404 	lsl.w	r4, r5, r4
 800195c:	ea21 0104 	bic.w	r1, r1, r4
 8001960:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001962:	fa05 f303 	lsl.w	r3, r5, r3
 8001966:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800196c:	2800      	cmp	r0, #0
 800196e:	db0b      	blt.n	8001988 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	0109      	lsls	r1, r1, #4
 8001972:	b2c9      	uxtb	r1, r1
 8001974:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001978:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800197c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001980:	bc30      	pop	{r4, r5}
 8001982:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001984:	2300      	movs	r3, #0
 8001986:	e7e5      	b.n	8001954 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	f000 000f 	and.w	r0, r0, #15
 800198c:	0109      	lsls	r1, r1, #4
 800198e:	b2c9      	uxtb	r1, r1
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <HAL_NVIC_SetPriority+0x64>)
 8001992:	5419      	strb	r1, [r3, r0]
 8001994:	e7f4      	b.n	8001980 <HAL_NVIC_SetPriority+0x48>
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00
 800199c:	e000ed14 	.word	0xe000ed14

080019a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019a0:	2800      	cmp	r0, #0
 80019a2:	db07      	blt.n	80019b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a4:	f000 021f 	and.w	r2, r0, #31
 80019a8:	0940      	lsrs	r0, r0, #5
 80019aa:	2301      	movs	r3, #1
 80019ac:	4093      	lsls	r3, r2
 80019ae:	4a02      	ldr	r2, [pc, #8]	; (80019b8 <HAL_NVIC_EnableIRQ+0x18>)
 80019b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	3801      	subs	r0, #1
 80019be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019c2:	d20a      	bcs.n	80019da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_SYSTICK_Config+0x24>)
 80019c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_SYSTICK_Config+0x28>)
 80019ca:	21f0      	movs	r1, #240	; 0xf0
 80019cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	2000      	movs	r0, #0
 80019d2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e8:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ea:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80019ec:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80019ee:	2401      	movs	r4, #1
 80019f0:	40b4      	lsls	r4, r6
 80019f2:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019f4:	6804      	ldr	r4, [r0, #0]
 80019f6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019f8:	6843      	ldr	r3, [r0, #4]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d005      	beq.n	8001a0a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80019fe:	6803      	ldr	r3, [r0, #0]
 8001a00:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001a02:	6803      	ldr	r3, [r0, #0]
 8001a04:	60da      	str	r2, [r3, #12]
  }
}
 8001a06:	bc70      	pop	{r4, r5, r6}
 8001a08:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001a0a:	6803      	ldr	r3, [r0, #0]
 8001a0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	60d9      	str	r1, [r3, #12]
 8001a12:	e7f8      	b.n	8001a06 <DMA_SetConfig+0x1e>

08001a14 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001a14:	b360      	cbz	r0, 8001a70 <HAL_DMA_Init+0x5c>
{
 8001a16:	b410      	push	{r4}
 8001a18:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a1a:	6801      	ldr	r1, [r0, #0]
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_DMA_Init+0x60>)
 8001a1e:	440b      	add	r3, r1
 8001a20:	4815      	ldr	r0, [pc, #84]	; (8001a78 <HAL_DMA_Init+0x64>)
 8001a22:	fba0 0303 	umull	r0, r3, r0, r3
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_DMA_Init+0x68>)
 8001a2e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a30:	2302      	movs	r3, #2
 8001a32:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001a36:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a38:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8001a3c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001a40:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8001a44:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	68d4      	ldr	r4, [r2, #12]
 8001a48:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4a:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4e:	6954      	ldr	r4, [r2, #20]
 8001a50:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a52:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a54:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a56:	69d4      	ldr	r4, [r2, #28]
 8001a58:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001a5a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001a5c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001a68:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001a6c:	bc10      	pop	{r4}
 8001a6e:	4770      	bx	lr
    return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
}
 8001a72:	4770      	bx	lr
 8001a74:	bffdfff8 	.word	0xbffdfff8
 8001a78:	cccccccd 	.word	0xcccccccd
 8001a7c:	40020000 	.word	0x40020000

08001a80 <HAL_DMA_Start_IT>:
{
 8001a80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001a82:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001a86:	2c01      	cmp	r4, #1
 8001a88:	d032      	beq.n	8001af0 <HAL_DMA_Start_IT+0x70>
 8001a8a:	2401      	movs	r4, #1
 8001a8c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a90:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001a94:	2c01      	cmp	r4, #1
 8001a96:	d004      	beq.n	8001aa2 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001a9e:	2002      	movs	r0, #2
}
 8001aa0:	bd38      	pop	{r3, r4, r5, pc}
 8001aa2:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aaa:	2000      	movs	r0, #0
 8001aac:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001aae:	6825      	ldr	r5, [r4, #0]
 8001ab0:	6828      	ldr	r0, [r5, #0]
 8001ab2:	f020 0001 	bic.w	r0, r0, #1
 8001ab6:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff ff95 	bl	80019e8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ac0:	b15b      	cbz	r3, 8001ada <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	f043 030e 	orr.w	r3, r3, #14
 8001aca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e7e2      	b.n	8001aa0 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ae4:	6822      	ldr	r2, [r4, #0]
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	f043 030a 	orr.w	r3, r3, #10
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e7ed      	b.n	8001acc <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001af0:	2002      	movs	r0, #2
 8001af2:	e7d5      	b.n	8001aa0 <HAL_DMA_Start_IT+0x20>

08001af4 <HAL_DMA_Abort_IT>:
{  
 8001af4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001af6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afe:	2304      	movs	r3, #4
 8001b00:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001b02:	2001      	movs	r0, #1
}
 8001b04:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b06:	6802      	ldr	r2, [r0, #0]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f023 030e 	bic.w	r3, r3, #14
 8001b0e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b10:	6802      	ldr	r2, [r0, #0]
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b1a:	6803      	ldr	r3, [r0, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_DMA_Abort_IT+0x90>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d014      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x58>
 8001b22:	3214      	adds	r2, #20
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d01f      	beq.n	8001b68 <HAL_DMA_Abort_IT+0x74>
 8001b28:	3214      	adds	r2, #20
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01e      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x78>
 8001b2e:	3214      	adds	r2, #20
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d01e      	beq.n	8001b72 <HAL_DMA_Abort_IT+0x7e>
 8001b34:	3214      	adds	r2, #20
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01e      	beq.n	8001b78 <HAL_DMA_Abort_IT+0x84>
 8001b3a:	3214      	adds	r2, #20
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d002      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x52>
 8001b40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b44:	e003      	b.n	8001b4e <HAL_DMA_Abort_IT+0x5a>
 8001b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_Abort_IT+0x5a>
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_DMA_Abort_IT+0x94>)
 8001b50:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001b5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b60:	b16b      	cbz	r3, 8001b7e <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001b62:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2000      	movs	r0, #0
 8001b66:	e7cd      	b.n	8001b04 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b68:	2210      	movs	r2, #16
 8001b6a:	e7f0      	b.n	8001b4e <HAL_DMA_Abort_IT+0x5a>
 8001b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b70:	e7ed      	b.n	8001b4e <HAL_DMA_Abort_IT+0x5a>
 8001b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b76:	e7ea      	b.n	8001b4e <HAL_DMA_Abort_IT+0x5a>
 8001b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b7c:	e7e7      	b.n	8001b4e <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e7c0      	b.n	8001b04 <HAL_DMA_Abort_IT+0x10>
 8001b82:	bf00      	nop
 8001b84:	40020008 	.word	0x40020008
 8001b88:	40020000 	.word	0x40020000

08001b8c <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <FLASH_Program_HalfWord+0x14>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <FLASH_Program_HalfWord+0x18>)
 8001b94:	6913      	ldr	r3, [r2, #16]
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001b9c:	8001      	strh	r1, [r0, #0]
}
 8001b9e:	4770      	bx	lr
 8001ba0:	200004e0 	.word	0x200004e0
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <FLASH_SetErrorCode+0x6c>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f013 0f10 	tst.w	r3, #16
 8001bb0:	d027      	beq.n	8001c02 <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <FLASH_SetErrorCode+0x70>)
 8001bb4:	69d3      	ldr	r3, [r2, #28]
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001bbc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <FLASH_SetErrorCode+0x6c>)
 8001bc0:	68d2      	ldr	r2, [r2, #12]
 8001bc2:	f012 0f04 	tst.w	r2, #4
 8001bc6:	d006      	beq.n	8001bd6 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001bc8:	4913      	ldr	r1, [pc, #76]	; (8001c18 <FLASH_SetErrorCode+0x70>)
 8001bca:	69ca      	ldr	r2, [r1, #28]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <FLASH_SetErrorCode+0x6c>)
 8001bd8:	69d2      	ldr	r2, [r2, #28]
 8001bda:	f012 0f01 	tst.w	r2, #1
 8001bde:	d009      	beq.n	8001bf4 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001be0:	490d      	ldr	r1, [pc, #52]	; (8001c18 <FLASH_SetErrorCode+0x70>)
 8001be2:	69ca      	ldr	r2, [r1, #28]
 8001be4:	f042 0204 	orr.w	r2, r2, #4
 8001be8:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001bea:	490a      	ldr	r1, [pc, #40]	; (8001c14 <FLASH_SetErrorCode+0x6c>)
 8001bec:	69ca      	ldr	r2, [r1, #28]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001bf4:	f240 1201 	movw	r2, #257	; 0x101
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <FLASH_SetErrorCode+0x5e>
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <FLASH_SetErrorCode+0x6c>)
 8001bfe:	60d3      	str	r3, [r2, #12]
}  
 8001c00:	4770      	bx	lr
  uint32_t flags = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e7db      	b.n	8001bbe <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c06:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <FLASH_SetErrorCode+0x6c>)
 8001c08:	69d3      	ldr	r3, [r2, #28]
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	61d3      	str	r3, [r2, #28]
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000
 8001c18:	200004e0 	.word	0x200004e0

08001c1c <FLASH_WaitForLastOperation>:
{
 8001c1c:	b538      	push	{r3, r4, r5, lr}
 8001c1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff fa9c 	bl	800115c <HAL_GetTick>
 8001c24:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <FLASH_WaitForLastOperation+0x68>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f013 0f01 	tst.w	r3, #1
 8001c2e:	d00a      	beq.n	8001c46 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001c30:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001c34:	d0f7      	beq.n	8001c26 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c36:	b30c      	cbz	r4, 8001c7c <FLASH_WaitForLastOperation+0x60>
 8001c38:	f7ff fa90 	bl	800115c <HAL_GetTick>
 8001c3c:	1b40      	subs	r0, r0, r5
 8001c3e:	42a0      	cmp	r0, r4
 8001c40:	d9f1      	bls.n	8001c26 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001c42:	2003      	movs	r0, #3
 8001c44:	e019      	b.n	8001c7a <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <FLASH_WaitForLastOperation+0x68>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f013 0f20 	tst.w	r3, #32
 8001c4e:	d002      	beq.n	8001c56 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <FLASH_WaitForLastOperation+0x68>)
 8001c52:	2220      	movs	r2, #32
 8001c54:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <FLASH_WaitForLastOperation+0x68>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f013 0f10 	tst.w	r3, #16
 8001c5e:	d109      	bne.n	8001c74 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <FLASH_WaitForLastOperation+0x68>)
 8001c62:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c64:	f013 0f01 	tst.w	r3, #1
 8001c68:	d104      	bne.n	8001c74 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <FLASH_WaitForLastOperation+0x68>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c6e:	f013 0f04 	tst.w	r3, #4
 8001c72:	d005      	beq.n	8001c80 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8001c74:	f7ff ff98 	bl	8001ba8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
}
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	e7fc      	b.n	8001c7a <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8001c80:	2000      	movs	r0, #0
 8001c82:	e7fa      	b.n	8001c7a <FLASH_WaitForLastOperation+0x5e>
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_FLASH_Program>:
{
 8001c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001c8c:	4c23      	ldr	r4, [pc, #140]	; (8001d1c <HAL_FLASH_Program+0x94>)
 8001c8e:	7e24      	ldrb	r4, [r4, #24]
 8001c90:	2c01      	cmp	r4, #1
 8001c92:	d041      	beq.n	8001d18 <HAL_FLASH_Program+0x90>
 8001c94:	461e      	mov	r6, r3
 8001c96:	4690      	mov	r8, r2
 8001c98:	460f      	mov	r7, r1
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_FLASH_Program+0x94>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ca2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ca6:	f7ff ffb9 	bl	8001c1c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001caa:	4603      	mov	r3, r0
 8001cac:	bb70      	cbnz	r0, 8001d0c <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001cae:	2c01      	cmp	r4, #1
 8001cb0:	d029      	beq.n	8001d06 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001cb2:	2c02      	cmp	r4, #2
 8001cb4:	d024      	beq.n	8001d00 <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8001cb6:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001cba:	2400      	movs	r4, #0
 8001cbc:	454c      	cmp	r4, r9
 8001cbe:	d225      	bcs.n	8001d0c <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001cc0:	0121      	lsls	r1, r4, #4
 8001cc2:	f1c1 0220 	rsb	r2, r1, #32
 8001cc6:	f1a1 0320 	sub.w	r3, r1, #32
 8001cca:	fa28 f101 	lsr.w	r1, r8, r1
 8001cce:	fa06 f202 	lsl.w	r2, r6, r2
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	fa26 f303 	lsr.w	r3, r6, r3
 8001cd8:	4319      	orrs	r1, r3
 8001cda:	b289      	uxth	r1, r1
 8001cdc:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001ce0:	f7ff ff54 	bl	8001b8c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ce4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ce8:	f7ff ff98 	bl	8001c1c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_FLASH_Program+0x98>)
 8001cee:	691d      	ldr	r5, [r3, #16]
 8001cf0:	f025 0501 	bic.w	r5, r5, #1
 8001cf4:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b940      	cbnz	r0, 8001d0c <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8001cfa:	3401      	adds	r4, #1
 8001cfc:	b2e4      	uxtb	r4, r4
 8001cfe:	e7dd      	b.n	8001cbc <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8001d00:	f04f 0902 	mov.w	r9, #2
 8001d04:	e7d9      	b.n	8001cba <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8001d06:	f04f 0901 	mov.w	r9, #1
 8001d0a:	e7d6      	b.n	8001cba <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_FLASH_Program+0x94>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	7611      	strb	r1, [r2, #24]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e7fa      	b.n	8001d12 <HAL_FLASH_Program+0x8a>
 8001d1c:	200004e0 	.word	0x200004e0
 8001d20:	40022000 	.word	0x40022000

08001d24 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <FLASH_MassErase+0x1c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <FLASH_MassErase+0x20>)
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	f042 0204 	orr.w	r2, r2, #4
 8001d32:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3a:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200004e0 	.word	0x200004e0
 8001d44:	40022000 	.word	0x40022000

08001d48 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <FLASH_PageErase+0x1c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <FLASH_PageErase+0x20>)
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	f042 0202 	orr.w	r2, r2, #2
 8001d56:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001d58:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d60:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d62:	4770      	bx	lr
 8001d64:	200004e0 	.word	0x200004e0
 8001d68:	40022000 	.word	0x40022000

08001d6c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_FLASHEx_Erase+0x9c>)
 8001d6e:	7e1b      	ldrb	r3, [r3, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d046      	beq.n	8001e02 <HAL_FLASHEx_Erase+0x96>
{
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	460e      	mov	r6, r1
 8001d78:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001d7a:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_FLASHEx_Erase+0x9c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d80:	6803      	ldr	r3, [r0, #0]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d020      	beq.n	8001dc8 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d8a:	f7ff ff47 	bl	8001c1c <FLASH_WaitForLastOperation>
 8001d8e:	bb90      	cbnz	r0, 8001df6 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001d96:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d98:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d9a:	68e1      	ldr	r1, [r4, #12]
 8001d9c:	68a3      	ldr	r3, [r4, #8]
 8001d9e:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8001da2:	42ab      	cmp	r3, r5
 8001da4:	d928      	bls.n	8001df8 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff ffce 	bl	8001d48 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db0:	f7ff ff34 	bl	8001c1c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001db4:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_FLASHEx_Erase+0xa0>)
 8001db6:	6913      	ldr	r3, [r2, #16]
 8001db8:	f023 0302 	bic.w	r3, r3, #2
 8001dbc:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	b9b8      	cbnz	r0, 8001df2 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8001dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dc6:	e7e8      	b.n	8001d9a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001dc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dcc:	f7ff ff26 	bl	8001c1c <FLASH_WaitForLastOperation>
 8001dd0:	b108      	cbz	r0, 8001dd6 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	e010      	b.n	8001df8 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7ff ffa4 	bl	8001d24 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ddc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de0:	f7ff ff1c 	bl	8001c1c <FLASH_WaitForLastOperation>
 8001de4:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001de6:	4909      	ldr	r1, [pc, #36]	; (8001e0c <HAL_FLASHEx_Erase+0xa0>)
 8001de8:	690b      	ldr	r3, [r1, #16]
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	610b      	str	r3, [r1, #16]
 8001df0:	e002      	b.n	8001df8 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8001df2:	6035      	str	r5, [r6, #0]
            break;
 8001df4:	e000      	b.n	8001df8 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001df6:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_FLASHEx_Erase+0x9c>)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	7619      	strb	r1, [r3, #24]
}
 8001dfe:	4610      	mov	r0, r2
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001e02:	2202      	movs	r2, #2
}
 8001e04:	4610      	mov	r0, r2
 8001e06:	4770      	bx	lr
 8001e08:	200004e0 	.word	0x200004e0
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b4f0      	push	{r4, r5, r6, r7}
 8001e12:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e14:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001e16:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e18:	e0a2      	b.n	8001f60 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	d05a      	beq.n	8001ed4 <HAL_GPIO_Init+0xc4>
 8001e1e:	2d01      	cmp	r5, #1
 8001e20:	d100      	bne.n	8001e24 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e22:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e24:	2bff      	cmp	r3, #255	; 0xff
 8001e26:	d869      	bhi.n	8001efc <HAL_GPIO_Init+0xec>
 8001e28:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d869      	bhi.n	8001f02 <HAL_GPIO_Init+0xf2>
 8001e2e:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e30:	f8dc 4000 	ldr.w	r4, [ip]
 8001e34:	270f      	movs	r7, #15
 8001e36:	40af      	lsls	r7, r5
 8001e38:	ea24 0407 	bic.w	r4, r4, r7
 8001e3c:	fa06 f505 	lsl.w	r5, r6, r5
 8001e40:	432c      	orrs	r4, r5
 8001e42:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e46:	684c      	ldr	r4, [r1, #4]
 8001e48:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001e4c:	f000 8087 	beq.w	8001f5e <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e50:	4c5f      	ldr	r4, [pc, #380]	; (8001fd0 <HAL_GPIO_Init+0x1c0>)
 8001e52:	69a5      	ldr	r5, [r4, #24]
 8001e54:	f045 0501 	orr.w	r5, r5, #1
 8001e58:	61a5      	str	r5, [r4, #24]
 8001e5a:	69a4      	ldr	r4, [r4, #24]
 8001e5c:	f004 0401 	and.w	r4, r4, #1
 8001e60:	9401      	str	r4, [sp, #4]
 8001e62:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001e64:	0895      	lsrs	r5, r2, #2
 8001e66:	1caf      	adds	r7, r5, #2
 8001e68:	4c5a      	ldr	r4, [pc, #360]	; (8001fd4 <HAL_GPIO_Init+0x1c4>)
 8001e6a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e6e:	f002 0703 	and.w	r7, r2, #3
 8001e72:	00bf      	lsls	r7, r7, #2
 8001e74:	f04f 0c0f 	mov.w	ip, #15
 8001e78:	fa0c fc07 	lsl.w	ip, ip, r7
 8001e7c:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e80:	4c55      	ldr	r4, [pc, #340]	; (8001fd8 <HAL_GPIO_Init+0x1c8>)
 8001e82:	42a0      	cmp	r0, r4
 8001e84:	d043      	beq.n	8001f0e <HAL_GPIO_Init+0xfe>
 8001e86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e8a:	42a0      	cmp	r0, r4
 8001e8c:	f000 8081 	beq.w	8001f92 <HAL_GPIO_Init+0x182>
 8001e90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e94:	42a0      	cmp	r0, r4
 8001e96:	d07e      	beq.n	8001f96 <HAL_GPIO_Init+0x186>
 8001e98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e9c:	42a0      	cmp	r0, r4
 8001e9e:	d034      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001ea0:	2404      	movs	r4, #4
 8001ea2:	e035      	b.n	8001f10 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8001ea4:	4f4d      	ldr	r7, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x1cc>)
 8001ea6:	42bd      	cmp	r5, r7
 8001ea8:	d014      	beq.n	8001ed4 <HAL_GPIO_Init+0xc4>
 8001eaa:	d90b      	bls.n	8001ec4 <HAL_GPIO_Init+0xb4>
 8001eac:	4f4c      	ldr	r7, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x1d0>)
 8001eae:	42bd      	cmp	r5, r7
 8001eb0:	d010      	beq.n	8001ed4 <HAL_GPIO_Init+0xc4>
 8001eb2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001eb6:	42bd      	cmp	r5, r7
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_GPIO_Init+0xc4>
 8001eba:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001ebe:	42bd      	cmp	r5, r7
 8001ec0:	d1b0      	bne.n	8001e24 <HAL_GPIO_Init+0x14>
 8001ec2:	e007      	b.n	8001ed4 <HAL_GPIO_Init+0xc4>
 8001ec4:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001ec8:	42bd      	cmp	r5, r7
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0xc4>
 8001ecc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001ed0:	42bd      	cmp	r5, r7
 8001ed2:	d1a7      	bne.n	8001e24 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed4:	688d      	ldr	r5, [r1, #8]
 8001ed6:	b17d      	cbz	r5, 8001ef8 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed8:	2d01      	cmp	r5, #1
 8001eda:	d008      	beq.n	8001eee <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8001edc:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ede:	2608      	movs	r6, #8
 8001ee0:	e7a0      	b.n	8001e24 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee2:	68ce      	ldr	r6, [r1, #12]
 8001ee4:	3608      	adds	r6, #8
          break;
 8001ee6:	e79d      	b.n	8001e24 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee8:	68ce      	ldr	r6, [r1, #12]
 8001eea:	360c      	adds	r6, #12
          break;
 8001eec:	e79a      	b.n	8001e24 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001eee:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2608      	movs	r6, #8
 8001ef2:	e797      	b.n	8001e24 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	e795      	b.n	8001e24 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef8:	2604      	movs	r6, #4
 8001efa:	e793      	b.n	8001e24 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001efc:	f100 0c04 	add.w	ip, r0, #4
 8001f00:	e793      	b.n	8001e2a <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f02:	f1a2 0508 	sub.w	r5, r2, #8
 8001f06:	00ad      	lsls	r5, r5, #2
 8001f08:	e792      	b.n	8001e30 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f0a:	2403      	movs	r4, #3
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x100>
 8001f0e:	2400      	movs	r4, #0
 8001f10:	40bc      	lsls	r4, r7
 8001f12:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001f16:	3502      	adds	r5, #2
 8001f18:	4f2e      	ldr	r7, [pc, #184]	; (8001fd4 <HAL_GPIO_Init+0x1c4>)
 8001f1a:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1e:	684c      	ldr	r4, [r1, #4]
 8001f20:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001f24:	d039      	beq.n	8001f9a <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f26:	4d2f      	ldr	r5, [pc, #188]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001f28:	682c      	ldr	r4, [r5, #0]
 8001f2a:	431c      	orrs	r4, r3
 8001f2c:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2e:	684c      	ldr	r4, [r1, #4]
 8001f30:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001f34:	d037      	beq.n	8001fa6 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f36:	4d2b      	ldr	r5, [pc, #172]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001f38:	686c      	ldr	r4, [r5, #4]
 8001f3a:	431c      	orrs	r4, r3
 8001f3c:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3e:	684c      	ldr	r4, [r1, #4]
 8001f40:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8001f44:	d035      	beq.n	8001fb2 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f46:	4d27      	ldr	r5, [pc, #156]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001f48:	68ac      	ldr	r4, [r5, #8]
 8001f4a:	431c      	orrs	r4, r3
 8001f4c:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4e:	684c      	ldr	r4, [r1, #4]
 8001f50:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001f54:	d033      	beq.n	8001fbe <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f56:	4d23      	ldr	r5, [pc, #140]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001f58:	68ec      	ldr	r4, [r5, #12]
 8001f5a:	4323      	orrs	r3, r4
 8001f5c:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001f5e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f60:	680b      	ldr	r3, [r1, #0]
 8001f62:	fa33 f402 	lsrs.w	r4, r3, r2
 8001f66:	d030      	beq.n	8001fca <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8001f68:	2401      	movs	r4, #1
 8001f6a:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6c:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001f6e:	429c      	cmp	r4, r3
 8001f70:	d1f5      	bne.n	8001f5e <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8001f72:	684d      	ldr	r5, [r1, #4]
 8001f74:	2d12      	cmp	r5, #18
 8001f76:	d0b7      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001f78:	d894      	bhi.n	8001ea4 <HAL_GPIO_Init+0x94>
 8001f7a:	2d02      	cmp	r5, #2
 8001f7c:	d0b1      	beq.n	8001ee2 <HAL_GPIO_Init+0xd2>
 8001f7e:	f67f af4c 	bls.w	8001e1a <HAL_GPIO_Init+0xa>
 8001f82:	2d03      	cmp	r5, #3
 8001f84:	d0b6      	beq.n	8001ef4 <HAL_GPIO_Init+0xe4>
 8001f86:	2d11      	cmp	r5, #17
 8001f88:	f47f af4c 	bne.w	8001e24 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f8c:	68ce      	ldr	r6, [r1, #12]
 8001f8e:	3604      	adds	r6, #4
          break;
 8001f90:	e748      	b.n	8001e24 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f92:	2401      	movs	r4, #1
 8001f94:	e7bc      	b.n	8001f10 <HAL_GPIO_Init+0x100>
 8001f96:	2402      	movs	r4, #2
 8001f98:	e7ba      	b.n	8001f10 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f9a:	4d12      	ldr	r5, [pc, #72]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001f9c:	682c      	ldr	r4, [r5, #0]
 8001f9e:	ea24 0403 	bic.w	r4, r4, r3
 8001fa2:	602c      	str	r4, [r5, #0]
 8001fa4:	e7c3      	b.n	8001f2e <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa6:	4d0f      	ldr	r5, [pc, #60]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001fa8:	686c      	ldr	r4, [r5, #4]
 8001faa:	ea24 0403 	bic.w	r4, r4, r3
 8001fae:	606c      	str	r4, [r5, #4]
 8001fb0:	e7c5      	b.n	8001f3e <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb2:	4d0c      	ldr	r5, [pc, #48]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001fb4:	68ac      	ldr	r4, [r5, #8]
 8001fb6:	ea24 0403 	bic.w	r4, r4, r3
 8001fba:	60ac      	str	r4, [r5, #8]
 8001fbc:	e7c7      	b.n	8001f4e <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fbe:	4d09      	ldr	r5, [pc, #36]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001fc0:	68ec      	ldr	r4, [r5, #12]
 8001fc2:	ea24 0303 	bic.w	r3, r4, r3
 8001fc6:	60eb      	str	r3, [r5, #12]
 8001fc8:	e7c9      	b.n	8001f5e <HAL_GPIO_Init+0x14e>
  }
}
 8001fca:	b002      	add	sp, #8
 8001fcc:	bcf0      	pop	{r4, r5, r6, r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	10210000 	.word	0x10210000
 8001fe0:	10310000 	.word	0x10310000
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe8:	b912      	cbnz	r2, 8001ff0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fea:	0409      	lsls	r1, r1, #16
 8001fec:	6101      	str	r1, [r0, #16]
  }
}
 8001fee:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001ff0:	6101      	str	r1, [r0, #16]
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001ff8:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	4203      	tst	r3, r0
 8002000:	d100      	bne.n	8002004 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002002:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002004:	4b02      	ldr	r3, [pc, #8]	; (8002010 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002006:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002008:	f7ff fff4 	bl	8001ff4 <HAL_GPIO_EXTI_Callback>
}
 800200c:	e7f9      	b.n	8002002 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800200e:	bf00      	nop
 8002010:	40010400 	.word	0x40010400

08002014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002014:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <RCC_Delay+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <RCC_Delay+0x28>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0a5b      	lsrs	r3, r3, #9
 8002022:	fb00 f003 	mul.w	r0, r0, r3
 8002026:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8002028:	bf00      	nop
  }
  while (Delay --);
 800202a:	9b01      	ldr	r3, [sp, #4]
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	9201      	str	r2, [sp, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f9      	bne.n	8002028 <RCC_Delay+0x14>
}
 8002034:	b002      	add	sp, #8
 8002036:	4770      	bx	lr
 8002038:	20000068 	.word	0x20000068
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002040:	2800      	cmp	r0, #0
 8002042:	f000 81f5 	beq.w	8002430 <HAL_RCC_OscConfig+0x3f0>
{
 8002046:	b570      	push	{r4, r5, r6, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	f013 0f01 	tst.w	r3, #1
 8002052:	d02c      	beq.n	80020ae <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002054:	4bab      	ldr	r3, [pc, #684]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b04      	cmp	r3, #4
 800205e:	d01d      	beq.n	800209c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002060:	4ba8      	ldr	r3, [pc, #672]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d012      	beq.n	8002092 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	6863      	ldr	r3, [r4, #4]
 800206e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002072:	d041      	beq.n	80020f8 <HAL_RCC_OscConfig+0xb8>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d155      	bne.n	8002124 <HAL_RCC_OscConfig+0xe4>
 8002078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800207c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e037      	b.n	8002102 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002092:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800209a:	d0e7      	beq.n	800206c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	4b99      	ldr	r3, [pc, #612]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_OscConfig+0x6e>
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 81c3 	beq.w	8002434 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	f013 0f02 	tst.w	r3, #2
 80020b4:	d076      	beq.n	80021a4 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b6:	4b93      	ldr	r3, [pc, #588]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f013 0f0c 	tst.w	r3, #12
 80020be:	d05f      	beq.n	8002180 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020c0:	4b90      	ldr	r3, [pc, #576]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d054      	beq.n	8002176 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	6923      	ldr	r3, [r4, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 808a 	beq.w	80021e8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <HAL_RCC_OscConfig+0x2c8>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020da:	f7ff f83f 	bl	800115c <HAL_GetTick>
 80020de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f013 0f02 	tst.w	r3, #2
 80020e8:	d175      	bne.n	80021d6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f837 	bl	800115c <HAL_GetTick>
 80020ee:	1b40      	subs	r0, r0, r5
 80020f0:	2802      	cmp	r0, #2
 80020f2:	d9f5      	bls.n	80020e0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e1a0      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	4a82      	ldr	r2, [pc, #520]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002102:	6863      	ldr	r3, [r4, #4]
 8002104:	b343      	cbz	r3, 8002158 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002106:	f7ff f829 	bl	800115c <HAL_GetTick>
 800210a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210c:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002114:	d1cb      	bne.n	80020ae <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002116:	f7ff f821 	bl	800115c <HAL_GetTick>
 800211a:	1b40      	subs	r0, r0, r5
 800211c:	2864      	cmp	r0, #100	; 0x64
 800211e:	d9f5      	bls.n	800210c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002120:	2003      	movs	r0, #3
 8002122:	e18a      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d009      	beq.n	800213e <HAL_RCC_OscConfig+0xfe>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e7e1      	b.n	8002102 <HAL_RCC_OscConfig+0xc2>
 800213e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002142:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e7d4      	b.n	8002102 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002158:	f7ff f800 	bl	800115c <HAL_GetTick>
 800215c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002166:	d0a2      	beq.n	80020ae <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7fe fff8 	bl	800115c <HAL_GetTick>
 800216c:	1b40      	subs	r0, r0, r5
 800216e:	2864      	cmp	r0, #100	; 0x64
 8002170:	d9f5      	bls.n	800215e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002172:	2003      	movs	r0, #3
 8002174:	e161      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800217e:	d1a5      	bne.n	80020cc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002180:	4b60      	ldr	r3, [pc, #384]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f013 0f02 	tst.w	r3, #2
 8002188:	d004      	beq.n	8002194 <HAL_RCC_OscConfig+0x154>
 800218a:	6923      	ldr	r3, [r4, #16]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
 8002192:	e152      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4a5b      	ldr	r2, [pc, #364]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002196:	6813      	ldr	r3, [r2, #0]
 8002198:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800219c:	6961      	ldr	r1, [r4, #20]
 800219e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021a2:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	f013 0f08 	tst.w	r3, #8
 80021aa:	d032      	beq.n	8002212 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ac:	69a3      	ldr	r3, [r4, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d05b      	beq.n	800226a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80021b2:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_RCC_OscConfig+0x2cc>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80021b8:	f7fe ffd0 	bl	800115c <HAL_GetTick>
 80021bc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	4b51      	ldr	r3, [pc, #324]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f013 0f02 	tst.w	r3, #2
 80021c6:	d121      	bne.n	800220c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7fe ffc8 	bl	800115c <HAL_GetTick>
 80021cc:	1b40      	subs	r0, r0, r5
 80021ce:	2802      	cmp	r0, #2
 80021d0:	d9f5      	bls.n	80021be <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
 80021d4:	e131      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021de:	6961      	ldr	r1, [r4, #20]
 80021e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e7dd      	b.n	80021a4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_OscConfig+0x2c8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021ee:	f7fe ffb5 	bl	800115c <HAL_GetTick>
 80021f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f013 0f02 	tst.w	r3, #2
 80021fc:	d0d2      	beq.n	80021a4 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7fe ffad 	bl	800115c <HAL_GetTick>
 8002202:	1b40      	subs	r0, r0, r5
 8002204:	2802      	cmp	r0, #2
 8002206:	d9f5      	bls.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002208:	2003      	movs	r0, #3
 800220a:	e116      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff ff01 	bl	8002014 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	f013 0f04 	tst.w	r3, #4
 8002218:	f000 8098 	beq.w	800234c <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221c:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002224:	d133      	bne.n	800228e <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800222e:	61da      	str	r2, [r3, #28]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800223a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x2d0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002244:	d025      	beq.n	8002292 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	68e3      	ldr	r3, [r4, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d036      	beq.n	80022ba <HAL_RCC_OscConfig+0x27a>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d14c      	bne.n	80022ea <HAL_RCC_OscConfig+0x2aa>
 8002250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002254:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	621a      	str	r2, [r3, #32]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	f022 0204 	bic.w	r2, r2, #4
 8002266:	621a      	str	r2, [r3, #32]
 8002268:	e02c      	b.n	80022c4 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_RCC_OscConfig+0x2cc>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002270:	f7fe ff74 	bl	800115c <HAL_GetTick>
 8002274:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f013 0f02 	tst.w	r3, #2
 800227e:	d0c8      	beq.n	8002212 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe ff6c 	bl	800115c <HAL_GetTick>
 8002284:	1b40      	subs	r0, r0, r5
 8002286:	2802      	cmp	r0, #2
 8002288:	d9f5      	bls.n	8002276 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 800228a:	2003      	movs	r0, #3
 800228c:	e0d5      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2500      	movs	r5, #0
 8002290:	e7d4      	b.n	800223c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_RCC_OscConfig+0x2d0>)
 8002294:	6813      	ldr	r3, [r2, #0]
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800229c:	f7fe ff5e 	bl	800115c <HAL_GetTick>
 80022a0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x2d0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022aa:	d1cc      	bne.n	8002246 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7fe ff56 	bl	800115c <HAL_GetTick>
 80022b0:	1b80      	subs	r0, r0, r6
 80022b2:	2864      	cmp	r0, #100	; 0x64
 80022b4:	d9f5      	bls.n	80022a2 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 80022b6:	2003      	movs	r0, #3
 80022b8:	e0bf      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80022bc:	6a13      	ldr	r3, [r2, #32]
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c4:	68e3      	ldr	r3, [r4, #12]
 80022c6:	b37b      	cbz	r3, 8002328 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 80022c8:	f7fe ff48 	bl	800115c <HAL_GetTick>
 80022cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f013 0f02 	tst.w	r3, #2
 80022d6:	d138      	bne.n	800234a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe ff40 	bl	800115c <HAL_GetTick>
 80022dc:	1b80      	subs	r0, r0, r6
 80022de:	f241 3388 	movw	r3, #5000	; 0x1388
 80022e2:	4298      	cmp	r0, r3
 80022e4:	d9f3      	bls.n	80022ce <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 80022e6:	2003      	movs	r0, #3
 80022e8:	e0a7      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d012      	beq.n	8002314 <HAL_RCC_OscConfig+0x2d4>
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_OscConfig+0x2c4>)
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	621a      	str	r2, [r3, #32]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	621a      	str	r2, [r3, #32]
 8002300:	e7e0      	b.n	80022c4 <HAL_RCC_OscConfig+0x284>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	42420000 	.word	0x42420000
 800230c:	42420480 	.word	0x42420480
 8002310:	40007000 	.word	0x40007000
 8002314:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 8002316:	6a1a      	ldr	r2, [r3, #32]
 8002318:	f042 0204 	orr.w	r2, r2, #4
 800231c:	621a      	str	r2, [r3, #32]
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	621a      	str	r2, [r3, #32]
 8002326:	e7cd      	b.n	80022c4 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8002328:	f7fe ff18 	bl	800115c <HAL_GetTick>
 800232c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4b46      	ldr	r3, [pc, #280]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f013 0f02 	tst.w	r3, #2
 8002336:	d008      	beq.n	800234a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7fe ff10 	bl	800115c <HAL_GetTick>
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002342:	4298      	cmp	r0, r3
 8002344:	d9f3      	bls.n	800232e <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
 8002348:	e077      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 800234a:	b9e5      	cbnz	r5, 8002386 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	69e3      	ldr	r3, [r4, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d072      	beq.n	8002438 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002352:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 8002354:	6852      	ldr	r2, [r2, #4]
 8002356:	f002 020c 	and.w	r2, r2, #12
 800235a:	2a08      	cmp	r2, #8
 800235c:	d056      	beq.n	800240c <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235e:	2b02      	cmp	r3, #2
 8002360:	d017      	beq.n	8002392 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCC_OscConfig+0x40c>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002368:	f7fe fef8 	bl	800115c <HAL_GetTick>
 800236c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002376:	d047      	beq.n	8002408 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fef0 	bl	800115c <HAL_GetTick>
 800237c:	1b00      	subs	r0, r0, r4
 800237e:	2802      	cmp	r0, #2
 8002380:	d9f5      	bls.n	800236e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8002382:	2003      	movs	r0, #3
 8002384:	e059      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002386:	4a30      	ldr	r2, [pc, #192]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 8002388:	69d3      	ldr	r3, [r2, #28]
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	61d3      	str	r3, [r2, #28]
 8002390:	e7dc      	b.n	800234c <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_OscConfig+0x40c>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002398:	f7fe fee0 	bl	800115c <HAL_GetTick>
 800239c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023a6:	d006      	beq.n	80023b6 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fed8 	bl	800115c <HAL_GetTick>
 80023ac:	1b40      	subs	r0, r0, r5
 80023ae:	2802      	cmp	r0, #2
 80023b0:	d9f5      	bls.n	800239e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80023b2:	2003      	movs	r0, #3
 80023b4:	e041      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b6:	6a23      	ldr	r3, [r4, #32]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d01a      	beq.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023be:	4922      	ldr	r1, [pc, #136]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 80023c0:	684b      	ldr	r3, [r1, #4]
 80023c2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80023c6:	6a22      	ldr	r2, [r4, #32]
 80023c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80023ca:	4302      	orrs	r2, r0
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_OscConfig+0x40c>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023d6:	f7fe fec1 	bl	800115c <HAL_GetTick>
 80023da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023e4:	d10e      	bne.n	8002404 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7fe feb9 	bl	800115c <HAL_GetTick>
 80023ea:	1b00      	subs	r0, r0, r4
 80023ec:	2802      	cmp	r0, #2
 80023ee:	d9f5      	bls.n	80023dc <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80023f0:	2003      	movs	r0, #3
 80023f2:	e022      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 80023f6:	6853      	ldr	r3, [r2, #4]
 80023f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023fc:	68a1      	ldr	r1, [r4, #8]
 80023fe:	430b      	orrs	r3, r1
 8002400:	6053      	str	r3, [r2, #4]
 8002402:	e7dc      	b.n	80023be <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8002404:	2000      	movs	r0, #0
 8002406:	e018      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
 8002408:	2000      	movs	r0, #0
 800240a:	e016      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240c:	2b01      	cmp	r3, #1
 800240e:	d016      	beq.n	800243e <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCC_OscConfig+0x408>)
 8002412:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002414:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002418:	6a22      	ldr	r2, [r4, #32]
 800241a:	4291      	cmp	r1, r2
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002422:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002426:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	4293      	cmp	r3, r2
 800242a:	d00a      	beq.n	8002442 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 800242c:	2001      	movs	r0, #1
 800242e:	e004      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	4770      	bx	lr
        return HAL_ERROR;
 8002434:	2001      	movs	r0, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002438:	2000      	movs	r0, #0
}
 800243a:	b002      	add	sp, #8
 800243c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800243e:	2001      	movs	r0, #1
 8002440:	e7fb      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002442:	2000      	movs	r0, #0
 8002444:	e7f9      	b.n	800243a <HAL_RCC_OscConfig+0x3fa>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	42420060 	.word	0x42420060

08002450 <HAL_RCC_GetSysClockFreq>:
{
 8002450:	b410      	push	{r4}
 8002452:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002454:	4c16      	ldr	r4, [pc, #88]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002456:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800245a:	f10d 0c18 	add.w	ip, sp, #24
 800245e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002462:	8a23      	ldrh	r3, [r4, #16]
 8002464:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x64>)
 800246a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800246c:	f003 020c 	and.w	r2, r3, #12
 8002470:	2a08      	cmp	r2, #8
 8002472:	d11a      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002474:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002478:	4462      	add	r2, ip
 800247a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800247e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002482:	d105      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x68>)
 8002486:	fb00 f002 	mul.w	r0, r0, r2
}
 800248a:	b007      	add	sp, #28
 800248c:	bc10      	pop	{r4}
 800248e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x64>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002498:	4463      	add	r3, ip
 800249a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <HAL_RCC_GetSysClockFreq+0x6c>)
 80024a0:	fb00 f002 	mul.w	r0, r0, r2
 80024a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80024a8:	e7ef      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80024aa:	4804      	ldr	r0, [pc, #16]	; (80024bc <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80024ac:	e7ed      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x3a>
 80024ae:	bf00      	nop
 80024b0:	0800605c 	.word	0x0800605c
 80024b4:	40021000 	.word	0x40021000
 80024b8:	003d0900 	.word	0x003d0900
 80024bc:	007a1200 	.word	0x007a1200

080024c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80024c0:	2800      	cmp	r0, #0
 80024c2:	f000 80a3 	beq.w	800260c <HAL_RCC_ClockConfig+0x14c>
{
 80024c6:	b570      	push	{r4, r5, r6, lr}
 80024c8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ca:	4b52      	ldr	r3, [pc, #328]	; (8002614 <HAL_RCC_ClockConfig+0x154>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	428b      	cmp	r3, r1
 80024d4:	d20c      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_RCC_ClockConfig+0x154>)
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f023 0307 	bic.w	r3, r3, #7
 80024de:	430b      	orrs	r3, r1
 80024e0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
}
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f013 0f02 	tst.w	r3, #2
 80024f6:	d017      	beq.n	8002528 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	f013 0f04 	tst.w	r3, #4
 80024fc:	d004      	beq.n	8002508 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fe:	4a46      	ldr	r2, [pc, #280]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 8002500:	6853      	ldr	r3, [r2, #4]
 8002502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002506:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	f013 0f08 	tst.w	r3, #8
 800250e:	d004      	beq.n	800251a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4a41      	ldr	r2, [pc, #260]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 8002512:	6853      	ldr	r3, [r2, #4]
 8002514:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002518:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251a:	4a3f      	ldr	r2, [pc, #252]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 800251c:	6853      	ldr	r3, [r2, #4]
 800251e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002522:	68a0      	ldr	r0, [r4, #8]
 8002524:	4303      	orrs	r3, r0
 8002526:	6053      	str	r3, [r2, #4]
 8002528:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	f013 0f01 	tst.w	r3, #1
 8002530:	d031      	beq.n	8002596 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	6863      	ldr	r3, [r4, #4]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002538:	2b02      	cmp	r3, #2
 800253a:	d025      	beq.n	8002588 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	4a36      	ldr	r2, [pc, #216]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	f012 0f02 	tst.w	r2, #2
 8002544:	d064      	beq.n	8002610 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4934      	ldr	r1, [pc, #208]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 8002548:	684a      	ldr	r2, [r1, #4]
 800254a:	f022 0203 	bic.w	r2, r2, #3
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002552:	f7fe fe03 	bl	800115c <HAL_GetTick>
 8002556:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	6862      	ldr	r2, [r4, #4]
 8002562:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002566:	d016      	beq.n	8002596 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe fdf8 	bl	800115c <HAL_GetTick>
 800256c:	1b80      	subs	r0, r0, r6
 800256e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002572:	4298      	cmp	r0, r3
 8002574:	d9f0      	bls.n	8002558 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002576:	2003      	movs	r0, #3
 8002578:	e7b9      	b.n	80024ee <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002582:	d1e0      	bne.n	8002546 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002584:	2001      	movs	r0, #1
 8002586:	e7b2      	b.n	80024ee <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	4a23      	ldr	r2, [pc, #140]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002590:	d1d9      	bne.n	8002546 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002592:	2001      	movs	r0, #1
 8002594:	e7ab      	b.n	80024ee <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_RCC_ClockConfig+0x154>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	42ab      	cmp	r3, r5
 80025a0:	d90c      	bls.n	80025bc <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_RCC_ClockConfig+0x154>)
 80025a4:	6813      	ldr	r3, [r2, #0]
 80025a6:	f023 0307 	bic.w	r3, r3, #7
 80025aa:	432b      	orrs	r3, r5
 80025ac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	42ab      	cmp	r3, r5
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 80025b8:	2001      	movs	r0, #1
 80025ba:	e798      	b.n	80024ee <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f013 0f04 	tst.w	r3, #4
 80025c2:	d006      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 80025c6:	6853      	ldr	r3, [r2, #4]
 80025c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025cc:	68e1      	ldr	r1, [r4, #12]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	f013 0f08 	tst.w	r3, #8
 80025d8:	d007      	beq.n	80025ea <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 80025dc:	6853      	ldr	r3, [r2, #4]
 80025de:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025e2:	6921      	ldr	r1, [r4, #16]
 80025e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025e8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ea:	f7ff ff31 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x158>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x15c>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	40d8      	lsrs	r0, r3
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_RCC_ClockConfig+0x160>)
 80025fe:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_RCC_ClockConfig+0x164>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	f7fe fd66 	bl	80010d4 <HAL_InitTick>
  return HAL_OK;
 8002608:	2000      	movs	r0, #0
 800260a:	e770      	b.n	80024ee <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800260c:	2001      	movs	r0, #1
}
 800260e:	4770      	bx	lr
        return HAL_ERROR;
 8002610:	2001      	movs	r0, #1
 8002612:	e76c      	b.n	80024ee <HAL_RCC_ClockConfig+0x2e>
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	08006f20 	.word	0x08006f20
 8002620:	20000068 	.word	0x20000068
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetHCLKFreq>:
}
 8002628:	4b01      	ldr	r3, [pc, #4]	; (8002630 <HAL_RCC_GetHCLKFreq+0x8>)
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000068 	.word	0x20000068

08002634 <HAL_RCC_GetPCLK1Freq>:
{
 8002634:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002636:	f7ff fff7 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCC_GetPCLK1Freq+0x18>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002642:	4a03      	ldr	r2, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002644:	5cd3      	ldrb	r3, [r2, r3]
}
 8002646:	40d8      	lsrs	r0, r3
 8002648:	bd08      	pop	{r3, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	08006f30 	.word	0x08006f30

08002654 <HAL_RCC_GetPCLK2Freq>:
{
 8002654:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002656:	f7ff ffe7 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <HAL_RCC_GetPCLK2Freq+0x18>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002662:	4a03      	ldr	r2, [pc, #12]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
}
 8002666:	40d8      	lsrs	r0, r3
 8002668:	bd08      	pop	{r3, pc}
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	08006f30 	.word	0x08006f30

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800267a:	6803      	ldr	r3, [r0, #0]
 800267c:	f013 0f01 	tst.w	r3, #1
 8002680:	d034      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800268a:	d148      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002694:	61da      	str	r2, [r3, #28]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026a0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026aa:	d03a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ac:	4b33      	ldr	r3, [pc, #204]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80026b4:	d011      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x66>
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80026bc:	429a      	cmp	r2, r3
 80026be:	d00c      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026c2:	6a13      	ldr	r3, [r2, #32]
 80026c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026c8:	492e      	ldr	r1, [pc, #184]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80026ca:	2601      	movs	r6, #1
 80026cc:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ce:	2600      	movs	r6, #0
 80026d0:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026d4:	f013 0f01 	tst.w	r3, #1
 80026d8:	d137      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026da:	4a28      	ldr	r2, [pc, #160]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026dc:	6a13      	ldr	r3, [r2, #32]
 80026de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e2:	6861      	ldr	r1, [r4, #4]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e8:	2d00      	cmp	r5, #0
 80026ea:	d13f      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	f013 0f02 	tst.w	r3, #2
 80026f2:	d006      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026f6:	6853      	ldr	r3, [r2, #4]
 80026f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026fc:	68a1      	ldr	r1, [r4, #8]
 80026fe:	430b      	orrs	r3, r1
 8002700:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	f013 0f10 	tst.w	r3, #16
 8002708:	d035      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800270c:	6853      	ldr	r3, [r2, #4]
 800270e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002712:	68e1      	ldr	r1, [r4, #12]
 8002714:	430b      	orrs	r3, r1
 8002716:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002718:	2000      	movs	r0, #0
}
 800271a:	b002      	add	sp, #8
 800271c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2500      	movs	r5, #0
 8002720:	e7bf      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4a17      	ldr	r2, [pc, #92]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800272c:	f7fe fd16 	bl	800115c <HAL_GetTick>
 8002730:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f413 7f80 	tst.w	r3, #256	; 0x100
 800273a:	d1b7      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe fd0e 	bl	800115c <HAL_GetTick>
 8002740:	1b80      	subs	r0, r0, r6
 8002742:	2864      	cmp	r0, #100	; 0x64
 8002744:	d9f5      	bls.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8002746:	2003      	movs	r0, #3
 8002748:	e7e7      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 800274a:	f7fe fd07 	bl	800115c <HAL_GetTick>
 800274e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f013 0f02 	tst.w	r3, #2
 8002758:	d1bf      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe fcff 	bl	800115c <HAL_GetTick>
 800275e:	1b80      	subs	r0, r0, r6
 8002760:	f241 3388 	movw	r3, #5000	; 0x1388
 8002764:	4298      	cmp	r0, r3
 8002766:	d9f3      	bls.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8002768:	2003      	movs	r0, #3
 800276a:	e7d6      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	69d3      	ldr	r3, [r2, #28]
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002772:	61d3      	str	r3, [r2, #28]
 8002774:	e7ba      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002776:	2000      	movs	r0, #0
 8002778:	e7cf      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
 8002784:	42420440 	.word	0x42420440

08002788 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002788:	b530      	push	{r4, r5, lr}
 800278a:	b087      	sub	sp, #28
 800278c:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800278e:	4c38      	ldr	r4, [pc, #224]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8002790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002794:	f10d 0c18 	add.w	ip, sp, #24
 8002798:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800279c:	8a23      	ldrh	r3, [r4, #16]
 800279e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80027a2:	2d02      	cmp	r5, #2
 80027a4:	d050      	beq.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80027a6:	2d10      	cmp	r5, #16
 80027a8:	d003      	beq.n	80027b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 80027aa:	2d01      	cmp	r5, #1
 80027ac:	d02b      	beq.n	8002806 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 80027ae:	2000      	movs	r0, #0
 80027b0:	e054      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80027b4:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80027bc:	d050      	beq.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80027c2:	a906      	add	r1, sp, #24
 80027c4:	440b      	add	r3, r1
 80027c6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ca:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80027ce:	d016      	beq.n	80027fe <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d0:	4b28      	ldr	r3, [pc, #160]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80027d8:	440b      	add	r3, r1
 80027da:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80027e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80027e4:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80027f0:	d134      	bne.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80027f2:	0040      	lsls	r0, r0, #1
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80027f6:	fba3 3000 	umull	r3, r0, r3, r0
 80027fa:	0840      	lsrs	r0, r0, #1
 80027fc:	e02e      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8002800:	fb03 f000 	mul.w	r0, r3, r0
 8002804:	e7f0      	b.n	80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002808:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800280a:	f240 3202 	movw	r2, #770	; 0x302
 800280e:	401a      	ands	r2, r3
 8002810:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8002814:	d026      	beq.n	8002864 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281e:	d004      	beq.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002824:	d009      	beq.n	800283a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002826:	2000      	movs	r0, #0
 8002828:	e018      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800282c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282e:	f012 0f02 	tst.w	r2, #2
 8002832:	d0f5      	beq.n	8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 8002834:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002838:	e010      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002842:	d112      	bne.n	800286a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002844:	2000      	movs	r0, #0
 8002846:	e009      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002848:	f7ff ff04 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002854:	3301      	adds	r3, #1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 800285c:	b007      	add	sp, #28
 800285e:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 8002860:	2000      	movs	r0, #0
 8002862:	e7fb      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 8002864:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002868:	e7f8      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 800286a:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 800286e:	e7f5      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8002870:	08006070 	.word	0x08006070
 8002874:	40021000 	.word	0x40021000
 8002878:	007a1200 	.word	0x007a1200
 800287c:	aaaaaaab 	.word	0xaaaaaaab
 8002880:	003d0900 	.word	0x003d0900

08002884 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002884:	2800      	cmp	r0, #0
 8002886:	d039      	beq.n	80028fc <HAL_SPI_Init+0x78>
{
 8002888:	b510      	push	{r4, lr}
 800288a:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002890:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002894:	2b00      	cmp	r3, #0
 8002896:	d02c      	beq.n	80028f2 <HAL_SPI_Init+0x6e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002898:	2302      	movs	r3, #2
 800289a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800289e:	6822      	ldr	r2, [r4, #0]
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a6:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028a8:	6863      	ldr	r3, [r4, #4]
 80028aa:	68a2      	ldr	r2, [r4, #8]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	68e2      	ldr	r2, [r4, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	6922      	ldr	r2, [r4, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	6962      	ldr	r2, [r4, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	69a2      	ldr	r2, [r4, #24]
 80028bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80028c0:	4313      	orrs	r3, r2
 80028c2:	69e2      	ldr	r2, [r4, #28]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	6a22      	ldr	r2, [r4, #32]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028cc:	6822      	ldr	r2, [r4, #0]
 80028ce:	430b      	orrs	r3, r1
 80028d0:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028d2:	8b63      	ldrh	r3, [r4, #26]
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028dc:	6822      	ldr	r2, [r4, #0]
 80028de:	69d3      	ldr	r3, [r2, #28]
 80028e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e4:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e6:	2000      	movs	r0, #0
 80028e8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80028f0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80028f2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80028f6:	f003 f953 	bl	8005ba0 <HAL_SPI_MspInit>
 80028fa:	e7cd      	b.n	8002898 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80028fc:	2001      	movs	r0, #1
}
 80028fe:	4770      	bx	lr

08002900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002900:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002902:	6a03      	ldr	r3, [r0, #32]
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800290c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002910:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002914:	680d      	ldr	r5, [r1, #0]
 8002916:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800291a:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800291e:	688b      	ldr	r3, [r1, #8]
 8002920:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002922:	4d0d      	ldr	r5, [pc, #52]	; (8002958 <TIM_OC1_SetConfig+0x58>)
 8002924:	42a8      	cmp	r0, r5
 8002926:	d009      	beq.n	800293c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002928:	4d0b      	ldr	r5, [pc, #44]	; (8002958 <TIM_OC1_SetConfig+0x58>)
 800292a:	42a8      	cmp	r0, r5
 800292c:	d00d      	beq.n	800294a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002930:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002932:	684a      	ldr	r2, [r1, #4]
 8002934:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002936:	6203      	str	r3, [r0, #32]
}
 8002938:	bc70      	pop	{r4, r5, r6}
 800293a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800293c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002940:	68cc      	ldr	r4, [r1, #12]
 8002942:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	e7ee      	b.n	8002928 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800294a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800294e:	694c      	ldr	r4, [r1, #20]
 8002950:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8002952:	698a      	ldr	r2, [r1, #24]
 8002954:	4322      	orrs	r2, r4
 8002956:	e7ea      	b.n	800292e <TIM_OC1_SetConfig+0x2e>
 8002958:	40012c00 	.word	0x40012c00

0800295c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800295c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800295e:	6a03      	ldr	r3, [r0, #32]
 8002960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002964:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002966:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002968:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800296a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800296c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002970:	680d      	ldr	r5, [r1, #0]
 8002972:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002978:	688d      	ldr	r5, [r1, #8]
 800297a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800297e:	4d0f      	ldr	r5, [pc, #60]	; (80029bc <TIM_OC3_SetConfig+0x60>)
 8002980:	42a8      	cmp	r0, r5
 8002982:	d009      	beq.n	8002998 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002984:	4d0d      	ldr	r5, [pc, #52]	; (80029bc <TIM_OC3_SetConfig+0x60>)
 8002986:	42a8      	cmp	r0, r5
 8002988:	d00e      	beq.n	80029a8 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800298c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800298e:	684a      	ldr	r2, [r1, #4]
 8002990:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002992:	6203      	str	r3, [r0, #32]
}
 8002994:	bc30      	pop	{r4, r5}
 8002996:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299c:	68cd      	ldr	r5, [r1, #12]
 800299e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80029a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029a6:	e7ed      	b.n	8002984 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029ac:	694d      	ldr	r5, [r1, #20]
 80029ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029b2:	698d      	ldr	r5, [r1, #24]
 80029b4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80029b8:	e7e7      	b.n	800298a <TIM_OC3_SetConfig+0x2e>
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00

080029c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c2:	6a03      	ldr	r3, [r0, #32]
 80029c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d4:	680d      	ldr	r5, [r1, #0]
 80029d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029de:	688d      	ldr	r5, [r1, #8]
 80029e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e4:	4d07      	ldr	r5, [pc, #28]	; (8002a04 <TIM_OC4_SetConfig+0x44>)
 80029e6:	42a8      	cmp	r0, r5
 80029e8:	d006      	beq.n	80029f8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ec:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029ee:	684a      	ldr	r2, [r1, #4]
 80029f0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	6203      	str	r3, [r0, #32]
}
 80029f4:	bc30      	pop	{r4, r5}
 80029f6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029fc:	694d      	ldr	r5, [r1, #20]
 80029fe:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002a02:	e7f2      	b.n	80029ea <TIM_OC4_SetConfig+0x2a>
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a08:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a0a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0c:	6a04      	ldr	r4, [r0, #32]
 8002a0e:	f024 0401 	bic.w	r4, r4, #1
 8002a12:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a14:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a16:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a1a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002a22:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a24:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a26:	6203      	str	r3, [r0, #32]
}
 8002a28:	bc10      	pop	{r4}
 8002a2a:	4770      	bx	lr

08002a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a2c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2e:	6a03      	ldr	r3, [r0, #32]
 8002a30:	f023 0310 	bic.w	r3, r3, #16
 8002a34:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a36:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a38:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a3a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a3e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a46:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a4a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a4c:	6203      	str	r3, [r0, #32]
}
 8002a4e:	bc10      	pop	{r4}
 8002a50:	4770      	bx	lr

08002a52 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a52:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a58:	4319      	orrs	r1, r3
 8002a5a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5e:	6081      	str	r1, [r0, #8]
}
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a62:	6802      	ldr	r2, [r0, #0]
 8002a64:	68d3      	ldr	r3, [r2, #12]
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6c:	6802      	ldr	r2, [r0, #0]
 8002a6e:	6893      	ldr	r3, [r2, #8]
 8002a70:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d003      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8002a78:	6813      	ldr	r3, [r2, #0]
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	2000      	movs	r0, #0
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIM_OC_MspInit>:
}
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_OnePulse_MspInit>:
}
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIM_PeriodElapsedCallback>:
}
 8002a88:	4770      	bx	lr

08002a8a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIM_IC_CaptureCallback>:
}
 8002a8c:	4770      	bx	lr

08002a8e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIM_TriggerCallback>:
}
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIM_IRQHandler>:
{
 8002a92:	b510      	push	{r4, lr}
 8002a94:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a96:	6803      	ldr	r3, [r0, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	f012 0f02 	tst.w	r2, #2
 8002a9e:	d011      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	f012 0f02 	tst.w	r2, #2
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aa8:	f06f 0202 	mvn.w	r2, #2
 8002aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ab2:	6803      	ldr	r3, [r0, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f013 0f03 	tst.w	r3, #3
 8002aba:	d070      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002abc:	f7ff ffe6 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	f012 0f04 	tst.w	r2, #4
 8002acc:	d012      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	f012 0f04 	tst.w	r2, #4
 8002ad4:	d00e      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad6:	f06f 0204 	mvn.w	r2, #4
 8002ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002adc:	2302      	movs	r3, #2
 8002ade:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ae8:	d05f      	beq.n	8002baa <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ffce 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af0:	2300      	movs	r3, #0
 8002af2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	f012 0f08 	tst.w	r2, #8
 8002afc:	d012      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	f012 0f08 	tst.w	r2, #8
 8002b04:	d00e      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b06:	f06f 0208 	mvn.w	r2, #8
 8002b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f013 0f03 	tst.w	r3, #3
 8002b18:	d04e      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff ffb6 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b20:	2300      	movs	r3, #0
 8002b22:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	f012 0f10 	tst.w	r2, #16
 8002b2c:	d012      	beq.n	8002b54 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	f012 0f10 	tst.w	r2, #16
 8002b34:	d00e      	beq.n	8002b54 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b36:	f06f 0210 	mvn.w	r2, #16
 8002b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b48:	d03d      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f7ff ff9e 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b50:	2300      	movs	r3, #0
 8002b52:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	f012 0f01 	tst.w	r2, #1
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	f012 0f01 	tst.w	r2, #1
 8002b64:	d136      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b6e:	d003      	beq.n	8002b78 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b76:	d134      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b88:	d132      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	f012 0f20 	tst.w	r2, #32
 8002b92:	d003      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	f012 0f20 	tst.w	r2, #32
 8002b9a:	d130      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x16c>
}
 8002b9c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	f7ff ff74 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ff73 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8002ba8:	e78a      	b.n	8002ac0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff ff6d 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff ff6c 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8002bb6:	e79b      	b.n	8002af0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f7ff ff66 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff ff65 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8002bc4:	e7ac      	b.n	8002b20 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7ff ff5f 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff ff5e 	bl	8002a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8002bd2:	e7bd      	b.n	8002b50 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd4:	f06f 0201 	mvn.w	r2, #1
 8002bd8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f7ff ff54 	bl	8002a88 <HAL_TIM_PeriodElapsedCallback>
 8002be0:	e7c1      	b.n	8002b66 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002be8:	4620      	mov	r0, r4
 8002bea:	f000 f9c5 	bl	8002f78 <HAL_TIMEx_BreakCallback>
 8002bee:	e7c3      	b.n	8002b78 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7ff ff4a 	bl	8002a90 <HAL_TIM_TriggerCallback>
 8002bfc:	e7c5      	b.n	8002b8a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bfe:	f06f 0220 	mvn.w	r2, #32
 8002c02:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f9b6 	bl	8002f76 <HAL_TIMEx_CommutCallback>
}
 8002c0a:	e7c7      	b.n	8002b9c <HAL_TIM_IRQHandler+0x10a>

08002c0c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002c0c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0e:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <TIM_Base_SetConfig+0x70>)
 8002c10:	4290      	cmp	r0, r2
 8002c12:	d00a      	beq.n	8002c2a <TIM_Base_SetConfig+0x1e>
 8002c14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c18:	d007      	beq.n	8002c2a <TIM_Base_SetConfig+0x1e>
 8002c1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c1e:	4290      	cmp	r0, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0x1e>
 8002c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c26:	4290      	cmp	r0, r2
 8002c28:	d103      	bne.n	8002c32 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c2e:	684a      	ldr	r2, [r1, #4]
 8002c30:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <TIM_Base_SetConfig+0x70>)
 8002c34:	4290      	cmp	r0, r2
 8002c36:	d00a      	beq.n	8002c4e <TIM_Base_SetConfig+0x42>
 8002c38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x42>
 8002c3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c42:	4290      	cmp	r0, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x42>
 8002c46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c4a:	4290      	cmp	r0, r2
 8002c4c:	d103      	bne.n	8002c56 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	68ca      	ldr	r2, [r1, #12]
 8002c54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c5a:	694a      	ldr	r2, [r1, #20]
 8002c5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002c5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c60:	688b      	ldr	r3, [r1, #8]
 8002c62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c64:	680b      	ldr	r3, [r1, #0]
 8002c66:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <TIM_Base_SetConfig+0x70>)
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	d002      	beq.n	8002c74 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	6143      	str	r3, [r0, #20]
}
 8002c72:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002c74:	690b      	ldr	r3, [r1, #16]
 8002c76:	6303      	str	r3, [r0, #48]	; 0x30
 8002c78:	e7f9      	b.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00

08002c80 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002c80:	b1a8      	cbz	r0, 8002cae <HAL_TIM_Base_Init+0x2e>
{
 8002c82:	b510      	push	{r4, lr}
 8002c84:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c8a:	b15b      	cbz	r3, 8002ca4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c92:	1d21      	adds	r1, r4, #4
 8002c94:	6820      	ldr	r0, [r4, #0]
 8002c96:	f7ff ffb9 	bl	8002c0c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002ca0:	2000      	movs	r0, #0
}
 8002ca2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002ca4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ca8:	f002 ffb6 	bl	8005c18 <HAL_TIM_Base_MspInit>
 8002cac:	e7ee      	b.n	8002c8c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002cb2:	b1a8      	cbz	r0, 8002ce0 <HAL_TIM_OC_Init+0x2e>
{
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cbc:	b15b      	cbz	r3, 8002cd6 <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002cc4:	1d21      	adds	r1, r4, #4
 8002cc6:	6820      	ldr	r0, [r4, #0]
 8002cc8:	f7ff ffa0 	bl	8002c0c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cd2:	2000      	movs	r0, #0
}
 8002cd4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002cd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002cda:	f7ff fed3 	bl	8002a84 <HAL_TIM_OC_MspInit>
 8002cde:	e7ee      	b.n	8002cbe <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8002ce0:	2001      	movs	r0, #1
}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8002ce4:	b1f8      	cbz	r0, 8002d26 <HAL_TIM_OnePulse_Init+0x42>
{
 8002ce6:	b538      	push	{r3, r4, r5, lr}
 8002ce8:	4604      	mov	r4, r0
 8002cea:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cf0:	b1a3      	cbz	r3, 8002d1c <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf8:	1d21      	adds	r1, r4, #4
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	f7ff ff86 	bl	8002c0c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	f023 0308 	bic.w	r3, r3, #8
 8002d08:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	6813      	ldr	r3, [r2, #0]
 8002d0e:	432b      	orrs	r3, r5
 8002d10:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
}
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8002d20:	f7ff feb1 	bl	8002a86 <HAL_TIM_OnePulse_MspInit>
 8002d24:	e7e5      	b.n	8002cf2 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
}
 8002d28:	4770      	bx	lr
	...

08002d2c <TIM_OC2_SetConfig>:
{
 8002d2c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2e:	6a03      	ldr	r3, [r0, #32]
 8002d30:	f023 0310 	bic.w	r3, r3, #16
 8002d34:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002d36:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002d38:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002d3a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d3c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d40:	680d      	ldr	r5, [r1, #0]
 8002d42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002d46:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d4a:	688d      	ldr	r5, [r1, #8]
 8002d4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d50:	4d0e      	ldr	r5, [pc, #56]	; (8002d8c <TIM_OC2_SetConfig+0x60>)
 8002d52:	42a8      	cmp	r0, r5
 8002d54:	d009      	beq.n	8002d6a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	4d0d      	ldr	r5, [pc, #52]	; (8002d8c <TIM_OC2_SetConfig+0x60>)
 8002d58:	42a8      	cmp	r0, r5
 8002d5a:	d00e      	beq.n	8002d7a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002d5c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d5e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d60:	684a      	ldr	r2, [r1, #4]
 8002d62:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002d64:	6203      	str	r3, [r0, #32]
}
 8002d66:	bc30      	pop	{r4, r5}
 8002d68:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d6e:	68cd      	ldr	r5, [r1, #12]
 8002d70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d78:	e7ed      	b.n	8002d56 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d7a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d7e:	694d      	ldr	r5, [r1, #20]
 8002d80:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d84:	698d      	ldr	r5, [r1, #24]
 8002d86:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002d8a:	e7e7      	b.n	8002d5c <TIM_OC2_SetConfig+0x30>
 8002d8c:	40012c00 	.word	0x40012c00

08002d90 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002d90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d028      	beq.n	8002dea <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002da8:	2a0c      	cmp	r2, #12
 8002daa:	d80b      	bhi.n	8002dc4 <HAL_TIM_OC_ConfigChannel+0x34>
 8002dac:	e8df f002 	tbb	[pc, r2]
 8002db0:	0a0a0a07 	.word	0x0a0a0a07
 8002db4:	0a0a0a11 	.word	0x0a0a0a11
 8002db8:	0a0a0a15 	.word	0x0a0a0a15
 8002dbc:	19          	.byte	0x19
 8002dbd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dbe:	6800      	ldr	r0, [r0, #0]
 8002dc0:	f7ff fd9e 	bl	8002900 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002dd0:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dd2:	6800      	ldr	r0, [r0, #0]
 8002dd4:	f7ff ffaa 	bl	8002d2c <TIM_OC2_SetConfig>
      break;
 8002dd8:	e7f4      	b.n	8002dc4 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	f7ff fdbe 	bl	800295c <TIM_OC3_SetConfig>
      break;
 8002de0:	e7f0      	b.n	8002dc4 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de2:	6800      	ldr	r0, [r0, #0]
 8002de4:	f7ff fdec 	bl	80029c0 <TIM_OC4_SetConfig>
      break;
 8002de8:	e7ec      	b.n	8002dc4 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8002dea:	2002      	movs	r0, #2
}
 8002dec:	4770      	bx	lr

08002dee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dee:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002df0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfe:	6083      	str	r3, [r0, #8]
}
 8002e00:	bc10      	pop	{r4}
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002e04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d066      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0xd6>
{
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002e10:	2301      	movs	r3, #1
 8002e12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002e16:	2302      	movs	r3, #2
 8002e18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	6802      	ldr	r2, [r0, #0]
 8002e1e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e28:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e2a:	680b      	ldr	r3, [r1, #0]
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d04a      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0xc2>
 8002e30:	d913      	bls.n	8002e5a <HAL_TIM_ConfigClockSource+0x56>
 8002e32:	2b60      	cmp	r3, #96	; 0x60
 8002e34:	d03d      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xae>
 8002e36:	d91e      	bls.n	8002e76 <HAL_TIM_ConfigClockSource+0x72>
 8002e38:	2b70      	cmp	r3, #112	; 0x70
 8002e3a:	d028      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x8a>
 8002e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e40:	d130      	bne.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	68cb      	ldr	r3, [r1, #12]
 8002e44:	684a      	ldr	r2, [r1, #4]
 8002e46:	6889      	ldr	r1, [r1, #8]
 8002e48:	6800      	ldr	r0, [r0, #0]
 8002e4a:	f7ff ffd0 	bl	8002dee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	6893      	ldr	r3, [r2, #8]
 8002e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e56:	6093      	str	r3, [r2, #8]
      break;
 8002e58:	e024      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d006      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x68>
 8002e5e:	d904      	bls.n	8002e6a <HAL_TIM_ConfigClockSource+0x66>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d003      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x68>
 8002e64:	2b30      	cmp	r3, #48	; 0x30
 8002e66:	d001      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x68>
 8002e68:	e01c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
 8002e6a:	b9db      	cbnz	r3, 8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	f7ff fdef 	bl	8002a52 <TIM_ITRx_SetConfig>
      break;
 8002e74:	e016      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002e76:	2b50      	cmp	r3, #80	; 0x50
 8002e78:	d114      	bne.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	68ca      	ldr	r2, [r1, #12]
 8002e7c:	6849      	ldr	r1, [r1, #4]
 8002e7e:	6800      	ldr	r0, [r0, #0]
 8002e80:	f7ff fdc2 	bl	8002a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e84:	2150      	movs	r1, #80	; 0x50
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	f7ff fde3 	bl	8002a52 <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e00a      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002e8e:	68cb      	ldr	r3, [r1, #12]
 8002e90:	684a      	ldr	r2, [r1, #4]
 8002e92:	6889      	ldr	r1, [r1, #8]
 8002e94:	6800      	ldr	r0, [r0, #0]
 8002e96:	f7ff ffaa 	bl	8002dee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e9a:	6822      	ldr	r2, [r4, #0]
 8002e9c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002ea2:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002eb0:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb2:	68ca      	ldr	r2, [r1, #12]
 8002eb4:	6849      	ldr	r1, [r1, #4]
 8002eb6:	6800      	ldr	r0, [r0, #0]
 8002eb8:	f7ff fdb8 	bl	8002a2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ebc:	2160      	movs	r1, #96	; 0x60
 8002ebe:	6820      	ldr	r0, [r4, #0]
 8002ec0:	f7ff fdc7 	bl	8002a52 <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e7ee      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	68ca      	ldr	r2, [r1, #12]
 8002ec8:	6849      	ldr	r1, [r1, #4]
 8002eca:	6800      	ldr	r0, [r0, #0]
 8002ecc:	f7ff fd9c 	bl	8002a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f7ff fdbd 	bl	8002a52 <TIM_ITRx_SetConfig>
      break;
 8002ed8:	e7e4      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8002eda:	2002      	movs	r0, #2
}
 8002edc:	4770      	bx	lr

08002ede <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ede:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d01c      	beq.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002ee6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002ee8:	2601      	movs	r6, #1
 8002eea:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef4:	6802      	ldr	r2, [r0, #0]
 8002ef6:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002efa:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002efe:	680c      	ldr	r4, [r1, #0]
 8002f00:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f02:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f06:	684b      	ldr	r3, [r1, #4]
 8002f08:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0a:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f0c:	6802      	ldr	r2, [r0, #0]
 8002f0e:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f14:	2300      	movs	r3, #0
 8002f16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002f1a:	4618      	mov	r0, r3
}
 8002f1c:	bc70      	pop	{r4, r5, r6}
 8002f1e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f20:	2002      	movs	r0, #2
}
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d022      	beq.n	8002f72 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f32:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	688a      	ldr	r2, [r1, #8]
 8002f3a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f40:	684a      	ldr	r2, [r1, #4]
 8002f42:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f48:	680a      	ldr	r2, [r1, #0]
 8002f4a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f50:	690a      	ldr	r2, [r1, #16]
 8002f52:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f58:	694a      	ldr	r2, [r1, #20]
 8002f5a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f60:	69ca      	ldr	r2, [r1, #28]
 8002f62:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f64:	6802      	ldr	r2, [r0, #0]
 8002f66:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f72:	2002      	movs	r0, #2
}
 8002f74:	4770      	bx	lr

08002f76 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f78:	4770      	bx	lr

08002f7a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f7a:	6802      	ldr	r2, [r0, #0]
 8002f7c:	68d3      	ldr	r3, [r2, #12]
 8002f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f82:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f84:	6802      	ldr	r2, [r0, #0]
 8002f86:	6953      	ldr	r3, [r2, #20]
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	2320      	movs	r3, #32
 8002f90:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002f94:	4770      	bx	lr

08002f96 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b21      	cmp	r3, #33	; 0x21
 8002f9e:	d12a      	bne.n	8002ff6 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fa0:	6883      	ldr	r3, [r0, #8]
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa6:	d016      	beq.n	8002fd6 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fa8:	6a03      	ldr	r3, [r0, #32]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	6202      	str	r2, [r0, #32]
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fb4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002fbc:	b9eb      	cbnz	r3, 8002ffa <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fbe:	6802      	ldr	r2, [r0, #0]
 8002fc0:	68d3      	ldr	r3, [r2, #12]
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc6:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fc8:	6802      	ldr	r2, [r0, #0]
 8002fca:	68d3      	ldr	r3, [r2, #12]
 8002fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd0:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fd6:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	6802      	ldr	r2, [r0, #0]
 8002fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe0:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002fe2:	6903      	ldr	r3, [r0, #16]
 8002fe4:	b91b      	cbnz	r3, 8002fee <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8002fe6:	6a03      	ldr	r3, [r0, #32]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	6203      	str	r3, [r0, #32]
 8002fec:	e7e2      	b.n	8002fb4 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8002fee:	6a03      	ldr	r3, [r0, #32]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	6203      	str	r3, [r0, #32]
 8002ff4:	e7de      	b.n	8002fb4 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	4770      	bx	lr
    return HAL_OK;
 8002ffa:	2000      	movs	r0, #0
  }
}
 8002ffc:	4770      	bx	lr
	...

08003000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	6802      	ldr	r2, [r0, #0]
 8003006:	6913      	ldr	r3, [r2, #16]
 8003008:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800300c:	68c1      	ldr	r1, [r0, #12]
 800300e:	430b      	orrs	r3, r1
 8003010:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003012:	6883      	ldr	r3, [r0, #8]
 8003014:	6902      	ldr	r2, [r0, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	6942      	ldr	r2, [r0, #20]
 800301a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800301c:	6801      	ldr	r1, [r0, #0]
 800301e:	68cb      	ldr	r3, [r1, #12]
 8003020:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003024:	f023 030c 	bic.w	r3, r3, #12
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800302c:	6802      	ldr	r2, [r0, #0]
 800302e:	6953      	ldr	r3, [r2, #20]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	6981      	ldr	r1, [r0, #24]
 8003036:	430b      	orrs	r3, r1
 8003038:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800303a:	6802      	ldr	r2, [r0, #0]
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <UART_SetConfig+0xc4>)
 800303e:	429a      	cmp	r2, r3
 8003040:	d01f      	beq.n	8003082 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003042:	f7ff faf7 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003046:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800304a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800304e:	6863      	ldr	r3, [r4, #4]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	fbb0 f0f3 	udiv	r0, r0, r3
 8003056:	4d1c      	ldr	r5, [pc, #112]	; (80030c8 <UART_SetConfig+0xc8>)
 8003058:	fba5 3200 	umull	r3, r2, r5, r0
 800305c:	0951      	lsrs	r1, r2, #5
 800305e:	2264      	movs	r2, #100	; 0x64
 8003060:	fb02 0211 	mls	r2, r2, r1, r0
 8003064:	0113      	lsls	r3, r2, #4
 8003066:	3332      	adds	r3, #50	; 0x32
 8003068:	fba5 2303 	umull	r2, r3, r5, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003072:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	6821      	ldr	r1, [r4, #0]
 800307c:	4413      	add	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8003080:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003082:	f7ff fae7 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800308a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800308e:	6863      	ldr	r3, [r4, #4]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	fbb0 f0f3 	udiv	r0, r0, r3
 8003096:	4d0c      	ldr	r5, [pc, #48]	; (80030c8 <UART_SetConfig+0xc8>)
 8003098:	fba5 3200 	umull	r3, r2, r5, r0
 800309c:	0951      	lsrs	r1, r2, #5
 800309e:	2264      	movs	r2, #100	; 0x64
 80030a0:	fb02 0211 	mls	r2, r2, r1, r0
 80030a4:	0113      	lsls	r3, r2, #4
 80030a6:	3332      	adds	r3, #50	; 0x32
 80030a8:	fba5 2303 	umull	r2, r3, r5, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030b2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	6821      	ldr	r1, [r4, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
 80030c0:	e7de      	b.n	8003080 <UART_SetConfig+0x80>
 80030c2:	bf00      	nop
 80030c4:	40013800 	.word	0x40013800
 80030c8:	51eb851f 	.word	0x51eb851f

080030cc <HAL_UART_Init>:
  if (huart == NULL)
 80030cc:	b358      	cbz	r0, 8003126 <HAL_UART_Init+0x5a>
{
 80030ce:	b510      	push	{r4, lr}
 80030d0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80030d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80030d6:	b30b      	cbz	r3, 800311c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	2324      	movs	r3, #36	; 0x24
 80030da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	68d3      	ldr	r3, [r2, #12]
 80030e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff ff89 	bl	8003000 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ee:	6822      	ldr	r2, [r4, #0]
 80030f0:	6913      	ldr	r3, [r2, #16]
 80030f2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80030f6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	6953      	ldr	r3, [r2, #20]
 80030fc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003100:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	68d3      	ldr	r3, [r2, #12]
 8003106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800310a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310c:	2000      	movs	r0, #0
 800310e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003110:	2320      	movs	r3, #32
 8003112:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003116:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800311a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800311c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003120:	f002 fda2 	bl	8005c68 <HAL_UART_MspInit>
 8003124:	e7d8      	b.n	80030d8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
}
 8003128:	4770      	bx	lr

0800312a <HAL_UART_TxCpltCallback>:
}
 800312a:	4770      	bx	lr

0800312c <UART_EndTransmit_IT>:
{
 800312c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800312e:	6801      	ldr	r1, [r0, #0]
 8003130:	68cb      	ldr	r3, [r1, #12]
 8003132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003136:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003138:	2320      	movs	r3, #32
 800313a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800313e:	f7ff fff4 	bl	800312a <HAL_UART_TxCpltCallback>
}
 8003142:	2000      	movs	r0, #0
 8003144:	bd08      	pop	{r3, pc}

08003146 <HAL_UART_RxCpltCallback>:
}
 8003146:	4770      	bx	lr

08003148 <UART_Receive_IT>:
{
 8003148:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800314a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b22      	cmp	r3, #34	; 0x22
 8003152:	d145      	bne.n	80031e0 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003154:	6883      	ldr	r3, [r0, #8]
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315a:	d00e      	beq.n	800317a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800315c:	6903      	ldr	r3, [r0, #16]
 800315e:	bb03      	cbnz	r3, 80031a2 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003160:	6803      	ldr	r3, [r0, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	6281      	str	r1, [r0, #40]	; 0x28
 800316a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800316c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800316e:	3b01      	subs	r3, #1
 8003170:	b29b      	uxth	r3, r3
 8003172:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003174:	b1f3      	cbz	r3, 80031b4 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8003176:	2000      	movs	r0, #0
 8003178:	e033      	b.n	80031e2 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800317a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800317c:	6903      	ldr	r3, [r0, #16]
 800317e:	b943      	cbnz	r3, 8003192 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003188:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800318a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800318c:	3302      	adds	r3, #2
 800318e:	6283      	str	r3, [r0, #40]	; 0x28
 8003190:	e7ec      	b.n	800316c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003192:	6803      	ldr	r3, [r0, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800319a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800319c:	3301      	adds	r3, #1
 800319e:	6283      	str	r3, [r0, #40]	; 0x28
 80031a0:	e7e4      	b.n	800316c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80031a8:	1c51      	adds	r1, r2, #1
 80031aa:	6281      	str	r1, [r0, #40]	; 0x28
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	7013      	strb	r3, [r2, #0]
 80031b2:	e7db      	b.n	800316c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031b4:	6802      	ldr	r2, [r0, #0]
 80031b6:	68d3      	ldr	r3, [r2, #12]
 80031b8:	f023 0320 	bic.w	r3, r3, #32
 80031bc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031be:	6802      	ldr	r2, [r0, #0]
 80031c0:	68d3      	ldr	r3, [r2, #12]
 80031c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031c8:	6802      	ldr	r2, [r0, #0]
 80031ca:	6953      	ldr	r3, [r2, #20]
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80031d2:	2320      	movs	r3, #32
 80031d4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80031d8:	f7ff ffb5 	bl	8003146 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80031dc:	2000      	movs	r0, #0
 80031de:	e000      	b.n	80031e2 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80031e0:	2002      	movs	r0, #2
}
 80031e2:	bd08      	pop	{r3, pc}

080031e4 <HAL_UART_ErrorCallback>:
}
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_UART_IRQHandler>:
{
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031ec:	6802      	ldr	r2, [r0, #0]
 80031ee:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031f0:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031f2:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80031f4:	f013 000f 	ands.w	r0, r3, #15
 80031f8:	d105      	bne.n	8003206 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031fa:	f013 0f20 	tst.w	r3, #32
 80031fe:	d002      	beq.n	8003206 <HAL_UART_IRQHandler+0x1e>
 8003200:	f011 0f20 	tst.w	r1, #32
 8003204:	d153      	bne.n	80032ae <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003206:	2800      	cmp	r0, #0
 8003208:	d067      	beq.n	80032da <HAL_UART_IRQHandler+0xf2>
 800320a:	f012 0201 	ands.w	r2, r2, #1
 800320e:	d102      	bne.n	8003216 <HAL_UART_IRQHandler+0x2e>
 8003210:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003214:	d061      	beq.n	80032da <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003216:	f013 0f01 	tst.w	r3, #1
 800321a:	d006      	beq.n	800322a <HAL_UART_IRQHandler+0x42>
 800321c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003220:	d003      	beq.n	800322a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003222:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003224:	f040 0001 	orr.w	r0, r0, #1
 8003228:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800322a:	f013 0f04 	tst.w	r3, #4
 800322e:	d004      	beq.n	800323a <HAL_UART_IRQHandler+0x52>
 8003230:	b11a      	cbz	r2, 800323a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003232:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003234:	f040 0002 	orr.w	r0, r0, #2
 8003238:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800323a:	f013 0f02 	tst.w	r3, #2
 800323e:	d004      	beq.n	800324a <HAL_UART_IRQHandler+0x62>
 8003240:	b11a      	cbz	r2, 800324a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003242:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003244:	f040 0004 	orr.w	r0, r0, #4
 8003248:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324a:	f013 0f08 	tst.w	r3, #8
 800324e:	d004      	beq.n	800325a <HAL_UART_IRQHandler+0x72>
 8003250:	b11a      	cbz	r2, 800325a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003252:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003254:	f042 0208 	orr.w	r2, r2, #8
 8003258:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800325a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800325c:	2a00      	cmp	r2, #0
 800325e:	d048      	beq.n	80032f2 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003260:	f013 0f20 	tst.w	r3, #32
 8003264:	d002      	beq.n	800326c <HAL_UART_IRQHandler+0x84>
 8003266:	f011 0f20 	tst.w	r1, #32
 800326a:	d124      	bne.n	80032b6 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003274:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003276:	f012 0f08 	tst.w	r2, #8
 800327a:	d100      	bne.n	800327e <HAL_UART_IRQHandler+0x96>
 800327c:	b33b      	cbz	r3, 80032ce <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800327e:	4620      	mov	r0, r4
 8003280:	f7ff fe7b 	bl	8002f7a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	f012 0f40 	tst.w	r2, #64	; 0x40
 800328c:	d01b      	beq.n	80032c6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003294:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003298:	b18b      	cbz	r3, 80032be <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_UART_IRQHandler+0x11c>)
 800329c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80032a0:	f7fe fc28 	bl	8001af4 <HAL_DMA_Abort_IT>
 80032a4:	b328      	cbz	r0, 80032f2 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80032a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032aa:	4798      	blx	r3
 80032ac:	e021      	b.n	80032f2 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 80032ae:	4620      	mov	r0, r4
 80032b0:	f7ff ff4a 	bl	8003148 <UART_Receive_IT>
      return;
 80032b4:	e01d      	b.n	80032f2 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff ff46 	bl	8003148 <UART_Receive_IT>
 80032bc:	e7d6      	b.n	800326c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 80032be:	4620      	mov	r0, r4
 80032c0:	f7ff ff90 	bl	80031e4 <HAL_UART_ErrorCallback>
 80032c4:	e015      	b.n	80032f2 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7ff ff8c 	bl	80031e4 <HAL_UART_ErrorCallback>
 80032cc:	e011      	b.n	80032f2 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7ff ff88 	bl	80031e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80032d8:	e00b      	b.n	80032f2 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032de:	d002      	beq.n	80032e6 <HAL_UART_IRQHandler+0xfe>
 80032e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032e4:	d106      	bne.n	80032f4 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032ea:	d002      	beq.n	80032f2 <HAL_UART_IRQHandler+0x10a>
 80032ec:	f011 0f40 	tst.w	r1, #64	; 0x40
 80032f0:	d104      	bne.n	80032fc <HAL_UART_IRQHandler+0x114>
}
 80032f2:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff fe4e 	bl	8002f96 <UART_Transmit_IT>
    return;
 80032fa:	e7fa      	b.n	80032f2 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff ff15 	bl	800312c <UART_EndTransmit_IT>
    return;
 8003302:	e7f6      	b.n	80032f2 <HAL_UART_IRQHandler+0x10a>
 8003304:	08003309 	.word	0x08003309

08003308 <UART_DMAAbortOnError>:
{
 8003308:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800330c:	2300      	movs	r3, #0
 800330e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003310:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003312:	f7ff ff67 	bl	80031e4 <HAL_UART_ErrorCallback>
}
 8003316:	bd08      	pop	{r3, pc}

08003318 <simple_delay_ms>:



void simple_delay_ms(const uint16_t ms)
{
  uint32_t i = ms * 7200;
 8003318:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800331c:	fb03 f000 	mul.w	r0, r3, r0
  while (i-- > 0) {
 8003320:	e001      	b.n	8003326 <simple_delay_ms+0xe>
    asm("nop");
 8003322:	bf00      	nop
  while (i-- > 0) {
 8003324:	4618      	mov	r0, r3
 8003326:	1e43      	subs	r3, r0, #1
 8003328:	2800      	cmp	r0, #0
 800332a:	d1fa      	bne.n	8003322 <simple_delay_ms+0xa>
  }
}
 800332c:	4770      	bx	lr

0800332e <simple_delay_us>:

void simple_delay_us(const uint16_t us)
{
  uint16_t i = us * 7;
 800332e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003332:	b280      	uxth	r0, r0
  while (i-- > 0) {
 8003334:	e001      	b.n	800333a <simple_delay_us+0xc>
    asm("nop");
 8003336:	bf00      	nop
  while (i-- > 0) {
 8003338:	4618      	mov	r0, r3
 800333a:	1e43      	subs	r3, r0, #1
 800333c:	b29b      	uxth	r3, r3
 800333e:	2800      	cmp	r0, #0
 8003340:	d1f9      	bne.n	8003336 <simple_delay_us+0x8>
  }
}
 8003342:	4770      	bx	lr

08003344 <crc8>:
 *      Author: kowma
 */
#include "main.h"
#include "ds18b20.h"

unsigned char crc8(void const *mem, size_t len) {
 8003344:	b430      	push	{r4, r5}
	uint8_t crc = 0;
 8003346:	2200      	movs	r2, #0
	unsigned char const *data = mem;

		while (len--) {
 8003348:	e010      	b.n	800336c <crc8+0x28>
			uint8_t inbyte = *data++;
			for (uint8_t i = 8; i; i--) {
				uint8_t mix = (crc ^ inbyte) & 0x01;
				crc >>= 1;
				if (mix) crc ^= 0x8C;
				inbyte >>= 1;
 800334a:	0840      	lsrs	r0, r0, #1
			for (uint8_t i = 8; i; i--) {
 800334c:	3b01      	subs	r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	b153      	cbz	r3, 8003368 <crc8+0x24>
				uint8_t mix = (crc ^ inbyte) & 0x01;
 8003352:	ea82 0100 	eor.w	r1, r2, r0
				if (mix) crc ^= 0x8C;
 8003356:	f011 0f01 	tst.w	r1, #1
 800335a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800335e:	d0f4      	beq.n	800334a <crc8+0x6>
 8003360:	f082 028c 	eor.w	r2, r2, #140	; 0x8c
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	e7f0      	b.n	800334a <crc8+0x6>
			uint8_t inbyte = *data++;
 8003368:	4628      	mov	r0, r5
		while (len--) {
 800336a:	4621      	mov	r1, r4
 800336c:	1e4c      	subs	r4, r1, #1
 800336e:	b119      	cbz	r1, 8003378 <crc8+0x34>
			uint8_t inbyte = *data++;
 8003370:	1c45      	adds	r5, r0, #1
 8003372:	7800      	ldrb	r0, [r0, #0]
			for (uint8_t i = 8; i; i--) {
 8003374:	2308      	movs	r3, #8
 8003376:	e7eb      	b.n	8003350 <crc8+0xc>
			}
		}
		return crc;
}
 8003378:	4610      	mov	r0, r2
 800337a:	bc30      	pop	{r4, r5}
 800337c:	4770      	bx	lr
	...

08003380 <oneWire_direction_set>:
}scratchpad[DS1820_INPUTS][MAX_DS18B20_SENSORS_AMOUNT];



void oneWire_direction_set(uint8_t direction, uint8_t input_no)
{
 8003380:	b500      	push	{lr}
 8003382:	b085      	sub	sp, #20
	uint16_t pin=0;
	GPIO_InitTypeDef	GPIO_InitStruct;
	if(input_no == 0)	pin = ONE_WIRE_DATA1_Pin;
 8003384:	b119      	cbz	r1, 800338e <oneWire_direction_set+0xe>
	else if(input_no == 1)	pin = ONE_WIRE_DATA2_Pin;
 8003386:	2901      	cmp	r1, #1
 8003388:	d009      	beq.n	800339e <oneWire_direction_set+0x1e>
	uint16_t pin=0;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <oneWire_direction_set+0x10>
	if(input_no == 0)	pin = ONE_WIRE_DATA1_Pin;
 800338e:	2308      	movs	r3, #8

	if(direction == ONE_WIRE_BUS_INPUT)
 8003390:	2801      	cmp	r0, #1
 8003392:	d006      	beq.n	80033a2 <oneWire_direction_set+0x22>
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
		GPIO_InitStruct.Pin = pin;// Pin for 1-Wire bus
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
	}
	else if(direction ==  ONE_WIRE_BUS_OUTPUT)
 8003394:	2802      	cmp	r0, #2
 8003396:	d010      	beq.n	80033ba <oneWire_direction_set+0x3a>
	else
	{
		// error
	}

}
 8003398:	b005      	add	sp, #20
 800339a:	f85d fb04 	ldr.w	pc, [sp], #4
	else if(input_no == 1)	pin = ONE_WIRE_DATA2_Pin;
 800339e:	2310      	movs	r3, #16
 80033a0:	e7f6      	b.n	8003390 <oneWire_direction_set+0x10>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80033a2:	2200      	movs	r2, #0
 80033a4:	9201      	str	r2, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80033a6:	9202      	str	r2, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80033a8:	2201      	movs	r2, #1
 80033aa:	9203      	str	r2, [sp, #12]
		GPIO_InitStruct.Pin = pin;// Pin for 1-Wire bus
 80033ac:	a904      	add	r1, sp, #16
 80033ae:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 80033b2:	4808      	ldr	r0, [pc, #32]	; (80033d4 <oneWire_direction_set+0x54>)
 80033b4:	f7fe fd2c 	bl	8001e10 <HAL_GPIO_Init>
 80033b8:	e7ee      	b.n	8003398 <oneWire_direction_set+0x18>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 80033ba:	2211      	movs	r2, #17
 80033bc:	9201      	str	r2, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80033be:	2200      	movs	r2, #0
 80033c0:	9202      	str	r2, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80033c2:	2201      	movs	r2, #1
 80033c4:	9203      	str	r2, [sp, #12]
		GPIO_InitStruct.Pin = pin; // Pin for 1-Wire bus
 80033c6:	a904      	add	r1, sp, #16
 80033c8:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <oneWire_direction_set+0x54>)
 80033ce:	f7fe fd1f 	bl	8001e10 <HAL_GPIO_Init>
}
 80033d2:	e7e1      	b.n	8003398 <oneWire_direction_set+0x18>
 80033d4:	40010800 	.word	0x40010800

080033d8 <oneWire_init>:

uint8_t oneWire_init(uint8_t input_no)
{
 80033d8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	//TIM2->CR1 |= (1<<3); //OPM
	uint16_t pin =0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 80033da:	4605      	mov	r5, r0
 80033dc:	b118      	cbz	r0, 80033e6 <oneWire_init+0xe>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 80033de:	2801      	cmp	r0, #1
 80033e0:	d020      	beq.n	8003424 <oneWire_init+0x4c>
	uint16_t pin =0;
 80033e2:	2600      	movs	r6, #0
 80033e4:	e000      	b.n	80033e8 <oneWire_init+0x10>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 80033e6:	2608      	movs	r6, #8
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,input_no);
 80033e8:	4629      	mov	r1, r5
 80033ea:	2002      	movs	r0, #2
 80033ec:	f7ff ffc8 	bl	8003380 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin;
 80033f0:	4c0e      	ldr	r4, [pc, #56]	; (800342c <oneWire_init+0x54>)
 80033f2:	68e3      	ldr	r3, [r4, #12]
 80033f4:	ea23 0306 	bic.w	r3, r3, r6
 80033f8:	60e3      	str	r3, [r4, #12]
	simple_delay_us(500);
 80033fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033fe:	f7ff ff96 	bl	800332e <simple_delay_us>

	oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 8003402:	4629      	mov	r1, r5
 8003404:	2001      	movs	r0, #1
 8003406:	f7ff ffbb 	bl	8003380 <oneWire_direction_set>
	simple_delay_us(70);
 800340a:	2046      	movs	r0, #70	; 0x46
 800340c:	f7ff ff8f 	bl	800332e <simple_delay_us>

	if(ONE_WIRE_DATA1_GPIO_Port->IDR & pin) // if 0 - then there is devices on bus
 8003410:	68a3      	ldr	r3, [r4, #8]
 8003412:	421e      	tst	r6, r3
 8003414:	d108      	bne.n	8003428 <oneWire_init+0x50>
	{
		i = ONE_WIRE_PRESENCE_FAIL;
	}
	else i = ONE_WIRE_PRESENCE_SUCCESS;
 8003416:	2401      	movs	r4, #1
	simple_delay_us(410);
 8003418:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800341c:	f7ff ff87 	bl	800332e <simple_delay_us>
	return i;
}
 8003420:	4620      	mov	r0, r4
 8003422:	bd70      	pop	{r4, r5, r6, pc}
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 8003424:	2610      	movs	r6, #16
 8003426:	e7df      	b.n	80033e8 <oneWire_init+0x10>
		i = ONE_WIRE_PRESENCE_FAIL;
 8003428:	2400      	movs	r4, #0
 800342a:	e7f5      	b.n	8003418 <oneWire_init+0x40>
 800342c:	40010800 	.word	0x40010800

08003430 <oneWire_writeBit>:

void oneWire_writeBit(uint8_t value,uint8_t input_no)
{
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4605      	mov	r5, r0
	uint16_t pin =0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003434:	460c      	mov	r4, r1
 8003436:	b119      	cbz	r1, 8003440 <oneWire_writeBit+0x10>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 8003438:	2901      	cmp	r1, #1
 800343a:	d017      	beq.n	800346c <oneWire_writeBit+0x3c>
	uint16_t pin =0;
 800343c:	2100      	movs	r1, #0
 800343e:	e000      	b.n	8003442 <oneWire_writeBit+0x12>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003440:	2108      	movs	r1, #8
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin; // todo check
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <oneWire_writeBit+0x58>)
 8003444:	68d3      	ldr	r3, [r2, #12]
 8003446:	ea23 0301 	bic.w	r3, r3, r1
 800344a:	60d3      	str	r3, [r2, #12]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,input_no);
 800344c:	4621      	mov	r1, r4
 800344e:	2002      	movs	r0, #2
 8003450:	f7ff ff96 	bl	8003380 <oneWire_direction_set>
	if(value)
 8003454:	b965      	cbnz	r5, 8003470 <oneWire_writeBit+0x40>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
		simple_delay_us(64);
	}
	else
	{
		simple_delay_us(60);
 8003456:	203c      	movs	r0, #60	; 0x3c
 8003458:	f7ff ff69 	bl	800332e <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 800345c:	4621      	mov	r1, r4
 800345e:	2001      	movs	r0, #1
 8003460:	f7ff ff8e 	bl	8003380 <oneWire_direction_set>
		simple_delay_us(10);
 8003464:	200a      	movs	r0, #10
 8003466:	f7ff ff62 	bl	800332e <simple_delay_us>
	}
}
 800346a:	bd38      	pop	{r3, r4, r5, pc}
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 800346c:	2110      	movs	r1, #16
 800346e:	e7e8      	b.n	8003442 <oneWire_writeBit+0x12>
		simple_delay_us(6);
 8003470:	2006      	movs	r0, #6
 8003472:	f7ff ff5c 	bl	800332e <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 8003476:	4621      	mov	r1, r4
 8003478:	2001      	movs	r0, #1
 800347a:	f7ff ff81 	bl	8003380 <oneWire_direction_set>
		simple_delay_us(64);
 800347e:	2040      	movs	r0, #64	; 0x40
 8003480:	f7ff ff55 	bl	800332e <simple_delay_us>
 8003484:	e7f1      	b.n	800346a <oneWire_writeBit+0x3a>
 8003486:	bf00      	nop
 8003488:	40010800 	.word	0x40010800

0800348c <oneWire_writeByte>:
void oneWire_writeByte(uint8_t byte, uint8_t input_no)
{
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	4606      	mov	r6, r0
	uint16_t pin = 0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003490:	460d      	mov	r5, r1
 8003492:	b119      	cbz	r1, 800349c <oneWire_writeByte+0x10>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 8003494:	2901      	cmp	r1, #1
 8003496:	d00d      	beq.n	80034b4 <oneWire_writeByte+0x28>
	uint16_t pin = 0;
 8003498:	2400      	movs	r4, #0
 800349a:	e000      	b.n	800349e <oneWire_writeByte+0x12>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 800349c:	2408      	movs	r4, #8
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,pin);
 800349e:	4621      	mov	r1, r4
 80034a0:	2002      	movs	r0, #2
 80034a2:	f7ff ff6d 	bl	8003380 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin;
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <oneWire_writeByte+0x44>)
 80034a8:	68d9      	ldr	r1, [r3, #12]
 80034aa:	ea21 0104 	bic.w	r1, r1, r4
 80034ae:	60d9      	str	r1, [r3, #12]
	for(uint8_t i=0; i<8; i++){
 80034b0:	2400      	movs	r4, #0
 80034b2:	e009      	b.n	80034c8 <oneWire_writeByte+0x3c>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 80034b4:	2410      	movs	r4, #16
 80034b6:	e7f2      	b.n	800349e <oneWire_writeByte+0x12>
		oneWire_writeBit(byte & 1<<i, input_no);
 80034b8:	2001      	movs	r0, #1
 80034ba:	40a0      	lsls	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	4030      	ands	r0, r6
 80034c0:	f7ff ffb6 	bl	8003430 <oneWire_writeBit>
	for(uint8_t i=0; i<8; i++){
 80034c4:	3401      	adds	r4, #1
 80034c6:	b2e4      	uxtb	r4, r4
 80034c8:	2c07      	cmp	r4, #7
 80034ca:	d9f5      	bls.n	80034b8 <oneWire_writeByte+0x2c>
	}
}
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
 80034ce:	bf00      	nop
 80034d0:	40010800 	.word	0x40010800

080034d4 <oneWire_readbit>:

uint8_t oneWire_readbit(uint8_t input_no)
{
 80034d4:	b570      	push	{r4, r5, r6, lr}
	uint16_t pin = 0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 80034d6:	4605      	mov	r5, r0
 80034d8:	b118      	cbz	r0, 80034e2 <oneWire_readbit+0xe>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 80034da:	2801      	cmp	r0, #1
 80034dc:	d01d      	beq.n	800351a <oneWire_readbit+0x46>
	uint16_t pin = 0;
 80034de:	2600      	movs	r6, #0
 80034e0:	e000      	b.n	80034e4 <oneWire_readbit+0x10>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 80034e2:	2608      	movs	r6, #8
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,input_no);
 80034e4:	4629      	mov	r1, r5
 80034e6:	2002      	movs	r0, #2
 80034e8:	f7ff ff4a 	bl	8003380 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin;
 80034ec:	4c0e      	ldr	r4, [pc, #56]	; (8003528 <oneWire_readbit+0x54>)
 80034ee:	68e3      	ldr	r3, [r4, #12]
 80034f0:	ea23 0306 	bic.w	r3, r3, r6
 80034f4:	60e3      	str	r3, [r4, #12]
	simple_delay_us(2);
 80034f6:	2002      	movs	r0, #2
 80034f8:	f7ff ff19 	bl	800332e <simple_delay_us>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 80034fc:	4629      	mov	r1, r5
 80034fe:	2001      	movs	r0, #1
 8003500:	f7ff ff3e 	bl	8003380 <oneWire_direction_set>
	simple_delay_us(10);
 8003504:	200a      	movs	r0, #10
 8003506:	f7ff ff12 	bl	800332e <simple_delay_us>
	if(ONE_WIRE_DATA1_GPIO_Port->IDR & pin)
 800350a:	68a3      	ldr	r3, [r4, #8]
 800350c:	421e      	tst	r6, r3
 800350e:	d106      	bne.n	800351e <oneWire_readbit+0x4a>
	{
		simple_delay_us(60);
		return 1;
	}
	else{
		simple_delay_us(60);
 8003510:	203c      	movs	r0, #60	; 0x3c
 8003512:	f7ff ff0c 	bl	800332e <simple_delay_us>
		return 0;
 8003516:	2000      	movs	r0, #0
	}
}
 8003518:	bd70      	pop	{r4, r5, r6, pc}
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 800351a:	2610      	movs	r6, #16
 800351c:	e7e2      	b.n	80034e4 <oneWire_readbit+0x10>
		simple_delay_us(60);
 800351e:	203c      	movs	r0, #60	; 0x3c
 8003520:	f7ff ff05 	bl	800332e <simple_delay_us>
		return 1;
 8003524:	2001      	movs	r0, #1
 8003526:	e7f7      	b.n	8003518 <oneWire_readbit+0x44>
 8003528:	40010800 	.word	0x40010800

0800352c <oneWire_readbyte>:

uint8_t oneWire_readbyte(uint8_t input_no)
{
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	4606      	mov	r6, r0
	uint8_t data = 0;
	for(uint8_t i = 0; i< 8 ; i++)
 8003530:	2400      	movs	r4, #0
	uint8_t data = 0;
 8003532:	4625      	mov	r5, r4
	for(uint8_t i = 0; i< 8 ; i++)
 8003534:	e001      	b.n	800353a <oneWire_readbyte+0xe>
 8003536:	3401      	adds	r4, #1
 8003538:	b2e4      	uxtb	r4, r4
 800353a:	2c07      	cmp	r4, #7
 800353c:	d809      	bhi.n	8003552 <oneWire_readbyte+0x26>
	{
		if(oneWire_readbit(input_no)) data |= (1 << i);
 800353e:	4630      	mov	r0, r6
 8003540:	f7ff ffc8 	bl	80034d4 <oneWire_readbit>
 8003544:	2800      	cmp	r0, #0
 8003546:	d0f6      	beq.n	8003536 <oneWire_readbyte+0xa>
 8003548:	2301      	movs	r3, #1
 800354a:	40a3      	lsls	r3, r4
 800354c:	431d      	orrs	r5, r3
 800354e:	b2ed      	uxtb	r5, r5
 8003550:	e7f1      	b.n	8003536 <oneWire_readbyte+0xa>
	}
	return data;
}
 8003552:	4628      	mov	r0, r5
 8003554:	bd70      	pop	{r4, r5, r6, pc}
	...

08003558 <write_data_to_struct>:
}
*/

void write_data_to_struct(uint8_t bit_cnt, uint8_t bit_data, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 8003558:	2807      	cmp	r0, #7
 800355a:	d80a      	bhi.n	8003572 <write_data_to_struct+0x1a>
	{
		 if(bit_data) rom_address[0][deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 800355c:	2900      	cmp	r1, #0
 800355e:	d039      	beq.n	80035d4 <write_data_to_struct+0x7c>
 8003560:	2301      	movs	r3, #1
 8003562:	4083      	lsls	r3, r0
 8003564:	491c      	ldr	r1, [pc, #112]	; (80035d8 <write_data_to_struct+0x80>)
 8003566:	f811 0032 	ldrb.w	r0, [r1, r2, lsl #3]
 800356a:	4318      	orrs	r0, r3
 800356c:	f801 0032 	strb.w	r0, [r1, r2, lsl #3]
 8003570:	4770      	bx	lr
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8003572:	f1a0 0308 	sub.w	r3, r0, #8
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b1f      	cmp	r3, #31
 800357a:	d80c      	bhi.n	8003596 <write_data_to_struct+0x3e>
	{
		if(bit_data) rom_address[0][deviceNo].ROM_NO_FIRST_HALF |= (1 << (bit_cnt - 8));
 800357c:	b351      	cbz	r1, 80035d4 <write_data_to_struct+0x7c>
 800357e:	3808      	subs	r0, #8
 8003580:	2101      	movs	r1, #1
 8003582:	4081      	lsls	r1, r0
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <write_data_to_struct+0x80>)
 8003586:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800358a:	f8d2 0001 	ldr.w	r0, [r2, #1]
 800358e:	4308      	orrs	r0, r1
 8003590:	f8c2 0001 	str.w	r0, [r2, #1]
 8003594:	4770      	bx	lr
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) )  // Serial no first half
 8003596:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d80d      	bhi.n	80035bc <write_data_to_struct+0x64>
	{
		if(bit_data) rom_address[0][deviceNo].ROM_NO_SECOUND_HALF |= (1 << (bit_cnt - 40 ));
 80035a0:	b1c1      	cbz	r1, 80035d4 <write_data_to_struct+0x7c>
 80035a2:	3828      	subs	r0, #40	; 0x28
 80035a4:	2301      	movs	r3, #1
 80035a6:	fa03 f000 	lsl.w	r0, r3, r0
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <write_data_to_struct+0x80>)
 80035ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80035b0:	f8b2 3005 	ldrh.w	r3, [r2, #5]
 80035b4:	4303      	orrs	r3, r0
 80035b6:	f8a2 3005 	strh.w	r3, [r2, #5]
 80035ba:	4770      	bx	lr
	}
	else if( bit_cnt >= 56) // CRC
 80035bc:	2837      	cmp	r0, #55	; 0x37
 80035be:	d909      	bls.n	80035d4 <write_data_to_struct+0x7c>
	{
		if(bit_data) rom_address[0][deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
 80035c0:	b141      	cbz	r1, 80035d4 <write_data_to_struct+0x7c>
 80035c2:	3838      	subs	r0, #56	; 0x38
 80035c4:	2101      	movs	r1, #1
 80035c6:	4081      	lsls	r1, r0
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <write_data_to_struct+0x80>)
 80035ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80035ce:	79d0      	ldrb	r0, [r2, #7]
 80035d0:	4308      	orrs	r0, r1
 80035d2:	71d0      	strb	r0, [r2, #7]
	}
}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000f30 	.word	0x20000f30

080035dc <read_address_bit_form_struct>:
//	}
//}

uint8_t read_address_bit_form_struct(uint8_t bit_cnt, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 80035dc:	2807      	cmp	r0, #7
 80035de:	d918      	bls.n	8003612 <read_address_bit_form_struct+0x36>
	{
		 return ((rom_address[0][deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 80035e0:	f1a0 0308 	sub.w	r3, r0, #8
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b1f      	cmp	r3, #31
 80035e8:	d91e      	bls.n	8003628 <read_address_bit_form_struct+0x4c>
	{
		return ((rom_address[0][deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) ) // Serial no first half
 80035ea:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b0f      	cmp	r3, #15
 80035f2:	d927      	bls.n	8003644 <read_address_bit_form_struct+0x68>
	{
		return ((rom_address[0][deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
	}
	else if( bit_cnt >= 56) // CRC
 80035f4:	2837      	cmp	r0, #55	; 0x37
 80035f6:	d933      	bls.n	8003660 <read_address_bit_form_struct+0x84>
	{
		return ((rom_address[0][deviceNo].ROM_CRC & (1 << (bit_cnt - 56) )) > 0) ;
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <read_address_bit_form_struct+0x88>)
 80035fa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80035fe:	79ca      	ldrb	r2, [r1, #7]
 8003600:	3838      	subs	r0, #56	; 0x38
 8003602:	2301      	movs	r3, #1
 8003604:	fa03 f000 	lsl.w	r0, r3, r0
 8003608:	4202      	tst	r2, r0
 800360a:	bf14      	ite	ne
 800360c:	4618      	movne	r0, r3
 800360e:	2000      	moveq	r0, #0
 8003610:	4770      	bx	lr
		 return ((rom_address[0][deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <read_address_bit_form_struct+0x88>)
 8003614:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
 8003618:	2301      	movs	r3, #1
 800361a:	fa03 f000 	lsl.w	r0, r3, r0
 800361e:	4202      	tst	r2, r0
 8003620:	bf14      	ite	ne
 8003622:	4618      	movne	r0, r3
 8003624:	2000      	moveq	r0, #0
 8003626:	4770      	bx	lr
		return ((rom_address[0][deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <read_address_bit_form_struct+0x88>)
 800362a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800362e:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8003632:	3808      	subs	r0, #8
 8003634:	2301      	movs	r3, #1
 8003636:	fa03 f000 	lsl.w	r0, r3, r0
 800363a:	4202      	tst	r2, r0
 800363c:	bf14      	ite	ne
 800363e:	4618      	movne	r0, r3
 8003640:	2000      	moveq	r0, #0
 8003642:	4770      	bx	lr
		return ((rom_address[0][deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <read_address_bit_form_struct+0x88>)
 8003646:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800364a:	f8b1 2005 	ldrh.w	r2, [r1, #5]
 800364e:	3828      	subs	r0, #40	; 0x28
 8003650:	2301      	movs	r3, #1
 8003652:	fa03 f000 	lsl.w	r0, r3, r0
 8003656:	4202      	tst	r2, r0
 8003658:	bf14      	ite	ne
 800365a:	4618      	movne	r0, r3
 800365c:	2000      	moveq	r0, #0
 800365e:	4770      	bx	lr
	}
	else // not used // TODO add asset
	{
		return 0;
 8003660:	2000      	movs	r0, #0
	}

}
 8003662:	4770      	bx	lr
 8003664:	20000f30 	.word	0x20000f30

08003668 <ds18b20_check_crc>:
//	}
//}


uint8_t ds18b20_check_crc(uint8_t DS18B20_sensor_no)
{
 8003668:	b510      	push	{r4, lr}
	uint8_t sensor_crc;
	sensor_crc = crc8(&rom_address[0][DS18B20_sensor_no], 7);
 800366a:	4c07      	ldr	r4, [pc, #28]	; (8003688 <ds18b20_check_crc+0x20>)
 800366c:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8003670:	2107      	movs	r1, #7
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff fe66 	bl	8003344 <crc8>
	if(sensor_crc == rom_address[0][DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8003678:	79e3      	ldrb	r3, [r4, #7]
 800367a:	4283      	cmp	r3, r0
 800367c:	d001      	beq.n	8003682 <ds18b20_check_crc+0x1a>
	else return DS18B20_CRC_ACK_FAIL;
 800367e:	2000      	movs	r0, #0

}
 8003680:	bd10      	pop	{r4, pc}
	if(sensor_crc == rom_address[0][DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8003682:	2001      	movs	r0, #1
 8003684:	e7fc      	b.n	8003680 <ds18b20_check_crc+0x18>
 8003686:	bf00      	nop
 8003688:	20000f30 	.word	0x20000f30

0800368c <ds18b20_search_rom>:
/***
 * searching algorithm based on :
 * https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/187.html
 */
uint8_t ds18b20_search_rom(uint8_t input_no)
{
 800368c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003690:	4607      	mov	r7, r0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
	uint8_t lastDiscrepancy = 0, searchDirection = 0, lastZero = 0; // może byc 0 bo na pierwszych 8 pozycjach zapisana jest rodzina urządzeń
 8003692:	f04f 0a00 	mov.w	sl, #0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
 8003696:	46d0      	mov	r8, sl
	do{
		if(oneWire_init(input_no) == ONE_WIRE_PRESENCE_FAIL) return ROM_SARCHING_ERROR;
 8003698:	4638      	mov	r0, r7
 800369a:	f7ff fe9d 	bl	80033d8 <oneWire_init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d060      	beq.n	8003766 <ds18b20_search_rom+0xda>

		// there is at least one sensor - someone send presensce ack
		oneWire_writeByte(0xF0,input_no);
 80036a4:	4639      	mov	r1, r7
 80036a6:	20f0      	movs	r0, #240	; 0xf0
 80036a8:	f7ff fef0 	bl	800348c <oneWire_writeByte>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 80036ac:	f04f 0900 	mov.w	r9, #0
 80036b0:	464c      	mov	r4, r9
 80036b2:	e01e      	b.n	80036f2 <ds18b20_search_rom+0x66>
			}
			else{
				return ROM_SARCHING_ERROR;
			}
		}
		lastDiscrepancy = lastZero;
 80036b4:	46ca      	mov	sl, r9
 80036b6:	e7ef      	b.n	8003698 <ds18b20_search_rom+0xc>
					searchDirection = 1;
 80036b8:	2601      	movs	r6, #1
				oneWire_writeBit(searchDirection,input_no);
 80036ba:	4639      	mov	r1, r7
 80036bc:	4630      	mov	r0, r6
 80036be:	f7ff feb7 	bl	8003430 <oneWire_writeBit>
				write_data_to_struct(bit_counter, searchDirection, devices_counter);
 80036c2:	4642      	mov	r2, r8
 80036c4:	4631      	mov	r1, r6
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff ff46 	bl	8003558 <write_data_to_struct>
				searchDirection ? (lastZero = lastZero) : (lastZero = bit_counter+1);
 80036cc:	b97e      	cbnz	r6, 80036ee <ds18b20_search_rom+0x62>
 80036ce:	f104 0901 	add.w	r9, r4, #1
 80036d2:	fa5f f989 	uxtb.w	r9, r9
 80036d6:	e00a      	b.n	80036ee <ds18b20_search_rom+0x62>
			else if( true_bit != complement_bit)
 80036d8:	42b5      	cmp	r5, r6
 80036da:	d043      	beq.n	8003764 <ds18b20_search_rom+0xd8>
				write_data_to_struct(bit_counter, true_bit, devices_counter);
 80036dc:	4642      	mov	r2, r8
 80036de:	4629      	mov	r1, r5
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7ff ff39 	bl	8003558 <write_data_to_struct>
				oneWire_writeBit(true_bit,input_no);
 80036e6:	4639      	mov	r1, r7
 80036e8:	4628      	mov	r0, r5
 80036ea:	f7ff fea1 	bl	8003430 <oneWire_writeBit>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 80036ee:	3401      	adds	r4, #1
 80036f0:	b2e4      	uxtb	r4, r4
 80036f2:	2c3f      	cmp	r4, #63	; 0x3f
 80036f4:	d817      	bhi.n	8003726 <ds18b20_search_rom+0x9a>
			true_bit = oneWire_readbit(input_no);
 80036f6:	4638      	mov	r0, r7
 80036f8:	f7ff feec 	bl	80034d4 <oneWire_readbit>
 80036fc:	4605      	mov	r5, r0
			complement_bit = oneWire_readbit(input_no);
 80036fe:	4638      	mov	r0, r7
 8003700:	f7ff fee8 	bl	80034d4 <oneWire_readbit>
 8003704:	4606      	mov	r6, r0
			if( ( true_bit ==  0 ) && (complement_bit == 0) ) {
 8003706:	2d00      	cmp	r5, #0
 8003708:	d1e6      	bne.n	80036d8 <ds18b20_search_rom+0x4c>
 800370a:	2800      	cmp	r0, #0
 800370c:	d1e4      	bne.n	80036d8 <ds18b20_search_rom+0x4c>
				if((bit_counter + 1) ==  lastDiscrepancy)
 800370e:	1c63      	adds	r3, r4, #1
 8003710:	4553      	cmp	r3, sl
 8003712:	d0d1      	beq.n	80036b8 <ds18b20_search_rom+0x2c>
				else if((bit_counter + 1) > lastDiscrepancy )
 8003714:	dcd1      	bgt.n	80036ba <ds18b20_search_rom+0x2e>
					searchDirection = read_address_bit_form_struct(bit_counter, devices_counter-1);
 8003716:	f108 31ff 	add.w	r1, r8, #4294967295
 800371a:	b2c9      	uxtb	r1, r1
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff ff5d 	bl	80035dc <read_address_bit_form_struct>
 8003722:	4606      	mov	r6, r0
 8003724:	e7c9      	b.n	80036ba <ds18b20_search_rom+0x2e>
		lastZero = 0;
		if(lastDiscrepancy != 0)
 8003726:	f1b9 0f00 	cmp.w	r9, #0
 800372a:	d003      	beq.n	8003734 <ds18b20_search_rom+0xa8>
		{
			devices_counter++  ;
 800372c:	f108 0801 	add.w	r8, r8, #1
 8003730:	fa5f f888 	uxtb.w	r8, r8
		}

	}while(lastDiscrepancy != 0);
 8003734:	f1b9 0f00 	cmp.w	r9, #0
 8003738:	d1bc      	bne.n	80036b4 <ds18b20_search_rom+0x28>

	ds18b20_sensors_amount = devices_counter + 1; //counter from 0 to device amount - 1
 800373a:	f108 0801 	add.w	r8, r8, #1
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <ds18b20_search_rom+0xe0>)
 8003740:	f883 8000 	strb.w	r8, [r3]


	// check CRC codes ..

	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <ds18b20_search_rom+0xe0>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	454b      	cmp	r3, r9
 800374a:	d909      	bls.n	8003760 <ds18b20_search_rom+0xd4>
	{
		if(ds18b20_check_crc(founded_sensor_no) == DS18B20_CRC_ACK_FAIL)
 800374c:	4648      	mov	r0, r9
 800374e:	f7ff ff8b 	bl	8003668 <ds18b20_check_crc>
 8003752:	4603      	mov	r3, r0
 8003754:	b138      	cbz	r0, 8003766 <ds18b20_search_rom+0xda>
	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8003756:	f109 0901 	add.w	r9, r9, #1
 800375a:	fa5f f989 	uxtb.w	r9, r9
 800375e:	e7f1      	b.n	8003744 <ds18b20_search_rom+0xb8>
		{
			return DS18B20_CRC_ACK_FAIL;
		}
	}
	return ROM_SARCHING_OK;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <ds18b20_search_rom+0xda>
				return ROM_SARCHING_ERROR;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376c:	200004bc 	.word	0x200004bc

08003770 <calculate_data_address>:
 * data scratchpad  = base +  [INPUT * sizeof scratchpad[] ] + [ SENSOR * sizeof scratchpad[][] ]
 * data scratchpad  = base +  72 * INPUT + 9 * sensor
*/
void calculate_data_address(uint8_t *address_tab)
{
	address_tab[0] = sizeof(scratchpad) / ( MAX_DS18B20_SENSORS_AMOUNT * DS1820_INPUTS);
 8003770:	2309      	movs	r3, #9
 8003772:	7003      	strb	r3, [r0, #0]
	address_tab[1] = sizeof(rom_address) / (MAX_DS18B20_SENSORS_AMOUNT * DS1820_INPUTS);
 8003774:	2308      	movs	r3, #8
 8003776:	7043      	strb	r3, [r0, #1]
}
 8003778:	4770      	bx	lr
	...

0800377c <ds18b20_read_scratchpad>:

uint8_t ds18b20_read_scratchpad(uint8_t sensorNumber,uint8_t input_no)
{
 800377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	4607      	mov	r7, r0
 8003784:	460d      	mov	r5, r1
	if(!oneWire_init(input_no)) return ONE_WIRE_PRESENCE_FAIL;
 8003786:	4608      	mov	r0, r1
 8003788:	f7ff fe26 	bl	80033d8 <oneWire_init>
 800378c:	4603      	mov	r3, r0
 800378e:	b918      	cbnz	r0, 8003798 <ds18b20_read_scratchpad+0x1c>
	{
		*(data + i)= oneWire_readbyte(input_no);
	}
	// TODO  check CRC
	return READ_OK;
}
 8003790:	4618      	mov	r0, r3
 8003792:	b002      	add	sp, #8
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	calculate_data_address(address_tab);
 8003798:	a801      	add	r0, sp, #4
 800379a:	f7ff ffe9 	bl	8003770 <calculate_data_address>
	uint8_t *address  = (uint8_t*) &rom_address + (MAX_DS18B20_SENSORS_AMOUNT * address_tab[1] * input_no) + (address_tab[1] * sensorNumber); ;
 800379e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80037a2:	00de      	lsls	r6, r3, #3
 80037a4:	fb07 f303 	mul.w	r3, r7, r3
 80037a8:	fb05 3306 	mla	r3, r5, r6, r3
 80037ac:	4e1c      	ldr	r6, [pc, #112]	; (8003820 <ds18b20_read_scratchpad+0xa4>)
 80037ae:	441e      	add	r6, r3
	uint8_t *data  = (uint8_t*) &scratchpad + (MAX_DS18B20_SENSORS_AMOUNT * address_tab[0] * input_no) + (address_tab[0] * sensorNumber);
 80037b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037b4:	00da      	lsls	r2, r3, #3
 80037b6:	fb03 f307 	mul.w	r3, r3, r7
 80037ba:	fb02 3705 	mla	r7, r2, r5, r3
	if(ds18b20_sensors_amount == 1) // TODO do przetesotwania z jednym sensorem
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <ds18b20_read_scratchpad+0xa8>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d007      	beq.n	80037d6 <ds18b20_read_scratchpad+0x5a>
	else if(ds18b20_sensors_amount > 1)
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d927      	bls.n	800381a <ds18b20_read_scratchpad+0x9e>
		oneWire_writeByte(DS18B20_COMMAND_MATCH_ROM,input_no);
 80037ca:	4629      	mov	r1, r5
 80037cc:	2055      	movs	r0, #85	; 0x55
 80037ce:	f7ff fe5d 	bl	800348c <oneWire_writeByte>
		for(uint8_t i=0; i< 8 ; i++)
 80037d2:	2400      	movs	r4, #0
 80037d4:	e00d      	b.n	80037f2 <ds18b20_read_scratchpad+0x76>
		oneWire_writeByte(DS18B20_COMMAND_SKIP_ROM,input_no);
 80037d6:	4629      	mov	r1, r5
 80037d8:	20cc      	movs	r0, #204	; 0xcc
 80037da:	f7ff fe57 	bl	800348c <oneWire_writeByte>
 80037de:	e00a      	b.n	80037f6 <ds18b20_read_scratchpad+0x7a>
			oneWire_writeByte(*(address++),input_no);
 80037e0:	f106 0801 	add.w	r8, r6, #1
 80037e4:	4629      	mov	r1, r5
 80037e6:	7830      	ldrb	r0, [r6, #0]
 80037e8:	f7ff fe50 	bl	800348c <oneWire_writeByte>
		for(uint8_t i=0; i< 8 ; i++)
 80037ec:	3401      	adds	r4, #1
 80037ee:	b2e4      	uxtb	r4, r4
			oneWire_writeByte(*(address++),input_no);
 80037f0:	4646      	mov	r6, r8
		for(uint8_t i=0; i< 8 ; i++)
 80037f2:	2c07      	cmp	r4, #7
 80037f4:	d9f4      	bls.n	80037e0 <ds18b20_read_scratchpad+0x64>
	oneWire_writeByte(DS18B20_COMMAND_READ_SCRATCHPAD,input_no);
 80037f6:	4629      	mov	r1, r5
 80037f8:	20be      	movs	r0, #190	; 0xbe
 80037fa:	f7ff fe47 	bl	800348c <oneWire_writeByte>
	for(uint8_t i=0; i<9 ; i++)
 80037fe:	2400      	movs	r4, #0
 8003800:	e007      	b.n	8003812 <ds18b20_read_scratchpad+0x96>
		*(data + i)= oneWire_readbyte(input_no);
 8003802:	193e      	adds	r6, r7, r4
 8003804:	4628      	mov	r0, r5
 8003806:	f7ff fe91 	bl	800352c <oneWire_readbyte>
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <ds18b20_read_scratchpad+0xac>)
 800380c:	5598      	strb	r0, [r3, r6]
	for(uint8_t i=0; i<9 ; i++)
 800380e:	3401      	adds	r4, #1
 8003810:	b2e4      	uxtb	r4, r4
 8003812:	2c08      	cmp	r4, #8
 8003814:	d9f5      	bls.n	8003802 <ds18b20_read_scratchpad+0x86>
	return READ_OK;
 8003816:	2301      	movs	r3, #1
 8003818:	e7ba      	b.n	8003790 <ds18b20_read_scratchpad+0x14>
		return READ_ERROR;
 800381a:	2300      	movs	r3, #0
 800381c:	e7b8      	b.n	8003790 <ds18b20_read_scratchpad+0x14>
 800381e:	bf00      	nop
 8003820:	20000f30 	.word	0x20000f30
 8003824:	200004bc 	.word	0x200004bc
 8003828:	20000e60 	.word	0x20000e60

0800382c <ds18b20_get_scratchpad_temperature>:
	return READ_OK;
}


uint16_t ds18b20_get_scratchpad_temperature(uint8_t sensor_number,uint8_t input_no)
{
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1
	uint16_t temperature;
	//if(ds18b20_convertT(input_no) == CONVERTION_ERROR) return CONVERTION_ERROR;
	if(ds18b20_read_scratchpad(sensor_number,input_no) != READ_OK ) return GET_TEMPERATURE_ERROR;
 8003832:	f7ff ffa3 	bl	800377c <ds18b20_read_scratchpad>
 8003836:	2801      	cmp	r0, #1
 8003838:	d108      	bne.n	800384c <ds18b20_get_scratchpad_temperature+0x20>
	temperature = scratchpad[input_no][sensor_number].temperature;
 800383a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800383e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8003842:	00eb      	lsls	r3, r5, #3
 8003844:	441c      	add	r4, r3
 8003846:	4b03      	ldr	r3, [pc, #12]	; (8003854 <ds18b20_get_scratchpad_temperature+0x28>)
 8003848:	5b18      	ldrh	r0, [r3, r4]
	return temperature;
}
 800384a:	bd38      	pop	{r3, r4, r5, pc}
	if(ds18b20_read_scratchpad(sensor_number,input_no) != READ_OK ) return GET_TEMPERATURE_ERROR;
 800384c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003850:	e7fb      	b.n	800384a <ds18b20_get_scratchpad_temperature+0x1e>
 8003852:	bf00      	nop
 8003854:	20000e60 	.word	0x20000e60

08003858 <ds18b20_initalize>:
	}
	*(temperature_str_hex++) = '\0';
}

void ds18b20_initalize(uint8_t input_no)
{
 8003858:	b508      	push	{r3, lr}
	ds18b20_search_rom(input_no);
 800385a:	f7ff ff17 	bl	800368c <ds18b20_search_rom>
	if(ds18b20_sensors_amount) HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_OK;
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <ds18b20_initalize+0x18>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b123      	cbz	r3, 800386e <ds18b20_initalize+0x16>
 8003864:	4a03      	ldr	r2, [pc, #12]	; (8003874 <ds18b20_initalize+0x1c>)
 8003866:	7813      	ldrb	r3, [r2, #0]
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	7013      	strb	r3, [r2, #0]
}
 800386e:	bd08      	pop	{r3, pc}
 8003870:	200004bc 	.word	0x200004bc
 8003874:	20000528 	.word	0x20000528

08003878 <ds18b20_convert_temperature>:
 * ds18b20_convert_temperature duration is about 6ms
 *
 */
void ds18b20_convert_temperature(uint16_t ms_time_counter)
{
	if(ds_handler_flag == DS_HANDLER_FLAG_BUSY) return ;
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <ds18b20_convert_temperature+0x5c>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d004      	beq.n	800388c <ds18b20_convert_temperature+0x14>
	if(ms_time_counter != ms_counter) return;
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <ds18b20_convert_temperature+0x60>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4283      	cmp	r3, r0
 800388a:	d000      	beq.n	800388e <ds18b20_convert_temperature+0x16>
 800388c:	4770      	bx	lr
{
 800388e:	b510      	push	{r4, lr}
	LED_RED_GPIO_Port->BSRR= LED_RED_Pin;
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <ds18b20_convert_temperature+0x64>)
 8003892:	2220      	movs	r2, #32
 8003894:	611a      	str	r2, [r3, #16]
	for(uint8_t inp_idx = 0; inp_idx < DS1820_INPUTS; inp_idx++)
 8003896:	2400      	movs	r4, #0
 8003898:	e001      	b.n	800389e <ds18b20_convert_temperature+0x26>
 800389a:	3401      	adds	r4, #1
 800389c:	b2e4      	uxtb	r4, r4
 800389e:	2c01      	cmp	r4, #1
 80038a0:	d811      	bhi.n	80038c6 <ds18b20_convert_temperature+0x4e>
	{
		if(!oneWire_init(inp_idx)) continue ;
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff fd98 	bl	80033d8 <oneWire_init>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0f6      	beq.n	800389a <ds18b20_convert_temperature+0x22>
		oneWire_writeByte(DS18B20_COMMAND_SKIP_ROM, inp_idx);
 80038ac:	4621      	mov	r1, r4
 80038ae:	20cc      	movs	r0, #204	; 0xcc
 80038b0:	f7ff fdec 	bl	800348c <oneWire_writeByte>
		oneWire_writeByte(DS18B20_COMMAND_CONVERT_T, inp_idx);
 80038b4:	4621      	mov	r1, r4
 80038b6:	2044      	movs	r0, #68	; 0x44
 80038b8:	f7ff fde8 	bl	800348c <oneWire_writeByte>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,inp_idx);
 80038bc:	4621      	mov	r1, r4
 80038be:	2001      	movs	r0, #1
 80038c0:	f7ff fd5e 	bl	8003380 <oneWire_direction_set>
 80038c4:	e7e9      	b.n	800389a <ds18b20_convert_temperature+0x22>
	}

	LED_RED_GPIO_Port->BRR = LED_RED_Pin;
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <ds18b20_convert_temperature+0x64>)
 80038c8:	2220      	movs	r2, #32
 80038ca:	615a      	str	r2, [r3, #20]
	ds_handler_flag = DS_HANDLER_FLAG_BUSY;
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <ds18b20_convert_temperature+0x5c>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
}
 80038d2:	bd10      	pop	{r4, pc}
 80038d4:	20000a28 	.word	0x20000a28
 80038d8:	20000748 	.word	0x20000748
 80038dc:	40010800 	.word	0x40010800

080038e0 <ds18b20_read_primary_sensor>:
void ds18b20_read_primary_sensor(uint16_t ms_time_counter)
{
	if(ds_handler_flag == DS_HANDLER_FLAG_BUSY) return ;
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <ds18b20_read_primary_sensor+0x70>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d004      	beq.n	80038f4 <ds18b20_read_primary_sensor+0x14>
	if(ms_time_counter != ms_counter) return;
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <ds18b20_read_primary_sensor+0x74>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4283      	cmp	r3, r0
 80038f2:	d000      	beq.n	80038f6 <ds18b20_read_primary_sensor+0x16>
 80038f4:	4770      	bx	lr
{
 80038f6:	b510      	push	{r4, lr}
 80038f8:	b082      	sub	sp, #8

	if(!oneWire_init(DS18B20_IN1))
 80038fa:	2000      	movs	r0, #0
 80038fc:	f7ff fd6c 	bl	80033d8 <oneWire_init>
 8003900:	b930      	cbnz	r0, 8003910 <ds18b20_read_primary_sensor+0x30>
	{
		HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_ERROR;
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <ds18b20_read_primary_sensor+0x78>)
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	f36f 0200 	bfc	r2, #0, #1
 800390a:	701a      	strb	r2, [r3, #0]
	{
		*(data + i)= oneWire_readbyte(DS18B20_IN1);
	}
	ds_handler_flag = DS_HANDLER_FLAG_BUSY;
	HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_OK;
}
 800390c:	b002      	add	sp, #8
 800390e:	bd10      	pop	{r4, pc}
	calculate_data_address(address_tab);
 8003910:	a801      	add	r0, sp, #4
 8003912:	f7ff ff2d 	bl	8003770 <calculate_data_address>
	oneWire_writeByte(DS18B20_COMMAND_SKIP_ROM,DS18B20_IN1); // only one sensor should be in input 1
 8003916:	2100      	movs	r1, #0
 8003918:	20cc      	movs	r0, #204	; 0xcc
 800391a:	f7ff fdb7 	bl	800348c <oneWire_writeByte>
	oneWire_writeByte(DS18B20_COMMAND_READ_SCRATCHPAD,DS18B20_IN1);
 800391e:	2100      	movs	r1, #0
 8003920:	20be      	movs	r0, #190	; 0xbe
 8003922:	f7ff fdb3 	bl	800348c <oneWire_writeByte>
	for(uint8_t i=0; i<3 ; i++) // read onlu temperature
 8003926:	2400      	movs	r4, #0
 8003928:	e006      	b.n	8003938 <ds18b20_read_primary_sensor+0x58>
		*(data + i)= oneWire_readbyte(DS18B20_IN1);
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff fdfe 	bl	800352c <oneWire_readbyte>
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <ds18b20_read_primary_sensor+0x7c>)
 8003932:	5518      	strb	r0, [r3, r4]
	for(uint8_t i=0; i<3 ; i++) // read onlu temperature
 8003934:	3401      	adds	r4, #1
 8003936:	b2e4      	uxtb	r4, r4
 8003938:	2c02      	cmp	r4, #2
 800393a:	d9f6      	bls.n	800392a <ds18b20_read_primary_sensor+0x4a>
	ds_handler_flag = DS_HANDLER_FLAG_BUSY;
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <ds18b20_read_primary_sensor+0x70>)
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
	HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_OK;
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <ds18b20_read_primary_sensor+0x78>)
 8003944:	7813      	ldrb	r3, [r2, #0]
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	7013      	strb	r3, [r2, #0]
 800394c:	e7de      	b.n	800390c <ds18b20_read_primary_sensor+0x2c>
 800394e:	bf00      	nop
 8003950:	20000a28 	.word	0x20000a28
 8003954:	20000748 	.word	0x20000748
 8003958:	20000528 	.word	0x20000528
 800395c:	20000e60 	.word	0x20000e60

08003960 <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <EE_FindValidPage+0x48>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003966:	4a11      	ldr	r2, [pc, #68]	; (80039ac <EE_FindValidPage+0x4c>)
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 800396c:	b188      	cbz	r0, 8003992 <EE_FindValidPage+0x32>
 800396e:	2801      	cmp	r0, #1
 8003970:	d113      	bne.n	800399a <EE_FindValidPage+0x3a>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8003972:	b93a      	cbnz	r2, 8003984 <EE_FindValidPage+0x24>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8003974:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8003978:	428b      	cmp	r3, r1
 800397a:	d001      	beq.n	8003980 <EE_FindValidPage+0x20>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800397c:	2301      	movs	r3, #1
 800397e:	e00d      	b.n	800399c <EE_FindValidPage+0x3c>
          return PAGE0;         /* Page0 valid */
 8003980:	4613      	mov	r3, r2
 8003982:	e00b      	b.n	800399c <EE_FindValidPage+0x3c>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8003984:	b963      	cbnz	r3, 80039a0 <EE_FindValidPage+0x40>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8003986:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 800398a:	428a      	cmp	r2, r1
 800398c:	d106      	bne.n	800399c <EE_FindValidPage+0x3c>
        {
          return PAGE1;         /* Page1 valid */
 800398e:	2301      	movs	r3, #1
 8003990:	e004      	b.n	800399c <EE_FindValidPage+0x3c>
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8003992:	b11b      	cbz	r3, 800399c <EE_FindValidPage+0x3c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8003994:	b932      	cbnz	r2, 80039a4 <EE_FindValidPage+0x44>
      {
        return PAGE1;           /* Page1 valid */
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <EE_FindValidPage+0x3c>
      {
        return NO_VALID_PAGE ;  /* No valid Page */
      }

    default:
      return PAGE0;             /* Page0 valid */
 800399a:	2300      	movs	r3, #0
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	4770      	bx	lr
        return NO_VALID_PAGE;   /* No valid Page */
 80039a0:	23ab      	movs	r3, #171	; 0xab
 80039a2:	e7fb      	b.n	800399c <EE_FindValidPage+0x3c>
        return NO_VALID_PAGE ;  /* No valid Page */
 80039a4:	23ab      	movs	r3, #171	; 0xab
 80039a6:	e7f9      	b.n	800399c <EE_FindValidPage+0x3c>
 80039a8:	0801f800 	.word	0x0801f800
 80039ac:	0801fc00 	.word	0x0801fc00

080039b0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	4605      	mov	r5, r0
 80039b4:	460e      	mov	r6, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint16_t validpage = PAGE0;
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7ff ffd2 	bl	8003960 <EE_FindValidPage>

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80039bc:	28ab      	cmp	r0, #171	; 0xab
 80039be:	d021      	beq.n	8003a04 <EE_VerifyPageFullWriteVariable+0x54>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80039c0:	f500 3400 	add.w	r4, r0, #131072	; 0x20000
 80039c4:	347e      	adds	r4, #126	; 0x7e
 80039c6:	02a4      	lsls	r4, r4, #10

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	480f      	ldr	r0, [pc, #60]	; (8003a08 <EE_VerifyPageFullWriteVariable+0x58>)
 80039cc:	eb00 2083 	add.w	r0, r0, r3, lsl #10

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 80039d0:	4284      	cmp	r4, r0
 80039d2:	d216      	bcs.n	8003a02 <EE_VerifyPageFullWriteVariable+0x52>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d001      	beq.n	80039e0 <EE_VerifyPageFullWriteVariable+0x30>
      return flashstatus;
    }
    else
    {
      /* Next address location */
      address = address + 4;
 80039dc:	3404      	adds	r4, #4
 80039de:	e7f7      	b.n	80039d0 <EE_VerifyPageFullWriteVariable+0x20>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 80039e0:	b2b2      	uxth	r2, r6
 80039e2:	2300      	movs	r3, #0
 80039e4:	4621      	mov	r1, r4
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7fe f94e 	bl	8001c88 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 80039ec:	b108      	cbz	r0, 80039f2 <EE_VerifyPageFullWriteVariable+0x42>
        return flashstatus;
 80039ee:	b280      	uxth	r0, r0
 80039f0:	e008      	b.n	8003a04 <EE_VerifyPageFullWriteVariable+0x54>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 80039f2:	b2aa      	uxth	r2, r5
 80039f4:	2300      	movs	r3, #0
 80039f6:	1ca1      	adds	r1, r4, #2
 80039f8:	2001      	movs	r0, #1
 80039fa:	f7fe f945 	bl	8001c88 <HAL_FLASH_Program>
      return flashstatus;
 80039fe:	b280      	uxth	r0, r0
 8003a00:	e000      	b.n	8003a04 <EE_VerifyPageFullWriteVariable+0x54>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8003a02:	2080      	movs	r0, #128	; 0x80
}
 8003a04:	bd70      	pop	{r4, r5, r6, pc}
 8003a06:	bf00      	nop
 8003a08:	0801f7ff 	.word	0x0801f7ff

08003a0c <EE_ReadVariable>:
{
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4604      	mov	r4, r0
 8003a10:	460d      	mov	r5, r1
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7ff ffa4 	bl	8003960 <EE_FindValidPage>
  if (validpage == NO_VALID_PAGE)
 8003a18:	28ab      	cmp	r0, #171	; 0xab
 8003a1a:	d016      	beq.n	8003a4a <EE_ReadVariable+0x3e>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8003a1c:	f500 3200 	add.w	r2, r0, #131072	; 0x20000
 8003a20:	327e      	adds	r2, #126	; 0x7e
 8003a22:	0292      	lsls	r2, r2, #10
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	4809      	ldr	r0, [pc, #36]	; (8003a4c <EE_ReadVariable+0x40>)
 8003a28:	eb00 2083 	add.w	r0, r0, r3, lsl #10
  while (address > (PageStartAddress + 2))
 8003a2c:	1c93      	adds	r3, r2, #2
 8003a2e:	4283      	cmp	r3, r0
 8003a30:	d20a      	bcs.n	8003a48 <EE_ReadVariable+0x3c>
    addressvalue = (*(__IO uint16_t*)address);
 8003a32:	8803      	ldrh	r3, [r0, #0]
 8003a34:	b29b      	uxth	r3, r3
    if (addressvalue == VirtAddress)
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	d001      	beq.n	8003a3e <EE_ReadVariable+0x32>
      address = address - 4;
 8003a3a:	3804      	subs	r0, #4
 8003a3c:	e7f6      	b.n	8003a2c <EE_ReadVariable+0x20>
      *Data = (*(__IO uint16_t*)(address - 2));
 8003a3e:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 8003a42:	802b      	strh	r3, [r5, #0]
      readstatus = 0;
 8003a44:	2000      	movs	r0, #0
      break;
 8003a46:	e000      	b.n	8003a4a <EE_ReadVariable+0x3e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8003a48:	2001      	movs	r0, #1
}
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	0801f7fe 	.word	0x0801f7fe

08003a50 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8003a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	4605      	mov	r5, r0
 8003a58:	460f      	mov	r7, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	9005      	str	r0, [sp, #20]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003a5e:	f7ff ff7f 	bl	8003960 <EE_FindValidPage>

  if (validpage == PAGE1)       /* Page1 valid */
 8003a62:	2801      	cmp	r0, #1
 8003a64:	d011      	beq.n	8003a8a <EE_PageTransfer+0x3a>
    newpageaddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d14b      	bne.n	8003b02 <EE_PageTransfer+0xb2>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 8003a6a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003b0c <EE_PageTransfer+0xbc>
    newpageaddress = PAGE1_BASE_ADDRESS;
 8003a6e:	4e26      	ldr	r6, [pc, #152]	; (8003b08 <EE_PageTransfer+0xb8>)
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);
 8003a70:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8003a74:	2300      	movs	r3, #0
 8003a76:	4631      	mov	r1, r6
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7fe f905 	bl	8001c88 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8003a7e:	b140      	cbz	r0, 8003a92 <EE_PageTransfer+0x42>
  {
    return flashstatus;
 8003a80:	b284      	uxth	r4, r0



  /* Return last operation flash status */
  return flashstatus;
}
 8003a82:	4620      	mov	r0, r4
 8003a84:	b006      	add	sp, #24
 8003a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    oldpageid = PAGE1_ID;
 8003a8a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003b08 <EE_PageTransfer+0xb8>
    newpageaddress = PAGE0_BASE_ADDRESS;
 8003a8e:	4e1f      	ldr	r6, [pc, #124]	; (8003b0c <EE_PageTransfer+0xbc>)
 8003a90:	e7ee      	b.n	8003a70 <EE_PageTransfer+0x20>
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003a92:	4639      	mov	r1, r7
 8003a94:	4628      	mov	r0, r5
 8003a96:	f7ff ff8b 	bl	80039b0 <EE_VerifyPageFullWriteVariable>
  if (eepromstatus != HAL_OK)
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	b110      	cbz	r0, 8003aa4 <EE_PageTransfer+0x54>
 8003a9e:	e7f0      	b.n	8003a82 <EE_PageTransfer+0x32>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8003aa0:	3401      	adds	r4, #1
 8003aa2:	b2a4      	uxth	r4, r4
 8003aa4:	2c08      	cmp	r4, #8
 8003aa6:	d814      	bhi.n	8003ad2 <EE_PageTransfer+0x82>
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <EE_PageTransfer+0xc0>)
 8003aaa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003aae:	42a8      	cmp	r0, r5
 8003ab0:	d0f6      	beq.n	8003aa0 <EE_PageTransfer+0x50>
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8003ab2:	4918      	ldr	r1, [pc, #96]	; (8003b14 <EE_PageTransfer+0xc4>)
 8003ab4:	f7ff ffaa 	bl	8003a0c <EE_ReadVariable>
      if (readstatus != 0x1)
 8003ab8:	2801      	cmp	r0, #1
 8003aba:	d0f1      	beq.n	8003aa0 <EE_PageTransfer+0x50>
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <EE_PageTransfer+0xc4>)
 8003abe:	8819      	ldrh	r1, [r3, #0]
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <EE_PageTransfer+0xc0>)
 8003ac2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ac6:	f7ff ff73 	bl	80039b0 <EE_VerifyPageFullWriteVariable>
        if (eepromstatus != HAL_OK)
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d0e8      	beq.n	8003aa0 <EE_PageTransfer+0x50>
          return eepromstatus;
 8003ace:	4604      	mov	r4, r0
 8003ad0:	e7d7      	b.n	8003a82 <EE_PageTransfer+0x32>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8003ad6:	f8cd 800c 	str.w	r8, [sp, #12]
  s_eraseinit.NbPages     = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	9304      	str	r3, [sp, #16]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003ade:	a905      	add	r1, sp, #20
 8003ae0:	a801      	add	r0, sp, #4
 8003ae2:	f7fe f943 	bl	8001d6c <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8003ae6:	b108      	cbz	r0, 8003aec <EE_PageTransfer+0x9c>
    return flashstatus;
 8003ae8:	b284      	uxth	r4, r0
 8003aea:	e7ca      	b.n	8003a82 <EE_PageTransfer+0x32>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);
 8003aec:	2200      	movs	r2, #0
 8003aee:	2300      	movs	r3, #0
 8003af0:	4631      	mov	r1, r6
 8003af2:	2001      	movs	r0, #1
 8003af4:	f7fe f8c8 	bl	8001c88 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8003af8:	b908      	cbnz	r0, 8003afe <EE_PageTransfer+0xae>
  return flashstatus;
 8003afa:	b284      	uxth	r4, r0
 8003afc:	e7c1      	b.n	8003a82 <EE_PageTransfer+0x32>
    return flashstatus;
 8003afe:	b284      	uxth	r4, r0
 8003b00:	e7bf      	b.n	8003a82 <EE_PageTransfer+0x32>
    return NO_VALID_PAGE;       /* No valid Page */
 8003b02:	24ab      	movs	r4, #171	; 0xab
 8003b04:	e7bd      	b.n	8003a82 <EE_PageTransfer+0x32>
 8003b06:	bf00      	nop
 8003b08:	0801fc00 	.word	0x0801fc00
 8003b0c:	0801f800 	.word	0x0801f800
 8003b10:	20000060 	.word	0x20000060
 8003b14:	200004be 	.word	0x200004be

08003b18 <EE_WriteVariable>:
{
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003b1e:	f7ff ff47 	bl	80039b0 <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 8003b22:	2880      	cmp	r0, #128	; 0x80
 8003b24:	d000      	beq.n	8003b28 <EE_WriteVariable+0x10>
}
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff ff90 	bl	8003a50 <EE_PageTransfer>
 8003b30:	e7f9      	b.n	8003b26 <EE_WriteVariable+0xe>
	...

08003b34 <rom_wite_mem1_data>:
		rom_wite_PID_data(100,100,100);
	}
}

void rom_wite_mem1_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4604      	mov	r4, r0
 8003b38:	460d      	mov	r5, r1
	rom_mem.rom_str.memory1_temp = (uint16_t) ui_temp*10;
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f7fc ff85 	bl	8000a4c <__aeabi_d2uiz>
 8003b42:	b280      	uxth	r0, r0
 8003b44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b48:	0041      	lsls	r1, r0, #1
 8003b4a:	b289      	uxth	r1, r1
 8003b4c:	4e08      	ldr	r6, [pc, #32]	; (8003b70 <rom_wite_mem1_data+0x3c>)
 8003b4e:	8071      	strh	r1, [r6, #2]
	rom_mem.rom_str.memory1_time = ui_time_hours*100 + ui_time_minutes;
 8003b50:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003b54:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003b58:	00a3      	lsls	r3, r4, #2
 8003b5a:	441d      	add	r5, r3
 8003b5c:	8035      	strh	r5, [r6, #0]
	EE_WriteVariable(EE_VADDR_MEM1_TEMP, rom_mem.rom_str.memory1_temp);
 8003b5e:	2002      	movs	r0, #2
 8003b60:	f7ff ffda 	bl	8003b18 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM1_TIME, rom_mem.rom_str.memory1_time);
 8003b64:	8831      	ldrh	r1, [r6, #0]
 8003b66:	2001      	movs	r0, #1
 8003b68:	f7ff ffd6 	bl	8003b18 <EE_WriteVariable>
}
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000fb0 	.word	0x20000fb0

08003b74 <rom_wite_mem2_data>:
void rom_wite_mem2_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	460d      	mov	r5, r1
	rom_mem.rom_str.memory2_temp = (uint16_t) ui_temp*10;
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f7fc ff65 	bl	8000a4c <__aeabi_d2uiz>
 8003b82:	b280      	uxth	r0, r0
 8003b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b88:	0041      	lsls	r1, r0, #1
 8003b8a:	b289      	uxth	r1, r1
 8003b8c:	4e08      	ldr	r6, [pc, #32]	; (8003bb0 <rom_wite_mem2_data+0x3c>)
 8003b8e:	80f1      	strh	r1, [r6, #6]
	rom_mem.rom_str.memory2_time = ui_time_hours*100 + ui_time_minutes;
 8003b90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003b94:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003b98:	00a3      	lsls	r3, r4, #2
 8003b9a:	441d      	add	r5, r3
 8003b9c:	80b5      	strh	r5, [r6, #4]
	EE_WriteVariable(EE_VADDR_MEM2_TEMP, rom_mem.rom_str.memory2_temp);
 8003b9e:	2004      	movs	r0, #4
 8003ba0:	f7ff ffba 	bl	8003b18 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM2_TIME, rom_mem.rom_str.memory2_time);
 8003ba4:	88b1      	ldrh	r1, [r6, #4]
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	f7ff ffb6 	bl	8003b18 <EE_WriteVariable>
}
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000fb0 	.word	0x20000fb0

08003bb4 <rom_wite_mem3_data>:
void rom_wite_mem3_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	460d      	mov	r5, r1
	rom_mem.rom_str.memory3_temp = (uint16_t) ui_temp*10;
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f7fc ff45 	bl	8000a4c <__aeabi_d2uiz>
 8003bc2:	b280      	uxth	r0, r0
 8003bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bc8:	0041      	lsls	r1, r0, #1
 8003bca:	b289      	uxth	r1, r1
 8003bcc:	4e08      	ldr	r6, [pc, #32]	; (8003bf0 <rom_wite_mem3_data+0x3c>)
 8003bce:	8171      	strh	r1, [r6, #10]
	rom_mem.rom_str.memory3_time = ui_time_hours*100 + ui_time_minutes;
 8003bd0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003bd4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003bd8:	00a3      	lsls	r3, r4, #2
 8003bda:	441d      	add	r5, r3
 8003bdc:	8135      	strh	r5, [r6, #8]
	EE_WriteVariable(EE_VADDR_MEM3_TEMP, rom_mem.rom_str.memory3_temp);
 8003bde:	2006      	movs	r0, #6
 8003be0:	f7ff ff9a 	bl	8003b18 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM3_TIME, rom_mem.rom_str.memory3_time);
 8003be4:	8931      	ldrh	r1, [r6, #8]
 8003be6:	2005      	movs	r0, #5
 8003be8:	f7ff ff96 	bl	8003b18 <EE_WriteVariable>
}
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000fb0 	.word	0x20000fb0

08003bf4 <rom_wite_PID_data>:
void rom_wite_PID_data(uint8_t P, uint8_t I, uint8_t D){
 8003bf4:	b510      	push	{r4, lr}
	rom_mem.rom_str.PID_P = P;
 8003bf6:	4c08      	ldr	r4, [pc, #32]	; (8003c18 <rom_wite_PID_data+0x24>)
 8003bf8:	81a0      	strh	r0, [r4, #12]
	rom_mem.rom_str.PID_I = I;
 8003bfa:	81e1      	strh	r1, [r4, #14]
	rom_mem.rom_str.PID_D = D;
 8003bfc:	8222      	strh	r2, [r4, #16]
	EE_WriteVariable(EE_VADDR_PID_P, rom_mem.rom_str.PID_P);
 8003bfe:	4601      	mov	r1, r0
 8003c00:	2007      	movs	r0, #7
 8003c02:	f7ff ff89 	bl	8003b18 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_PID_I, rom_mem.rom_str.PID_I);
 8003c06:	89e1      	ldrh	r1, [r4, #14]
 8003c08:	2008      	movs	r0, #8
 8003c0a:	f7ff ff85 	bl	8003b18 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_PID_D, rom_mem.rom_str.PID_D);
 8003c0e:	8a21      	ldrh	r1, [r4, #16]
 8003c10:	2009      	movs	r0, #9
 8003c12:	f7ff ff81 	bl	8003b18 <EE_WriteVariable>
}
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	20000fb0 	.word	0x20000fb0
 8003c1c:	00000000 	.word	0x00000000

08003c20 <rom_value_init>:
{
 8003c20:	b510      	push	{r4, lr}
	for(uint8_t addr = 0; addr  < NB_OF_VAR ; addr++)
 8003c22:	2400      	movs	r4, #0
 8003c24:	e008      	b.n	8003c38 <rom_value_init+0x18>
		EE_ReadVariable(addr, &rom_mem.rom_table[addr-1]);
 8003c26:	1e61      	subs	r1, r4, #1
 8003c28:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <rom_value_init+0xa8>)
 8003c2a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff feec 	bl	8003a0c <EE_ReadVariable>
	for(uint8_t addr = 0; addr  < NB_OF_VAR ; addr++)
 8003c34:	3401      	adds	r4, #1
 8003c36:	b2e4      	uxtb	r4, r4
 8003c38:	2c08      	cmp	r4, #8
 8003c3a:	d9f4      	bls.n	8003c26 <rom_value_init+0x6>
	if( (rom_mem.rom_str.memory1_temp == 0) && (rom_mem.rom_str.memory1_time == 0) )
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <rom_value_init+0xa8>)
 8003c3e:	885b      	ldrh	r3, [r3, #2]
 8003c40:	b913      	cbnz	r3, 8003c48 <rom_value_init+0x28>
 8003c42:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <rom_value_init+0xa8>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b19b      	cbz	r3, 8003c70 <rom_value_init+0x50>
	if( (rom_mem.rom_str.memory2_temp == 0) && (rom_mem.rom_str.memory2_time == 0) )
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <rom_value_init+0xa8>)
 8003c4a:	88db      	ldrh	r3, [r3, #6]
 8003c4c:	b913      	cbnz	r3, 8003c54 <rom_value_init+0x34>
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <rom_value_init+0xa8>)
 8003c50:	889b      	ldrh	r3, [r3, #4]
 8003c52:	b1ab      	cbz	r3, 8003c80 <rom_value_init+0x60>
	if((rom_mem.rom_str.memory3_temp == 0) && (rom_mem.rom_str.memory3_time == 0))
 8003c54:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <rom_value_init+0xa8>)
 8003c56:	895b      	ldrh	r3, [r3, #10]
 8003c58:	b913      	cbnz	r3, 8003c60 <rom_value_init+0x40>
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <rom_value_init+0xa8>)
 8003c5c:	891b      	ldrh	r3, [r3, #8]
 8003c5e:	b1bb      	cbz	r3, 8003c90 <rom_value_init+0x70>
	if((rom_mem.rom_str.PID_P + rom_mem.rom_str.PID_I + rom_mem.rom_str.PID_D) == 0 )
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <rom_value_init+0xa8>)
 8003c62:	8993      	ldrh	r3, [r2, #12]
 8003c64:	89d1      	ldrh	r1, [r2, #14]
 8003c66:	440b      	add	r3, r1
 8003c68:	8a12      	ldrh	r2, [r2, #16]
 8003c6a:	42d3      	cmn	r3, r2
 8003c6c:	d018      	beq.n	8003ca0 <rom_value_init+0x80>
}
 8003c6e:	bd10      	pop	{r4, pc}
		rom_wite_mem1_data(11,11, 31.1);
 8003c70:	a30f      	add	r3, pc, #60	; (adr r3, 8003cb0 <rom_value_init+0x90>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	210b      	movs	r1, #11
 8003c78:	4608      	mov	r0, r1
 8003c7a:	f7ff ff5b 	bl	8003b34 <rom_wite_mem1_data>
 8003c7e:	e7e3      	b.n	8003c48 <rom_value_init+0x28>
		rom_wite_mem2_data(22,22, 32.2);
 8003c80:	a30d      	add	r3, pc, #52	; (adr r3, 8003cb8 <rom_value_init+0x98>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	2116      	movs	r1, #22
 8003c88:	4608      	mov	r0, r1
 8003c8a:	f7ff ff73 	bl	8003b74 <rom_wite_mem2_data>
 8003c8e:	e7e1      	b.n	8003c54 <rom_value_init+0x34>
		rom_wite_mem3_data(33,33, 33.3);
 8003c90:	a30b      	add	r3, pc, #44	; (adr r3, 8003cc0 <rom_value_init+0xa0>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	2121      	movs	r1, #33	; 0x21
 8003c98:	4608      	mov	r0, r1
 8003c9a:	f7ff ff8b 	bl	8003bb4 <rom_wite_mem3_data>
 8003c9e:	e7df      	b.n	8003c60 <rom_value_init+0x40>
		rom_wite_PID_data(100,100,100);
 8003ca0:	2264      	movs	r2, #100	; 0x64
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f7ff ffa5 	bl	8003bf4 <rom_wite_PID_data>
}
 8003caa:	e7e0      	b.n	8003c6e <rom_value_init+0x4e>
 8003cac:	f3af 8000 	nop.w
 8003cb0:	9999999a 	.word	0x9999999a
 8003cb4:	403f1999 	.word	0x403f1999
 8003cb8:	9999999a 	.word	0x9999999a
 8003cbc:	40401999 	.word	0x40401999
 8003cc0:	66666666 	.word	0x66666666
 8003cc4:	4040a666 	.word	0x4040a666
 8003cc8:	20000fb0 	.word	0x20000fb0

08003ccc <LCD_Data_Bus_Input>:
//
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void LCD_Data_Bus_Input(void){
	GPIOB->CRL &= 0x000000ff;
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <LCD_Data_Bus_Input+0x18>)
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x88888800; 	// TODO sprawdzić czy nie będzie problemów z czujnikami
 8003cd4:	6813      	ldr	r3, [r2, #0]
 8003cd6:	f043 2388 	orr.w	r3, r3, #2281736192	; 0x88008800
 8003cda:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40010c00 	.word	0x40010c00

08003ce8 <LCD_Data_Bus_Output>:
void LCD_Data_Bus_Output(void){
	GPIOB->CRL &= 0x000000ff;
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <LCD_Data_Bus_Output+0x18>)
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x77777700;	// TODO sprawdzić czy nie będzie problemów z czujnikami
 8003cf0:	6813      	ldr	r3, [r2, #0]
 8003cf2:	f043 2377 	orr.w	r3, r3, #1996519168	; 0x77007700
 8003cf6:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010c00 	.word	0x40010c00

08003d04 <_LCD_Send_Half>:

void _LCD_Send_Half(uint8_t half_byte)
{
 8003d04:	b538      	push	{r3, r4, r5, lr}
	half_byte = (half_byte & 0x0f);
 8003d06:	f000 050f 	and.w	r5, r0, #15
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003d0a:	4c0c      	ldr	r4, [pc, #48]	; (8003d3c <_LCD_Send_Half+0x38>)
 8003d0c:	68e3      	ldr	r3, [r4, #12]
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	60e3      	str	r3, [r4, #12]
	simple_delay_us(8);
 8003d14:	2008      	movs	r0, #8
 8003d16:	f7ff fb0a 	bl	800332e <simple_delay_us>

	LCD_D4_GPIO_Port->ODR &= 0xfff0;
 8003d1a:	68e3      	ldr	r3, [r4, #12]
 8003d1c:	f023 030f 	bic.w	r3, r3, #15
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	60e3      	str	r3, [r4, #12]
	LCD_D4_GPIO_Port->ODR |= half_byte;
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	431d      	orrs	r5, r3
 8003d2a:	60e5      	str	r5, [r4, #12]

	simple_delay_us(8);
 8003d2c:	2008      	movs	r0, #8
 8003d2e:	f7ff fafe 	bl	800332e <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003d32:	68e3      	ldr	r3, [r4, #12]
 8003d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d38:	60e3      	str	r3, [r4, #12]
}
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	40010c00 	.word	0x40010c00

08003d40 <_LCD_Write>:


void _LCD_Write(uint8_t data){
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4604      	mov	r4, r0
	LCD_Data_Bus_Output();
 8003d44:	f7ff ffd0 	bl	8003ce8 <LCD_Data_Bus_Output>

	LCD_RW_GPIO_Port->ODR &= ~LCD_RW_Pin;
 8003d48:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <_LCD_Write+0x20>)
 8003d4a:	68d3      	ldr	r3, [r2, #12]
 8003d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d50:	60d3      	str	r3, [r2, #12]

	_LCD_Send_Half(data >> 4);
 8003d52:	0920      	lsrs	r0, r4, #4
 8003d54:	f7ff ffd6 	bl	8003d04 <_LCD_Send_Half>
	_LCD_Send_Half(data);
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7ff ffd3 	bl	8003d04 <_LCD_Send_Half>
}
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	40010c00 	.word	0x40010c00

08003d64 <_LCD_Read_Half>:
//
// Funkcja odczytu bajtu z wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
uint8_t _LCD_Read_Half()
{
 8003d64:	b538      	push	{r3, r4, r5, lr}
	uint8_t tmp = 0;
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003d66:	4c0a      	ldr	r4, [pc, #40]	; (8003d90 <_LCD_Read_Half+0x2c>)
 8003d68:	68e3      	ldr	r3, [r4, #12]
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	60e3      	str	r3, [r4, #12]
	simple_delay_us(8);
 8003d70:	2008      	movs	r0, #8
 8003d72:	f7ff fadc 	bl	800332e <simple_delay_us>
	tmp = (uint8_t) (LCD_D4_GPIO_Port->IDR & 0x000f);
 8003d76:	68a5      	ldr	r5, [r4, #8]
 8003d78:	f005 050f 	and.w	r5, r5, #15
	simple_delay_us(8);
 8003d7c:	2008      	movs	r0, #8
 8003d7e:	f7ff fad6 	bl	800332e <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003d82:	68e3      	ldr	r3, [r4, #12]
 8003d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d88:	60e3      	str	r3, [r4, #12]
	return tmp;
}
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
 8003d8e:	bf00      	nop
 8003d90:	40010c00 	.word	0x40010c00

08003d94 <_LCD_Read>:



uint8_t _LCD_Read(void){
 8003d94:	b510      	push	{r4, lr}
	uint8_t tmp = 0;

	LCD_Data_Bus_Input();
 8003d96:	f7ff ff99 	bl	8003ccc <LCD_Data_Bus_Input>
	LCD_RW_GPIO_Port->ODR |= LCD_RW_Pin;
 8003d9a:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <_LCD_Read+0x34>)
 8003d9c:	68d3      	ldr	r3, [r2, #12]
 8003d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da2:	60d3      	str	r3, [r2, #12]
	//LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
	simple_delay_us(8);
 8003da4:	2008      	movs	r0, #8
 8003da6:	f7ff fac2 	bl	800332e <simple_delay_us>
	tmp |= ((_LCD_Read_Half() << 4) & 0xf0);
 8003daa:	f7ff ffdb 	bl	8003d64 <_LCD_Read_Half>
 8003dae:	0100      	lsls	r0, r0, #4
 8003db0:	b244      	sxtb	r4, r0
	tmp |= (_LCD_Read_Half() & 0x0f);
 8003db2:	f7ff ffd7 	bl	8003d64 <_LCD_Read_Half>
 8003db6:	f000 000f 	and.w	r0, r0, #15
 8003dba:	4304      	orrs	r4, r0
 8003dbc:	b2e4      	uxtb	r4, r4

	simple_delay_us(8);
 8003dbe:	2008      	movs	r0, #8
 8003dc0:	f7ff fab5 	bl	800332e <simple_delay_us>
	//LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
	return tmp;
}
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	bd10      	pop	{r4, pc}
 8003dc8:	40010c00 	.word	0x40010c00

08003dcc <LCD_ReadStatus>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
uint8_t LCD_ReadStatus(void){
 8003dcc:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <LCD_ReadStatus+0x18>)
 8003dd0:	68d3      	ldr	r3, [r2, #12]
 8003dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dd6:	60d3      	str	r3, [r2, #12]
	simple_delay_us(8);
 8003dd8:	2008      	movs	r0, #8
 8003dda:	f7ff faa8 	bl	800332e <simple_delay_us>
	return _LCD_Read();
 8003dde:	f7ff ffd9 	bl	8003d94 <_LCD_Read>
}
 8003de2:	bd08      	pop	{r3, pc}
 8003de4:	40010800 	.word	0x40010800

08003de8 <LCD_WriteCommand>:
void LCD_WriteCommand(uint8_t command){
 8003de8:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <LCD_WriteCommand+0x24>)
 8003dec:	68d3      	ldr	r3, [r2, #12]
 8003dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df2:	60d3      	str	r3, [r2, #12]
	_LCD_Write(command);
 8003df4:	f7ff ffa4 	bl	8003d40 <_LCD_Write>
	simple_delay_us(8);
 8003df8:	2008      	movs	r0, #8
 8003dfa:	f7ff fa98 	bl	800332e <simple_delay_us>
	while(LCD_ReadStatus() & 0x80);
 8003dfe:	f7ff ffe5 	bl	8003dcc <LCD_ReadStatus>
 8003e02:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003e06:	d1fa      	bne.n	8003dfe <LCD_WriteCommand+0x16>
}
 8003e08:	bd08      	pop	{r3, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40010800 	.word	0x40010800

08003e10 <LCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(uint8_t data){
 8003e10:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <LCD_WriteData+0x18>)
 8003e14:	68d3      	ldr	r3, [r2, #12]
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	60d3      	str	r3, [r2, #12]
	_LCD_Write(data);
 8003e1c:	f7ff ff90 	bl	8003d40 <_LCD_Write>
	simple_delay_us(15);
 8003e20:	200f      	movs	r0, #15
 8003e22:	f7ff fa84 	bl	800332e <simple_delay_us>
	//while(LCD_ReadStatus() & 0x80);
}
 8003e26:	bd08      	pop	{r3, pc}
 8003e28:	40010800 	.word	0x40010800

08003e2c <LCD_GoTo>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja ustawienia współrzędnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(uint8_t x, uint8_t y){
 8003e2c:	b508      	push	{r3, lr}
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8003e2e:	eb00 1081 	add.w	r0, r0, r1, lsl #6
 8003e32:	b240      	sxtb	r0, r0
 8003e34:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003e38:	b2c0      	uxtb	r0, r0
 8003e3a:	f7ff ffd5 	bl	8003de8 <LCD_WriteCommand>
}
 8003e3e:	bd08      	pop	{r3, pc}

08003e40 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 8003e40:	b538      	push	{r3, r4, r5, lr}


	LCD_Data_Bus_Output();
 8003e42:	f7ff ff51 	bl	8003ce8 <LCD_Data_Bus_Output>
	simple_delay_ms(15);
 8003e46:	200f      	movs	r0, #15
 8003e48:	f7ff fa66 	bl	8003318 <simple_delay_ms>
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003e4c:	4a2f      	ldr	r2, [pc, #188]	; (8003f0c <LCD_Initalize+0xcc>)
 8003e4e:	68d3      	ldr	r3, [r2, #12]
 8003e50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e54:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <LCD_Initalize+0xd0>)
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e5e:	60da      	str	r2, [r3, #12]
	LCD_RW_GPIO_Port->ODR  &= ~LCD_RW_Pin;
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e66:	60da      	str	r2, [r3, #12]

	for(uint8_t i = 0; i < 3; i++){
 8003e68:	2400      	movs	r4, #0
 8003e6a:	e017      	b.n	8003e9c <LCD_Initalize+0x5c>
		LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003e6c:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <LCD_Initalize+0xd0>)
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e74:	60da      	str	r2, [r3, #12]
		LCD_D4_GPIO_Port->ODR &= 0xfff0;
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	f022 020f 	bic.w	r2, r2, #15
 8003e7c:	0412      	lsls	r2, r2, #16
 8003e7e:	0c12      	lsrs	r2, r2, #16
 8003e80:	60da      	str	r2, [r3, #12]
		LCD_D4_GPIO_Port->ODR |=  0x0003;
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	f042 0203 	orr.w	r2, r2, #3
 8003e88:	60da      	str	r2, [r3, #12]
		LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e90:	60da      	str	r2, [r3, #12]
		simple_delay_ms(5);
 8003e92:	2005      	movs	r0, #5
 8003e94:	f7ff fa40 	bl	8003318 <simple_delay_ms>
	for(uint8_t i = 0; i < 3; i++){
 8003e98:	3401      	adds	r4, #1
 8003e9a:	b2e4      	uxtb	r4, r4
 8003e9c:	2c02      	cmp	r4, #2
 8003e9e:	d9e5      	bls.n	8003e6c <LCD_Initalize+0x2c>
	  }

	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT);
 8003ea0:	2028      	movs	r0, #40	; 0x28
 8003ea2:	f7ff ffa1 	bl	8003de8 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f7ff fa36 	bl	8003318 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8003eac:	2008      	movs	r0, #8
 8003eae:	f7ff ff9b 	bl	8003de8 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7ff fa30 	bl	8003318 <simple_delay_ms>
	LCD_WriteCommand(HD44780_CLEAR);
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7ff ff95 	bl	8003de8 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7ff fa2a 	bl	8003318 <simple_delay_ms>
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 8003ec4:	2006      	movs	r0, #6
 8003ec6:	f7ff ff8f 	bl	8003de8 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7ff fa24 	bl	8003318 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 8003ed0:	200c      	movs	r0, #12
 8003ed2:	f7ff ff89 	bl	8003de8 <LCD_WriteCommand>

	for(uint8_t i=0; i< 8 ;i++)
 8003ed6:	2500      	movs	r5, #0
 8003ed8:	e00b      	b.n	8003ef2 <LCD_Initalize+0xb2>
	{
		LCD_WriteCommand(0x40 + i*8);
		for(uint8_t j =0; j< 8; j++)
		{
			LCD_WriteData(custom_font_pattern[i][j]);
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <LCD_Initalize+0xd4>)
 8003edc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003ee0:	5d18      	ldrb	r0, [r3, r4]
 8003ee2:	f7ff ff95 	bl	8003e10 <LCD_WriteData>
		for(uint8_t j =0; j< 8; j++)
 8003ee6:	3401      	adds	r4, #1
 8003ee8:	b2e4      	uxtb	r4, r4
 8003eea:	2c07      	cmp	r4, #7
 8003eec:	d9f5      	bls.n	8003eda <LCD_Initalize+0x9a>
	for(uint8_t i=0; i< 8 ;i++)
 8003eee:	3501      	adds	r5, #1
 8003ef0:	b2ed      	uxtb	r5, r5
 8003ef2:	2d07      	cmp	r5, #7
 8003ef4:	d808      	bhi.n	8003f08 <LCD_Initalize+0xc8>
		LCD_WriteCommand(0x40 + i*8);
 8003ef6:	f105 0008 	add.w	r0, r5, #8
 8003efa:	00c0      	lsls	r0, r0, #3
 8003efc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8003f00:	f7ff ff72 	bl	8003de8 <LCD_WriteCommand>
		for(uint8_t j =0; j< 8; j++)
 8003f04:	2400      	movs	r4, #0
 8003f06:	e7f0      	b.n	8003eea <LCD_Initalize+0xaa>
		}
	}
}
 8003f08:	bd38      	pop	{r3, r4, r5, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40010800 	.word	0x40010800
 8003f10:	40010c00 	.word	0x40010c00
 8003f14:	08006084 	.word	0x08006084

08003f18 <lcd_buf_go_to>:


void lcd_buf_go_to(uint8_t buf_x, uint8_t buf_y )
{
	write_buf_x_pos = buf_x;
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <lcd_buf_go_to+0xc>)
 8003f1a:	7018      	strb	r0, [r3, #0]
	write_buf_y_pos = buf_y;
 8003f1c:	4b02      	ldr	r3, [pc, #8]	; (8003f28 <lcd_buf_go_to+0x10>)
 8003f1e:	7019      	strb	r1, [r3, #0]
}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	200004c0 	.word	0x200004c0
 8003f28:	200004c1 	.word	0x200004c1

08003f2c <lcd_char>:


void lcd_char(char c)
{
 8003f2c:	b410      	push	{r4}
	lcd_buf[write_buf_y_pos][write_buf_x_pos++] = c;
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <lcd_char+0x20>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	4907      	ldr	r1, [pc, #28]	; (8003f50 <lcd_char+0x24>)
 8003f34:	780a      	ldrb	r2, [r1, #0]
 8003f36:	1c54      	adds	r4, r2, #1
 8003f38:	700c      	strb	r4, [r1, #0]
 8003f3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f3e:	0099      	lsls	r1, r3, #2
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <lcd_char+0x28>)
 8003f42:	440b      	add	r3, r1
 8003f44:	5498      	strb	r0, [r3, r2]
}
 8003f46:	bc10      	pop	{r4}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	200004c1 	.word	0x200004c1
 8003f50:	200004c0 	.word	0x200004c0
 8003f54:	20000500 	.word	0x20000500

08003f58 <lcd_buf_clear>:


void lcd_buf_clear(void)
{
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e00c      	b.n	8003f76 <lcd_buf_clear+0x1e>
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
		{
			lcd_buf[iy][ix] = ' ';
 8003f5c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003f60:	0091      	lsls	r1, r2, #2
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <lcd_buf_clear+0x28>)
 8003f64:	440a      	add	r2, r1
 8003f66:	2120      	movs	r1, #32
 8003f68:	54d1      	strb	r1, [r2, r3]
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b13      	cmp	r3, #19
 8003f70:	d9f4      	bls.n	8003f5c <lcd_buf_clear+0x4>
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 8003f72:	3001      	adds	r0, #1
 8003f74:	b2c0      	uxtb	r0, r0
 8003f76:	2801      	cmp	r0, #1
 8003f78:	d801      	bhi.n	8003f7e <lcd_buf_clear+0x26>
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e7f7      	b.n	8003f6e <lcd_buf_clear+0x16>
		}
	}
}
 8003f7e:	4770      	bx	lr
 8003f80:	20000500 	.word	0x20000500

08003f84 <lcd_buf_write_text>:


void lcd_buf_write_text(char * text)
{
	while(*text)
 8003f84:	7803      	ldrb	r3, [r0, #0]
 8003f86:	b19b      	cbz	r3, 8003fb0 <lcd_buf_write_text+0x2c>
{
 8003f88:	b410      	push	{r4}
	{
		lcd_buf[write_buf_y_pos][write_buf_x_pos++] = *text++;
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <lcd_buf_write_text+0x30>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	490a      	ldr	r1, [pc, #40]	; (8003fb8 <lcd_buf_write_text+0x34>)
 8003f90:	780a      	ldrb	r2, [r1, #0]
 8003f92:	1c54      	adds	r4, r2, #1
 8003f94:	700c      	strb	r4, [r1, #0]
 8003f96:	7804      	ldrb	r4, [r0, #0]
 8003f98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f9c:	0099      	lsls	r1, r3, #2
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <lcd_buf_write_text+0x38>)
 8003fa0:	440b      	add	r3, r1
 8003fa2:	549c      	strb	r4, [r3, r2]
 8003fa4:	3001      	adds	r0, #1
	while(*text)
 8003fa6:	7803      	ldrb	r3, [r0, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ee      	bne.n	8003f8a <lcd_buf_write_text+0x6>
	}
}
 8003fac:	bc10      	pop	{r4}
 8003fae:	4770      	bx	lr
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	200004c1 	.word	0x200004c1
 8003fb8:	200004c0 	.word	0x200004c0
 8003fbc:	20000500 	.word	0x20000500

08003fc0 <lcd_circle_bufer_refresh>:
		}
		x++;
	}
}
void lcd_circle_bufer_refresh()
{
 8003fc0:	b538      	push	{r3, r4, r5, lr}
	static uint8_t xc = 0, yc = 0;
	LCD_GoTo(xc,yc);
 8003fc2:	4d11      	ldr	r5, [pc, #68]	; (8004008 <lcd_circle_bufer_refresh+0x48>)
 8003fc4:	4c11      	ldr	r4, [pc, #68]	; (800400c <lcd_circle_bufer_refresh+0x4c>)
 8003fc6:	7829      	ldrb	r1, [r5, #0]
 8003fc8:	7820      	ldrb	r0, [r4, #0]
 8003fca:	f7ff ff2f 	bl	8003e2c <LCD_GoTo>
	LCD_WriteData(lcd_buf[yc][xc]);
 8003fce:	782b      	ldrb	r3, [r5, #0]
 8003fd0:	7821      	ldrb	r1, [r4, #0]
 8003fd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fd6:	009a      	lsls	r2, r3, #2
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <lcd_circle_bufer_refresh+0x50>)
 8003fda:	4413      	add	r3, r2
 8003fdc:	5c58      	ldrb	r0, [r3, r1]
 8003fde:	f7ff ff17 	bl	8003e10 <LCD_WriteData>
	if(++xc == 20)
 8003fe2:	7823      	ldrb	r3, [r4, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	7023      	strb	r3, [r4, #0]
 8003fea:	2b14      	cmp	r3, #20
 8003fec:	d000      	beq.n	8003ff0 <lcd_circle_bufer_refresh+0x30>
		if(++yc == 2)
		{
			 yc = 0;
		}
	}
}
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
		xc = 0;
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	7022      	strb	r2, [r4, #0]
		if(++yc == 2)
 8003ff4:	782b      	ldrb	r3, [r5, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	702b      	strb	r3, [r5, #0]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d1f6      	bne.n	8003fee <lcd_circle_bufer_refresh+0x2e>
			 yc = 0;
 8004000:	2200      	movs	r2, #0
 8004002:	702a      	strb	r2, [r5, #0]
}
 8004004:	e7f3      	b.n	8003fee <lcd_circle_bufer_refresh+0x2e>
 8004006:	bf00      	nop
 8004008:	200004c3 	.word	0x200004c3
 800400c:	200004c2 	.word	0x200004c2
 8004010:	20000500 	.word	0x20000500

08004014 <search_temperature_from_pattern>:
	if(probe_counter++ > 5 ) probe_counter=0;
	ntc_analog_temp[probe_counter].TEMP_SENS_temperature = (((V25 * 1000.0 - (double)adc_value[3] * 0.8) / AVGSLOPE) + 25.0);
}

float search_temperature_from_pattern(float ntc_res_value)
{
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4606      	mov	r6, r0
	uint16_t i=0;
 8004018:	2500      	movs	r5, #0
	while(ntc_res_value < NTC_BEATA3984[i++]);
 800401a:	e000      	b.n	800401e <search_temperature_from_pattern+0xa>
 800401c:	4625      	mov	r5, r4
 800401e:	1c6b      	adds	r3, r5, #1
 8004020:	b29c      	uxth	r4, r3
 8004022:	4631      	mov	r1, r6
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <search_temperature_from_pattern+0x2c>)
 8004026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800402a:	f7fd f849 	bl	80010c0 <__aeabi_fcmpgt>
 800402e:	2800      	cmp	r0, #0
 8004030:	d1f4      	bne.n	800401c <search_temperature_from_pattern+0x8>
	return ((float)--i)/10;
 8004032:	4628      	mov	r0, r5
 8004034:	f7fc fe30 	bl	8000c98 <__aeabi_ui2f>
 8004038:	4902      	ldr	r1, [pc, #8]	; (8004044 <search_temperature_from_pattern+0x30>)
 800403a:	f7fc ff39 	bl	8000eb0 <__aeabi_fdiv>
}
 800403e:	bd70      	pop	{r4, r5, r6, pc}
 8004040:	080060c4 	.word	0x080060c4
 8004044:	41200000 	.word	0x41200000

08004048 <ntc_analog_sensors_calc>:
 */
void ntc_analog_sensors_calc(uint8_t no_sensor)
{
	//for time measure //LED_RED_GPIO_Port->BSRR = LED_RED_Pin;
	static uint8_t asc_probe[3];
	if(no_sensor >= (ADC_CHANNELS-1)) return;
 8004048:	2802      	cmp	r0, #2
 800404a:	d844      	bhi.n	80040d6 <ntc_analog_sensors_calc+0x8e>
{
 800404c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(asc_probe[no_sensor] > 5 ) asc_probe[no_sensor]=0;
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <ntc_analog_sensors_calc+0xb0>)
 8004052:	5c1b      	ldrb	r3, [r3, r0]
 8004054:	2b05      	cmp	r3, #5
 8004056:	d902      	bls.n	800405e <ntc_analog_sensors_calc+0x16>
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <ntc_analog_sensors_calc+0xb0>)
 800405a:	2200      	movs	r2, #0
 800405c:	541a      	strb	r2, [r3, r0]
 800405e:	4605      	mov	r5, r0
	ntc_analog_temp[asc_probe[no_sensor]].NTC_voltage[no_sensor] = (float)((adc_value[no_sensor] * NTC_VOLTAGE_SUPPLY )/ 4095.00f);
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <ntc_analog_sensors_calc+0xb4>)
 8004062:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8004066:	f7fc f9c5 	bl	80003f4 <__aeabi_i2d>
 800406a:	a31b      	add	r3, pc, #108	; (adr r3, 80040d8 <ntc_analog_sensors_calc+0x90>)
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f7fc fa2a 	bl	80004c8 <__aeabi_dmul>
 8004074:	a31a      	add	r3, pc, #104	; (adr r3, 80040e0 <ntc_analog_sensors_calc+0x98>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f7fc fb4f 	bl	800071c <__aeabi_ddiv>
 800407e:	4f1e      	ldr	r7, [pc, #120]	; (80040f8 <ntc_analog_sensors_calc+0xb0>)
 8004080:	5d7c      	ldrb	r4, [r7, r5]
 8004082:	f7fc fd03 	bl	8000a8c <__aeabi_d2f>
 8004086:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8004100 <ntc_analog_sensors_calc+0xb8>
 800408a:	00a6      	lsls	r6, r4, #2
 800408c:	1933      	adds	r3, r6, r4
 800408e:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8004092:	44a9      	add	r9, r5
 8004094:	f109 0302 	add.w	r3, r9, #2
 8004098:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800409c:	6058      	str	r0, [r3, #4]
	ntc_analog_temp[asc_probe[no_sensor]].NTC_resistance[no_sensor] = (NTC_VOLTAGE_SUPPLY * NTC_DIVIDER / ntc_analog_temp[asc_probe[no_sensor]].NTC_voltage[no_sensor]) - (float)NTC_DIVIDER;
 800409e:	f7fc f9bb 	bl	8000418 <__aeabi_f2d>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	a110      	add	r1, pc, #64	; (adr r1, 80040e8 <ntc_analog_sensors_calc+0xa0>)
 80040a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040ac:	f7fc fb36 	bl	800071c <__aeabi_ddiv>
 80040b0:	a30f      	add	r3, pc, #60	; (adr r3, 80040f0 <ntc_analog_sensors_calc+0xa8>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc f84f 	bl	8000158 <__aeabi_dsub>
 80040ba:	f7fc fce7 	bl	8000a8c <__aeabi_d2f>
 80040be:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
	ntc_analog_temp[asc_probe[no_sensor]].NTC_temperature[no_sensor] = search_temperature_from_pattern(ntc_analog_temp[asc_probe[no_sensor]].NTC_resistance[no_sensor]);
 80040c2:	f7ff ffa7 	bl	8004014 <search_temperature_from_pattern>
 80040c6:	464b      	mov	r3, r9
 80040c8:	3306      	adds	r3, #6
 80040ca:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	asc_probe[no_sensor]++;
 80040ce:	3401      	adds	r4, #1
 80040d0:	557c      	strb	r4, [r7, r5]
	//for time measure  //LED_RED_GPIO_Port->BRR = LED_RED_Pin;
}
 80040d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d6:	4770      	bx	lr
 80040d8:	66666666 	.word	0x66666666
 80040dc:	400a6666 	.word	0x400a6666
 80040e0:	00000000 	.word	0x00000000
 80040e4:	40affe00 	.word	0x40affe00
 80040e8:	00000000 	.word	0x00000000
 80040ec:	40e01d00 	.word	0x40e01d00
 80040f0:	00000000 	.word	0x00000000
 80040f4:	40c38800 	.word	0x40c38800
 80040f8:	200004c4 	.word	0x200004c4
 80040fc:	200007e0 	.word	0x200007e0
 8004100:	20000fc4 	.word	0x20000fc4

08004104 <ntc_init>:
void ntc_init(void){
 8004104:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 8004106:	481e      	ldr	r0, [pc, #120]	; (8004180 <ntc_init+0x7c>)
 8004108:	f7fd f9d0 	bl	80014ac <HAL_ADC_Start>
	for(uint8_t i = 0; i <NUMBER_OF_PROBE ; i++ )
 800410c:	2500      	movs	r5, #0
 800410e:	e008      	b.n	8004122 <ntc_init+0x1e>
			ntc_analog_sensors_calc(j);
 8004110:	4620      	mov	r0, r4
 8004112:	f7ff ff99 	bl	8004048 <ntc_analog_sensors_calc>
		for(uint8_t j = 0; j <NTC_NUBMER_OF_SLOTS ; j++ )
 8004116:	3401      	adds	r4, #1
 8004118:	b2e4      	uxtb	r4, r4
 800411a:	2c02      	cmp	r4, #2
 800411c:	d9f8      	bls.n	8004110 <ntc_init+0xc>
	for(uint8_t i = 0; i <NUMBER_OF_PROBE ; i++ )
 800411e:	3501      	adds	r5, #1
 8004120:	b2ed      	uxtb	r5, r5
 8004122:	2d04      	cmp	r5, #4
 8004124:	d801      	bhi.n	800412a <ntc_init+0x26>
		for(uint8_t j = 0; j <NTC_NUBMER_OF_SLOTS ; j++ )
 8004126:	2400      	movs	r4, #0
 8004128:	e7f7      	b.n	800411a <ntc_init+0x16>
	for(uint8_t i = 0; i <NTC_NUBMER_OF_SLOTS ; i++ )
 800412a:	2400      	movs	r4, #0
 800412c:	e005      	b.n	800413a <ntc_init+0x36>
			if(i == 1) HC_status.ntc2_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 800412e:	2c01      	cmp	r4, #1
 8004130:	d018      	beq.n	8004164 <ntc_init+0x60>
			if(i == 2) HC_status.ntc3_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004132:	2c02      	cmp	r4, #2
 8004134:	d01c      	beq.n	8004170 <ntc_init+0x6c>
	for(uint8_t i = 0; i <NTC_NUBMER_OF_SLOTS ; i++ )
 8004136:	3401      	adds	r4, #1
 8004138:	b2e4      	uxtb	r4, r4
 800413a:	2c02      	cmp	r4, #2
 800413c:	d81e      	bhi.n	800417c <ntc_init+0x78>
		if(ntc_analog_temp[NUMBER_OF_PROBE-1].NTC_voltage[i] != 0)
 800413e:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8004142:	4a10      	ldr	r2, [pc, #64]	; (8004184 <ntc_init+0x80>)
 8004144:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004148:	2100      	movs	r1, #0
 800414a:	6858      	ldr	r0, [r3, #4]
 800414c:	f7fc ff90 	bl	8001070 <__aeabi_fcmpeq>
 8004150:	2800      	cmp	r0, #0
 8004152:	d1f0      	bne.n	8004136 <ntc_init+0x32>
			if(i == 0) HC_status.ntc_heating_mat_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004154:	2c00      	cmp	r4, #0
 8004156:	d1ea      	bne.n	800412e <ntc_init+0x2a>
 8004158:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <ntc_init+0x84>)
 800415a:	7813      	ldrb	r3, [r2, #0]
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	7013      	strb	r3, [r2, #0]
 8004162:	e7e4      	b.n	800412e <ntc_init+0x2a>
			if(i == 1) HC_status.ntc2_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004164:	4a08      	ldr	r2, [pc, #32]	; (8004188 <ntc_init+0x84>)
 8004166:	7813      	ldrb	r3, [r2, #0]
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	7013      	strb	r3, [r2, #0]
 800416e:	e7e0      	b.n	8004132 <ntc_init+0x2e>
			if(i == 2) HC_status.ntc3_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004170:	4a05      	ldr	r2, [pc, #20]	; (8004188 <ntc_init+0x84>)
 8004172:	7813      	ldrb	r3, [r2, #0]
 8004174:	f043 0308 	orr.w	r3, r3, #8
 8004178:	7013      	strb	r3, [r2, #0]
 800417a:	e7dc      	b.n	8004136 <ntc_init+0x32>
}
 800417c:	bd38      	pop	{r3, r4, r5, pc}
 800417e:	bf00      	nop
 8004180:	20000818 	.word	0x20000818
 8004184:	20000fc4 	.word	0x20000fc4
 8004188:	20000528 	.word	0x20000528

0800418c <ntc_handler>:
	if(ntc_handler_flag == NTC_HANDLER_FLAG_BUSY) return ;
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <ntc_handler+0x68>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d004      	beq.n	80041a0 <ntc_handler+0x14>
	if(ms_time_counter != ms_counter) return;
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <ntc_handler+0x6c>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	4283      	cmp	r3, r0
 800419e:	d000      	beq.n	80041a2 <ntc_handler+0x16>
 80041a0:	4770      	bx	lr
{
 80041a2:	b510      	push	{r4, lr}
	for(uint8_t i=0; i < NTC_NUBMER_OF_SLOTS ; i++ ) ntc_analog_sensors_calc(i); // read all of slots
 80041a4:	2400      	movs	r4, #0
 80041a6:	e004      	b.n	80041b2 <ntc_handler+0x26>
 80041a8:	4620      	mov	r0, r4
 80041aa:	f7ff ff4d 	bl	8004048 <ntc_analog_sensors_calc>
 80041ae:	3401      	adds	r4, #1
 80041b0:	b2e4      	uxtb	r4, r4
 80041b2:	2c02      	cmp	r4, #2
 80041b4:	d9f8      	bls.n	80041a8 <ntc_handler+0x1c>
	for(uint8_t i=0; i < NUMBER_OF_PROBE ; i++)
 80041b6:	2400      	movs	r4, #0
 80041b8:	2c04      	cmp	r4, #4
 80041ba:	d816      	bhi.n	80041ea <ntc_handler+0x5e>
		if( ntc_analog_temp[i].NTC_voltage[NTC1_HEATING_MAT_SENSOR] == 0)
 80041bc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80041c0:	00da      	lsls	r2, r3, #3
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <ntc_handler+0x70>)
 80041c4:	4413      	add	r3, r2
 80041c6:	2100      	movs	r1, #0
 80041c8:	68d8      	ldr	r0, [r3, #12]
 80041ca:	f7fc ff51 	bl	8001070 <__aeabi_fcmpeq>
 80041ce:	b938      	cbnz	r0, 80041e0 <ntc_handler+0x54>
		else HC_status.ntc_heating_mat_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK; //  change status
 80041d0:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <ntc_handler+0x74>)
 80041d2:	7813      	ldrb	r3, [r2, #0]
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	7013      	strb	r3, [r2, #0]
	for(uint8_t i=0; i < NUMBER_OF_PROBE ; i++)
 80041da:	3401      	adds	r4, #1
 80041dc:	b2e4      	uxtb	r4, r4
 80041de:	e7eb      	b.n	80041b8 <ntc_handler+0x2c>
			HC_status.ntc_heating_mat_sensor = STATUS_NTC_HEATING_MAT_SENSOR_ERROR;
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <ntc_handler+0x74>)
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	f36f 0241 	bfc	r2, #1, #1
 80041e8:	701a      	strb	r2, [r3, #0]
	ntc_handler_flag = NTC_HANDLER_FLAG_BUSY;
 80041ea:	4b02      	ldr	r3, [pc, #8]	; (80041f4 <ntc_handler+0x68>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
}
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	bf00      	nop
 80041f4:	20000590 	.word	0x20000590
 80041f8:	20000748 	.word	0x20000748
 80041fc:	20000fc4 	.word	0x20000fc4
 8004200:	20000528 	.word	0x20000528

08004204 <ntc_convert_float_to_string>:
{
	return kelvin_temperature - 273.15;
}

uint8_t ntc_convert_float_to_string(uint8_t * string_table, double temperature_ntc)
{
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	4604      	mov	r4, r0
 8004208:	4616      	mov	r6, r2
 800420a:	461d      	mov	r5, r3
	uint8_t digit_counter = 0 ;
	uint16_t i=10000;
	uint16_t temperature_int_multiplied100;

	if(temperature_ntc < 0)
 800420c:	2200      	movs	r2, #0
 800420e:	2300      	movs	r3, #0
 8004210:	4630      	mov	r0, r6
 8004212:	4629      	mov	r1, r5
 8004214:	f7fc fbca 	bl	80009ac <__aeabi_dcmplt>
 8004218:	b968      	cbnz	r0, 8004236 <ntc_convert_float_to_string+0x32>
		*(string_table++) = '-';
		temperature_int_multiplied100 = (uint16_t) (-temperature_ntc * 100);
	}
	else
	{
		temperature_int_multiplied100 = (uint16_t) (temperature_ntc * 100);
 800421a:	2200      	movs	r2, #0
 800421c:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <ntc_convert_float_to_string+0xd4>)
 800421e:	4630      	mov	r0, r6
 8004220:	4629      	mov	r1, r5
 8004222:	f7fc f951 	bl	80004c8 <__aeabi_dmul>
 8004226:	f7fc fc11 	bl	8000a4c <__aeabi_d2uiz>
 800422a:	b280      	uxth	r0, r0
	}


	if(temperature_int_multiplied100 == 0)
 800422c:	b190      	cbz	r0, 8004254 <ntc_convert_float_to_string+0x50>
	uint16_t i=10000;
 800422e:	f242 7310 	movw	r3, #10000	; 0x2710
	uint8_t digit_counter = 0 ;
 8004232:	2200      	movs	r2, #0
 8004234:	e020      	b.n	8004278 <ntc_convert_float_to_string+0x74>
		*(string_table++) = '-';
 8004236:	1c67      	adds	r7, r4, #1
 8004238:	232d      	movs	r3, #45	; 0x2d
 800423a:	7023      	strb	r3, [r4, #0]
		temperature_int_multiplied100 = (uint16_t) (-temperature_ntc * 100);
 800423c:	2200      	movs	r2, #0
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <ntc_convert_float_to_string+0xd4>)
 8004240:	4630      	mov	r0, r6
 8004242:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8004246:	f7fc f93f 	bl	80004c8 <__aeabi_dmul>
 800424a:	f7fc fbff 	bl	8000a4c <__aeabi_d2uiz>
 800424e:	b280      	uxth	r0, r0
		*(string_table++) = '-';
 8004250:	463c      	mov	r4, r7
 8004252:	e7eb      	b.n	800422c <ntc_convert_float_to_string+0x28>
		{
			*(string_table++) = '0';
 8004254:	2330      	movs	r3, #48	; 0x30
 8004256:	7023      	strb	r3, [r4, #0]
			*(string_table++) = '.';
 8004258:	222e      	movs	r2, #46	; 0x2e
 800425a:	7062      	strb	r2, [r4, #1]
			*(string_table++) = '0';
 800425c:	70a3      	strb	r3, [r4, #2]
			*(string_table++) = '0';
 800425e:	70e3      	strb	r3, [r4, #3]
			*(string_table++) = ' ';
 8004260:	2320      	movs	r3, #32
 8004262:	7123      	strb	r3, [r4, #4]
			*(string_table++) = ' ';
 8004264:	7163      	strb	r3, [r4, #5]
			*(string_table++) = '\0';
 8004266:	2300      	movs	r3, #0
 8004268:	71a3      	strb	r3, [r4, #6]
			return 1;
 800426a:	e032      	b.n	80042d2 <ntc_convert_float_to_string+0xce>
		}
		while((temperature_int_multiplied100 / i) == 0)
		{
			i = i/10;
 800426c:	491b      	ldr	r1, [pc, #108]	; (80042dc <ntc_convert_float_to_string+0xd8>)
 800426e:	fba1 1303 	umull	r1, r3, r1, r3
 8004272:	08db      	lsrs	r3, r3, #3
			digit_counter++;
 8004274:	3201      	adds	r2, #1
 8004276:	b2d2      	uxtb	r2, r2
		while((temperature_int_multiplied100 / i) == 0)
 8004278:	fbb0 f1f3 	udiv	r1, r0, r3
 800427c:	2900      	cmp	r1, #0
 800427e:	d0f5      	beq.n	800426c <ntc_convert_float_to_string+0x68>
		}
		if(digit_counter >= 3) // ułamek zero przed kropką
 8004280:	2a02      	cmp	r2, #2
 8004282:	d90c      	bls.n	800429e <ntc_convert_float_to_string+0x9a>
		{
			*(string_table++) = '0';
 8004284:	4621      	mov	r1, r4
 8004286:	2530      	movs	r5, #48	; 0x30
 8004288:	f801 5b02 	strb.w	r5, [r1], #2
			*(string_table++) = '.';
 800428c:	252e      	movs	r5, #46	; 0x2e
 800428e:	7065      	strb	r5, [r4, #1]
 8004290:	460c      	mov	r4, r1
 8004292:	e004      	b.n	800429e <ntc_convert_float_to_string+0x9a>
		while(i != 0 )
		{
			*(string_table++) = 0x30 + temperature_int_multiplied100/i;
			temperature_int_multiplied100 = (uint16_t)temperature_int_multiplied100 % i;
			if(i == 100) *(string_table++) = '.';
			i = i/10;
 8004294:	4911      	ldr	r1, [pc, #68]	; (80042dc <ntc_convert_float_to_string+0xd8>)
 8004296:	fba1 1303 	umull	r1, r3, r1, r3
 800429a:	08db      	lsrs	r3, r3, #3
 800429c:	462c      	mov	r4, r5
		while(i != 0 )
 800429e:	b193      	cbz	r3, 80042c6 <ntc_convert_float_to_string+0xc2>
			*(string_table++) = 0x30 + temperature_int_multiplied100/i;
 80042a0:	1c65      	adds	r5, r4, #1
 80042a2:	fbb0 f1f3 	udiv	r1, r0, r3
 80042a6:	f101 0630 	add.w	r6, r1, #48	; 0x30
 80042aa:	7026      	strb	r6, [r4, #0]
			temperature_int_multiplied100 = (uint16_t)temperature_int_multiplied100 % i;
 80042ac:	fb03 0111 	mls	r1, r3, r1, r0
 80042b0:	b288      	uxth	r0, r1
			if(i == 100) *(string_table++) = '.';
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d1ee      	bne.n	8004294 <ntc_convert_float_to_string+0x90>
 80042b6:	1ca5      	adds	r5, r4, #2
 80042b8:	212e      	movs	r1, #46	; 0x2e
 80042ba:	7061      	strb	r1, [r4, #1]
 80042bc:	e7ea      	b.n	8004294 <ntc_convert_float_to_string+0x90>
		}
		while(digit_counter--)
		{
			*(string_table++) = ' ';
 80042be:	2220      	movs	r2, #32
 80042c0:	7022      	strb	r2, [r4, #0]
		while(digit_counter--)
 80042c2:	461a      	mov	r2, r3
			*(string_table++) = ' ';
 80042c4:	3401      	adds	r4, #1
		while(digit_counter--)
 80042c6:	1e53      	subs	r3, r2, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d1f7      	bne.n	80042be <ntc_convert_float_to_string+0xba>
		}
		*(string_table++) = '\0';
 80042ce:	2300      	movs	r3, #0
 80042d0:	7023      	strb	r3, [r4, #0]

	return 1;
}
 80042d2:	2001      	movs	r0, #1
 80042d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40590000 	.word	0x40590000
 80042dc:	cccccccd 	.word	0xcccccccd

080042e0 <infinite_heating_callback>:
	button_event_handler = menu_event;
	menu_refresh();
}

void infinite_heating_callback()
{
 80042e0:	b508      	push	{r3, lr}
	button_event_handler = heating_event;
 80042e2:	2003      	movs	r0, #3
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <infinite_heating_callback+0x10>)
 80042e6:	7018      	strb	r0, [r3, #0]
	infinite_heater_handler(ih_event_button_ok);
 80042e8:	f001 f9d8 	bl	800569c <infinite_heater_handler>
}
 80042ec:	bd08      	pop	{r3, pc}
 80042ee:	bf00      	nop
 80042f0:	200004c7 	.word	0x200004c7
 80042f4:	00000000 	.word	0x00000000

080042f8 <heat_event>:
		break;
	}
}

void heat_event(uint8_t button)
{
 80042f8:	b510      	push	{r4, lr}
	switch(button)
 80042fa:	2803      	cmp	r0, #3
 80042fc:	d810      	bhi.n	8004320 <heat_event+0x28>
 80042fe:	e8df f000 	tbb	[pc, r0]
 8004302:	1002      	.short	0x1002
 8004304:	221e      	.short	0x221e
	{
	case UI_BUTTON_UP:
		htemp.temp +=0.1;
 8004306:	4c14      	ldr	r4, [pc, #80]	; (8004358 <heat_event+0x60>)
 8004308:	a311      	add	r3, pc, #68	; (adr r3, 8004350 <heat_event+0x58>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8004312:	f7fb ff23 	bl	800015c <__adddf3>
 8004316:	e9c4 0108 	strd	r0, r1, [r4, #32]
		infinite_heater_handler(ih_event_button_up);
 800431a:	2000      	movs	r0, #0
 800431c:	f001 f9be 	bl	800569c <infinite_heater_handler>
		break;
	case UI_BUTTON_BACK:
		infinite_heater_handler(ih_event_button_exit);
		break;
	}
}
 8004320:	bd10      	pop	{r4, pc}
		htemp.temp -=0.1;
 8004322:	4c0d      	ldr	r4, [pc, #52]	; (8004358 <heat_event+0x60>)
 8004324:	a30a      	add	r3, pc, #40	; (adr r3, 8004350 <heat_event+0x58>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 800432e:	f7fb ff13 	bl	8000158 <__aeabi_dsub>
 8004332:	e9c4 0108 	strd	r0, r1, [r4, #32]
		infinite_heater_handler(ih_event_button_down);
 8004336:	2001      	movs	r0, #1
 8004338:	f001 f9b0 	bl	800569c <infinite_heater_handler>
		break;
 800433c:	e7f0      	b.n	8004320 <heat_event+0x28>
		infinite_heater_handler(ih_event_button_ok);
 800433e:	2003      	movs	r0, #3
 8004340:	f001 f9ac 	bl	800569c <infinite_heater_handler>
		break;
 8004344:	e7ec      	b.n	8004320 <heat_event+0x28>
		infinite_heater_handler(ih_event_button_exit);
 8004346:	2002      	movs	r0, #2
 8004348:	f001 f9a8 	bl	800569c <infinite_heater_handler>
}
 800434c:	e7e8      	b.n	8004320 <heat_event+0x28>
 800434e:	bf00      	nop
 8004350:	9999999a 	.word	0x9999999a
 8004354:	3fb99999 	.word	0x3fb99999
 8004358:	20000780 	.word	0x20000780

0800435c <program_callback>:
{
 800435c:	b508      	push	{r3, lr}
	button_event_handler = p_and_s_event;
 800435e:	4b03      	ldr	r3, [pc, #12]	; (800436c <program_callback+0x10>)
 8004360:	2204      	movs	r2, #4
 8004362:	701a      	strb	r2, [r3, #0]
	program_and_sequance_handler(ps_event_program_start);
 8004364:	2000      	movs	r0, #0
 8004366:	f001 f9c3 	bl	80056f0 <program_and_sequance_handler>
}
 800436a:	bd08      	pop	{r3, pc}
 800436c:	200004c7 	.word	0x200004c7

08004370 <sequance_callback>:
{
 8004370:	b508      	push	{r3, lr}
	button_event_handler = p_and_s_event;
 8004372:	4b03      	ldr	r3, [pc, #12]	; (8004380 <sequance_callback+0x10>)
 8004374:	2204      	movs	r2, #4
 8004376:	701a      	strb	r2, [r3, #0]
	program_and_sequance_handler(ps_event_sequance_start);
 8004378:	2002      	movs	r0, #2
 800437a:	f001 f9b9 	bl	80056f0 <program_and_sequance_handler>
}
 800437e:	bd08      	pop	{r3, pc}
 8004380:	200004c7 	.word	0x200004c7

08004384 <mem1_callback>:
{
 8004384:	b508      	push	{r3, lr}
	button_event_handler = p_and_s_event;
 8004386:	4b03      	ldr	r3, [pc, #12]	; (8004394 <mem1_callback+0x10>)
 8004388:	2204      	movs	r2, #4
 800438a:	701a      	strb	r2, [r3, #0]
	program_and_sequance_handler(ps_event_mem1_start);
 800438c:	2003      	movs	r0, #3
 800438e:	f001 f9af 	bl	80056f0 <program_and_sequance_handler>
}
 8004392:	bd08      	pop	{r3, pc}
 8004394:	200004c7 	.word	0x200004c7

08004398 <mem2_callback>:
{
 8004398:	b508      	push	{r3, lr}
	button_event_handler = p_and_s_event;
 800439a:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <mem2_callback+0x10>)
 800439c:	2204      	movs	r2, #4
 800439e:	701a      	strb	r2, [r3, #0]
	program_and_sequance_handler(ps_event_mem2_start);
 80043a0:	2005      	movs	r0, #5
 80043a2:	f001 f9a5 	bl	80056f0 <program_and_sequance_handler>
}
 80043a6:	bd08      	pop	{r3, pc}
 80043a8:	200004c7 	.word	0x200004c7

080043ac <mem3_callback>:
{
 80043ac:	b508      	push	{r3, lr}
	button_event_handler = p_and_s_event;
 80043ae:	4b03      	ldr	r3, [pc, #12]	; (80043bc <mem3_callback+0x10>)
 80043b0:	2204      	movs	r2, #4
 80043b2:	701a      	strb	r2, [r3, #0]
	program_and_sequance_handler(ps_event_mem3_start);
 80043b4:	2007      	movs	r0, #7
 80043b6:	f001 f99b 	bl	80056f0 <program_and_sequance_handler>
}
 80043ba:	bd08      	pop	{r3, pc}
 80043bc:	200004c7 	.word	0x200004c7

080043c0 <program_and_sequance_event>:

void program_and_sequance_event(uint8_t button)
{
 80043c0:	b508      	push	{r3, lr}
	switch(button)
 80043c2:	2802      	cmp	r0, #2
 80043c4:	d002      	beq.n	80043cc <program_and_sequance_event+0xc>
 80043c6:	2803      	cmp	r0, #3
 80043c8:	d004      	beq.n	80043d4 <program_and_sequance_event+0x14>
			break;
		case UI_BUTTON_BACK:
			program_and_sequance_handler(ps_event_button_exit);
			break;
	}
}
 80043ca:	bd08      	pop	{r3, pc}
			program_and_sequance_handler(ps_event_button_ok);
 80043cc:	2009      	movs	r0, #9
 80043ce:	f001 f98f 	bl	80056f0 <program_and_sequance_handler>
			break;
 80043d2:	e7fa      	b.n	80043ca <program_and_sequance_event+0xa>
			program_and_sequance_handler(ps_event_button_exit);
 80043d4:	200a      	movs	r0, #10
 80043d6:	f001 f98b 	bl	80056f0 <program_and_sequance_handler>
}
 80043da:	e7f6      	b.n	80043ca <program_and_sequance_event+0xa>

080043dc <ui_button_handler>:

// ----------------------------------- poiter to button handler -------------------
void ui_button_handler(uint8_t button)
{
 80043dc:	b508      	push	{r3, lr}
	(*button_event[(uint8_t)button_event_handler])(button);
 80043de:	4b03      	ldr	r3, [pc, #12]	; (80043ec <ui_button_handler+0x10>)
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <ui_button_handler+0x14>)
 80043e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e8:	4798      	blx	r3
}
 80043ea:	bd08      	pop	{r3, pc}
 80043ec:	200004c7 	.word	0x200004c7
 80043f0:	20000008 	.word	0x20000008

080043f4 <convert_time_to_str>:

void convert_time_to_str(uint8_t time_h, uint8_t time_m)
{
 80043f4:	b430      	push	{r4, r5}
	char zero_str = 48;
	time_string[0] = '[';
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <convert_time_to_str+0x4c>)
 80043f8:	235b      	movs	r3, #91	; 0x5b
 80043fa:	7013      	strb	r3, [r2, #0]
	time_string[1] = time_h/10 + zero_str;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <convert_time_to_str+0x50>)
 80043fe:	fba3 5400 	umull	r5, r4, r3, r0
 8004402:	08e4      	lsrs	r4, r4, #3
 8004404:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8004408:	7055      	strb	r5, [r2, #1]
	time_string[2] = time_h%10 + zero_str;
 800440a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800440e:	0065      	lsls	r5, r4, #1
 8004410:	1b40      	subs	r0, r0, r5
 8004412:	3030      	adds	r0, #48	; 0x30
 8004414:	7090      	strb	r0, [r2, #2]
	time_string[3] = ':';
 8004416:	203a      	movs	r0, #58	; 0x3a
 8004418:	70d0      	strb	r0, [r2, #3]
	time_string[4] = time_m/10 + zero_str;
 800441a:	fba3 0301 	umull	r0, r3, r3, r1
 800441e:	08db      	lsrs	r3, r3, #3
 8004420:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004424:	7110      	strb	r0, [r2, #4]
	time_string[5] = time_m%10 + zero_str;
 8004426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800442a:	0058      	lsls	r0, r3, #1
 800442c:	1a09      	subs	r1, r1, r0
 800442e:	3130      	adds	r1, #48	; 0x30
 8004430:	7151      	strb	r1, [r2, #5]
	time_string[6] = ']';
 8004432:	235d      	movs	r3, #93	; 0x5d
 8004434:	7193      	strb	r3, [r2, #6]
	time_string[7] = '\0';
 8004436:	2300      	movs	r3, #0
 8004438:	71d3      	strb	r3, [r2, #7]
}
 800443a:	bc30      	pop	{r4, r5}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2000108c 	.word	0x2000108c
 8004444:	cccccccd 	.word	0xcccccccd

08004448 <convert_temp_to_str>:
void convert_temp_to_str(double temp_double)
{
 8004448:	b508      	push	{r3, lr}
	uint16_t temp_int = (uint16_t)(temp_double*10);
 800444a:	2200      	movs	r2, #0
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <convert_temp_to_str+0x58>)
 800444e:	f7fc f83b 	bl	80004c8 <__aeabi_dmul>
 8004452:	f7fc fafb 	bl	8000a4c <__aeabi_d2uiz>
 8004456:	b280      	uxth	r0, r0
	char zero_str = 48;
	temp_string[0] = '[';
 8004458:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <convert_temp_to_str+0x5c>)
 800445a:	235b      	movs	r3, #91	; 0x5b
 800445c:	7013      	strb	r3, [r2, #0]
	temp_string[1] = temp_int/100 + zero_str;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <convert_temp_to_str+0x60>)
 8004460:	fba3 1300 	umull	r1, r3, r3, r0
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800446a:	7051      	strb	r1, [r2, #1]
	temp_string[2] = (temp_int%100)/10 +zero_str;
 800446c:	2164      	movs	r1, #100	; 0x64
 800446e:	fb01 0013 	mls	r0, r1, r3, r0
 8004472:	b280      	uxth	r0, r0
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <convert_temp_to_str+0x64>)
 8004476:	fba3 1300 	umull	r1, r3, r3, r0
 800447a:	08db      	lsrs	r3, r3, #3
 800447c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004480:	7091      	strb	r1, [r2, #2]
	temp_string[3] = '.';
 8004482:	212e      	movs	r1, #46	; 0x2e
 8004484:	70d1      	strb	r1, [r2, #3]
	temp_string[4] = (temp_int%100)%10+zero_str;
 8004486:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800448a:	0059      	lsls	r1, r3, #1
 800448c:	1a40      	subs	r0, r0, r1
 800448e:	3030      	adds	r0, #48	; 0x30
 8004490:	7110      	strb	r0, [r2, #4]
	temp_string[5] = 0xdf;
 8004492:	23df      	movs	r3, #223	; 0xdf
 8004494:	7153      	strb	r3, [r2, #5]
	temp_string[6] = ']';
 8004496:	235d      	movs	r3, #93	; 0x5d
 8004498:	7193      	strb	r3, [r2, #6]
	temp_string[7] = '\0';
 800449a:	2300      	movs	r3, #0
 800449c:	71d3      	strb	r3, [r2, #7]
}
 800449e:	bd08      	pop	{r3, pc}
 80044a0:	40240000 	.word	0x40240000
 80044a4:	20001094 	.word	0x20001094
 80044a8:	51eb851f 	.word	0x51eb851f
 80044ac:	cccccccd 	.word	0xcccccccd

080044b0 <menu_refresh>:
{
	char *p = "Test";
	return p;
}

void menu_refresh(void) {
 80044b0:	b538      	push	{r3, r4, r5, lr}

	menu_t *temp;
	uint8_t i;
	if (currentPointer->parent) temp = (currentPointer->parent)->child;
 80044b2:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <menu_refresh+0xb8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	b113      	cbz	r3, 80044c0 <menu_refresh+0x10>
 80044ba:	68dc      	ldr	r4, [r3, #12]
	else temp = (menu_t *)&heat;
 80044bc:	2300      	movs	r3, #0
 80044be:	e004      	b.n	80044ca <menu_refresh+0x1a>
 80044c0:	4c2a      	ldr	r4, [pc, #168]	; (800456c <menu_refresh+0xbc>)
 80044c2:	e7fb      	b.n	80044bc <menu_refresh+0xc>
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
		temp = temp->next;
 80044c4:	6864      	ldr	r4, [r4, #4]
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
 80044c6:	3301      	adds	r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	4a29      	ldr	r2, [pc, #164]	; (8004570 <menu_refresh+0xc0>)
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	4929      	ldr	r1, [pc, #164]	; (8004574 <menu_refresh+0xc4>)
 80044d0:	7809      	ldrb	r1, [r1, #0]
 80044d2:	1a52      	subs	r2, r2, r1
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d1f5      	bne.n	80044c4 <menu_refresh+0x14>
	}

	lcd_buf_clear();
 80044d8:	f7ff fd3e 	bl	8003f58 <lcd_buf_clear>
	for (i = 0; i < LCD_ROWS; i++) {
 80044dc:	2500      	movs	r5, #0
 80044de:	e015      	b.n	800450c <menu_refresh+0x5c>

		lcd_buf_go_to(0,i);
		if (temp == currentPointer)
		{
			if(button_event_handler != menu_event)
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <menu_refresh+0xc8>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b303      	cbz	r3, 8004528 <menu_refresh+0x78>
			{
				lcd_char(0x01);
 80044e6:	2001      	movs	r0, #1
 80044e8:	f7ff fd20 	bl	8003f2c <lcd_char>
				lcd_char(62);
			}
		}
		else lcd_char(' ');

		lcd_buf_go_to(2, i);
 80044ec:	4629      	mov	r1, r5
 80044ee:	2002      	movs	r0, #2
 80044f0:	f7ff fd12 	bl	8003f18 <lcd_buf_go_to>
		lcd_buf_write_text(temp->name);
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	f7ff fd45 	bl	8003f84 <lcd_buf_write_text>

		if(temp->set_option == SET_OPTION_TIME)
 80044fa:	7e23      	ldrb	r3, [r4, #24]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d017      	beq.n	8004530 <menu_refresh+0x80>
			lcd_buf_go_to(12, i);
			convert_time_to_str(temp->hours, temp->minutes);
			lcd_buf_write_text(time_string);
			//lcd_buf_write_text(ui_convert_inttime_to_str(temp->hours, temp->minutes));
		}
		else if(temp->set_option == SET_OPTION_TEMP)
 8004500:	2b02      	cmp	r3, #2
 8004502:	d023      	beq.n	800454c <menu_refresh+0x9c>
			lcd_buf_go_to(12, i);
			convert_temp_to_str(temp->temp);
			lcd_buf_write_text(temp_string);
		}

		temp = temp->next;
 8004504:	6864      	ldr	r4, [r4, #4]
		if (!temp) break;
 8004506:	b36c      	cbz	r4, 8004564 <menu_refresh+0xb4>
	for (i = 0; i < LCD_ROWS; i++) {
 8004508:	3501      	adds	r5, #1
 800450a:	b2ed      	uxtb	r5, r5
 800450c:	2d01      	cmp	r5, #1
 800450e:	d829      	bhi.n	8004564 <menu_refresh+0xb4>
		lcd_buf_go_to(0,i);
 8004510:	4629      	mov	r1, r5
 8004512:	2000      	movs	r0, #0
 8004514:	f7ff fd00 	bl	8003f18 <lcd_buf_go_to>
		if (temp == currentPointer)
 8004518:	4b13      	ldr	r3, [pc, #76]	; (8004568 <menu_refresh+0xb8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	42a3      	cmp	r3, r4
 800451e:	d0df      	beq.n	80044e0 <menu_refresh+0x30>
		else lcd_char(' ');
 8004520:	2020      	movs	r0, #32
 8004522:	f7ff fd03 	bl	8003f2c <lcd_char>
 8004526:	e7e1      	b.n	80044ec <menu_refresh+0x3c>
				lcd_char(62);
 8004528:	203e      	movs	r0, #62	; 0x3e
 800452a:	f7ff fcff 	bl	8003f2c <lcd_char>
 800452e:	e7dd      	b.n	80044ec <menu_refresh+0x3c>
			lcd_buf_go_to(12, i);
 8004530:	4629      	mov	r1, r5
 8004532:	200c      	movs	r0, #12
 8004534:	f7ff fcf0 	bl	8003f18 <lcd_buf_go_to>
			convert_time_to_str(temp->hours, temp->minutes);
 8004538:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800453c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8004540:	f7ff ff58 	bl	80043f4 <convert_time_to_str>
			lcd_buf_write_text(time_string);
 8004544:	480d      	ldr	r0, [pc, #52]	; (800457c <menu_refresh+0xcc>)
 8004546:	f7ff fd1d 	bl	8003f84 <lcd_buf_write_text>
 800454a:	e7db      	b.n	8004504 <menu_refresh+0x54>
			lcd_buf_go_to(12, i);
 800454c:	4629      	mov	r1, r5
 800454e:	200c      	movs	r0, #12
 8004550:	f7ff fce2 	bl	8003f18 <lcd_buf_go_to>
			convert_temp_to_str(temp->temp);
 8004554:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8004558:	f7ff ff76 	bl	8004448 <convert_temp_to_str>
			lcd_buf_write_text(temp_string);
 800455c:	4808      	ldr	r0, [pc, #32]	; (8004580 <menu_refresh+0xd0>)
 800455e:	f7ff fd11 	bl	8003f84 <lcd_buf_write_text>
 8004562:	e7cf      	b.n	8004504 <menu_refresh+0x54>

	}
}
 8004564:	bd38      	pop	{r3, r4, r5, pc}
 8004566:	bf00      	nop
 8004568:	2000001c 	.word	0x2000001c
 800456c:	20000c20 	.word	0x20000c20
 8004570:	200004cd 	.word	0x200004cd
 8004574:	200004ca 	.word	0x200004ca
 8004578:	200004c7 	.word	0x200004c7
 800457c:	2000108c 	.word	0x2000108c
 8004580:	20001094 	.word	0x20001094

08004584 <ui_set_time_callback>:
void ui_set_time_callback(){
 8004584:	b508      	push	{r3, lr}
	button_event_handler = set_time_event;
 8004586:	4b03      	ldr	r3, [pc, #12]	; (8004594 <ui_set_time_callback+0x10>)
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 800458c:	f7ff ff90 	bl	80044b0 <menu_refresh>
}
 8004590:	bd08      	pop	{r3, pc}
 8004592:	bf00      	nop
 8004594:	200004c7 	.word	0x200004c7

08004598 <ui_set_temp_callback>:
void ui_set_temp_callback(){
 8004598:	b508      	push	{r3, lr}
	button_event_handler = set_temp_event;
 800459a:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <ui_set_temp_callback+0x10>)
 800459c:	2202      	movs	r2, #2
 800459e:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80045a0:	f7ff ff86 	bl	80044b0 <menu_refresh>
}
 80045a4:	bd08      	pop	{r3, pc}
 80045a6:	bf00      	nop
 80045a8:	200004c7 	.word	0x200004c7

080045ac <ui_time_save_and_exit>:
{
 80045ac:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 80045ae:	4b03      	ldr	r3, [pc, #12]	; (80045bc <ui_time_save_and_exit+0x10>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80045b4:	f7ff ff7c 	bl	80044b0 <menu_refresh>
}
 80045b8:	bd08      	pop	{r3, pc}
 80045ba:	bf00      	nop
 80045bc:	200004c7 	.word	0x200004c7

080045c0 <ui_time_exit_witout_save>:
{
 80045c0:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 80045c2:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <ui_time_exit_witout_save+0x10>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80045c8:	f7ff ff72 	bl	80044b0 <menu_refresh>
}
 80045cc:	bd08      	pop	{r3, pc}
 80045ce:	bf00      	nop
 80045d0:	200004c7 	.word	0x200004c7

080045d4 <ui_temp_save_and_exit>:
{
 80045d4:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 80045d6:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <ui_temp_save_and_exit+0x10>)
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80045dc:	f7ff ff68 	bl	80044b0 <menu_refresh>
}
 80045e0:	bd08      	pop	{r3, pc}
 80045e2:	bf00      	nop
 80045e4:	200004c7 	.word	0x200004c7

080045e8 <ui_temp_exit_witout_save>:
{
 80045e8:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 80045ea:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <ui_temp_exit_witout_save+0x10>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80045f0:	f7ff ff5e 	bl	80044b0 <menu_refresh>
}
 80045f4:	bd08      	pop	{r3, pc}
 80045f6:	bf00      	nop
 80045f8:	200004c7 	.word	0x200004c7

080045fc <ui_time_plus>:
{
 80045fc:	b508      	push	{r3, lr}
	currentPointer->minutes++;
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <ui_time_plus+0x3c>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8004606:	3301      	adds	r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	if(currentPointer->minutes == 60)
 800460e:	2b3c      	cmp	r3, #60	; 0x3c
 8004610:	d002      	beq.n	8004618 <ui_time_plus+0x1c>
	menu_refresh();
 8004612:	f7ff ff4d 	bl	80044b0 <menu_refresh>
}
 8004616:	bd08      	pop	{r3, pc}
		currentPointer->minutes = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		currentPointer->hours++;
 800461e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004622:	3301      	adds	r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		if(currentPointer->hours == 100)
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d1f1      	bne.n	8004612 <ui_time_plus+0x16>
			currentPointer->hours = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8004634:	e7ed      	b.n	8004612 <ui_time_plus+0x16>
 8004636:	bf00      	nop
 8004638:	2000001c 	.word	0x2000001c

0800463c <ui_time_minus>:
{
 800463c:	b508      	push	{r3, lr}
	currentPointer->minutes--;
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <ui_time_minus+0x3c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8004646:	3b01      	subs	r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	if(currentPointer->minutes == 0xff)
 800464e:	2bff      	cmp	r3, #255	; 0xff
 8004650:	d002      	beq.n	8004658 <ui_time_minus+0x1c>
	menu_refresh();
 8004652:	f7ff ff2d 	bl	80044b0 <menu_refresh>
}
 8004656:	bd08      	pop	{r3, pc}
		currentPointer->minutes = 59;
 8004658:	233b      	movs	r3, #59	; 0x3b
 800465a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		currentPointer->hours--;
 800465e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		if(currentPointer->hours == 0xff)
 800466a:	2bff      	cmp	r3, #255	; 0xff
 800466c:	d1f1      	bne.n	8004652 <ui_time_minus+0x16>
			currentPointer->hours = 99;
 800466e:	2363      	movs	r3, #99	; 0x63
 8004670:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8004674:	e7ed      	b.n	8004652 <ui_time_minus+0x16>
 8004676:	bf00      	nop
 8004678:	2000001c 	.word	0x2000001c

0800467c <set_time_button_event>:
{
 800467c:	b508      	push	{r3, lr}
	switch(button)
 800467e:	2803      	cmp	r0, #3
 8004680:	d805      	bhi.n	800468e <set_time_button_event+0x12>
 8004682:	e8df f000 	tbb	[pc, r0]
 8004686:	0502      	.short	0x0502
 8004688:	0b08      	.short	0x0b08
		ui_time_plus();
 800468a:	f7ff ffb7 	bl	80045fc <ui_time_plus>
}
 800468e:	bd08      	pop	{r3, pc}
		ui_time_minus();
 8004690:	f7ff ffd4 	bl	800463c <ui_time_minus>
		break;
 8004694:	e7fb      	b.n	800468e <set_time_button_event+0x12>
		ui_time_save_and_exit();
 8004696:	f7ff ff89 	bl	80045ac <ui_time_save_and_exit>
		break;
 800469a:	e7f8      	b.n	800468e <set_time_button_event+0x12>
		ui_time_exit_witout_save();
 800469c:	f7ff ff90 	bl	80045c0 <ui_time_exit_witout_save>
}
 80046a0:	e7f5      	b.n	800468e <set_time_button_event+0x12>
 80046a2:	0000      	movs	r0, r0
 80046a4:	0000      	movs	r0, r0
	...

080046a8 <ui_temp_plus>:
{
 80046a8:	b510      	push	{r4, lr}
	currentPointer->temp = currentPointer->temp + 0.1;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <ui_temp_plus+0x38>)
 80046ac:	681c      	ldr	r4, [r3, #0]
 80046ae:	a30a      	add	r3, pc, #40	; (adr r3, 80046d8 <ui_temp_plus+0x30>)
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 80046b8:	f7fb fd50 	bl	800015c <__adddf3>
 80046bc:	e9c4 0108 	strd	r0, r1, [r4, #32]
	if(currentPointer->temp > 70)
 80046c0:	2200      	movs	r2, #0
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <ui_temp_plus+0x3c>)
 80046c4:	f7fc f990 	bl	80009e8 <__aeabi_dcmpgt>
 80046c8:	b118      	cbz	r0, 80046d2 <ui_temp_plus+0x2a>
		currentPointer->temp = 70.0;
 80046ca:	2200      	movs	r2, #0
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <ui_temp_plus+0x3c>)
 80046ce:	e9c4 2308 	strd	r2, r3, [r4, #32]
	menu_refresh();
 80046d2:	f7ff feed 	bl	80044b0 <menu_refresh>
}
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	9999999a 	.word	0x9999999a
 80046dc:	3fb99999 	.word	0x3fb99999
 80046e0:	2000001c 	.word	0x2000001c
 80046e4:	40518000 	.word	0x40518000

080046e8 <ui_temp_minus>:
{
 80046e8:	b510      	push	{r4, lr}
	currentPointer->temp = currentPointer->temp - 0.1;
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <ui_temp_minus+0x40>)
 80046ec:	681c      	ldr	r4, [r3, #0]
 80046ee:	a30c      	add	r3, pc, #48	; (adr r3, 8004720 <ui_temp_minus+0x38>)
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 80046f8:	f7fb fd2e 	bl	8000158 <__aeabi_dsub>
 80046fc:	e9c4 0108 	strd	r0, r1, [r4, #32]
	if(currentPointer->temp < 0 )
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	f7fc f952 	bl	80009ac <__aeabi_dcmplt>
 8004708:	b910      	cbnz	r0, 8004710 <ui_temp_minus+0x28>
	menu_refresh();
 800470a:	f7ff fed1 	bl	80044b0 <menu_refresh>
}
 800470e:	bd10      	pop	{r4, pc}
		currentPointer->temp = 0;
 8004710:	2200      	movs	r2, #0
 8004712:	2300      	movs	r3, #0
 8004714:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8004718:	e7f7      	b.n	800470a <ui_temp_minus+0x22>
 800471a:	bf00      	nop
 800471c:	f3af 8000 	nop.w
 8004720:	9999999a 	.word	0x9999999a
 8004724:	3fb99999 	.word	0x3fb99999
 8004728:	2000001c 	.word	0x2000001c

0800472c <set_temp_button_event>:
{
 800472c:	b508      	push	{r3, lr}
	switch(button)
 800472e:	2803      	cmp	r0, #3
 8004730:	d805      	bhi.n	800473e <set_temp_button_event+0x12>
 8004732:	e8df f000 	tbb	[pc, r0]
 8004736:	0502      	.short	0x0502
 8004738:	0b08      	.short	0x0b08
		ui_temp_plus();
 800473a:	f7ff ffb5 	bl	80046a8 <ui_temp_plus>
}
 800473e:	bd08      	pop	{r3, pc}
		ui_temp_minus();
 8004740:	f7ff ffd2 	bl	80046e8 <ui_temp_minus>
		break;
 8004744:	e7fb      	b.n	800473e <set_temp_button_event+0x12>
		ui_temp_save_and_exit();
 8004746:	f7ff ff45 	bl	80045d4 <ui_temp_save_and_exit>
		break;
 800474a:	e7f8      	b.n	800473e <set_temp_button_event+0x12>
		ui_temp_exit_witout_save();
 800474c:	f7ff ff4c 	bl	80045e8 <ui_temp_exit_witout_save>
}
 8004750:	e7f5      	b.n	800473e <set_temp_button_event+0x12>
	...

08004754 <menu_get_index>:
uint8_t menu_get_index(menu_t *q) {

	menu_t *temp;
	uint8_t i = 0;

	if (q->parent) temp = (q->parent)->child;
 8004754:	6903      	ldr	r3, [r0, #16]
 8004756:	b113      	cbz	r3, 800475e <menu_get_index+0xa>
 8004758:	68da      	ldr	r2, [r3, #12]
	else temp = (menu_t *)&heat;
 800475a:	2300      	movs	r3, #0
 800475c:	e004      	b.n	8004768 <menu_get_index+0x14>
 800475e:	4a04      	ldr	r2, [pc, #16]	; (8004770 <menu_get_index+0x1c>)
 8004760:	e7fb      	b.n	800475a <menu_get_index+0x6>

	while (temp != q) {
		temp = temp->next;
 8004762:	6852      	ldr	r2, [r2, #4]
		i++;
 8004764:	3301      	adds	r3, #1
 8004766:	b2db      	uxtb	r3, r3
	while (temp != q) {
 8004768:	4282      	cmp	r2, r0
 800476a:	d1fa      	bne.n	8004762 <menu_get_index+0xe>
	}

	return i;
}
 800476c:	4618      	mov	r0, r3
 800476e:	4770      	bx	lr
 8004770:	20000c20 	.word	0x20000c20

08004774 <ui_menu_next>:

void ui_menu_next(void)
{
 8004774:	b508      	push	{r3, lr}
	if (currentPointer->next)
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <ui_menu_next+0x30>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	b17b      	cbz	r3, 800479e <ui_menu_next+0x2a>
	{
		currentPointer = currentPointer->next;
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <ui_menu_next+0x30>)
 8004780:	6013      	str	r3, [r2, #0]
		menu_index++;
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <ui_menu_next+0x34>)
 8004784:	7813      	ldrb	r3, [r2, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	7013      	strb	r3, [r2, #0]
		if (++lcd_row_pos > LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <ui_menu_next+0x38>)
 800478c:	7813      	ldrb	r3, [r2, #0]
 800478e:	3301      	adds	r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	7013      	strb	r3, [r2, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d902      	bls.n	800479e <ui_menu_next+0x2a>
 8004798:	4613      	mov	r3, r2
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
		//lcd_row_pos = 0;

		//if (currentPointer->parent) currentPointer = (currentPointer->parent)->child;
		//else currentPointer = &new_settings;
	}
	menu_refresh();
 800479e:	f7ff fe87 	bl	80044b0 <menu_refresh>
}
 80047a2:	bd08      	pop	{r3, pc}
 80047a4:	2000001c 	.word	0x2000001c
 80047a8:	200004cd 	.word	0x200004cd
 80047ac:	200004ca 	.word	0x200004ca

080047b0 <ui_menu_prev>:

void ui_menu_prev(void) {
 80047b0:	b508      	push	{r3, lr}


	if(currentPointer->prev)
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <ui_menu_prev+0x44>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6898      	ldr	r0, [r3, #8]
 80047b8:	b168      	cbz	r0, 80047d6 <ui_menu_prev+0x26>
	{
		currentPointer = currentPointer->prev;
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <ui_menu_prev+0x44>)
 80047bc:	6018      	str	r0, [r3, #0]
		if (menu_index)
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <ui_menu_prev+0x48>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b15b      	cbz	r3, 80047dc <ui_menu_prev+0x2c>
		{
			menu_index--;
 80047c4:	3b01      	subs	r3, #1
 80047c6:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <ui_menu_prev+0x48>)
 80047c8:	7013      	strb	r3, [r2, #0]
			if (lcd_row_pos > 0) lcd_row_pos--;
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <ui_menu_prev+0x4c>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b113      	cbz	r3, 80047d6 <ui_menu_prev+0x26>
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <ui_menu_prev+0x4c>)
 80047d4:	7013      	strb	r3, [r2, #0]

			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
			else lcd_row_pos = menu_index;
		}
	}
	menu_refresh();
 80047d6:	f7ff fe6b 	bl	80044b0 <menu_refresh>
}
 80047da:	bd08      	pop	{r3, pc}
			menu_index = menu_get_index(currentPointer);
 80047dc:	f7ff ffba 	bl	8004754 <menu_get_index>
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <ui_menu_prev+0x48>)
 80047e2:	7018      	strb	r0, [r3, #0]
			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 80047e4:	b910      	cbnz	r0, 80047ec <ui_menu_prev+0x3c>
			else lcd_row_pos = menu_index;
 80047e6:	4b05      	ldr	r3, [pc, #20]	; (80047fc <ui_menu_prev+0x4c>)
 80047e8:	7018      	strb	r0, [r3, #0]
 80047ea:	e7f4      	b.n	80047d6 <ui_menu_prev+0x26>
			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 80047ec:	4b03      	ldr	r3, [pc, #12]	; (80047fc <ui_menu_prev+0x4c>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e7f0      	b.n	80047d6 <ui_menu_prev+0x26>
 80047f4:	2000001c 	.word	0x2000001c
 80047f8:	200004cd 	.word	0x200004cd
 80047fc:	200004ca 	.word	0x200004ca

08004800 <menu_get_level>:
uint8_t menu_get_level(menu_t *q) {

	menu_t *temp = q;
	uint8_t i = 0;

	if (!q->parent) return 0;
 8004800:	6903      	ldr	r3, [r0, #16]
 8004802:	b143      	cbz	r3, 8004816 <menu_get_level+0x16>
	uint8_t i = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	e001      	b.n	800480c <menu_get_level+0xc>

	while (temp->parent != NULL) {
		temp = temp->parent;
		i++;
 8004808:	3301      	adds	r3, #1
 800480a:	b2db      	uxtb	r3, r3
	while (temp->parent != NULL) {
 800480c:	6900      	ldr	r0, [r0, #16]
 800480e:	2800      	cmp	r0, #0
 8004810:	d1fa      	bne.n	8004808 <menu_get_level+0x8>
	}

	return i;
}
 8004812:	4618      	mov	r0, r3
 8004814:	4770      	bx	lr
	if (!q->parent) return 0;
 8004816:	2300      	movs	r3, #0
 8004818:	e7fb      	b.n	8004812 <menu_get_level+0x12>
	...

0800481c <ui_menu_enter>:


void ui_menu_enter(void) {
 800481c:	b510      	push	{r4, lr}

	if (currentPointer->menu_function) currentPointer->menu_function();
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <ui_menu_enter+0x48>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	b103      	cbz	r3, 8004828 <ui_menu_enter+0xc>
 8004826:	4798      	blx	r3

	if (currentPointer->child)
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <ui_menu_enter+0x48>)
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	68c4      	ldr	r4, [r0, #12]
 800482e:	b16c      	cbz	r4, 800484c <ui_menu_enter+0x30>
	{

		switch (menu_get_level(currentPointer)) {
 8004830:	f7ff ffe6 	bl	8004800 <menu_get_level>
 8004834:	b158      	cbz	r0, 800484e <ui_menu_enter+0x32>
 8004836:	2801      	cmp	r0, #1
 8004838:	d00e      	beq.n	8004858 <ui_menu_enter+0x3c>
		}

		// switch...case can be replaced by:
		// lcd_row_pos_level[ menu_get_level(currentPointer) ] = lcd_row_pos;

		menu_index = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <ui_menu_enter+0x4c>)
 800483e:	7013      	strb	r3, [r2, #0]
		lcd_row_pos = 0;
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <ui_menu_enter+0x50>)
 8004842:	7013      	strb	r3, [r2, #0]

		currentPointer = currentPointer->child;
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <ui_menu_enter+0x48>)
 8004846:	601c      	str	r4, [r3, #0]

		menu_refresh();
 8004848:	f7ff fe32 	bl	80044b0 <menu_refresh>
	}
}
 800484c:	bd10      	pop	{r4, pc}
				lcd_row_pos_level_1 = lcd_row_pos;
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <ui_menu_enter+0x50>)
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <ui_menu_enter+0x54>)
 8004854:	701a      	strb	r2, [r3, #0]
				break;
 8004856:	e7f0      	b.n	800483a <ui_menu_enter+0x1e>
				lcd_row_pos_level_2 = lcd_row_pos;
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <ui_menu_enter+0x50>)
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <ui_menu_enter+0x58>)
 800485e:	701a      	strb	r2, [r3, #0]
				break;
 8004860:	e7eb      	b.n	800483a <ui_menu_enter+0x1e>
 8004862:	bf00      	nop
 8004864:	2000001c 	.word	0x2000001c
 8004868:	200004cd 	.word	0x200004cd
 800486c:	200004ca 	.word	0x200004ca
 8004870:	200004cb 	.word	0x200004cb
 8004874:	200004cc 	.word	0x200004cc

08004878 <ui_menu_back>:



void ui_menu_back(void) {
 8004878:	b510      	push	{r4, lr}

	if (currentPointer->parent) {
 800487a:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <ui_menu_back+0x40>)
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	6904      	ldr	r4, [r0, #16]
 8004880:	b174      	cbz	r4, 80048a0 <ui_menu_back+0x28>

		switch (menu_get_level(currentPointer)) {
 8004882:	f7ff ffbd 	bl	8004800 <menu_get_level>
 8004886:	2801      	cmp	r0, #1
 8004888:	d00b      	beq.n	80048a2 <ui_menu_back+0x2a>
 800488a:	2802      	cmp	r0, #2
 800488c:	d00e      	beq.n	80048ac <ui_menu_back+0x34>
			case 2:
				lcd_row_pos = lcd_row_pos_level_2;
				break;
			}

		currentPointer = currentPointer->parent;
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <ui_menu_back+0x40>)
 8004890:	601c      	str	r4, [r3, #0]
		menu_index = menu_get_index(currentPointer);
 8004892:	4620      	mov	r0, r4
 8004894:	f7ff ff5e 	bl	8004754 <menu_get_index>
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <ui_menu_back+0x44>)
 800489a:	7018      	strb	r0, [r3, #0]

		menu_refresh();
 800489c:	f7ff fe08 	bl	80044b0 <menu_refresh>

	}
}
 80048a0:	bd10      	pop	{r4, pc}
				lcd_row_pos = lcd_row_pos_level_1;
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <ui_menu_back+0x48>)
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <ui_menu_back+0x4c>)
 80048a8:	701a      	strb	r2, [r3, #0]
				break;
 80048aa:	e7f0      	b.n	800488e <ui_menu_back+0x16>
				lcd_row_pos = lcd_row_pos_level_2;
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <ui_menu_back+0x50>)
 80048ae:	781a      	ldrb	r2, [r3, #0]
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <ui_menu_back+0x4c>)
 80048b2:	701a      	strb	r2, [r3, #0]
				break;
 80048b4:	e7eb      	b.n	800488e <ui_menu_back+0x16>
 80048b6:	bf00      	nop
 80048b8:	2000001c 	.word	0x2000001c
 80048bc:	200004cd 	.word	0x200004cd
 80048c0:	200004cb 	.word	0x200004cb
 80048c4:	200004ca 	.word	0x200004ca
 80048c8:	200004cc 	.word	0x200004cc

080048cc <menu_button_event>:
{
 80048cc:	b508      	push	{r3, lr}
	switch(button)
 80048ce:	2803      	cmp	r0, #3
 80048d0:	d805      	bhi.n	80048de <menu_button_event+0x12>
 80048d2:	e8df f000 	tbb	[pc, r0]
 80048d6:	0502      	.short	0x0502
 80048d8:	0b08      	.short	0x0b08
		ui_menu_prev();
 80048da:	f7ff ff69 	bl	80047b0 <ui_menu_prev>
}
 80048de:	bd08      	pop	{r3, pc}
		ui_menu_next();
 80048e0:	f7ff ff48 	bl	8004774 <ui_menu_next>
		break;
 80048e4:	e7fb      	b.n	80048de <menu_button_event+0x12>
		ui_menu_enter();
 80048e6:	f7ff ff99 	bl	800481c <ui_menu_enter>
		break;
 80048ea:	e7f8      	b.n	80048de <menu_button_event+0x12>
		ui_menu_back();
 80048ec:	f7ff ffc4 	bl	8004878 <ui_menu_back>
}
 80048f0:	e7f5      	b.n	80048de <menu_button_event+0x12>
	...

080048f4 <iu_button_hold_handler>:
/* ui_handler_flag its busy flag its prevent
 * entering to ui_handler() few times with this same ms_counter value */


uint8_t iu_button_hold_handler()
{
 80048f4:	b508      	push	{r3, lr}
	static uint8_t button_hold_on_timer_divider;


	if((GPIOB->IDR & GPIO_PIN_12) == 0)
 80048f6:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <iu_button_hold_handler+0xf8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80048fe:	d148      	bne.n	8004992 <iu_button_hold_handler+0x9e>
	{
		if(ms_counter % 999 == 0)
 8004900:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <iu_button_hold_handler+0xfc>)
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29a      	uxth	r2, r3
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <iu_button_hold_handler+0x100>)
 8004908:	fba3 1302 	umull	r1, r3, r3, r2
 800490c:	1ad1      	subs	r1, r2, r3
 800490e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004912:	0a5b      	lsrs	r3, r3, #9
 8004914:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004918:	fb01 2313 	mls	r3, r1, r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	b91b      	cbnz	r3, 8004928 <iu_button_hold_handler+0x34>
		{
			button_hold_on_counter++;
 8004920:	4a35      	ldr	r2, [pc, #212]	; (80049f8 <iu_button_hold_handler+0x104>)
 8004922:	7813      	ldrb	r3, [r2, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	7013      	strb	r3, [r2, #0]
	else
	{
		button_hold_on_counter = 0;
		return 0;
	}
	if(button_hold_on_counter < 3) return 1 ;
 8004928:	4b33      	ldr	r3, [pc, #204]	; (80049f8 <iu_button_hold_handler+0x104>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d959      	bls.n	80049e4 <iu_button_hold_handler+0xf0>
	else
	{
		button_hold_on_timer_divider = 2;
 8004930:	4a32      	ldr	r2, [pc, #200]	; (80049fc <iu_button_hold_handler+0x108>)
 8004932:	2102      	movs	r1, #2
 8004934:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 4) button_hold_on_timer_divider = 3;
 8004936:	2b04      	cmp	r3, #4
 8004938:	d901      	bls.n	800493e <iu_button_hold_handler+0x4a>
 800493a:	2103      	movs	r1, #3
 800493c:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 6) button_hold_on_timer_divider = 8;
 800493e:	2b06      	cmp	r3, #6
 8004940:	d902      	bls.n	8004948 <iu_button_hold_handler+0x54>
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <iu_button_hold_handler+0x108>)
 8004944:	2108      	movs	r1, #8
 8004946:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 10) button_hold_on_timer_divider = 14;
 8004948:	2b0a      	cmp	r3, #10
 800494a:	d902      	bls.n	8004952 <iu_button_hold_handler+0x5e>
 800494c:	4a2b      	ldr	r2, [pc, #172]	; (80049fc <iu_button_hold_handler+0x108>)
 800494e:	210e      	movs	r1, #14
 8004950:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 15) button_hold_on_timer_divider = 25;
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d902      	bls.n	800495c <iu_button_hold_handler+0x68>
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <iu_button_hold_handler+0x108>)
 8004958:	2219      	movs	r2, #25
 800495a:	701a      	strb	r2, [r3, #0]
		if(ms_counter %(1000/button_hold_on_timer_divider) == 0)
 800495c:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <iu_button_hold_handler+0xfc>)
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	b292      	uxth	r2, r2
 8004962:	4b26      	ldr	r3, [pc, #152]	; (80049fc <iu_button_hold_handler+0x108>)
 8004964:	7819      	ldrb	r1, [r3, #0]
 8004966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800496a:	fb93 f3f1 	sdiv	r3, r3, r1
 800496e:	fb92 f1f3 	sdiv	r1, r2, r3
 8004972:	fb03 2311 	mls	r3, r3, r1, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d136      	bne.n	80049e8 <iu_button_hold_handler+0xf4>
		{
			if((GPIOB->IDR & GPIO_PIN_12) == 0)
 800497a:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <iu_button_hold_handler+0xf8>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004982:	d025      	beq.n	80049d0 <iu_button_hold_handler+0xdc>
			{
				ui_button_handler(UI_BUTTON_UP);
				return 2;
			}
			else if((GPIOC->IDR & GPIO_PIN_13) == 0)
 8004984:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <iu_button_hold_handler+0x10c>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800498c:	d025      	beq.n	80049da <iu_button_hold_handler+0xe6>
				ui_button_handler(UI_BUTTON_DOWN);
				return 3;
			}
		}
	}
	return 4;
 800498e:	2004      	movs	r0, #4
 8004990:	e029      	b.n	80049e6 <iu_button_hold_handler+0xf2>
	else if((GPIOC->IDR & GPIO_PIN_13) == 0)
 8004992:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <iu_button_hold_handler+0x10c>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800499a:	d115      	bne.n	80049c8 <iu_button_hold_handler+0xd4>
		if(ms_counter % 999 == 0)
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <iu_button_hold_handler+0xfc>)
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <iu_button_hold_handler+0x100>)
 80049a4:	fba3 1302 	umull	r1, r3, r3, r2
 80049a8:	1ad1      	subs	r1, r2, r3
 80049aa:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80049ae:	0a5b      	lsrs	r3, r3, #9
 80049b0:	f240 31e7 	movw	r1, #999	; 0x3e7
 80049b4:	fb01 2313 	mls	r3, r1, r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1b4      	bne.n	8004928 <iu_button_hold_handler+0x34>
			button_hold_on_counter++;
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <iu_button_hold_handler+0x104>)
 80049c0:	7813      	ldrb	r3, [r2, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	7013      	strb	r3, [r2, #0]
 80049c6:	e7af      	b.n	8004928 <iu_button_hold_handler+0x34>
		button_hold_on_counter = 0;
 80049c8:	2000      	movs	r0, #0
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <iu_button_hold_handler+0x104>)
 80049cc:	7018      	strb	r0, [r3, #0]
		return 0;
 80049ce:	e00a      	b.n	80049e6 <iu_button_hold_handler+0xf2>
				ui_button_handler(UI_BUTTON_UP);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7ff fd03 	bl	80043dc <ui_button_handler>
				return 2;
 80049d6:	2002      	movs	r0, #2
 80049d8:	e005      	b.n	80049e6 <iu_button_hold_handler+0xf2>
				ui_button_handler(UI_BUTTON_DOWN);
 80049da:	2001      	movs	r0, #1
 80049dc:	f7ff fcfe 	bl	80043dc <ui_button_handler>
				return 3;
 80049e0:	2003      	movs	r0, #3
 80049e2:	e000      	b.n	80049e6 <iu_button_hold_handler+0xf2>
	if(button_hold_on_counter < 3) return 1 ;
 80049e4:	2001      	movs	r0, #1
}
 80049e6:	bd08      	pop	{r3, pc}
	return 4;
 80049e8:	2004      	movs	r0, #4
 80049ea:	e7fc      	b.n	80049e6 <iu_button_hold_handler+0xf2>
 80049ec:	40010c00 	.word	0x40010c00
 80049f0:	20000748 	.word	0x20000748
 80049f4:	06680a41 	.word	0x06680a41
 80049f8:	200004c8 	.word	0x200004c8
 80049fc:	200004c9 	.word	0x200004c9
 8004a00:	40011000 	.word	0x40011000

08004a04 <build_menu>:
}

void build_menu(menu_t *currentNode, char *name, struct menu_struct *next, struct menu_struct *prev, struct menu_struct *child,
				struct menu_struct *parent, void (*f)(void), uint8_t set_option, double temp, uint8_t hours, uint8_t minutes )
{
	currentNode->name = name;
 8004a04:	6001      	str	r1, [r0, #0]
	currentNode->next = next;
 8004a06:	6042      	str	r2, [r0, #4]
	currentNode->prev = prev;
 8004a08:	6083      	str	r3, [r0, #8]
	currentNode->child = child;
 8004a0a:	9b00      	ldr	r3, [sp, #0]
 8004a0c:	60c3      	str	r3, [r0, #12]
	currentNode->parent = parent;
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	6103      	str	r3, [r0, #16]
	currentNode->menu_function = f;
 8004a12:	9b02      	ldr	r3, [sp, #8]
 8004a14:	6143      	str	r3, [r0, #20]
	currentNode->set_option = set_option;
 8004a16:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004a1a:	7603      	strb	r3, [r0, #24]
	currentNode->temp = temp;
 8004a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a20:	e9c0 2308 	strd	r2, r3, [r0, #32]
	currentNode->hours = hours;
 8004a24:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004a28:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	currentNode->minutes = minutes;
 8004a2c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004a30:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

}
 8004a34:	4770      	bx	lr
	...

08004a38 <ui_populate_with_rom_data>:


void ui_populate_with_rom_data(void)
{
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	b089      	sub	sp, #36	; 0x24
	build_menu(&heat,"HEATING",				&prog,	NULL,	&htemp,		NULL,	NULL,0,25.0f,0,0);
 8004a3e:	f8df 8328 	ldr.w	r8, [pc, #808]	; 8004d68 <ui_populate_with_rom_data+0x330>
 8004a42:	f8df a328 	ldr.w	sl, [pc, #808]	; 8004d6c <ui_populate_with_rom_data+0x334>
 8004a46:	2400      	movs	r4, #0
 8004a48:	9407      	str	r4, [sp, #28]
 8004a4a:	9406      	str	r4, [sp, #24]
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	4fa2      	ldr	r7, [pc, #648]	; (8004cd8 <ui_populate_with_rom_data+0x2a0>)
 8004a50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a54:	9403      	str	r4, [sp, #12]
 8004a56:	9402      	str	r4, [sp, #8]
 8004a58:	9401      	str	r4, [sp, #4]
 8004a5a:	4da0      	ldr	r5, [pc, #640]	; (8004cdc <ui_populate_with_rom_data+0x2a4>)
 8004a5c:	9500      	str	r5, [sp, #0]
 8004a5e:	4623      	mov	r3, r4
 8004a60:	4642      	mov	r2, r8
 8004a62:	499f      	ldr	r1, [pc, #636]	; (8004ce0 <ui_populate_with_rom_data+0x2a8>)
 8004a64:	4650      	mov	r0, sl
 8004a66:	f7ff ffcd 	bl	8004a04 <build_menu>
		build_menu(&htemp,"SET TEMP",			&hstart,NULL,	NULL,	&heat,	ui_set_temp_callback,SET_OPTION_TEMP,25.0f,0,0);
 8004a6a:	9407      	str	r4, [sp, #28]
 8004a6c:	9406      	str	r4, [sp, #24]
 8004a6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a72:	f04f 0b02 	mov.w	fp, #2
 8004a76:	f8cd b00c 	str.w	fp, [sp, #12]
 8004a7a:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8004d70 <ui_populate_with_rom_data+0x338>
 8004a7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a82:	f8cd a004 	str.w	sl, [sp, #4]
 8004a86:	9400      	str	r4, [sp, #0]
 8004a88:	4623      	mov	r3, r4
 8004a8a:	4a96      	ldr	r2, [pc, #600]	; (8004ce4 <ui_populate_with_rom_data+0x2ac>)
 8004a8c:	4996      	ldr	r1, [pc, #600]	; (8004ce8 <ui_populate_with_rom_data+0x2b0>)
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f7ff ffb8 	bl	8004a04 <build_menu>
		build_menu(&hstart,"START HEAT",		NULL,	&htemp,	NULL,	&heat,	&infinite_heating_callback,0,25.0f,0,0);
 8004a94:	9407      	str	r4, [sp, #28]
 8004a96:	9406      	str	r4, [sp, #24]
 8004a98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a9c:	9403      	str	r4, [sp, #12]
 8004a9e:	4b93      	ldr	r3, [pc, #588]	; (8004cec <ui_populate_with_rom_data+0x2b4>)
 8004aa0:	9302      	str	r3, [sp, #8]
 8004aa2:	f8cd a004 	str.w	sl, [sp, #4]
 8004aa6:	9400      	str	r4, [sp, #0]
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	4622      	mov	r2, r4
 8004aac:	4990      	ldr	r1, [pc, #576]	; (8004cf0 <ui_populate_with_rom_data+0x2b8>)
 8004aae:	488d      	ldr	r0, [pc, #564]	; (8004ce4 <ui_populate_with_rom_data+0x2ac>)
 8004ab0:	f7ff ffa8 	bl	8004a04 <build_menu>
	build_menu(&prog,"SET PROGRAM",    &seq,	&heat,	&progTime,	NULL,	NULL,0,25.0f,0,0);
 8004ab4:	4d8f      	ldr	r5, [pc, #572]	; (8004cf4 <ui_populate_with_rom_data+0x2bc>)
 8004ab6:	9407      	str	r4, [sp, #28]
 8004ab8:	9406      	str	r4, [sp, #24]
 8004aba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004abe:	9403      	str	r4, [sp, #12]
 8004ac0:	9402      	str	r4, [sp, #8]
 8004ac2:	9401      	str	r4, [sp, #4]
 8004ac4:	4b8c      	ldr	r3, [pc, #560]	; (8004cf8 <ui_populate_with_rom_data+0x2c0>)
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	4653      	mov	r3, sl
 8004aca:	462a      	mov	r2, r5
 8004acc:	498b      	ldr	r1, [pc, #556]	; (8004cfc <ui_populate_with_rom_data+0x2c4>)
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7ff ff98 	bl	8004a04 <build_menu>
		build_menu(&progTime,"SET TIME",			&progTemp,	NULL,			NULL,	&prog,	ui_set_time_callback,SET_OPTION_TIME,25.0f,0,0);
 8004ad4:	9407      	str	r4, [sp, #28]
 8004ad6:	9406      	str	r4, [sp, #24]
 8004ad8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004adc:	2301      	movs	r3, #1
 8004ade:	9303      	str	r3, [sp, #12]
 8004ae0:	f8df a290 	ldr.w	sl, [pc, #656]	; 8004d74 <ui_populate_with_rom_data+0x33c>
 8004ae4:	f8cd a008 	str.w	sl, [sp, #8]
 8004ae8:	f8cd 8004 	str.w	r8, [sp, #4]
 8004aec:	9400      	str	r4, [sp, #0]
 8004aee:	4623      	mov	r3, r4
 8004af0:	4a83      	ldr	r2, [pc, #524]	; (8004d00 <ui_populate_with_rom_data+0x2c8>)
 8004af2:	4984      	ldr	r1, [pc, #528]	; (8004d04 <ui_populate_with_rom_data+0x2cc>)
 8004af4:	4880      	ldr	r0, [pc, #512]	; (8004cf8 <ui_populate_with_rom_data+0x2c0>)
 8004af6:	f7ff ff85 	bl	8004a04 <build_menu>
		build_menu(&progTemp,"SET TEMP",			&progStart,	&progTime,NULL,	&prog,	ui_set_temp_callback,SET_OPTION_TEMP,25.0f,0,0);
 8004afa:	9407      	str	r4, [sp, #28]
 8004afc:	9406      	str	r4, [sp, #24]
 8004afe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b02:	f8cd b00c 	str.w	fp, [sp, #12]
 8004b06:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b0a:	f8cd 8004 	str.w	r8, [sp, #4]
 8004b0e:	9400      	str	r4, [sp, #0]
 8004b10:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <ui_populate_with_rom_data+0x2c0>)
 8004b12:	4a7d      	ldr	r2, [pc, #500]	; (8004d08 <ui_populate_with_rom_data+0x2d0>)
 8004b14:	4974      	ldr	r1, [pc, #464]	; (8004ce8 <ui_populate_with_rom_data+0x2b0>)
 8004b16:	487a      	ldr	r0, [pc, #488]	; (8004d00 <ui_populate_with_rom_data+0x2c8>)
 8004b18:	f7ff ff74 	bl	8004a04 <build_menu>
		build_menu(&progStart,"START PROGRAM",NULL,				&progTemp,NULL,	&prog,	&program_callback,0,25.0f,0,0);
 8004b1c:	9407      	str	r4, [sp, #28]
 8004b1e:	9406      	str	r4, [sp, #24]
 8004b20:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b24:	9403      	str	r4, [sp, #12]
 8004b26:	4b79      	ldr	r3, [pc, #484]	; (8004d0c <ui_populate_with_rom_data+0x2d4>)
 8004b28:	9302      	str	r3, [sp, #8]
 8004b2a:	f8cd 8004 	str.w	r8, [sp, #4]
 8004b2e:	9400      	str	r4, [sp, #0]
 8004b30:	4b73      	ldr	r3, [pc, #460]	; (8004d00 <ui_populate_with_rom_data+0x2c8>)
 8004b32:	4622      	mov	r2, r4
 8004b34:	4976      	ldr	r1, [pc, #472]	; (8004d10 <ui_populate_with_rom_data+0x2d8>)
 8004b36:	4874      	ldr	r0, [pc, #464]	; (8004d08 <ui_populate_with_rom_data+0x2d0>)
 8004b38:	f7ff ff64 	bl	8004a04 <build_menu>
	build_menu(&seq,"SET SEQUANCE",			&mem,&prog,&seqTime1,NULL,NULL,0,25.0f,0,0);
 8004b3c:	9407      	str	r4, [sp, #28]
 8004b3e:	9406      	str	r4, [sp, #24]
 8004b40:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b44:	9403      	str	r4, [sp, #12]
 8004b46:	9402      	str	r4, [sp, #8]
 8004b48:	9401      	str	r4, [sp, #4]
 8004b4a:	4b72      	ldr	r3, [pc, #456]	; (8004d14 <ui_populate_with_rom_data+0x2dc>)
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4643      	mov	r3, r8
 8004b50:	4a71      	ldr	r2, [pc, #452]	; (8004d18 <ui_populate_with_rom_data+0x2e0>)
 8004b52:	4972      	ldr	r1, [pc, #456]	; (8004d1c <ui_populate_with_rom_data+0x2e4>)
 8004b54:	4628      	mov	r0, r5
 8004b56:	f7ff ff55 	bl	8004a04 <build_menu>
		build_menu(&seqTime1,"SET TIME1",&seqTemp1,NULL,		NULL,&seq,ui_set_time_callback,SET_OPTION_TIME,25.0f,0,0);
 8004b5a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8004d78 <ui_populate_with_rom_data+0x340>
 8004b5e:	9407      	str	r4, [sp, #28]
 8004b60:	9406      	str	r4, [sp, #24]
 8004b62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b66:	2301      	movs	r3, #1
 8004b68:	9303      	str	r3, [sp, #12]
 8004b6a:	f8cd a008 	str.w	sl, [sp, #8]
 8004b6e:	9501      	str	r5, [sp, #4]
 8004b70:	9400      	str	r4, [sp, #0]
 8004b72:	4623      	mov	r3, r4
 8004b74:	4642      	mov	r2, r8
 8004b76:	496a      	ldr	r1, [pc, #424]	; (8004d20 <ui_populate_with_rom_data+0x2e8>)
 8004b78:	4866      	ldr	r0, [pc, #408]	; (8004d14 <ui_populate_with_rom_data+0x2dc>)
 8004b7a:	f7ff ff43 	bl	8004a04 <build_menu>
		build_menu(&seqTemp1,"SET TEMP1",&seqTime2,&seqTime1,	NULL,&seq,ui_set_temp_callback,SET_OPTION_TEMP,25.0f,0,0);
 8004b7e:	9407      	str	r4, [sp, #28]
 8004b80:	9406      	str	r4, [sp, #24]
 8004b82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b86:	f8cd b00c 	str.w	fp, [sp, #12]
 8004b8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b8e:	9501      	str	r5, [sp, #4]
 8004b90:	9400      	str	r4, [sp, #0]
 8004b92:	4b60      	ldr	r3, [pc, #384]	; (8004d14 <ui_populate_with_rom_data+0x2dc>)
 8004b94:	4a63      	ldr	r2, [pc, #396]	; (8004d24 <ui_populate_with_rom_data+0x2ec>)
 8004b96:	4964      	ldr	r1, [pc, #400]	; (8004d28 <ui_populate_with_rom_data+0x2f0>)
 8004b98:	4640      	mov	r0, r8
 8004b9a:	f7ff ff33 	bl	8004a04 <build_menu>
		build_menu(&seqTime2,"SET TIME2",&seqTemp2,&seqTemp1,	NULL,&seq,ui_set_time_callback,SET_OPTION_TIME,25.0f,0,0);
 8004b9e:	9407      	str	r4, [sp, #28]
 8004ba0:	9406      	str	r4, [sp, #24]
 8004ba2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	9303      	str	r3, [sp, #12]
 8004baa:	f8cd a008 	str.w	sl, [sp, #8]
 8004bae:	9501      	str	r5, [sp, #4]
 8004bb0:	9400      	str	r4, [sp, #0]
 8004bb2:	4643      	mov	r3, r8
 8004bb4:	4a5d      	ldr	r2, [pc, #372]	; (8004d2c <ui_populate_with_rom_data+0x2f4>)
 8004bb6:	495e      	ldr	r1, [pc, #376]	; (8004d30 <ui_populate_with_rom_data+0x2f8>)
 8004bb8:	485a      	ldr	r0, [pc, #360]	; (8004d24 <ui_populate_with_rom_data+0x2ec>)
 8004bba:	f7ff ff23 	bl	8004a04 <build_menu>
		build_menu(&seqTemp2,"SET TEMP2",&seqTime3,&seqTime2,	NULL,&seq,ui_set_temp_callback,SET_OPTION_TEMP,25.0f,0,0);
 8004bbe:	9407      	str	r4, [sp, #28]
 8004bc0:	9406      	str	r4, [sp, #24]
 8004bc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8004bca:	f8cd 9008 	str.w	r9, [sp, #8]
 8004bce:	9501      	str	r5, [sp, #4]
 8004bd0:	9400      	str	r4, [sp, #0]
 8004bd2:	4b54      	ldr	r3, [pc, #336]	; (8004d24 <ui_populate_with_rom_data+0x2ec>)
 8004bd4:	4a57      	ldr	r2, [pc, #348]	; (8004d34 <ui_populate_with_rom_data+0x2fc>)
 8004bd6:	4958      	ldr	r1, [pc, #352]	; (8004d38 <ui_populate_with_rom_data+0x300>)
 8004bd8:	4854      	ldr	r0, [pc, #336]	; (8004d2c <ui_populate_with_rom_data+0x2f4>)
 8004bda:	f7ff ff13 	bl	8004a04 <build_menu>
		build_menu(&seqTime3,"SET TIME3",&seqTemp3,&seqTemp2,	NULL,&seq,ui_set_time_callback,SET_OPTION_TIME,25.0f,0,0);
 8004bde:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004d7c <ui_populate_with_rom_data+0x344>
 8004be2:	9407      	str	r4, [sp, #28]
 8004be4:	9406      	str	r4, [sp, #24]
 8004be6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bea:	2301      	movs	r3, #1
 8004bec:	9303      	str	r3, [sp, #12]
 8004bee:	f8cd a008 	str.w	sl, [sp, #8]
 8004bf2:	9501      	str	r5, [sp, #4]
 8004bf4:	9400      	str	r4, [sp, #0]
 8004bf6:	4b4d      	ldr	r3, [pc, #308]	; (8004d2c <ui_populate_with_rom_data+0x2f4>)
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	4950      	ldr	r1, [pc, #320]	; (8004d3c <ui_populate_with_rom_data+0x304>)
 8004bfc:	484d      	ldr	r0, [pc, #308]	; (8004d34 <ui_populate_with_rom_data+0x2fc>)
 8004bfe:	f7ff ff01 	bl	8004a04 <build_menu>
		build_menu(&seqTemp3,"SET TEMP3",&seqStart,&seqTime3,	NULL,&seq,ui_set_temp_callback,SET_OPTION_TEMP,25.0f,0,0);
 8004c02:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8004d80 <ui_populate_with_rom_data+0x348>
 8004c06:	9407      	str	r4, [sp, #28]
 8004c08:	9406      	str	r4, [sp, #24]
 8004c0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c0e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004c12:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c16:	9501      	str	r5, [sp, #4]
 8004c18:	9400      	str	r4, [sp, #0]
 8004c1a:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <ui_populate_with_rom_data+0x2fc>)
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4948      	ldr	r1, [pc, #288]	; (8004d40 <ui_populate_with_rom_data+0x308>)
 8004c20:	4640      	mov	r0, r8
 8004c22:	f7ff feef 	bl	8004a04 <build_menu>
		build_menu(&seqStart,"START SEQUANCE",NULL,&seqTemp3,	NULL,&seq,&sequance_callback,0,25.0f,0,0);
 8004c26:	9407      	str	r4, [sp, #28]
 8004c28:	9406      	str	r4, [sp, #24]
 8004c2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c2e:	9403      	str	r4, [sp, #12]
 8004c30:	4b44      	ldr	r3, [pc, #272]	; (8004d44 <ui_populate_with_rom_data+0x30c>)
 8004c32:	9302      	str	r3, [sp, #8]
 8004c34:	9501      	str	r5, [sp, #4]
 8004c36:	9400      	str	r4, [sp, #0]
 8004c38:	4643      	mov	r3, r8
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	4942      	ldr	r1, [pc, #264]	; (8004d48 <ui_populate_with_rom_data+0x310>)
 8004c3e:	4650      	mov	r0, sl
 8004c40:	f7ff fee0 	bl	8004a04 <build_menu>
	build_menu(&mem,"PROGRAM MEM",	&params,&seq,&mem1,NULL,	NULL,0,25.0f,0,0);
 8004c44:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8004d84 <ui_populate_with_rom_data+0x34c>
 8004c48:	9407      	str	r4, [sp, #28]
 8004c4a:	9406      	str	r4, [sp, #24]
 8004c4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c50:	9403      	str	r4, [sp, #12]
 8004c52:	9402      	str	r4, [sp, #8]
 8004c54:	9401      	str	r4, [sp, #4]
 8004c56:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004d88 <ui_populate_with_rom_data+0x350>
 8004c5a:	f8cd 9000 	str.w	r9, [sp]
 8004c5e:	462b      	mov	r3, r5
 8004c60:	4642      	mov	r2, r8
 8004c62:	493a      	ldr	r1, [pc, #232]	; (8004d4c <ui_populate_with_rom_data+0x314>)
 8004c64:	482c      	ldr	r0, [pc, #176]	; (8004d18 <ui_populate_with_rom_data+0x2e0>)
 8004c66:	f7ff fecd 	bl	8004a04 <build_menu>
		build_menu(&mem1,"PROGRAM MEM1",&mem2,NULL,&mem1Time,	&mem,NULL,0,25.0f,0,0);
 8004c6a:	4d39      	ldr	r5, [pc, #228]	; (8004d50 <ui_populate_with_rom_data+0x318>)
 8004c6c:	9407      	str	r4, [sp, #28]
 8004c6e:	9406      	str	r4, [sp, #24]
 8004c70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c74:	9403      	str	r4, [sp, #12]
 8004c76:	9402      	str	r4, [sp, #8]
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <ui_populate_with_rom_data+0x2e0>)
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8004d8c <ui_populate_with_rom_data+0x354>
 8004c80:	f8cd a000 	str.w	sl, [sp]
 8004c84:	4623      	mov	r3, r4
 8004c86:	462a      	mov	r2, r5
 8004c88:	4932      	ldr	r1, [pc, #200]	; (8004d54 <ui_populate_with_rom_data+0x31c>)
 8004c8a:	4648      	mov	r0, r9
 8004c8c:	f7ff feba 	bl	8004a04 <build_menu>
			build_menu(&mem1Time,"TIME MEM1",		&mem1Temp, NULL,		 NULL,&mem1,NULL,SET_OPTION_TIME,25.0f,0,0);
 8004c90:	9407      	str	r4, [sp, #28]
 8004c92:	9406      	str	r4, [sp, #24]
 8004c94:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	9203      	str	r2, [sp, #12]
 8004c9c:	9402      	str	r4, [sp, #8]
 8004c9e:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ca2:	9400      	str	r4, [sp, #0]
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	4a2c      	ldr	r2, [pc, #176]	; (8004d58 <ui_populate_with_rom_data+0x320>)
 8004ca8:	492c      	ldr	r1, [pc, #176]	; (8004d5c <ui_populate_with_rom_data+0x324>)
 8004caa:	4650      	mov	r0, sl
 8004cac:	f7ff feaa 	bl	8004a04 <build_menu>
			build_menu(&mem1Temp,"TEMP MEM1",		&mem1Start,&mem1Time,NULL,&mem1,NULL,SET_OPTION_TEMP,25.0f,0,0);
 8004cb0:	9407      	str	r4, [sp, #28]
 8004cb2:	9406      	str	r4, [sp, #24]
 8004cb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004cb8:	f8cd b00c 	str.w	fp, [sp, #12]
 8004cbc:	9402      	str	r4, [sp, #8]
 8004cbe:	f8cd 9004 	str.w	r9, [sp, #4]
 8004cc2:	9400      	str	r4, [sp, #0]
 8004cc4:	4653      	mov	r3, sl
 8004cc6:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <ui_populate_with_rom_data+0x328>)
 8004cc8:	4926      	ldr	r1, [pc, #152]	; (8004d64 <ui_populate_with_rom_data+0x32c>)
 8004cca:	4823      	ldr	r0, [pc, #140]	; (8004d58 <ui_populate_with_rom_data+0x320>)
 8004ccc:	f7ff fe9a 	bl	8004a04 <build_menu>
			build_menu(&mem1Start,"START MEM1",	NULL,			 &mem1Temp,NULL,&mem1,&mem1_callback,0,25.0f,0,0);
 8004cd0:	9407      	str	r4, [sp, #28]
 8004cd2:	9406      	str	r4, [sp, #24]
 8004cd4:	e05c      	b.n	8004d90 <ui_populate_with_rom_data+0x358>
 8004cd6:	bf00      	nop
 8004cd8:	40390000 	.word	0x40390000
 8004cdc:	20000780 	.word	0x20000780
 8004ce0:	08006d44 	.word	0x08006d44
 8004ce4:	200007e8 	.word	0x200007e8
 8004ce8:	08006d4c 	.word	0x08006d4c
 8004cec:	080042e1 	.word	0x080042e1
 8004cf0:	08006d58 	.word	0x08006d58
 8004cf4:	20000b00 	.word	0x20000b00
 8004cf8:	200008a8 	.word	0x200008a8
 8004cfc:	08006d64 	.word	0x08006d64
 8004d00:	200007b0 	.word	0x200007b0
 8004d04:	08006d70 	.word	0x08006d70
 8004d08:	20000938 	.word	0x20000938
 8004d0c:	0800435d 	.word	0x0800435d
 8004d10:	08006d7c 	.word	0x08006d7c
 8004d14:	20000b60 	.word	0x20000b60
 8004d18:	200009f8 	.word	0x200009f8
 8004d1c:	08006d8c 	.word	0x08006d8c
 8004d20:	08006d9c 	.word	0x08006d9c
 8004d24:	20000bc0 	.word	0x20000bc0
 8004d28:	08006da8 	.word	0x08006da8
 8004d2c:	20000968 	.word	0x20000968
 8004d30:	08006db4 	.word	0x08006db4
 8004d34:	20000750 	.word	0x20000750
 8004d38:	08006dc0 	.word	0x08006dc0
 8004d3c:	08006dcc 	.word	0x08006dcc
 8004d40:	08006dd8 	.word	0x08006dd8
 8004d44:	08004371 	.word	0x08004371
 8004d48:	08006de4 	.word	0x08006de4
 8004d4c:	08006df4 	.word	0x08006df4
 8004d50:	20000908 	.word	0x20000908
 8004d54:	08006e00 	.word	0x08006e00
 8004d58:	20000998 	.word	0x20000998
 8004d5c:	08006e10 	.word	0x08006e10
 8004d60:	20000e00 	.word	0x20000e00
 8004d64:	08006e1c 	.word	0x08006e1c
 8004d68:	20000718 	.word	0x20000718
 8004d6c:	20000c20 	.word	0x20000c20
 8004d70:	08004599 	.word	0x08004599
 8004d74:	08004585 	.word	0x08004585
 8004d78:	200005d8 	.word	0x200005d8
 8004d7c:	20000dd0 	.word	0x20000dd0
 8004d80:	20000a90 	.word	0x20000a90
 8004d84:	20000560 	.word	0x20000560
 8004d88:	20000a30 	.word	0x20000a30
 8004d8c:	20000848 	.word	0x20000848
 8004d90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d94:	9403      	str	r4, [sp, #12]
 8004d96:	4b8c      	ldr	r3, [pc, #560]	; (8004fc8 <ui_populate_with_rom_data+0x590>)
 8004d98:	9302      	str	r3, [sp, #8]
 8004d9a:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d9e:	9400      	str	r4, [sp, #0]
 8004da0:	4b8a      	ldr	r3, [pc, #552]	; (8004fcc <ui_populate_with_rom_data+0x594>)
 8004da2:	4622      	mov	r2, r4
 8004da4:	498a      	ldr	r1, [pc, #552]	; (8004fd0 <ui_populate_with_rom_data+0x598>)
 8004da6:	488b      	ldr	r0, [pc, #556]	; (8004fd4 <ui_populate_with_rom_data+0x59c>)
 8004da8:	f7ff fe2c 	bl	8004a04 <build_menu>
		build_menu(&mem2,"PROGRAM MEM2",&mem3,&mem1,&mem2Time,&mem,NULL,0,25.0f,0,0);
 8004dac:	f8df a28c 	ldr.w	sl, [pc, #652]	; 800503c <ui_populate_with_rom_data+0x604>
 8004db0:	9407      	str	r4, [sp, #28]
 8004db2:	9406      	str	r4, [sp, #24]
 8004db4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004db8:	9403      	str	r4, [sp, #12]
 8004dba:	9402      	str	r4, [sp, #8]
 8004dbc:	4b86      	ldr	r3, [pc, #536]	; (8004fd8 <ui_populate_with_rom_data+0x5a0>)
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	4a86      	ldr	r2, [pc, #536]	; (8004fdc <ui_populate_with_rom_data+0x5a4>)
 8004dc2:	9200      	str	r2, [sp, #0]
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	4652      	mov	r2, sl
 8004dc8:	4985      	ldr	r1, [pc, #532]	; (8004fe0 <ui_populate_with_rom_data+0x5a8>)
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7ff fe1a 	bl	8004a04 <build_menu>
			build_menu(&mem2Time,"TIME MEM2",  &mem2Temp, NULL,			NULL,&mem2,NULL,SET_OPTION_TIME,25.0f,0,0);
 8004dd0:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8005040 <ui_populate_with_rom_data+0x608>
 8004dd4:	9407      	str	r4, [sp, #28]
 8004dd6:	9406      	str	r4, [sp, #24]
 8004dd8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	9203      	str	r2, [sp, #12]
 8004de0:	9402      	str	r4, [sp, #8]
 8004de2:	9501      	str	r5, [sp, #4]
 8004de4:	9400      	str	r4, [sp, #0]
 8004de6:	4623      	mov	r3, r4
 8004de8:	464a      	mov	r2, r9
 8004dea:	497e      	ldr	r1, [pc, #504]	; (8004fe4 <ui_populate_with_rom_data+0x5ac>)
 8004dec:	487b      	ldr	r0, [pc, #492]	; (8004fdc <ui_populate_with_rom_data+0x5a4>)
 8004dee:	f7ff fe09 	bl	8004a04 <build_menu>
			build_menu(&mem2Temp,"TEMP MEM2",	 &mem2Start,&mem2Time,NULL,&mem2,NULL,SET_OPTION_TEMP,25.0f,0,0);
 8004df2:	9407      	str	r4, [sp, #28]
 8004df4:	9406      	str	r4, [sp, #24]
 8004df6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004dfa:	f8cd b00c 	str.w	fp, [sp, #12]
 8004dfe:	9402      	str	r4, [sp, #8]
 8004e00:	9501      	str	r5, [sp, #4]
 8004e02:	9400      	str	r4, [sp, #0]
 8004e04:	4b75      	ldr	r3, [pc, #468]	; (8004fdc <ui_populate_with_rom_data+0x5a4>)
 8004e06:	4a78      	ldr	r2, [pc, #480]	; (8004fe8 <ui_populate_with_rom_data+0x5b0>)
 8004e08:	4978      	ldr	r1, [pc, #480]	; (8004fec <ui_populate_with_rom_data+0x5b4>)
 8004e0a:	4648      	mov	r0, r9
 8004e0c:	f7ff fdfa 	bl	8004a04 <build_menu>
			build_menu(&mem2Start,"START MEM2",NULL,			&mem2Temp,NULL,&mem2,&mem2_callback,0,25.0f,0,0);
 8004e10:	9407      	str	r4, [sp, #28]
 8004e12:	9406      	str	r4, [sp, #24]
 8004e14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e18:	9403      	str	r4, [sp, #12]
 8004e1a:	4b75      	ldr	r3, [pc, #468]	; (8004ff0 <ui_populate_with_rom_data+0x5b8>)
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	9501      	str	r5, [sp, #4]
 8004e20:	9400      	str	r4, [sp, #0]
 8004e22:	464b      	mov	r3, r9
 8004e24:	4622      	mov	r2, r4
 8004e26:	4973      	ldr	r1, [pc, #460]	; (8004ff4 <ui_populate_with_rom_data+0x5bc>)
 8004e28:	486f      	ldr	r0, [pc, #444]	; (8004fe8 <ui_populate_with_rom_data+0x5b0>)
 8004e2a:	f7ff fdeb 	bl	8004a04 <build_menu>
		build_menu(&mem3,"PROGRAM MEM3",NULL,&mem2,&mem3Time,&mem,NULL,0,25.0f,0,0);
 8004e2e:	9407      	str	r4, [sp, #28]
 8004e30:	9406      	str	r4, [sp, #24]
 8004e32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e36:	9403      	str	r4, [sp, #12]
 8004e38:	9402      	str	r4, [sp, #8]
 8004e3a:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <ui_populate_with_rom_data+0x5a0>)
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8005044 <ui_populate_with_rom_data+0x60c>
 8004e42:	f8cd 9000 	str.w	r9, [sp]
 8004e46:	462b      	mov	r3, r5
 8004e48:	4622      	mov	r2, r4
 8004e4a:	496b      	ldr	r1, [pc, #428]	; (8004ff8 <ui_populate_with_rom_data+0x5c0>)
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	f7ff fdd9 	bl	8004a04 <build_menu>
			build_menu(&mem3Time,"TIME MEM3",		&mem3Temp,	NULL,			NULL,	&mem3,NULL,SET_OPTION_TIME,25.0f,0,0);
 8004e52:	4d6a      	ldr	r5, [pc, #424]	; (8004ffc <ui_populate_with_rom_data+0x5c4>)
 8004e54:	9407      	str	r4, [sp, #28]
 8004e56:	9406      	str	r4, [sp, #24]
 8004e58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	9402      	str	r4, [sp, #8]
 8004e62:	f8cd a004 	str.w	sl, [sp, #4]
 8004e66:	9400      	str	r4, [sp, #0]
 8004e68:	4623      	mov	r3, r4
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4964      	ldr	r1, [pc, #400]	; (8005000 <ui_populate_with_rom_data+0x5c8>)
 8004e6e:	4648      	mov	r0, r9
 8004e70:	f7ff fdc8 	bl	8004a04 <build_menu>
			build_menu(&mem3Temp,"TEMP MEM3",		&mem3Start,	&mem3Time,NULL,	&mem3,NULL,SET_OPTION_TEMP,25.0f,0,0);
 8004e74:	9407      	str	r4, [sp, #28]
 8004e76:	9406      	str	r4, [sp, #24]
 8004e78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e7c:	f8cd b00c 	str.w	fp, [sp, #12]
 8004e80:	9402      	str	r4, [sp, #8]
 8004e82:	f8cd a004 	str.w	sl, [sp, #4]
 8004e86:	9400      	str	r4, [sp, #0]
 8004e88:	464b      	mov	r3, r9
 8004e8a:	4a5e      	ldr	r2, [pc, #376]	; (8005004 <ui_populate_with_rom_data+0x5cc>)
 8004e8c:	495e      	ldr	r1, [pc, #376]	; (8005008 <ui_populate_with_rom_data+0x5d0>)
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f7ff fdb8 	bl	8004a04 <build_menu>
			build_menu(&mem3Start,"START MEM3",	NULL,				&mem3Temp,NULL,	&mem3,&mem3_callback,0,25.0f,0,0);
 8004e94:	9407      	str	r4, [sp, #28]
 8004e96:	9406      	str	r4, [sp, #24]
 8004e98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e9c:	9403      	str	r4, [sp, #12]
 8004e9e:	4b5b      	ldr	r3, [pc, #364]	; (800500c <ui_populate_with_rom_data+0x5d4>)
 8004ea0:	9302      	str	r3, [sp, #8]
 8004ea2:	f8cd a004 	str.w	sl, [sp, #4]
 8004ea6:	9400      	str	r4, [sp, #0]
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4958      	ldr	r1, [pc, #352]	; (8005010 <ui_populate_with_rom_data+0x5d8>)
 8004eae:	4855      	ldr	r0, [pc, #340]	; (8005004 <ui_populate_with_rom_data+0x5cc>)
 8004eb0:	f7ff fda8 	bl	8004a04 <build_menu>
	build_menu(&params,"PARAMETERS",	NULL,&mem,&paramsAnalog,NULL,NULL,0,25.0f,0,0);
 8004eb4:	9407      	str	r4, [sp, #28]
 8004eb6:	9406      	str	r4, [sp, #24]
 8004eb8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ebc:	9403      	str	r4, [sp, #12]
 8004ebe:	9402      	str	r4, [sp, #8]
 8004ec0:	9401      	str	r4, [sp, #4]
 8004ec2:	f8df a184 	ldr.w	sl, [pc, #388]	; 8005048 <ui_populate_with_rom_data+0x610>
 8004ec6:	f8cd a000 	str.w	sl, [sp]
 8004eca:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <ui_populate_with_rom_data+0x5a0>)
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4951      	ldr	r1, [pc, #324]	; (8005014 <ui_populate_with_rom_data+0x5dc>)
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	f7ff fd97 	bl	8004a04 <build_menu>
		build_menu(&paramsAnalog,"ANALOG SENSOR",			&paramsDigital,	NULL,						NULL,	&params,NULL,0,25.0f,0,0);
 8004ed6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800504c <ui_populate_with_rom_data+0x614>
 8004eda:	9407      	str	r4, [sp, #28]
 8004edc:	9406      	str	r4, [sp, #24]
 8004ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ee2:	9403      	str	r4, [sp, #12]
 8004ee4:	9402      	str	r4, [sp, #8]
 8004ee6:	f8cd 8004 	str.w	r8, [sp, #4]
 8004eea:	9400      	str	r4, [sp, #0]
 8004eec:	4623      	mov	r3, r4
 8004eee:	464a      	mov	r2, r9
 8004ef0:	4949      	ldr	r1, [pc, #292]	; (8005018 <ui_populate_with_rom_data+0x5e0>)
 8004ef2:	4650      	mov	r0, sl
 8004ef4:	f7ff fd86 	bl	8004a04 <build_menu>
		build_menu(&paramsDigital,"DIGITAL SENSOR",		&paramsPS,			&paramsAnalog,	NULL,	&params,NULL,0,25.0f,0,0);
 8004ef8:	4d48      	ldr	r5, [pc, #288]	; (800501c <ui_populate_with_rom_data+0x5e4>)
 8004efa:	9407      	str	r4, [sp, #28]
 8004efc:	9406      	str	r4, [sp, #24]
 8004efe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f02:	9403      	str	r4, [sp, #12]
 8004f04:	9402      	str	r4, [sp, #8]
 8004f06:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f0a:	9400      	str	r4, [sp, #0]
 8004f0c:	4653      	mov	r3, sl
 8004f0e:	462a      	mov	r2, r5
 8004f10:	4943      	ldr	r1, [pc, #268]	; (8005020 <ui_populate_with_rom_data+0x5e8>)
 8004f12:	4648      	mov	r0, r9
 8004f14:	f7ff fd76 	bl	8004a04 <build_menu>
		build_menu(&paramsPS,"PRIMARY SENSOR",				&paramsHumidity,&paramsDigital,	NULL,	&params,NULL,0,25.0f,0,0);
 8004f18:	f8df a134 	ldr.w	sl, [pc, #308]	; 8005050 <ui_populate_with_rom_data+0x618>
 8004f1c:	9407      	str	r4, [sp, #28]
 8004f1e:	9406      	str	r4, [sp, #24]
 8004f20:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f24:	9403      	str	r4, [sp, #12]
 8004f26:	9402      	str	r4, [sp, #8]
 8004f28:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f2c:	9400      	str	r4, [sp, #0]
 8004f2e:	464b      	mov	r3, r9
 8004f30:	4652      	mov	r2, sl
 8004f32:	493c      	ldr	r1, [pc, #240]	; (8005024 <ui_populate_with_rom_data+0x5ec>)
 8004f34:	4628      	mov	r0, r5
 8004f36:	f7ff fd65 	bl	8004a04 <build_menu>
		build_menu(&paramsHumidity,"HUMIDITY SENSOR",	&paramsPressure,&paramsPS,			NULL,	&params,NULL,0,25.0f,0,0);
 8004f3a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8005054 <ui_populate_with_rom_data+0x61c>
 8004f3e:	9407      	str	r4, [sp, #28]
 8004f40:	9406      	str	r4, [sp, #24]
 8004f42:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f46:	9403      	str	r4, [sp, #12]
 8004f48:	9402      	str	r4, [sp, #8]
 8004f4a:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f4e:	9400      	str	r4, [sp, #0]
 8004f50:	462b      	mov	r3, r5
 8004f52:	464a      	mov	r2, r9
 8004f54:	4934      	ldr	r1, [pc, #208]	; (8005028 <ui_populate_with_rom_data+0x5f0>)
 8004f56:	4650      	mov	r0, sl
 8004f58:	f7ff fd54 	bl	8004a04 <build_menu>
		build_menu(&paramsPressure,"PRESSURE SENSOR",	&paramsMat,			&paramsHumidity,NULL,	&params,NULL,0,25.0f,0,0);
 8004f5c:	4d33      	ldr	r5, [pc, #204]	; (800502c <ui_populate_with_rom_data+0x5f4>)
 8004f5e:	9407      	str	r4, [sp, #28]
 8004f60:	9406      	str	r4, [sp, #24]
 8004f62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f66:	9403      	str	r4, [sp, #12]
 8004f68:	9402      	str	r4, [sp, #8]
 8004f6a:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f6e:	9400      	str	r4, [sp, #0]
 8004f70:	4653      	mov	r3, sl
 8004f72:	462a      	mov	r2, r5
 8004f74:	492e      	ldr	r1, [pc, #184]	; (8005030 <ui_populate_with_rom_data+0x5f8>)
 8004f76:	4648      	mov	r0, r9
 8004f78:	f7ff fd44 	bl	8004a04 <build_menu>
		build_menu(&paramsMat,"MAT POWER",						&paramsFan,			&paramsPressure,NULL,	&params,NULL,0,25.0f,0,0);
 8004f7c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005058 <ui_populate_with_rom_data+0x620>
 8004f80:	9407      	str	r4, [sp, #28]
 8004f82:	9406      	str	r4, [sp, #24]
 8004f84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f88:	9403      	str	r4, [sp, #12]
 8004f8a:	9402      	str	r4, [sp, #8]
 8004f8c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f90:	9400      	str	r4, [sp, #0]
 8004f92:	464b      	mov	r3, r9
 8004f94:	4652      	mov	r2, sl
 8004f96:	4927      	ldr	r1, [pc, #156]	; (8005034 <ui_populate_with_rom_data+0x5fc>)
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f7ff fd33 	bl	8004a04 <build_menu>
		build_menu(&paramsFan,"FAN",									NULL,						&paramsMat,			NULL,	&params,NULL,0,25.0f,0,0);
 8004f9e:	9407      	str	r4, [sp, #28]
 8004fa0:	9406      	str	r4, [sp, #24]
 8004fa2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fa6:	9403      	str	r4, [sp, #12]
 8004fa8:	9402      	str	r4, [sp, #8]
 8004faa:	f8cd 8004 	str.w	r8, [sp, #4]
 8004fae:	9400      	str	r4, [sp, #0]
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	4920      	ldr	r1, [pc, #128]	; (8005038 <ui_populate_with_rom_data+0x600>)
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	f7ff fd24 	bl	8004a04 <build_menu>

	infinite_heater_populate_table();
 8004fbc:	f000 fad4 	bl	8005568 <infinite_heater_populate_table>
	mem2_temp.temp = rom_get_temp(2);
	mem3_temp.temp = rom_get_temp(3);

*/

}
 8004fc0:	b009      	add	sp, #36	; 0x24
 8004fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08004385 	.word	0x08004385
 8004fcc:	20000998 	.word	0x20000998
 8004fd0:	08006e28 	.word	0x08006e28
 8004fd4:	20000e00 	.word	0x20000e00
 8004fd8:	200009f8 	.word	0x200009f8
 8004fdc:	200008d8 	.word	0x200008d8
 8004fe0:	08006e34 	.word	0x08006e34
 8004fe4:	08006e44 	.word	0x08006e44
 8004fe8:	20000cb0 	.word	0x20000cb0
 8004fec:	08006e50 	.word	0x08006e50
 8004ff0:	08004399 	.word	0x08004399
 8004ff4:	08006e5c 	.word	0x08006e5c
 8004ff8:	08006e68 	.word	0x08006e68
 8004ffc:	20000a60 	.word	0x20000a60
 8005000:	08006e78 	.word	0x08006e78
 8005004:	20000530 	.word	0x20000530
 8005008:	08006e84 	.word	0x08006e84
 800500c:	080043ad 	.word	0x080043ad
 8005010:	08006e90 	.word	0x08006e90
 8005014:	08006e9c 	.word	0x08006e9c
 8005018:	08006ea8 	.word	0x08006ea8
 800501c:	20000c80 	.word	0x20000c80
 8005020:	08006eb8 	.word	0x08006eb8
 8005024:	08006ec8 	.word	0x08006ec8
 8005028:	08006ed8 	.word	0x08006ed8
 800502c:	20000b90 	.word	0x20000b90
 8005030:	08006ee8 	.word	0x08006ee8
 8005034:	08006ef8 	.word	0x08006ef8
 8005038:	08006f04 	.word	0x08006f04
 800503c:	20000ce0 	.word	0x20000ce0
 8005040:	200009c8 	.word	0x200009c8
 8005044:	20000e30 	.word	0x20000e30
 8005048:	20000878 	.word	0x20000878
 800504c:	200006b8 	.word	0x200006b8
 8005050:	20000c50 	.word	0x20000c50
 8005054:	20000bf0 	.word	0x20000bf0
 8005058:	20000b30 	.word	0x20000b30

0800505c <ui_get_primary_temperature>:

float ui_get_primary_temperature(void)
{
 800505c:	b508      	push	{r3, lr}
	return (float)(ds18b20_get_scratchpad_temperature(0,0)*0.0625f);
 800505e:	2100      	movs	r1, #0
 8005060:	4608      	mov	r0, r1
 8005062:	f7fe fbe3 	bl	800382c <ds18b20_get_scratchpad_temperature>
 8005066:	f7fb fe1b 	bl	8000ca0 <__aeabi_i2f>
 800506a:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800506e:	f7fb fe6b 	bl	8000d48 <__aeabi_fmul>
}
 8005072:	bd08      	pop	{r3, pc}

08005074 <iu_time_handler>:
{
 8005074:	b538      	push	{r3, r4, r5, lr}
  if(button_hold == 1)
 8005076:	2801      	cmp	r0, #1
 8005078:	d01c      	beq.n	80050b4 <iu_time_handler+0x40>
  if(ms_time_stamp == ms_counter) return;
 800507a:	4b37      	ldr	r3, [pc, #220]	; (8005158 <iu_time_handler+0xe4>)
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <iu_time_handler+0xe8>)
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	429a      	cmp	r2, r3
 8005086:	d014      	beq.n	80050b2 <iu_time_handler+0x3e>
  ms_time_stamp = ms_counter;
 8005088:	4b34      	ldr	r3, [pc, #208]	; (800515c <iu_time_handler+0xe8>)
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	4b32      	ldr	r3, [pc, #200]	; (8005158 <iu_time_handler+0xe4>)
 800508e:	801a      	strh	r2, [r3, #0]
  ms_handler_counter++;
 8005090:	4a33      	ldr	r2, [pc, #204]	; (8005160 <iu_time_handler+0xec>)
 8005092:	8813      	ldrh	r3, [r2, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]
  if(s_handler_counter == 60) s_handler_counter = 0;
 800509a:	4a32      	ldr	r2, [pc, #200]	; (8005164 <iu_time_handler+0xf0>)
 800509c:	8812      	ldrh	r2, [r2, #0]
 800509e:	2a3c      	cmp	r2, #60	; 0x3c
 80050a0:	d00e      	beq.n	80050c0 <iu_time_handler+0x4c>
  if(ms_handler_counter == 999)
 80050a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <iu_time_handler+0x54>
  if(button_event_handler == heating_event)
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <iu_time_handler+0xf4>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d012      	beq.n	80050d8 <iu_time_handler+0x64>
}
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
	  s_handler_counter=0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	4a2b      	ldr	r2, [pc, #172]	; (8005164 <iu_time_handler+0xf0>)
 80050b8:	8013      	strh	r3, [r2, #0]
	  ms_handler_counter=0;
 80050ba:	4a29      	ldr	r2, [pc, #164]	; (8005160 <iu_time_handler+0xec>)
 80050bc:	8013      	strh	r3, [r2, #0]
 80050be:	e7dc      	b.n	800507a <iu_time_handler+0x6>
  if(s_handler_counter == 60) s_handler_counter = 0;
 80050c0:	4a28      	ldr	r2, [pc, #160]	; (8005164 <iu_time_handler+0xf0>)
 80050c2:	2100      	movs	r1, #0
 80050c4:	8011      	strh	r1, [r2, #0]
 80050c6:	e7ec      	b.n	80050a2 <iu_time_handler+0x2e>
    ms_handler_counter = 0;
 80050c8:	4b25      	ldr	r3, [pc, #148]	; (8005160 <iu_time_handler+0xec>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	801a      	strh	r2, [r3, #0]
    s_handler_counter++;
 80050ce:	4a25      	ldr	r2, [pc, #148]	; (8005164 <iu_time_handler+0xf0>)
 80050d0:	8813      	ldrh	r3, [r2, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	8013      	strh	r3, [r2, #0]
 80050d6:	e7e8      	b.n	80050aa <iu_time_handler+0x36>
    if((ms_handler_counter % 200) == 0)
 80050d8:	4b21      	ldr	r3, [pc, #132]	; (8005160 <iu_time_handler+0xec>)
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <iu_time_handler+0xf8>)
 80050de:	fba3 1302 	umull	r1, r3, r3, r2
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	21c8      	movs	r1, #200	; 0xc8
 80050e6:	fb01 2313 	mls	r3, r1, r3, r2
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	b363      	cbz	r3, 8005148 <iu_time_handler+0xd4>
    if(((s_handler_counter % 5) == 0) && (ms_handler_counter == 0))
 80050ee:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <iu_time_handler+0xf0>)
 80050f0:	881a      	ldrh	r2, [r3, #0]
 80050f2:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <iu_time_handler+0xfc>)
 80050f4:	fba3 1302 	umull	r1, r3, r3, r2
 80050f8:	089b      	lsrs	r3, r3, #2
 80050fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1d5      	bne.n	80050b2 <iu_time_handler+0x3e>
 8005106:	4b16      	ldr	r3, [pc, #88]	; (8005160 <iu_time_handler+0xec>)
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1d1      	bne.n	80050b2 <iu_time_handler+0x3e>
    	if(abs(htemp.temp - ui_get_primary_temperature()) < 2.0f )	infinite_heater_handler(ih_event_near_time_5s);
 800510e:	4b19      	ldr	r3, [pc, #100]	; (8005174 <iu_time_handler+0x100>)
 8005110:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005114:	f7ff ffa2 	bl	800505c <ui_get_primary_temperature>
 8005118:	f7fb f97e 	bl	8000418 <__aeabi_f2d>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb f818 	bl	8000158 <__aeabi_dsub>
 8005128:	f7fb fc68 	bl	80009fc <__aeabi_d2iz>
 800512c:	2800      	cmp	r0, #0
 800512e:	bfb8      	it	lt
 8005130:	4240      	neglt	r0, r0
 8005132:	f7fb fdb5 	bl	8000ca0 <__aeabi_i2f>
 8005136:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800513a:	f7fb ffa3 	bl	8001084 <__aeabi_fcmplt>
 800513e:	b938      	cbnz	r0, 8005150 <iu_time_handler+0xdc>
    	else infinite_heater_handler(ih_event_time_5s);
 8005140:	2004      	movs	r0, #4
 8005142:	f000 faab 	bl	800569c <infinite_heater_handler>
 8005146:	e7b4      	b.n	80050b2 <iu_time_handler+0x3e>
      infinite_heater_handler(ih_event_time_02s);
 8005148:	2005      	movs	r0, #5
 800514a:	f000 faa7 	bl	800569c <infinite_heater_handler>
 800514e:	e7ce      	b.n	80050ee <iu_time_handler+0x7a>
    	if(abs(htemp.temp - ui_get_primary_temperature()) < 2.0f )	infinite_heater_handler(ih_event_near_time_5s);
 8005150:	2006      	movs	r0, #6
 8005152:	f000 faa3 	bl	800569c <infinite_heater_handler>
 8005156:	e7ac      	b.n	80050b2 <iu_time_handler+0x3e>
 8005158:	200004d0 	.word	0x200004d0
 800515c:	20000748 	.word	0x20000748
 8005160:	200004ce 	.word	0x200004ce
 8005164:	200004d2 	.word	0x200004d2
 8005168:	200004c7 	.word	0x200004c7
 800516c:	51eb851f 	.word	0x51eb851f
 8005170:	cccccccd 	.word	0xcccccccd
 8005174:	20000780 	.word	0x20000780

08005178 <ui_handler>:
{
 8005178:	b508      	push	{r3, lr}
	if(ui_handler_flag == UI_HANDLER_FLAG_BUSY) return;
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <ui_handler+0x28>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d008      	beq.n	8005196 <ui_handler+0x1e>
	if(iu_button_hold_handler() == 0) iu_time_handler(2); // call time_hander if dont hold button
 8005184:	f7ff fbb6 	bl	80048f4 <iu_button_hold_handler>
 8005188:	b930      	cbnz	r0, 8005198 <ui_handler+0x20>
 800518a:	2002      	movs	r0, #2
 800518c:	f7ff ff72 	bl	8005074 <iu_time_handler>
	ui_handler_flag = UI_HANDLER_FLAG_BUSY;
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <ui_handler+0x28>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
}
 8005196:	bd08      	pop	{r3, pc}
	else iu_time_handler(1);
 8005198:	2001      	movs	r0, #1
 800519a:	f7ff ff6b 	bl	8005074 <iu_time_handler>
 800519e:	e7f7      	b.n	8005190 <ui_handler+0x18>
 80051a0:	20000d10 	.word	0x20000d10

080051a4 <ui_return_to_menu>:

void ui_return_to_menu(void)
{
 80051a4:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 80051a6:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <ui_return_to_menu+0x10>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80051ac:	f7ff f980 	bl	80044b0 <menu_refresh>
}
 80051b0:	bd08      	pop	{r3, pc}
 80051b2:	bf00      	nop
 80051b4:	200004c7 	.word	0x200004c7

080051b8 <exit_ih_display>:
	progress_bar_display();
	return ih_state_exit_confirmation_display;
}

e_ih_state exit_ih_display()
{
 80051b8:	b508      	push	{r3, lr}
	ui_return_to_menu();
 80051ba:	f7ff fff3 	bl	80051a4 <ui_return_to_menu>
	return ih_state_heating_display;
}
 80051be:	2000      	movs	r0, #0
 80051c0:	bd08      	pop	{r3, pc}
	...

080051c4 <progress_bar_display>:
{
 80051c4:	b570      	push	{r4, r5, r6, lr}
  float current_temp = ui_get_primary_temperature();
 80051c6:	f7ff ff49 	bl	800505c <ui_get_primary_temperature>
 80051ca:	4605      	mov	r5, r0
  float differance = htemp.temp- 20.0f;
 80051cc:	2200      	movs	r2, #0
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <progress_bar_display+0x9c>)
 80051d0:	4924      	ldr	r1, [pc, #144]	; (8005264 <progress_bar_display+0xa0>)
 80051d2:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80051d6:	f7fa ffbf 	bl	8000158 <__aeabi_dsub>
 80051da:	f7fb fc57 	bl	8000a8c <__aeabi_d2f>
  float accuracy = differance/PROGRES_BAR_RESOLUTION ;
 80051de:	4922      	ldr	r1, [pc, #136]	; (8005268 <progress_bar_display+0xa4>)
 80051e0:	f7fb fe66 	bl	8000eb0 <__aeabi_fdiv>
 80051e4:	4606      	mov	r6, r0
  lcd_buf_go_to(0,1);
 80051e6:	2101      	movs	r1, #1
 80051e8:	2000      	movs	r0, #0
 80051ea:	f7fe fe95 	bl	8003f18 <lcd_buf_go_to>
  lcd_buf_write_text(&ACTUAL_TEMP[0]);
 80051ee:	481f      	ldr	r0, [pc, #124]	; (800526c <progress_bar_display+0xa8>)
 80051f0:	f7fe fec8 	bl	8003f84 <lcd_buf_write_text>
  ntc_convert_float_to_string(&str_table[0], current_temp ); // TODO zmienić na primary sensor flaot
 80051f4:	4628      	mov	r0, r5
 80051f6:	f7fb f90f 	bl	8000418 <__aeabi_f2d>
 80051fa:	4c1d      	ldr	r4, [pc, #116]	; (8005270 <progress_bar_display+0xac>)
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4620      	mov	r0, r4
 8005202:	f7fe ffff 	bl	8004204 <ntc_convert_float_to_string>
  lcd_buf_write_text((char*)&str_table[0]);
 8005206:	4620      	mov	r0, r4
 8005208:	f7fe febc 	bl	8003f84 <lcd_buf_write_text>
  lcd_char(CELCIUS_CHAR);
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <progress_bar_display+0xb0>)
 800520e:	7818      	ldrb	r0, [r3, #0]
 8005210:	f7fe fe8c 	bl	8003f2c <lcd_char>
  lcd_buf_write_text(&END_OF_TEMP[0]);
 8005214:	4818      	ldr	r0, [pc, #96]	; (8005278 <progress_bar_display+0xb4>)
 8005216:	f7fe feb5 	bl	8003f84 <lcd_buf_write_text>
  lcd_char(' ');
 800521a:	2020      	movs	r0, #32
 800521c:	f7fe fe86 	bl	8003f2c <lcd_char>
  for(uint8_t i = 0 ; i < PROGRES_BAR_RESOLUTION ; i++)
 8005220:	2400      	movs	r4, #0
 8005222:	e004      	b.n	800522e <progress_bar_display+0x6a>
      lcd_char(0xff);
 8005224:	20ff      	movs	r0, #255	; 0xff
 8005226:	f7fe fe81 	bl	8003f2c <lcd_char>
  for(uint8_t i = 0 ; i < PROGRES_BAR_RESOLUTION ; i++)
 800522a:	3401      	adds	r4, #1
 800522c:	b2e4      	uxtb	r4, r4
 800522e:	2c06      	cmp	r4, #6
 8005230:	d812      	bhi.n	8005258 <progress_bar_display+0x94>
	float pb_value = 20.0f + (float)(accuracy*i);
 8005232:	4620      	mov	r0, r4
 8005234:	f7fb fd34 	bl	8000ca0 <__aeabi_i2f>
 8005238:	4631      	mov	r1, r6
 800523a:	f7fb fd85 	bl	8000d48 <__aeabi_fmul>
 800523e:	490f      	ldr	r1, [pc, #60]	; (800527c <progress_bar_display+0xb8>)
 8005240:	f7fb fc7a 	bl	8000b38 <__addsf3>
    if( pb_value  >= current_temp)
 8005244:	4601      	mov	r1, r0
 8005246:	4628      	mov	r0, r5
 8005248:	f7fb ff26 	bl	8001098 <__aeabi_fcmple>
 800524c:	2800      	cmp	r0, #0
 800524e:	d0e9      	beq.n	8005224 <progress_bar_display+0x60>
      lcd_char(0x00);
 8005250:	2000      	movs	r0, #0
 8005252:	f7fe fe6b 	bl	8003f2c <lcd_char>
 8005256:	e7e8      	b.n	800522a <progress_bar_display+0x66>
  lcd_char(' ');
 8005258:	2020      	movs	r0, #32
 800525a:	f7fe fe67 	bl	8003f2c <lcd_char>
}
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	40340000 	.word	0x40340000
 8005264:	20000780 	.word	0x20000780
 8005268:	40e00000 	.word	0x40e00000
 800526c:	20000020 	.word	0x20000020
 8005270:	2000109c 	.word	0x2000109c
 8005274:	20000024 	.word	0x20000024
 8005278:	20000030 	.word	0x20000030
 800527c:	41a00000 	.word	0x41a00000

08005280 <heating_display>:
{
 8005280:	b538      	push	{r3, r4, r5, lr}
  lcd_buf_clear();
 8005282:	f7fe fe69 	bl	8003f58 <lcd_buf_clear>
  lcd_buf_go_to(0,0);
 8005286:	2100      	movs	r1, #0
 8005288:	4608      	mov	r0, r1
 800528a:	f7fe fe45 	bl	8003f18 <lcd_buf_go_to>
  if(htemp.temp > ui_get_primary_temperature())	lcd_buf_write_text(&HEATING[0]);
 800528e:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <heating_display+0x68>)
 8005290:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005294:	f7ff fee2 	bl	800505c <ui_get_primary_temperature>
 8005298:	f7fb f8be 	bl	8000418 <__aeabi_f2d>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4620      	mov	r0, r4
 80052a2:	4629      	mov	r1, r5
 80052a4:	f7fb fba0 	bl	80009e8 <__aeabi_dcmpgt>
 80052a8:	b120      	cbz	r0, 80052b4 <heating_display+0x34>
 80052aa:	4810      	ldr	r0, [pc, #64]	; (80052ec <heating_display+0x6c>)
 80052ac:	f7fe fe6a 	bl	8003f84 <lcd_buf_write_text>
{
 80052b0:	2400      	movs	r4, #0
 80052b2:	e008      	b.n	80052c6 <heating_display+0x46>
  else lcd_buf_write_text(&COOLING[0]);
 80052b4:	480e      	ldr	r0, [pc, #56]	; (80052f0 <heating_display+0x70>)
 80052b6:	f7fe fe65 	bl	8003f84 <lcd_buf_write_text>
 80052ba:	e7f9      	b.n	80052b0 <heating_display+0x30>
	lcd_char('.');
 80052bc:	202e      	movs	r0, #46	; 0x2e
 80052be:	f7fe fe35 	bl	8003f2c <lcd_char>
  for(uint8_t i=0;i<callback_counter_mod4;i++)
 80052c2:	3401      	adds	r4, #1
 80052c4:	b2e4      	uxtb	r4, r4
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <heating_display+0x74>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	d8f6      	bhi.n	80052bc <heating_display+0x3c>
  if(callback_counter_mod4++ >= 3) callback_counter_mod4 =0;
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <heating_display+0x74>)
 80052d2:	7011      	strb	r1, [r2, #0]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d902      	bls.n	80052de <heating_display+0x5e>
 80052d8:	4613      	mov	r3, r2
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
  progress_bar_display();
 80052de:	f7ff ff71 	bl	80051c4 <progress_bar_display>
}
 80052e2:	2000      	movs	r0, #0
 80052e4:	bd38      	pop	{r3, r4, r5, pc}
 80052e6:	bf00      	nop
 80052e8:	20000780 	.word	0x20000780
 80052ec:	20000034 	.word	0x20000034
 80052f0:	20000028 	.word	0x20000028
 80052f4:	200004d5 	.word	0x200004d5

080052f8 <set_point_display>:
{
 80052f8:	b510      	push	{r4, lr}
	lcd_buf_clear();
 80052fa:	f7fe fe2d 	bl	8003f58 <lcd_buf_clear>
	lcd_buf_go_to(0,0);
 80052fe:	2100      	movs	r1, #0
 8005300:	4608      	mov	r0, r1
 8005302:	f7fe fe09 	bl	8003f18 <lcd_buf_go_to>
	lcd_buf_write_text(&SET_TEMP[0]);
 8005306:	480e      	ldr	r0, [pc, #56]	; (8005340 <set_point_display+0x48>)
 8005308:	f7fe fe3c 	bl	8003f84 <lcd_buf_write_text>
	ntc_convert_float_to_string(&str_table[0], (double)htemp.temp );
 800530c:	4c0d      	ldr	r4, [pc, #52]	; (8005344 <set_point_display+0x4c>)
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <set_point_display+0x50>)
 8005310:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005314:	4620      	mov	r0, r4
 8005316:	f7fe ff75 	bl	8004204 <ntc_convert_float_to_string>
	lcd_buf_write_text((char*)&str_table[0]);
 800531a:	4620      	mov	r0, r4
 800531c:	f7fe fe32 	bl	8003f84 <lcd_buf_write_text>
	lcd_buf_go_to(17,0);
 8005320:	2100      	movs	r1, #0
 8005322:	2011      	movs	r0, #17
 8005324:	f7fe fdf8 	bl	8003f18 <lcd_buf_go_to>
	lcd_char(CELCIUS_CHAR);
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <set_point_display+0x54>)
 800532a:	7818      	ldrb	r0, [r3, #0]
 800532c:	f7fe fdfe 	bl	8003f2c <lcd_char>
	lcd_buf_write_text(&END_OF_TEMP[0]);
 8005330:	4807      	ldr	r0, [pc, #28]	; (8005350 <set_point_display+0x58>)
 8005332:	f7fe fe27 	bl	8003f84 <lcd_buf_write_text>
	progress_bar_display();
 8005336:	f7ff ff45 	bl	80051c4 <progress_bar_display>
}
 800533a:	2001      	movs	r0, #1
 800533c:	bd10      	pop	{r4, pc}
 800533e:	bf00      	nop
 8005340:	2000003c 	.word	0x2000003c
 8005344:	2000109c 	.word	0x2000109c
 8005348:	20000780 	.word	0x20000780
 800534c:	20000024 	.word	0x20000024
 8005350:	20000030 	.word	0x20000030

08005354 <exit_confirmation_display>:
{
 8005354:	b508      	push	{r3, lr}
	lcd_buf_clear();
 8005356:	f7fe fdff 	bl	8003f58 <lcd_buf_clear>
	lcd_buf_go_to(0,0);
 800535a:	2100      	movs	r1, #0
 800535c:	4608      	mov	r0, r1
 800535e:	f7fe fddb 	bl	8003f18 <lcd_buf_go_to>
	lcd_buf_write_text("EXIT, ARE YOU SURE ?");
 8005362:	4803      	ldr	r0, [pc, #12]	; (8005370 <exit_confirmation_display+0x1c>)
 8005364:	f7fe fe0e 	bl	8003f84 <lcd_buf_write_text>
	progress_bar_display();
 8005368:	f7ff ff2c 	bl	80051c4 <progress_bar_display>
}
 800536c:	2002      	movs	r0, #2
 800536e:	bd08      	pop	{r3, pc}
 8005370:	08006f08 	.word	0x08006f08

08005374 <temp_ruler>:
{
 8005374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float current_temp = ui_get_primary_temperature();
 8005378:	f7ff fe70 	bl	800505c <ui_get_primary_temperature>
 800537c:	4604      	mov	r4, r0
  lcd_buf_go_to(0,1);
 800537e:	2101      	movs	r1, #1
 8005380:	2000      	movs	r0, #0
 8005382:	f7fe fdc9 	bl	8003f18 <lcd_buf_go_to>
  lcd_char(0x03);
 8005386:	2003      	movs	r0, #3
 8005388:	f7fe fdd0 	bl	8003f2c <lcd_char>
  lcd_buf_write_text(&START_TEMP[0]);
 800538c:	4854      	ldr	r0, [pc, #336]	; (80054e0 <temp_ruler+0x16c>)
 800538e:	f7fe fdf9 	bl	8003f84 <lcd_buf_write_text>
  ntc_convert_float_to_string(&str_table[0], (current_temp - htemp.temp) ); // TODO zmienić na primary sensor flaot
 8005392:	4620      	mov	r0, r4
 8005394:	f7fb f840 	bl	8000418 <__aeabi_f2d>
 8005398:	4606      	mov	r6, r0
 800539a:	460f      	mov	r7, r1
 800539c:	4c51      	ldr	r4, [pc, #324]	; (80054e4 <temp_ruler+0x170>)
 800539e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80053a2:	f7fa fed9 	bl	8000158 <__aeabi_dsub>
 80053a6:	4d50      	ldr	r5, [pc, #320]	; (80054e8 <temp_ruler+0x174>)
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4628      	mov	r0, r5
 80053ae:	f7fe ff29 	bl	8004204 <ntc_convert_float_to_string>
  lcd_buf_write_text((char*)&str_table[0]);
 80053b2:	4628      	mov	r0, r5
 80053b4:	f7fe fde6 	bl	8003f84 <lcd_buf_write_text>
  lcd_buf_go_to(9, 1);
 80053b8:	2101      	movs	r1, #1
 80053ba:	2009      	movs	r0, #9
 80053bc:	f7fe fdac 	bl	8003f18 <lcd_buf_go_to>
  lcd_char(CELCIUS_CHAR);
 80053c0:	4b4a      	ldr	r3, [pc, #296]	; (80054ec <temp_ruler+0x178>)
 80053c2:	7818      	ldrb	r0, [r3, #0]
 80053c4:	f7fe fdb2 	bl	8003f2c <lcd_char>
  lcd_buf_write_text(&END_OF_TEMP[0]);
 80053c8:	4849      	ldr	r0, [pc, #292]	; (80054f0 <temp_ruler+0x17c>)
 80053ca:	f7fe fddb 	bl	8003f84 <lcd_buf_write_text>
  lcd_char(' ');
 80053ce:	2020      	movs	r0, #32
 80053d0:	f7fe fdac 	bl	8003f2c <lcd_char>
  if((htemp.temp - current_temp)<0)
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 80053dc:	f7fa febc 	bl	8000158 <__aeabi_dsub>
 80053e0:	2200      	movs	r2, #0
 80053e2:	2300      	movs	r3, #0
 80053e4:	f7fb fae2 	bl	80009ac <__aeabi_dcmplt>
 80053e8:	b928      	cbnz	r0, 80053f6 <temp_ruler+0x82>
	  lcd_buf_go_to(13,1);
 80053ea:	2101      	movs	r1, #1
 80053ec:	200d      	movs	r0, #13
 80053ee:	f7fe fd93 	bl	8003f18 <lcd_buf_go_to>
	  for(int i = 3 ; i >= 0 ; --i)
 80053f2:	2403      	movs	r4, #3
 80053f4:	e03e      	b.n	8005474 <temp_ruler+0x100>
	  lcd_buf_go_to(13,1);
 80053f6:	2101      	movs	r1, #1
 80053f8:	200d      	movs	r0, #13
 80053fa:	f7fe fd8d 	bl	8003f18 <lcd_buf_go_to>
	  for(uint8_t i = 0 ; i < 3 ; i++)
 80053fe:	2400      	movs	r4, #0
 8005400:	e004      	b.n	800540c <temp_ruler+0x98>
		  lcd_char(0x00);
 8005402:	2000      	movs	r0, #0
 8005404:	f7fe fd92 	bl	8003f2c <lcd_char>
	  for(uint8_t i = 0 ; i < 3 ; i++)
 8005408:	3401      	adds	r4, #1
 800540a:	b2e4      	uxtb	r4, r4
 800540c:	2c02      	cmp	r4, #2
 800540e:	d9f8      	bls.n	8005402 <temp_ruler+0x8e>
	  lcd_char(0xff);
 8005410:	20ff      	movs	r0, #255	; 0xff
 8005412:	f7fe fd8b 	bl	8003f2c <lcd_char>
	  for(uint8_t i = 1 ; i < 4 ; i++)
 8005416:	2401      	movs	r4, #1
 8005418:	e004      	b.n	8005424 <temp_ruler+0xb0>
		  else lcd_char(0x00);
 800541a:	2000      	movs	r0, #0
 800541c:	f7fe fd86 	bl	8003f2c <lcd_char>
	  for(uint8_t i = 1 ; i < 4 ; i++)
 8005420:	3401      	adds	r4, #1
 8005422:	b2e4      	uxtb	r4, r4
 8005424:	2c03      	cmp	r4, #3
 8005426:	d859      	bhi.n	80054dc <temp_ruler+0x168>
		  if( (0.5f+i*0.5f) < (current_temp-htemp.temp))	lcd_char(0xff);
 8005428:	4620      	mov	r0, r4
 800542a:	f7fb fc39 	bl	8000ca0 <__aeabi_i2f>
 800542e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005432:	f7fb fc89 	bl	8000d48 <__aeabi_fmul>
 8005436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800543a:	f7fb fb7d 	bl	8000b38 <__addsf3>
 800543e:	f7fa ffeb 	bl	8000418 <__aeabi_f2d>
 8005442:	4680      	mov	r8, r0
 8005444:	4689      	mov	r9, r1
 8005446:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <temp_ruler+0x170>)
 8005448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fa fe82 	bl	8000158 <__aeabi_dsub>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4640      	mov	r0, r8
 800545a:	4649      	mov	r1, r9
 800545c:	f7fb faa6 	bl	80009ac <__aeabi_dcmplt>
 8005460:	2800      	cmp	r0, #0
 8005462:	d0da      	beq.n	800541a <temp_ruler+0xa6>
 8005464:	20ff      	movs	r0, #255	; 0xff
 8005466:	f7fe fd61 	bl	8003f2c <lcd_char>
 800546a:	e7d9      	b.n	8005420 <temp_ruler+0xac>
		  else lcd_char(0xff);
 800546c:	20ff      	movs	r0, #255	; 0xff
 800546e:	f7fe fd5d 	bl	8003f2c <lcd_char>
	  for(int i = 3 ; i >= 0 ; --i)
 8005472:	3c01      	subs	r4, #1
 8005474:	2c00      	cmp	r4, #0
 8005476:	db21      	blt.n	80054bc <temp_ruler+0x148>
		  if( (0.5f+(i)*0.5f) > (htemp.temp - current_temp))	lcd_char(0x00);
 8005478:	4620      	mov	r0, r4
 800547a:	f7fb fc11 	bl	8000ca0 <__aeabi_i2f>
 800547e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005482:	f7fb fc61 	bl	8000d48 <__aeabi_fmul>
 8005486:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800548a:	f7fb fb55 	bl	8000b38 <__addsf3>
 800548e:	f7fa ffc3 	bl	8000418 <__aeabi_f2d>
 8005492:	4680      	mov	r8, r0
 8005494:	4689      	mov	r9, r1
 8005496:	4632      	mov	r2, r6
 8005498:	463b      	mov	r3, r7
 800549a:	4912      	ldr	r1, [pc, #72]	; (80054e4 <temp_ruler+0x170>)
 800549c:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80054a0:	f7fa fe5a 	bl	8000158 <__aeabi_dsub>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4640      	mov	r0, r8
 80054aa:	4649      	mov	r1, r9
 80054ac:	f7fb fa9c 	bl	80009e8 <__aeabi_dcmpgt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d0db      	beq.n	800546c <temp_ruler+0xf8>
 80054b4:	2000      	movs	r0, #0
 80054b6:	f7fe fd39 	bl	8003f2c <lcd_char>
 80054ba:	e7da      	b.n	8005472 <temp_ruler+0xfe>
	  lcd_buf_go_to(16,1);
 80054bc:	2101      	movs	r1, #1
 80054be:	2010      	movs	r0, #16
 80054c0:	f7fe fd2a 	bl	8003f18 <lcd_buf_go_to>
	  lcd_char(0xff);
 80054c4:	20ff      	movs	r0, #255	; 0xff
 80054c6:	f7fe fd31 	bl	8003f2c <lcd_char>
	  for(uint8_t i = 0 ; i < 3 ; i++)
 80054ca:	2400      	movs	r4, #0
 80054cc:	e004      	b.n	80054d8 <temp_ruler+0x164>
		  lcd_char(0x00);
 80054ce:	2000      	movs	r0, #0
 80054d0:	f7fe fd2c 	bl	8003f2c <lcd_char>
	  for(uint8_t i = 0 ; i < 3 ; i++)
 80054d4:	3401      	adds	r4, #1
 80054d6:	b2e4      	uxtb	r4, r4
 80054d8:	2c02      	cmp	r4, #2
 80054da:	d9f8      	bls.n	80054ce <temp_ruler+0x15a>
}
 80054dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054e0:	2000005c 	.word	0x2000005c
 80054e4:	20000780 	.word	0x20000780
 80054e8:	2000109c 	.word	0x2000109c
 80054ec:	20000024 	.word	0x20000024
 80054f0:	20000030 	.word	0x20000030

080054f4 <near_temp_display>:
 * [1][2][3][4][5][6][7][8][9][0][1][2][3][4][5][6][7][8][9][0]
 * [S][T][A][B][I][L][I][Z][A][C][I][O][N][ ][ ][|][ ][ ][ ][ ]
 * [d][T][[][+][1][.][0][5][o][C][]][ ][|][|][|][|][|][|][|][ ]
 */
e_ih_state near_temp_display()
{
 80054f4:	b510      	push	{r4, lr}
	static uint8_t callback_counter_mod4=0;
	lcd_buf_clear();
 80054f6:	f7fe fd2f 	bl	8003f58 <lcd_buf_clear>
	lcd_buf_go_to(0,0);
 80054fa:	2100      	movs	r1, #0
 80054fc:	4608      	mov	r0, r1
 80054fe:	f7fe fd0b 	bl	8003f18 <lcd_buf_go_to>
	lcd_buf_write_text(&STABILIZING[0]);
 8005502:	4811      	ldr	r0, [pc, #68]	; (8005548 <near_temp_display+0x54>)
 8005504:	f7fe fd3e 	bl	8003f84 <lcd_buf_write_text>
	for(uint8_t i=0;i<callback_counter_mod4;i++)
 8005508:	2400      	movs	r4, #0
 800550a:	e004      	b.n	8005516 <near_temp_display+0x22>
	{
		lcd_char('.');
 800550c:	202e      	movs	r0, #46	; 0x2e
 800550e:	f7fe fd0d 	bl	8003f2c <lcd_char>
	for(uint8_t i=0;i<callback_counter_mod4;i++)
 8005512:	3401      	adds	r4, #1
 8005514:	b2e4      	uxtb	r4, r4
 8005516:	4b0d      	ldr	r3, [pc, #52]	; (800554c <near_temp_display+0x58>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	42a3      	cmp	r3, r4
 800551c:	d8f6      	bhi.n	800550c <near_temp_display+0x18>
	}
	lcd_buf_go_to(16,0);
 800551e:	2100      	movs	r1, #0
 8005520:	2010      	movs	r0, #16
 8005522:	f7fe fcf9 	bl	8003f18 <lcd_buf_go_to>
	lcd_char(0x04);
 8005526:	2004      	movs	r0, #4
 8005528:	f7fe fd00 	bl	8003f2c <lcd_char>
	temp_ruler();
 800552c:	f7ff ff22 	bl	8005374 <temp_ruler>
	if(callback_counter_mod4++ >= 3) callback_counter_mod4 =0;
 8005530:	4a06      	ldr	r2, [pc, #24]	; (800554c <near_temp_display+0x58>)
 8005532:	7813      	ldrb	r3, [r2, #0]
 8005534:	1c59      	adds	r1, r3, #1
 8005536:	7011      	strb	r1, [r2, #0]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d902      	bls.n	8005542 <near_temp_display+0x4e>
 800553c:	4613      	mov	r3, r2
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
	return ih_state_near_temp_display;
}
 8005542:	2005      	movs	r0, #5
 8005544:	bd10      	pop	{r4, pc}
 8005546:	bf00      	nop
 8005548:	2000004c 	.word	0x2000004c
 800554c:	200004d6 	.word	0x200004d6

08005550 <populte_exec>:

void populte_exec(uint8_t i, e_ih_state state , e_ih_event event, pf_event_handler pf)
{
 8005550:	b410      	push	{r4}
	as_ih_state_machine[i].state_machine = state;
 8005552:	4c04      	ldr	r4, [pc, #16]	; (8005564 <populte_exec+0x14>)
 8005554:	f804 1030 	strb.w	r1, [r4, r0, lsl #3]
	as_ih_state_machine[i].state_machine_event = event;
 8005558:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800555c:	7062      	strb	r2, [r4, #1]
	as_ih_state_machine[i].state_machine_event_handler = pf;
 800555e:	6063      	str	r3, [r4, #4]
}
 8005560:	bc10      	pop	{r4}
 8005562:	4770      	bx	lr
 8005564:	20000d14 	.word	0x20000d14

08005568 <infinite_heater_populate_table>:

void infinite_heater_populate_table()
{
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	populte_exec(0, ih_state_heating_display , ih_event_button_ok, heating_display);
 800556a:	4d47      	ldr	r5, [pc, #284]	; (8005688 <infinite_heater_populate_table+0x120>)
 800556c:	462b      	mov	r3, r5
 800556e:	2203      	movs	r2, #3
 8005570:	2100      	movs	r1, #0
 8005572:	4608      	mov	r0, r1
 8005574:	f7ff ffec 	bl	8005550 <populte_exec>
	/*2*/	populte_exec(1,ih_state_heating_display,ih_event_time_02s,heating_display);
 8005578:	462b      	mov	r3, r5
 800557a:	2205      	movs	r2, #5
 800557c:	2100      	movs	r1, #0
 800557e:	2001      	movs	r0, #1
 8005580:	f7ff ffe6 	bl	8005550 <populte_exec>
	/*3*/	populte_exec(2,ih_state_heating_display,ih_event_button_up,set_point_display);
 8005584:	4c41      	ldr	r4, [pc, #260]	; (800568c <infinite_heater_populate_table+0x124>)
 8005586:	4623      	mov	r3, r4
 8005588:	2200      	movs	r2, #0
 800558a:	4611      	mov	r1, r2
 800558c:	2002      	movs	r0, #2
 800558e:	f7ff ffdf 	bl	8005550 <populte_exec>
	/*4*/	populte_exec(3,ih_state_heating_display,ih_event_button_down,set_point_display);
 8005592:	4623      	mov	r3, r4
 8005594:	2201      	movs	r2, #1
 8005596:	2100      	movs	r1, #0
 8005598:	2003      	movs	r0, #3
 800559a:	f7ff ffd9 	bl	8005550 <populte_exec>
	/*5*/	populte_exec(4,ih_state_heating_display,ih_event_time_5s,set_point_display);
 800559e:	4623      	mov	r3, r4
 80055a0:	2204      	movs	r2, #4
 80055a2:	2100      	movs	r1, #0
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7ff ffd3 	bl	8005550 <populte_exec>
	/*6*/	populte_exec(5,ih_state_heating_display,ih_event_near_time_5s,set_point_display);
 80055aa:	4623      	mov	r3, r4
 80055ac:	2206      	movs	r2, #6
 80055ae:	2100      	movs	r1, #0
 80055b0:	2005      	movs	r0, #5
 80055b2:	f7ff ffcd 	bl	8005550 <populte_exec>
	/*7*/	populte_exec(6,ih_state_heating_display,ih_event_button_exit,exit_confirmation_display);
 80055b6:	4e36      	ldr	r6, [pc, #216]	; (8005690 <infinite_heater_populate_table+0x128>)
 80055b8:	4633      	mov	r3, r6
 80055ba:	2202      	movs	r2, #2
 80055bc:	2100      	movs	r1, #0
 80055be:	2006      	movs	r0, #6
 80055c0:	f7ff ffc6 	bl	8005550 <populte_exec>

	/*8*/	populte_exec(7,ih_state_heating_setpoit_display,ih_event_time_02s,set_point_display); // refresh display data
 80055c4:	4623      	mov	r3, r4
 80055c6:	2205      	movs	r2, #5
 80055c8:	2101      	movs	r1, #1
 80055ca:	2007      	movs	r0, #7
 80055cc:	f7ff ffc0 	bl	8005550 <populte_exec>
	/*9*/	populte_exec(8,ih_state_heating_setpoit_display,ih_event_time_5s,heating_display);
 80055d0:	462b      	mov	r3, r5
 80055d2:	2204      	movs	r2, #4
 80055d4:	2101      	movs	r1, #1
 80055d6:	2008      	movs	r0, #8
 80055d8:	f7ff ffba 	bl	8005550 <populte_exec>
	/*10*/	populte_exec(9,ih_state_heating_setpoit_display,ih_event_button_up,set_point_display);
 80055dc:	4623      	mov	r3, r4
 80055de:	2200      	movs	r2, #0
 80055e0:	2101      	movs	r1, #1
 80055e2:	2009      	movs	r0, #9
 80055e4:	f7ff ffb4 	bl	8005550 <populte_exec>
	/*11*/	populte_exec(10,ih_state_heating_setpoit_display,ih_event_button_down,set_point_display);
 80055e8:	4623      	mov	r3, r4
 80055ea:	2201      	movs	r2, #1
 80055ec:	4611      	mov	r1, r2
 80055ee:	200a      	movs	r0, #10
 80055f0:	f7ff ffae 	bl	8005550 <populte_exec>
	/*12*/	populte_exec(11,ih_state_heating_setpoit_display,ih_event_near_time_5s,near_temp_display);
 80055f4:	4f27      	ldr	r7, [pc, #156]	; (8005694 <infinite_heater_populate_table+0x12c>)
 80055f6:	463b      	mov	r3, r7
 80055f8:	2206      	movs	r2, #6
 80055fa:	2101      	movs	r1, #1
 80055fc:	200b      	movs	r0, #11
 80055fe:	f7ff ffa7 	bl	8005550 <populte_exec>
	/*13*/	populte_exec(12,ih_state_heating_setpoit_display,ih_event_button_exit,exit_confirmation_display);
 8005602:	4633      	mov	r3, r6
 8005604:	2202      	movs	r2, #2
 8005606:	2101      	movs	r1, #1
 8005608:	200c      	movs	r0, #12
 800560a:	f7ff ffa1 	bl	8005550 <populte_exec>

	/*14*/	populte_exec(13,ih_state_exit_confirmation_display,ih_event_time_5s,heating_display);
 800560e:	462b      	mov	r3, r5
 8005610:	2204      	movs	r2, #4
 8005612:	2102      	movs	r1, #2
 8005614:	200d      	movs	r0, #13
 8005616:	f7ff ff9b 	bl	8005550 <populte_exec>
	/*15*/	populte_exec(14,ih_state_exit_confirmation_display,ih_event_near_time_5s,set_point_display);
 800561a:	4623      	mov	r3, r4
 800561c:	2206      	movs	r2, #6
 800561e:	2102      	movs	r1, #2
 8005620:	200e      	movs	r0, #14
 8005622:	f7ff ff95 	bl	8005550 <populte_exec>
	/*16*/	populte_exec(15,ih_state_exit_confirmation_display,ih_event_button_exit,set_point_display);
 8005626:	4623      	mov	r3, r4
 8005628:	2202      	movs	r2, #2
 800562a:	4611      	mov	r1, r2
 800562c:	200f      	movs	r0, #15
 800562e:	f7ff ff8f 	bl	8005550 <populte_exec>
	/*17*/	populte_exec(16,ih_state_exit_confirmation_display,ih_event_button_ok,exit_ih_display);
 8005632:	4b19      	ldr	r3, [pc, #100]	; (8005698 <infinite_heater_populate_table+0x130>)
 8005634:	2203      	movs	r2, #3
 8005636:	2102      	movs	r1, #2
 8005638:	2010      	movs	r0, #16
 800563a:	f7ff ff89 	bl	8005550 <populte_exec>

	/*18*/	populte_exec(17,ih_state_near_temp_display,ih_event_time_02s,near_temp_display);
 800563e:	463b      	mov	r3, r7
 8005640:	2205      	movs	r2, #5
 8005642:	4611      	mov	r1, r2
 8005644:	2011      	movs	r0, #17
 8005646:	f7ff ff83 	bl	8005550 <populte_exec>
	/*19*/	populte_exec(18,ih_state_near_temp_display,ih_event_button_up,set_point_display);
 800564a:	4623      	mov	r3, r4
 800564c:	2200      	movs	r2, #0
 800564e:	2105      	movs	r1, #5
 8005650:	2012      	movs	r0, #18
 8005652:	f7ff ff7d 	bl	8005550 <populte_exec>
	/*20*/	populte_exec(19,ih_state_near_temp_display,ih_event_button_down,set_point_display);
 8005656:	4623      	mov	r3, r4
 8005658:	2201      	movs	r2, #1
 800565a:	2105      	movs	r1, #5
 800565c:	2013      	movs	r0, #19
 800565e:	f7ff ff77 	bl	8005550 <populte_exec>
	/*21*/	populte_exec(20,ih_state_near_temp_display,ih_event_button_exit,exit_confirmation_display);
 8005662:	4633      	mov	r3, r6
 8005664:	2202      	movs	r2, #2
 8005666:	2105      	movs	r1, #5
 8005668:	2014      	movs	r0, #20
 800566a:	f7ff ff71 	bl	8005550 <populte_exec>
	/*22*/	populte_exec(21,ih_state_near_temp_display,ih_event_time_5s,set_point_display);
 800566e:	4623      	mov	r3, r4
 8005670:	2204      	movs	r2, #4
 8005672:	2105      	movs	r1, #5
 8005674:	2015      	movs	r0, #21
 8005676:	f7ff ff6b 	bl	8005550 <populte_exec>
	/*23*/	populte_exec(22,ih_state_near_temp_display,ih_event_near_time_5s,set_point_display);
 800567a:	4623      	mov	r3, r4
 800567c:	2206      	movs	r2, #6
 800567e:	2105      	movs	r1, #5
 8005680:	2016      	movs	r0, #22
 8005682:	f7ff ff65 	bl	8005550 <populte_exec>
}
 8005686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005688:	08005281 	.word	0x08005281
 800568c:	080052f9 	.word	0x080052f9
 8005690:	08005355 	.word	0x08005355
 8005694:	080054f5 	.word	0x080054f5
 8005698:	080051b9 	.word	0x080051b9

0800569c <infinite_heater_handler>:


void infinite_heater_handler(e_ih_event event)
{
	static e_ih_state actual_state = ih_state_heating_display;
	if( (actual_state < ih_state_last) && (event < ih_event_last))
 800569c:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <infinite_heater_handler+0x4c>)
 800569e:	7819      	ldrb	r1, [r3, #0]
 80056a0:	2905      	cmp	r1, #5
 80056a2:	d820      	bhi.n	80056e6 <infinite_heater_handler+0x4a>
 80056a4:	2806      	cmp	r0, #6
 80056a6:	d804      	bhi.n	80056b2 <infinite_heater_handler+0x16>
	{
		for(uint8_t state_counter = 0; state_counter < IH_FSM_STATES ; state_counter++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	2b16      	cmp	r3, #22
 80056ac:	d81a      	bhi.n	80056e4 <infinite_heater_handler+0x48>
{
 80056ae:	b510      	push	{r4, lr}
 80056b0:	e004      	b.n	80056bc <infinite_heater_handler+0x20>
 80056b2:	4770      	bx	lr
		for(uint8_t state_counter = 0; state_counter < IH_FSM_STATES ; state_counter++)
 80056b4:	3301      	adds	r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b16      	cmp	r3, #22
 80056ba:	d812      	bhi.n	80056e2 <infinite_heater_handler+0x46>
		{
			if((as_ih_state_machine[state_counter].state_machine == actual_state ) && ( as_ih_state_machine[state_counter].state_machine_event == event)  )
 80056bc:	461c      	mov	r4, r3
 80056be:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <infinite_heater_handler+0x50>)
 80056c0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80056c4:	4291      	cmp	r1, r2
 80056c6:	d1f5      	bne.n	80056b4 <infinite_heater_handler+0x18>
 80056c8:	4a08      	ldr	r2, [pc, #32]	; (80056ec <infinite_heater_handler+0x50>)
 80056ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80056ce:	7852      	ldrb	r2, [r2, #1]
 80056d0:	4282      	cmp	r2, r0
 80056d2:	d1ef      	bne.n	80056b4 <infinite_heater_handler+0x18>
			{
				actual_state = (*as_ih_state_machine[state_counter].state_machine_event_handler)();
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <infinite_heater_handler+0x50>)
 80056d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80056da:	6863      	ldr	r3, [r4, #4]
 80056dc:	4798      	blx	r3
 80056de:	4b02      	ldr	r3, [pc, #8]	; (80056e8 <infinite_heater_handler+0x4c>)
 80056e0:	7018      	strb	r0, [r3, #0]
				break;
			}
		}
	}
}
 80056e2:	bd10      	pop	{r4, pc}
 80056e4:	4770      	bx	lr
 80056e6:	4770      	bx	lr
 80056e8:	200004d4 	.word	0x200004d4
 80056ec:	20000d14 	.word	0x20000d14

080056f0 <program_and_sequance_handler>:
}

void program_and_sequance_handler( e_ps_event event)
{

}
 80056f0:	4770      	bx	lr
	...

080056f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80056f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056f8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056fa:	2400      	movs	r4, #0
 80056fc:	9404      	str	r4, [sp, #16]
 80056fe:	9405      	str	r4, [sp, #20]
 8005700:	9406      	str	r4, [sp, #24]
 8005702:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005704:	4b3e      	ldr	r3, [pc, #248]	; (8005800 <MX_GPIO_Init+0x10c>)
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	f042 0210 	orr.w	r2, r2, #16
 800570c:	619a      	str	r2, [r3, #24]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	f002 0210 	and.w	r2, r2, #16
 8005714:	9200      	str	r2, [sp, #0]
 8005716:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	f042 0220 	orr.w	r2, r2, #32
 800571e:	619a      	str	r2, [r3, #24]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	f002 0220 	and.w	r2, r2, #32
 8005726:	9201      	str	r2, [sp, #4]
 8005728:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	f042 0204 	orr.w	r2, r2, #4
 8005730:	619a      	str	r2, [r3, #24]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	f002 0204 	and.w	r2, r2, #4
 8005738:	9202      	str	r2, [sp, #8]
 800573a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	f042 0208 	orr.w	r2, r2, #8
 8005742:	619a      	str	r2, [r3, #24]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	9303      	str	r3, [sp, #12]
 800574c:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 800574e:	4e2d      	ldr	r6, [pc, #180]	; (8005804 <MX_GPIO_Init+0x110>)
 8005750:	4622      	mov	r2, r4
 8005752:	f248 7178 	movw	r1, #34680	; 0x8778
 8005756:	4630      	mov	r0, r6
 8005758:	f7fc fc46 	bl	8001fe8 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|VBUS_Pin|HEATER_CTRL_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
 800575c:	4d2a      	ldr	r5, [pc, #168]	; (8005808 <MX_GPIO_Init+0x114>)
 800575e:	4622      	mov	r2, r4
 8005760:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005764:	4628      	mov	r0, r5
 8005766:	f7fc fc3f 	bl	8001fe8 <HAL_GPIO_WritePin>
                          |FAN_CTRL_Pin|D_PULL_Pin|MPL_CS_Pin|BME_CS_Pin 
                          |LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_EXIT_Pin BUTTON_OK_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_EXIT_Pin|BUTTON_OK_Pin;
 800576a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800576e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005770:	4f26      	ldr	r7, [pc, #152]	; (800580c <MX_GPIO_Init+0x118>)
 8005772:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005774:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005776:	a904      	add	r1, sp, #16
 8005778:	4825      	ldr	r0, [pc, #148]	; (8005810 <MX_GPIO_Init+0x11c>)
 800577a:	f7fc fb49 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONE_WIRE_DATA1_Pin ONE_WIRE_DATA2_Pin LED_RED_Pin LED_GREEN_Pin 
                           BUZZER_Pin VBUS_Pin HEATER_CTRL_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 800577e:	f248 7378 	movw	r3, #34680	; 0x8778
 8005782:	9304      	str	r3, [sp, #16]
                          |BUZZER_Pin|VBUS_Pin|HEATER_CTRL_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005784:	f04f 0901 	mov.w	r9, #1
 8005788:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800578e:	f04f 0802 	mov.w	r8, #2
 8005792:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005796:	a904      	add	r1, sp, #16
 8005798:	4630      	mov	r0, r6
 800579a:	f7fc fb39 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 800579e:	2380      	movs	r3, #128	; 0x80
 80057a0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80057a2:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <MX_GPIO_Init+0x120>)
 80057a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 80057a8:	a904      	add	r1, sp, #16
 80057aa:	4630      	mov	r0, r6
 80057ac:	f7fc fb30 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin 
                           FAN_CTRL_Pin D_PULL_Pin MPL_CS_Pin BME_CS_Pin 
                           LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
 80057b0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80057b4:	9304      	str	r3, [sp, #16]
                          |FAN_CTRL_Pin|D_PULL_Pin|MPL_CS_Pin|BME_CS_Pin 
                          |LCD_E_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057b6:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ba:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057bc:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	4628      	mov	r0, r5
 80057c4:	f7fc fb24 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 80057c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80057ce:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 80057d2:	a904      	add	r1, sp, #16
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7fc fb1b 	bl	8001e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80057da:	4622      	mov	r2, r4
 80057dc:	4621      	mov	r1, r4
 80057de:	2017      	movs	r0, #23
 80057e0:	f7fc f8aa 	bl	8001938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80057e4:	2017      	movs	r0, #23
 80057e6:	f7fc f8db 	bl	80019a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80057ea:	4622      	mov	r2, r4
 80057ec:	4621      	mov	r1, r4
 80057ee:	2028      	movs	r0, #40	; 0x28
 80057f0:	f7fc f8a2 	bl	8001938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057f4:	2028      	movs	r0, #40	; 0x28
 80057f6:	f7fc f8d3 	bl	80019a0 <HAL_NVIC_EnableIRQ>

}
 80057fa:	b009      	add	sp, #36	; 0x24
 80057fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	40010800 	.word	0x40010800
 8005808:	40010c00 	.word	0x40010c00
 800580c:	10210000 	.word	0x10210000
 8005810:	40011000 	.word	0x40011000
 8005814:	10310000 	.word	0x10310000

08005818 <MX_ADC1_Init>:
{
 8005818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581c:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800581e:	2600      	movs	r6, #0
 8005820:	9601      	str	r6, [sp, #4]
 8005822:	9602      	str	r6, [sp, #8]
 8005824:	9603      	str	r6, [sp, #12]
  hadc1.Instance = ADC1;
 8005826:	4c2f      	ldr	r4, [pc, #188]	; (80058e4 <MX_ADC1_Init+0xcc>)
 8005828:	4b2f      	ldr	r3, [pc, #188]	; (80058e8 <MX_ADC1_Init+0xd0>)
 800582a:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800582c:	f44f 7880 	mov.w	r8, #256	; 0x100
 8005830:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005834:	2501      	movs	r5, #1
 8005836:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005838:	7526      	strb	r6, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800583a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800583e:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005840:	6066      	str	r6, [r4, #4]
  hadc1.Init.NbrOfConversion = 4;
 8005842:	2704      	movs	r7, #4
 8005844:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005846:	4620      	mov	r0, r4
 8005848:	f7fb ff64 	bl	8001714 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 800584c:	9601      	str	r6, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800584e:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005850:	2307      	movs	r3, #7
 8005852:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005854:	eb0d 0107 	add.w	r1, sp, r7
 8005858:	4620      	mov	r0, r4
 800585a:	f7fb fd4b 	bl	80012f4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 800585e:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005860:	2502      	movs	r5, #2
 8005862:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005864:	eb0d 0107 	add.w	r1, sp, r7
 8005868:	4620      	mov	r0, r4
 800586a:	f7fb fd43 	bl	80012f4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 800586e:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005870:	2303      	movs	r3, #3
 8005872:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005874:	eb0d 0107 	add.w	r1, sp, r7
 8005878:	4620      	mov	r0, r4
 800587a:	f7fb fd3b 	bl	80012f4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800587e:	2310      	movs	r3, #16
 8005880:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005882:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005884:	eb0d 0107 	add.w	r1, sp, r7
 8005888:	4620      	mov	r0, r4
 800588a:	f7fb fd33 	bl	80012f4 <HAL_ADC_ConfigChannel>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800588e:	4b17      	ldr	r3, [pc, #92]	; (80058ec <MX_ADC1_Init+0xd4>)
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	615a      	str	r2, [r3, #20]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	9b00      	ldr	r3, [sp, #0]
  hdma1.Instance = DMA1_Channel1;
 80058a2:	4d13      	ldr	r5, [pc, #76]	; (80058f0 <MX_ADC1_Init+0xd8>)
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <MX_ADC1_Init+0xdc>)
 80058a6:	602b      	str	r3, [r5, #0]
  hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058a8:	606e      	str	r6, [r5, #4]
  hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80058aa:	60ae      	str	r6, [r5, #8]
  hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	60eb      	str	r3, [r5, #12]
  hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80058b0:	f8c5 8010 	str.w	r8, [r5, #16]
  hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b8:	616b      	str	r3, [r5, #20]
  hdma1.Init.Mode = DMA_CIRCULAR;
 80058ba:	2320      	movs	r3, #32
 80058bc:	61ab      	str	r3, [r5, #24]
  hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80058be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058c2:	61eb      	str	r3, [r5, #28]
  HAL_ADCEx_Calibration_Start(&hadc1);
 80058c4:	4620      	mov	r0, r4
 80058c6:	f7fb ffad 	bl	8001824 <HAL_ADCEx_Calibration_Start>
  HAL_DMA_Init(&hdma1);
 80058ca:	4628      	mov	r0, r5
 80058cc:	f7fc f8a2 	bl	8001a14 <HAL_DMA_Init>
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80058d0:	6225      	str	r5, [r4, #32]
 80058d2:	626c      	str	r4, [r5, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, ADC_CHANNELS);
 80058d4:	463a      	mov	r2, r7
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <MX_ADC1_Init+0xe0>)
 80058d8:	4620      	mov	r0, r4
 80058da:	f7fb fe5d 	bl	8001598 <HAL_ADC_Start_DMA>
}
 80058de:	b004      	add	sp, #16
 80058e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e4:	20000818 	.word	0x20000818
 80058e8:	40012400 	.word	0x40012400
 80058ec:	40021000 	.word	0x40021000
 80058f0:	20000670 	.word	0x20000670
 80058f4:	40020008 	.word	0x40020008
 80058f8:	200007e0 	.word	0x200007e0

080058fc <MX_SPI2_Init>:
{
 80058fc:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80058fe:	480b      	ldr	r0, [pc, #44]	; (800592c <MX_SPI2_Init+0x30>)
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <MX_SPI2_Init+0x34>)
 8005902:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005904:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005908:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800590a:	2300      	movs	r3, #0
 800590c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800590e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005910:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005912:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005918:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800591a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800591c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800591e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005920:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005922:	230a      	movs	r3, #10
 8005924:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005926:	f7fc ffad 	bl	8002884 <HAL_SPI_Init>
}
 800592a:	bd08      	pop	{r3, pc}
 800592c:	200010b0 	.word	0x200010b0
 8005930:	40003800 	.word	0x40003800

08005934 <MX_TIM1_Init>:
{
 8005934:	b530      	push	{r4, r5, lr}
 8005936:	b097      	sub	sp, #92	; 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005938:	2400      	movs	r4, #0
 800593a:	9412      	str	r4, [sp, #72]	; 0x48
 800593c:	9413      	str	r4, [sp, #76]	; 0x4c
 800593e:	9414      	str	r4, [sp, #80]	; 0x50
 8005940:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005942:	9410      	str	r4, [sp, #64]	; 0x40
 8005944:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005946:	9409      	str	r4, [sp, #36]	; 0x24
 8005948:	940a      	str	r4, [sp, #40]	; 0x28
 800594a:	940b      	str	r4, [sp, #44]	; 0x2c
 800594c:	940c      	str	r4, [sp, #48]	; 0x30
 800594e:	940d      	str	r4, [sp, #52]	; 0x34
 8005950:	940e      	str	r4, [sp, #56]	; 0x38
 8005952:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005954:	2220      	movs	r2, #32
 8005956:	4621      	mov	r1, r4
 8005958:	a801      	add	r0, sp, #4
 800595a:	f000 faef 	bl	8005f3c <memset>
  htim1.Instance = TIM1;
 800595e:	4d21      	ldr	r5, [pc, #132]	; (80059e4 <MX_TIM1_Init+0xb0>)
 8005960:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <MX_TIM1_Init+0xb4>)
 8005962:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 71;
 8005964:	2347      	movs	r3, #71	; 0x47
 8005966:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005968:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 9800;
 800596a:	f242 6348 	movw	r3, #9800	; 0x2648
 800596e:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005970:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8005972:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005974:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005976:	4628      	mov	r0, r5
 8005978:	f7fd f982 	bl	8002c80 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800597c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005980:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005982:	a912      	add	r1, sp, #72	; 0x48
 8005984:	4628      	mov	r0, r5
 8005986:	f7fd fa3d 	bl	8002e04 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800598a:	4628      	mov	r0, r5
 800598c:	f7fd f991 	bl	8002cb2 <HAL_TIM_OC_Init>
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8005990:	2108      	movs	r1, #8
 8005992:	4628      	mov	r0, r5
 8005994:	f7fd f9a6 	bl	8002ce4 <HAL_TIM_OnePulse_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005998:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800599a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800599c:	a910      	add	r1, sp, #64	; 0x40
 800599e:	4628      	mov	r0, r5
 80059a0:	f7fd fa9d 	bl	8002ede <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80059a4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80059a6:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059a8:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80059aa:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059ac:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80059ae:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80059b0:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059b2:	4622      	mov	r2, r4
 80059b4:	a909      	add	r1, sp, #36	; 0x24
 80059b6:	4628      	mov	r0, r5
 80059b8:	f7fd f9ea 	bl	8002d90 <HAL_TIM_OC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80059bc:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80059be:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80059c0:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80059c2:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80059c4:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80059c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ca:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80059cc:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80059ce:	a901      	add	r1, sp, #4
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7fd faa7 	bl	8002f24 <HAL_TIMEx_ConfigBreakDeadTime>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80059d6:	2204      	movs	r2, #4
 80059d8:	a909      	add	r1, sp, #36	; 0x24
 80059da:	4628      	mov	r0, r5
 80059dc:	f7fd f9d8 	bl	8002d90 <HAL_TIM_OC_ConfigChannel>
}
 80059e0:	b017      	add	sp, #92	; 0x5c
 80059e2:	bd30      	pop	{r4, r5, pc}
 80059e4:	20000ac0 	.word	0x20000ac0
 80059e8:	40012c00 	.word	0x40012c00

080059ec <MX_USART3_UART_Init>:
{
 80059ec:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80059ee:	4808      	ldr	r0, [pc, #32]	; (8005a10 <MX_USART3_UART_Init+0x24>)
 80059f0:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <MX_USART3_UART_Init+0x28>)
 80059f2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80059f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80059f8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80059fa:	2300      	movs	r3, #0
 80059fc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80059fe:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a00:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a02:	220c      	movs	r2, #12
 8005a04:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a06:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a08:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a0a:	f7fd fb5f 	bl	80030cc <HAL_UART_Init>
}
 8005a0e:	bd08      	pop	{r3, pc}
 8005a10:	20000594 	.word	0x20000594
 8005a14:	40004800 	.word	0x40004800

08005a18 <SystemClock_Config>:
{
 8005a18:	b530      	push	{r4, r5, lr}
 8005a1a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a1c:	2400      	movs	r4, #0
 8005a1e:	940c      	str	r4, [sp, #48]	; 0x30
 8005a20:	940d      	str	r4, [sp, #52]	; 0x34
 8005a22:	940f      	str	r4, [sp, #60]	; 0x3c
 8005a24:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a26:	9405      	str	r4, [sp, #20]
 8005a28:	9406      	str	r4, [sp, #24]
 8005a2a:	9407      	str	r4, [sp, #28]
 8005a2c:	9408      	str	r4, [sp, #32]
 8005a2e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a30:	9401      	str	r4, [sp, #4]
 8005a32:	9402      	str	r4, [sp, #8]
 8005a34:	9403      	str	r4, [sp, #12]
 8005a36:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a38:	2201      	movs	r2, #1
 8005a3a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a40:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a42:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a44:	2502      	movs	r5, #2
 8005a46:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a48:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005a4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005a4e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a50:	a80a      	add	r0, sp, #40	; 0x28
 8005a52:	f7fc faf5 	bl	8002040 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a56:	230f      	movs	r3, #15
 8005a58:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a5a:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a5c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a62:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a64:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a66:	4629      	mov	r1, r5
 8005a68:	a805      	add	r0, sp, #20
 8005a6a:	f7fc fd29 	bl	80024c0 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005a6e:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a74:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a76:	a801      	add	r0, sp, #4
 8005a78:	f7fc fdfc 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
}
 8005a7c:	b015      	add	sp, #84	; 0x54
 8005a7e:	bd30      	pop	{r4, r5, pc}

08005a80 <main>:
{
 8005a80:	b508      	push	{r3, lr}
    HAL_Init();
 8005a82:	f7fb fb4d 	bl	8001120 <HAL_Init>
  SystemClock_Config();
 8005a86:	f7ff ffc7 	bl	8005a18 <SystemClock_Config>
  MX_GPIO_Init();
 8005a8a:	f7ff fe33 	bl	80056f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8005a8e:	f7ff fec3 	bl	8005818 <MX_ADC1_Init>
  MX_SPI2_Init();
 8005a92:	f7ff ff33 	bl	80058fc <MX_SPI2_Init>
  MX_TIM1_Init();
 8005a96:	f7ff ff4d 	bl	8005934 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8005a9a:	f7ff ffa7 	bl	80059ec <MX_USART3_UART_Init>
  LCD_Initalize();
 8005a9e:	f7fe f9cf 	bl	8003e40 <LCD_Initalize>
  ds18b20_initalize(0);
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f7fd fed8 	bl	8003858 <ds18b20_initalize>
  ntc_init();
 8005aa8:	f7fe fb2c 	bl	8004104 <ntc_init>
  rom_value_init();
 8005aac:	f7fe f8b8 	bl	8003c20 <rom_value_init>
  ui_populate_with_rom_data();
 8005ab0:	f7fe ffc2 	bl	8004a38 <ui_populate_with_rom_data>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1| TIM_IT_CC2);
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <main+0x64>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68d3      	ldr	r3, [r2, #12]
 8005aba:	f043 0306 	orr.w	r3, r3, #6
 8005abe:	60d3      	str	r3, [r2, #12]
  LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <main+0x68>)
 8005ac2:	2240      	movs	r2, #64	; 0x40
 8005ac4:	611a      	str	r2, [r3, #16]
	  lcd_circle_bufer_refresh();
 8005ac6:	f7fe fa7b 	bl	8003fc0 <lcd_circle_bufer_refresh>
	  ui_handler();
 8005aca:	f7ff fb55 	bl	8005178 <ui_handler>
	  ds18b20_convert_temperature(10);  //duration 5ms [10 - 15]ms read in  10 + 750 ms  = 95ms
 8005ace:	200a      	movs	r0, #10
 8005ad0:	f7fd fed2 	bl	8003878 <ds18b20_convert_temperature>
	  ds18b20_read_primary_sensor(770); //duration 5ms [835 - 940]ms read in  10 + 750ms  = 95ms
 8005ad4:	f240 3002 	movw	r0, #770	; 0x302
 8005ad8:	f7fd ff02 	bl	80038e0 <ds18b20_read_primary_sensor>
	  ntc_handler(100);
 8005adc:	2064      	movs	r0, #100	; 0x64
 8005ade:	f7fe fb55 	bl	800418c <ntc_handler>
 8005ae2:	e7f0      	b.n	8005ac6 <main+0x46>
 8005ae4:	20000ac0 	.word	0x20000ac0
 8005ae8:	40010800 	.word	0x40010800

08005aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005aec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <HAL_MspInit+0x3c>)
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	619a      	str	r2, [r3, #24]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	f002 0201 	and.w	r2, r2, #1
 8005afe:	9200      	str	r2, [sp, #0]
 8005b00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b08:	61da      	str	r2, [r3, #28]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b14:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <HAL_MspInit+0x40>)
 8005b16:	6853      	ldr	r3, [r2, #4]
 8005b18:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b22:	b002      	add	sp, #8
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40010000 	.word	0x40010000

08005b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b30:	b500      	push	{lr}
 8005b32:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b34:	2300      	movs	r3, #0
 8005b36:	9302      	str	r3, [sp, #8]
 8005b38:	9303      	str	r3, [sp, #12]
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8005b3e:	6802      	ldr	r2, [r0, #0]
 8005b40:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <HAL_ADC_MspInit+0x68>)
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d002      	beq.n	8005b4c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b46:	b007      	add	sp, #28
 8005b48:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b4c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	619a      	str	r2, [r3, #24]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005b5e:	9200      	str	r2, [sp, #0]
 8005b60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b62:	699a      	ldr	r2, [r3, #24]
 8005b64:	f042 0204 	orr.w	r2, r2, #4
 8005b68:	619a      	str	r2, [r3, #24]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005b74:	2307      	movs	r3, #7
 8005b76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b7c:	a902      	add	r1, sp, #8
 8005b7e:	4807      	ldr	r0, [pc, #28]	; (8005b9c <HAL_ADC_MspInit+0x6c>)
 8005b80:	f7fc f946 	bl	8001e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005b84:	2200      	movs	r2, #0
 8005b86:	4611      	mov	r1, r2
 8005b88:	2012      	movs	r0, #18
 8005b8a:	f7fb fed5 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005b8e:	2012      	movs	r0, #18
 8005b90:	f7fb ff06 	bl	80019a0 <HAL_NVIC_EnableIRQ>
}
 8005b94:	e7d7      	b.n	8005b46 <HAL_ADC_MspInit+0x16>
 8005b96:	bf00      	nop
 8005b98:	40012400 	.word	0x40012400
 8005b9c:	40010800 	.word	0x40010800

08005ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9302      	str	r3, [sp, #8]
 8005ba8:	9303      	str	r3, [sp, #12]
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI2)
 8005bae:	6802      	ldr	r2, [r0, #0]
 8005bb0:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <HAL_SPI_MspInit+0x70>)
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d001      	beq.n	8005bba <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005bb6:	b006      	add	sp, #24
 8005bb8:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005bba:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bc4:	61da      	str	r2, [r3, #28]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005bcc:	9200      	str	r2, [sp, #0]
 8005bce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	f042 0208 	orr.w	r2, r2, #8
 8005bd6:	619a      	str	r2, [r3, #24]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005be2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005be6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be8:	2302      	movs	r3, #2
 8005bea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bec:	2303      	movs	r3, #3
 8005bee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf0:	4c08      	ldr	r4, [pc, #32]	; (8005c14 <HAL_SPI_MspInit+0x74>)
 8005bf2:	a902      	add	r1, sp, #8
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7fc f90b 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c00:	2300      	movs	r3, #0
 8005c02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c06:	a902      	add	r1, sp, #8
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f7fc f901 	bl	8001e10 <HAL_GPIO_Init>
}
 8005c0e:	e7d2      	b.n	8005bb6 <HAL_SPI_MspInit+0x16>
 8005c10:	40003800 	.word	0x40003800
 8005c14:	40010c00 	.word	0x40010c00

08005c18 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8005c18:	6802      	ldr	r2, [r0, #0]
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_TIM_Base_MspInit+0x4c>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d000      	beq.n	8005c22 <HAL_TIM_Base_MspInit+0xa>
 8005c20:	4770      	bx	lr
{
 8005c22:	b500      	push	{lr}
 8005c24:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c26:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c30:	619a      	str	r2, [r3, #24]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4611      	mov	r1, r2
 8005c40:	2019      	movs	r0, #25
 8005c42:	f7fb fe79 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005c46:	2019      	movs	r0, #25
 8005c48:	f7fb feaa 	bl	80019a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	4611      	mov	r1, r2
 8005c50:	201b      	movs	r0, #27
 8005c52:	f7fb fe71 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005c56:	201b      	movs	r0, #27
 8005c58:	f7fb fea2 	bl	80019a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005c5c:	b003      	add	sp, #12
 8005c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c62:	bf00      	nop
 8005c64:	40012c00 	.word	0x40012c00

08005c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c68:	b530      	push	{r4, r5, lr}
 8005c6a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9302      	str	r3, [sp, #8]
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8005c76:	6802      	ldr	r2, [r0, #0]
 8005c78:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <HAL_UART_MspInit+0x80>)
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d001      	beq.n	8005c82 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005c7e:	b007      	add	sp, #28
 8005c80:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c82:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005c8c:	61da      	str	r2, [r3, #28]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005c94:	9200      	str	r2, [sp, #0]
 8005c96:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	619a      	str	r2, [r3, #24]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cb8:	4d0c      	ldr	r5, [pc, #48]	; (8005cec <HAL_UART_MspInit+0x84>)
 8005cba:	a902      	add	r1, sp, #8
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f7fc f8a7 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cc6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cc8:	2400      	movs	r4, #0
 8005cca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ccc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cce:	a902      	add	r1, sp, #8
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7fc f89d 	bl	8001e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4621      	mov	r1, r4
 8005cda:	2027      	movs	r0, #39	; 0x27
 8005cdc:	f7fb fe2c 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ce0:	2027      	movs	r0, #39	; 0x27
 8005ce2:	f7fb fe5d 	bl	80019a0 <HAL_NVIC_EnableIRQ>
}
 8005ce6:	e7ca      	b.n	8005c7e <HAL_UART_MspInit+0x16>
 8005ce8:	40004800 	.word	0x40004800
 8005cec:	40010c00 	.word	0x40010c00

08005cf0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005cf0:	4770      	bx	lr

08005cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cf2:	e7fe      	b.n	8005cf2 <HardFault_Handler>

08005cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cf4:	e7fe      	b.n	8005cf4 <MemManage_Handler>

08005cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cf6:	e7fe      	b.n	8005cf6 <BusFault_Handler>

08005cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cf8:	e7fe      	b.n	8005cf8 <UsageFault_Handler>

08005cfa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cfa:	4770      	bx	lr

08005cfc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cfc:	4770      	bx	lr

08005cfe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cfe:	4770      	bx	lr

08005d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//HAL_IncTick();

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d02:	f7fb fa1f 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  ui_handler_flag = UI_HANDLER_FLAG_FREE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <SysTick_Handler+0x2c>)
 8005d0a:	7013      	strb	r3, [r2, #0]
  ntc_handler_flag = NTC_HANDLER_FLAG_FREE;
 8005d0c:	4a08      	ldr	r2, [pc, #32]	; (8005d30 <SysTick_Handler+0x30>)
 8005d0e:	7013      	strb	r3, [r2, #0]
  ds_handler_flag = DS_HANDLER_FLAG_FREE;
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <SysTick_Handler+0x34>)
 8005d12:	7013      	strb	r3, [r2, #0]
  if(++ms_counter >= 1000)
 8005d14:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <SysTick_Handler+0x38>)
 8005d16:	8813      	ldrh	r3, [r2, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]
 8005d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d22:	d302      	bcc.n	8005d2a <SysTick_Handler+0x2a>
  {
  	ms_counter = 0;
 8005d24:	4613      	mov	r3, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8005d2a:	bd08      	pop	{r3, pc}
 8005d2c:	20000d10 	.word	0x20000d10
 8005d30:	20000590 	.word	0x20000590
 8005d34:	20000a28 	.word	0x20000a28
 8005d38:	20000748 	.word	0x20000748

08005d3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005d3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005d3e:	4802      	ldr	r0, [pc, #8]	; (8005d48 <ADC1_2_IRQHandler+0xc>)
 8005d40:	f7fb fa43 	bl	80011ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005d44:	bd08      	pop	{r3, pc}
 8005d46:	bf00      	nop
 8005d48:	20000818 	.word	0x20000818

08005d4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ZCD_Pin))
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <EXTI9_5_IRQHandler+0x2c>)
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d56:	d103      	bne.n	8005d60 <EXTI9_5_IRQHandler+0x14>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
		FAN_CTRL_GPIO_Port->BRR = FAN_CTRL_Pin;
		//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005d58:	2080      	movs	r0, #128	; 0x80
 8005d5a:	f7fc f94d 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d5e:	bd08      	pop	{r3, pc}
		HAL_TIM_Base_Start_IT(&htim1);
 8005d60:	4806      	ldr	r0, [pc, #24]	; (8005d7c <EXTI9_5_IRQHandler+0x30>)
 8005d62:	f7fc fe7e 	bl	8002a62 <HAL_TIM_Base_Start_IT>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 8005d66:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <EXTI9_5_IRQHandler+0x34>)
 8005d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d6c:	615a      	str	r2, [r3, #20]
		FAN_CTRL_GPIO_Port->BRR = FAN_CTRL_Pin;
 8005d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d72:	2210      	movs	r2, #16
 8005d74:	615a      	str	r2, [r3, #20]
 8005d76:	e7ef      	b.n	8005d58 <EXTI9_5_IRQHandler+0xc>
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	20000ac0 	.word	0x20000ac0
 8005d80:	40010800 	.word	0x40010800

08005d84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005d84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;

	// for a test
	//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 8005d86:	4b04      	ldr	r3, [pc, #16]	; (8005d98 <TIM1_UP_IRQHandler+0x14>)
 8005d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d8c:	615a      	str	r2, [r3, #20]


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d8e:	4803      	ldr	r0, [pc, #12]	; (8005d9c <TIM1_UP_IRQHandler+0x18>)
 8005d90:	f7fc fe7f 	bl	8002a92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005d94:	bd08      	pop	{r3, pc}
 8005d96:	bf00      	nop
 8005d98:	40010800 	.word	0x40010800
 8005d9c:	20000ac0 	.word	0x20000ac0

08005da0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005da0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
	// for a test	//LED_RED_GPIO_Port->BSRR = LED_RED_Pin;
	if(TIM1->SR & TIM_IT_CC1)
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <TIM1_CC_IRQHandler+0x2c>)
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f013 0f02 	tst.w	r3, #2
 8005daa:	d003      	beq.n	8005db4 <TIM1_CC_IRQHandler+0x14>
	{
		HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <TIM1_CC_IRQHandler+0x30>)
 8005dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005db2:	611a      	str	r2, [r3, #16]
	}

	if(TIM1->SR & TIM_IT_CC2)
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <TIM1_CC_IRQHandler+0x2c>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f013 0f04 	tst.w	r3, #4
 8005dbc:	d002      	beq.n	8005dc4 <TIM1_CC_IRQHandler+0x24>
	{
		FAN_CTRL_GPIO_Port->BSRR = FAN_CTRL_Pin;
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <TIM1_CC_IRQHandler+0x34>)
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	611a      	str	r2, [r3, #16]
	}



  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dc4:	4804      	ldr	r0, [pc, #16]	; (8005dd8 <TIM1_CC_IRQHandler+0x38>)
 8005dc6:	f7fc fe64 	bl	8002a92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005dca:	bd08      	pop	{r3, pc}
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40010800 	.word	0x40010800
 8005dd4:	40010c00 	.word	0x40010c00
 8005dd8:	20000ac0 	.word	0x20000ac0

08005ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ddc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005dde:	4802      	ldr	r0, [pc, #8]	; (8005de8 <USART3_IRQHandler+0xc>)
 8005de0:	f7fd fa02 	bl	80031e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005de4:	bd08      	pop	{r3, pc}
 8005de6:	bf00      	nop
 8005de8:	20000594 	.word	0x20000594

08005dec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if((EXTI->PR & BUTTON_EXIT_Pin) != 0x00u)
 8005dee:	4b1a      	ldr	r3, [pc, #104]	; (8005e58 <EXTI15_10_IRQHandler+0x6c>)
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005df6:	d112      	bne.n	8005e1e <EXTI15_10_IRQHandler+0x32>
	{
		ui_button_handler(UI_BUTTON_BACK); // ui_menu_back();
	}
	else if((EXTI->PR & BUTTON_OK_Pin) != 0x00u)
 8005df8:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <EXTI15_10_IRQHandler+0x6c>)
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005e00:	d121      	bne.n	8005e46 <EXTI15_10_IRQHandler+0x5a>
	{
		ui_button_handler(UI_BUTTON_OK);
	}
	else if((EXTI->PR & BUTTON_DOWN_Pin) != 0x00u)
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <EXTI15_10_IRQHandler+0x6c>)
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005e0a:	d120      	bne.n	8005e4e <EXTI15_10_IRQHandler+0x62>
	{
		ui_button_handler(UI_BUTTON_DOWN);
	}
	else if((EXTI->PR & BUTTON_UP_Pin) != 0x00u)
 8005e0c:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <EXTI15_10_IRQHandler+0x6c>)
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005e14:	d006      	beq.n	8005e24 <EXTI15_10_IRQHandler+0x38>
	{
		ui_button_handler(UI_BUTTON_UP);
 8005e16:	2000      	movs	r0, #0
 8005e18:	f7fe fae0 	bl	80043dc <ui_button_handler>
 8005e1c:	e002      	b.n	8005e24 <EXTI15_10_IRQHandler+0x38>
		ui_button_handler(UI_BUTTON_BACK); // ui_menu_back();
 8005e1e:	2003      	movs	r0, #3
 8005e20:	f7fe fadc 	bl	80043dc <ui_button_handler>
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005e24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005e28:	f7fc f8e6 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005e2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005e30:	f7fc f8e2 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005e34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005e38:	f7fc f8de 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005e3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005e40:	f7fc f8da 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005e44:	bd08      	pop	{r3, pc}
		ui_button_handler(UI_BUTTON_OK);
 8005e46:	2002      	movs	r0, #2
 8005e48:	f7fe fac8 	bl	80043dc <ui_button_handler>
 8005e4c:	e7ea      	b.n	8005e24 <EXTI15_10_IRQHandler+0x38>
		ui_button_handler(UI_BUTTON_DOWN);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f7fe fac4 	bl	80043dc <ui_button_handler>
 8005e54:	e7e6      	b.n	8005e24 <EXTI15_10_IRQHandler+0x38>
 8005e56:	bf00      	nop
 8005e58:	40010400 	.word	0x40010400

08005e5c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <SystemInit+0x40>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <SystemInit+0x44>)
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005e74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e78:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e80:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005e88:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005e8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005e8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <SystemInit+0x48>)
 8005e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e96:	609a      	str	r2, [r3, #8]
#endif 
}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	f8ff0000 	.word	0xf8ff0000
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005ea8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005eaa:	e003      	b.n	8005eb4 <LoopCopyDataInit>

08005eac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005eae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005eb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005eb2:	3104      	adds	r1, #4

08005eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005eb4:	480a      	ldr	r0, [pc, #40]	; (8005ee0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005eb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005eba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005ebc:	d3f6      	bcc.n	8005eac <CopyDataInit>
  ldr r2, =_sbss
 8005ebe:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005ec0:	e002      	b.n	8005ec8 <LoopFillZerobss>

08005ec2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005ec2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005ec4:	f842 3b04 	str.w	r3, [r2], #4

08005ec8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005ec8:	4b08      	ldr	r3, [pc, #32]	; (8005eec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005eca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ecc:	d3f9      	bcc.n	8005ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ece:	f7ff ffc5 	bl	8005e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ed2:	f000 f80f 	bl	8005ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005ed6:	f7ff fdd3 	bl	8005a80 <main>
  bx lr
 8005eda:	4770      	bx	lr
  ldr r3, =_sidata
 8005edc:	08006f48 	.word	0x08006f48
  ldr r0, =_sdata
 8005ee0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005ee4:	2000049c 	.word	0x2000049c
  ldr r2, =_sbss
 8005ee8:	200004a0 	.word	0x200004a0
  ldr r3, = _ebss
 8005eec:	20001114 	.word	0x20001114

08005ef0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ef0:	e7fe      	b.n	8005ef0 <CAN1_RX1_IRQHandler>
	...

08005ef4 <__libc_init_array>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	2500      	movs	r5, #0
 8005ef8:	4e0c      	ldr	r6, [pc, #48]	; (8005f2c <__libc_init_array+0x38>)
 8005efa:	4c0d      	ldr	r4, [pc, #52]	; (8005f30 <__libc_init_array+0x3c>)
 8005efc:	1ba4      	subs	r4, r4, r6
 8005efe:	10a4      	asrs	r4, r4, #2
 8005f00:	42a5      	cmp	r5, r4
 8005f02:	d109      	bne.n	8005f18 <__libc_init_array+0x24>
 8005f04:	f000 f89e 	bl	8006044 <_init>
 8005f08:	2500      	movs	r5, #0
 8005f0a:	4e0a      	ldr	r6, [pc, #40]	; (8005f34 <__libc_init_array+0x40>)
 8005f0c:	4c0a      	ldr	r4, [pc, #40]	; (8005f38 <__libc_init_array+0x44>)
 8005f0e:	1ba4      	subs	r4, r4, r6
 8005f10:	10a4      	asrs	r4, r4, #2
 8005f12:	42a5      	cmp	r5, r4
 8005f14:	d105      	bne.n	8005f22 <__libc_init_array+0x2e>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f1c:	4798      	blx	r3
 8005f1e:	3501      	adds	r5, #1
 8005f20:	e7ee      	b.n	8005f00 <__libc_init_array+0xc>
 8005f22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f26:	4798      	blx	r3
 8005f28:	3501      	adds	r5, #1
 8005f2a:	e7f2      	b.n	8005f12 <__libc_init_array+0x1e>
 8005f2c:	08006f3c 	.word	0x08006f3c
 8005f30:	08006f3c 	.word	0x08006f3c
 8005f34:	08006f3c 	.word	0x08006f3c
 8005f38:	08006f44 	.word	0x08006f44

08005f3c <memset>:
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4402      	add	r2, r0
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d100      	bne.n	8005f46 <memset+0xa>
 8005f44:	4770      	bx	lr
 8005f46:	f803 1b01 	strb.w	r1, [r3], #1
 8005f4a:	e7f9      	b.n	8005f40 <memset+0x4>

08005f4c <register_fini>:
 8005f4c:	4b02      	ldr	r3, [pc, #8]	; (8005f58 <register_fini+0xc>)
 8005f4e:	b113      	cbz	r3, 8005f56 <register_fini+0xa>
 8005f50:	4802      	ldr	r0, [pc, #8]	; (8005f5c <register_fini+0x10>)
 8005f52:	f000 b805 	b.w	8005f60 <atexit>
 8005f56:	4770      	bx	lr
 8005f58:	00000000 	.word	0x00000000
 8005f5c:	08005f6d 	.word	0x08005f6d

08005f60 <atexit>:
 8005f60:	2300      	movs	r3, #0
 8005f62:	4601      	mov	r1, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 b816 	b.w	8005f98 <__register_exitproc>

08005f6c <__libc_fini_array>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d07      	ldr	r5, [pc, #28]	; (8005f8c <__libc_fini_array+0x20>)
 8005f70:	4c07      	ldr	r4, [pc, #28]	; (8005f90 <__libc_fini_array+0x24>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	b91c      	cbnz	r4, 8005f80 <__libc_fini_array+0x14>
 8005f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f7c:	f000 b868 	b.w	8006050 <_fini>
 8005f80:	3c01      	subs	r4, #1
 8005f82:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005f86:	4798      	blx	r3
 8005f88:	e7f5      	b.n	8005f76 <__libc_fini_array+0xa>
 8005f8a:	bf00      	nop
 8005f8c:	08006f44 	.word	0x08006f44
 8005f90:	08006f48 	.word	0x08006f48

08005f94 <__retarget_lock_acquire_recursive>:
 8005f94:	4770      	bx	lr

08005f96 <__retarget_lock_release_recursive>:
 8005f96:	4770      	bx	lr

08005f98 <__register_exitproc>:
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4c26      	ldr	r4, [pc, #152]	; (8006038 <__register_exitproc+0xa0>)
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	4698      	mov	r8, r3
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	4691      	mov	r9, r2
 8005fa8:	f7ff fff4 	bl	8005f94 <__retarget_lock_acquire_recursive>
 8005fac:	4b23      	ldr	r3, [pc, #140]	; (800603c <__register_exitproc+0xa4>)
 8005fae:	681d      	ldr	r5, [r3, #0]
 8005fb0:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8005fb4:	b918      	cbnz	r0, 8005fbe <__register_exitproc+0x26>
 8005fb6:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8005fba:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8005fbe:	6843      	ldr	r3, [r0, #4]
 8005fc0:	2b1f      	cmp	r3, #31
 8005fc2:	dd19      	ble.n	8005ff8 <__register_exitproc+0x60>
 8005fc4:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <__register_exitproc+0xa8>)
 8005fc6:	b933      	cbnz	r3, 8005fd6 <__register_exitproc+0x3e>
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	f7ff ffe4 	bl	8005f96 <__retarget_lock_release_recursive>
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005fda:	f3af 8000 	nop.w
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d0f2      	beq.n	8005fc8 <__register_exitproc+0x30>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8005fe8:	6042      	str	r2, [r0, #4]
 8005fea:	6003      	str	r3, [r0, #0]
 8005fec:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8005ff0:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8005ff4:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8005ff8:	6843      	ldr	r3, [r0, #4]
 8005ffa:	b19e      	cbz	r6, 8006024 <__register_exitproc+0x8c>
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8006002:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8006006:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800600a:	409a      	lsls	r2, r3
 800600c:	4311      	orrs	r1, r2
 800600e:	2e02      	cmp	r6, #2
 8006010:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8006014:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8006018:	bf02      	ittt	eq
 800601a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800601e:	430a      	orreq	r2, r1
 8006020:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	3302      	adds	r3, #2
 8006028:	6042      	str	r2, [r0, #4]
 800602a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	f7ff ffb1 	bl	8005f96 <__retarget_lock_release_recursive>
 8006034:	2000      	movs	r0, #0
 8006036:	e7cc      	b.n	8005fd2 <__register_exitproc+0x3a>
 8006038:	20000498 	.word	0x20000498
 800603c:	08006f38 	.word	0x08006f38
 8006040:	00000000 	.word	0x00000000

08006044 <_init>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr

08006050 <_fini>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr
