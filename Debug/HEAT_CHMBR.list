
HEAT_CHMBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005954  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800692c  0800692c  0002051c  2**0
                  CONTENTS
  4 .ARM          00000000  0800692c  0800692c  0002051c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800692c  0800692c  0002051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000051c  20000000  08006938  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000520  08006e54  00020520  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200010c0  08006e54  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243dc  00000000  00000000  00020545  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043e0  00000000  00000000  00044921  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ddf7  00000000  00000000  00048d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014a8  00000000  00000000  00056af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001520  00000000  00000000  00057fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00017a3d  00000000  00000000  000594c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012631  00000000  00000000  00070efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007b72a  00000000  00000000  0008352e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000fec58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cb8  00000000  00000000  000fecd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000520 	.word	0x20000520
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a4c 	.word	0x08005a4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000524 	.word	0x20000524
 800014c:	08005a4c 	.word	0x08005a4c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	d1ed      	bne.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b510      	push	{r4, lr}
 8001086:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_InitTick+0x40>)
 800108a:	7818      	ldrb	r0, [r3, #0]
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	fbb3 f3f0 	udiv	r3, r3, r0
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_InitTick+0x44>)
 8001096:	6810      	ldr	r0, [r2, #0]
 8001098:	fbb0 f0f3 	udiv	r0, r0, r3
 800109c:	f000 fc66 	bl	800196c <HAL_SYSTICK_Config>
 80010a0:	b968      	cbnz	r0, 80010be <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	2c0f      	cmp	r4, #15
 80010a4:	d901      	bls.n	80010aa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010a6:	2001      	movs	r0, #1
 80010a8:	e00a      	b.n	80010c0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010aa:	2200      	movs	r2, #0
 80010ac:	4621      	mov	r1, r4
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	f000 fc19 	bl	80018e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_InitTick+0x48>)
 80010b8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2000      	movs	r0, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80010be:	2001      	movs	r0, #1
}
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	bf00      	nop
 80010c4:	20000000 	.word	0x20000000
 80010c8:	200000e8 	.word	0x200000e8
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_Init>:
{
 80010d0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_Init+0x20>)
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 fbf1 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ffce 	bl	8001084 <HAL_InitTick>
  HAL_MspInit();
 80010e8:	f004 fa04 	bl	80054f4 <HAL_MspInit>
}
 80010ec:	2000      	movs	r0, #0
 80010ee:	bd08      	pop	{r3, pc}
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <HAL_IncTick+0x10>)
 80010f6:	6811      	ldr	r1, [r2, #0]
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_IncTick+0x14>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	440b      	add	r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000550 	.word	0x20000550
 8001108:	20000000 	.word	0x20000000

0800110c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <HAL_GetTick+0x8>)
 800110e:	6818      	ldr	r0, [r3, #0]
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000550 	.word	0x20000550

08001118 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001118:	4770      	bx	lr

0800111a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800111a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800111c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800111e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001120:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001124:	d003      	beq.n	800112e <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4798      	blx	r3
  }
}
 800112c:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800112e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	6892      	ldr	r2, [r2, #8]
 800113a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800113e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001142:	d003      	beq.n	800114c <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffe7 	bl	8001118 <HAL_ADC_ConvCpltCallback>
 800114a:	e7ef      	b.n	800112c <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800114c:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800114e:	2a00      	cmp	r2, #0
 8001150:	d1f8      	bne.n	8001144 <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800115c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001160:	d1f0      	bne.n	8001144 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001164:	f042 0201 	orr.w	r2, r2, #1
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
 800116a:	e7eb      	b.n	8001144 <ADC_DMAConvCplt+0x2a>

0800116c <HAL_ADC_ConvHalfCpltCallback>:
}
 800116c:	4770      	bx	lr

0800116e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800116e:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001170:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001172:	f7ff fffb 	bl	800116c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001176:	bd08      	pop	{r3, pc}

08001178 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001178:	4770      	bx	lr

0800117a <HAL_ADC_IRQHandler>:
{
 800117a:	b510      	push	{r4, lr}
 800117c:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800117e:	6803      	ldr	r3, [r0, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	f012 0f20 	tst.w	r2, #32
 8001186:	d018      	beq.n	80011ba <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f012 0f02 	tst.w	r2, #2
 800118e:	d014      	beq.n	80011ba <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001190:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001192:	f012 0f10 	tst.w	r2, #16
 8001196:	d103      	bne.n	80011a0 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001198:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800119a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800119e:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80011a6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80011aa:	d038      	beq.n	800121e <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff ffb3 	bl	8001118 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	f06f 0212 	mvn.w	r2, #18
 80011b8:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80011c2:	d022      	beq.n	800120a <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	f012 0f04 	tst.w	r2, #4
 80011ca:	d01e      	beq.n	800120a <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011ce:	f012 0f10 	tst.w	r2, #16
 80011d2:	d103      	bne.n	80011dc <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011da:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80011e2:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80011e6:	d031      	beq.n	800124c <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011e8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80011ea:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011f6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80011fa:	d024      	beq.n	8001246 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011fc:	4620      	mov	r0, r4
 80011fe:	f000 fb5f 	bl	80018c0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	f06f 020c 	mvn.w	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001212:	d003      	beq.n	800121c <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f013 0f01 	tst.w	r3, #1
 800121a:	d128      	bne.n	800126e <HAL_ADC_IRQHandler+0xf4>
}
 800121c:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800121e:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001220:	2a00      	cmp	r2, #0
 8001222:	d1c3      	bne.n	80011ac <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	f022 0220 	bic.w	r2, r2, #32
 800122a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800122c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800122e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001232:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001234:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001236:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800123a:	d1b7      	bne.n	80011ac <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800123c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	62a3      	str	r3, [r4, #40]	; 0x28
 8001244:	e7b2      	b.n	80011ac <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001246:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001248:	2a00      	cmp	r2, #0
 800124a:	d1d7      	bne.n	80011fc <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001252:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800125a:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800125c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800125e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001262:	d1cb      	bne.n	80011fc <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	62a3      	str	r3, [r4, #40]	; 0x28
 800126c:	e7c6      	b.n	80011fc <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800126e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff ff7e 	bl	8001178 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	f06f 0201 	mvn.w	r2, #1
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	e7ca      	b.n	800121c <HAL_ADC_IRQHandler+0xa2>

08001286 <HAL_ADC_ErrorCallback>:
}
 8001286:	4770      	bx	lr

08001288 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001288:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800128a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800128c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800128e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001292:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001294:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800129c:	f7ff fff3 	bl	8001286 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012a0:	bd08      	pop	{r3, pc}
	...

080012a4 <HAL_ADC_ConfigChannel>:
{ 
 80012a4:	b430      	push	{r4, r5}
 80012a6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80012ac:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	f000 808b 	beq.w	80013cc <HAL_ADC_ConfigChannel+0x128>
 80012b6:	4602      	mov	r2, r0
 80012b8:	2301      	movs	r3, #1
 80012ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80012be:	684b      	ldr	r3, [r1, #4]
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d829      	bhi.n	8001318 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012c4:	6805      	ldr	r5, [r0, #0]
 80012c6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80012c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012cc:	3b05      	subs	r3, #5
 80012ce:	241f      	movs	r4, #31
 80012d0:	409c      	lsls	r4, r3
 80012d2:	ea20 0004 	bic.w	r0, r0, r4
 80012d6:	680c      	ldr	r4, [r1, #0]
 80012d8:	fa04 f303 	lsl.w	r3, r4, r3
 80012dc:	4303      	orrs	r3, r0
 80012de:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012e0:	680b      	ldr	r3, [r1, #0]
 80012e2:	2b09      	cmp	r3, #9
 80012e4:	d938      	bls.n	8001358 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012e6:	6815      	ldr	r5, [r2, #0]
 80012e8:	68e8      	ldr	r0, [r5, #12]
 80012ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012ee:	3b1e      	subs	r3, #30
 80012f0:	2407      	movs	r4, #7
 80012f2:	409c      	lsls	r4, r3
 80012f4:	ea20 0004 	bic.w	r0, r0, r4
 80012f8:	688c      	ldr	r4, [r1, #8]
 80012fa:	fa04 f303 	lsl.w	r3, r4, r3
 80012fe:	4303      	orrs	r3, r0
 8001300:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001302:	680b      	ldr	r3, [r1, #0]
 8001304:	3b10      	subs	r3, #16
 8001306:	2b01      	cmp	r3, #1
 8001308:	d934      	bls.n	8001374 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800130c:	2300      	movs	r3, #0
 800130e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8001312:	b002      	add	sp, #8
 8001314:	bc30      	pop	{r4, r5}
 8001316:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001318:	2b0c      	cmp	r3, #12
 800131a:	d80e      	bhi.n	800133a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800131c:	6805      	ldr	r5, [r0, #0]
 800131e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001320:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001324:	3b23      	subs	r3, #35	; 0x23
 8001326:	241f      	movs	r4, #31
 8001328:	409c      	lsls	r4, r3
 800132a:	ea20 0004 	bic.w	r0, r0, r4
 800132e:	680c      	ldr	r4, [r1, #0]
 8001330:	fa04 f303 	lsl.w	r3, r4, r3
 8001334:	4303      	orrs	r3, r0
 8001336:	632b      	str	r3, [r5, #48]	; 0x30
 8001338:	e7d2      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800133a:	6805      	ldr	r5, [r0, #0]
 800133c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800133e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001342:	3b41      	subs	r3, #65	; 0x41
 8001344:	241f      	movs	r4, #31
 8001346:	409c      	lsls	r4, r3
 8001348:	ea20 0004 	bic.w	r0, r0, r4
 800134c:	680c      	ldr	r4, [r1, #0]
 800134e:	fa04 f303 	lsl.w	r3, r4, r3
 8001352:	4303      	orrs	r3, r0
 8001354:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001356:	e7c3      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001358:	6815      	ldr	r5, [r2, #0]
 800135a:	6928      	ldr	r0, [r5, #16]
 800135c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001360:	2407      	movs	r4, #7
 8001362:	409c      	lsls	r4, r3
 8001364:	ea20 0004 	bic.w	r0, r0, r4
 8001368:	688c      	ldr	r4, [r1, #8]
 800136a:	fa04 f303 	lsl.w	r3, r4, r3
 800136e:	4303      	orrs	r3, r0
 8001370:	612b      	str	r3, [r5, #16]
 8001372:	e7c6      	b.n	8001302 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	4816      	ldr	r0, [pc, #88]	; (80013d0 <HAL_ADC_ConfigChannel+0x12c>)
 8001378:	4283      	cmp	r3, r0
 800137a:	d005      	beq.n	8001388 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800137c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001384:	2001      	movs	r0, #1
 8001386:	e7c1      	b.n	800130c <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001388:	6898      	ldr	r0, [r3, #8]
 800138a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800138e:	d11b      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001390:	6898      	ldr	r0, [r3, #8]
 8001392:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001396:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001398:	680b      	ldr	r3, [r1, #0]
 800139a:	2b10      	cmp	r3, #16
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139e:	2000      	movs	r0, #0
 80013a0:	e7b4      	b.n	800130c <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_ADC_ConfigChannel+0x130>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	490c      	ldr	r1, [pc, #48]	; (80013d8 <HAL_ADC_ConfigChannel+0x134>)
 80013a8:	fba1 1303 	umull	r1, r3, r1, r3
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013b2:	0059      	lsls	r1, r3, #1
 80013b4:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80013b6:	e002      	b.n	80013be <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 80013b8:	9b01      	ldr	r3, [sp, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f9      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c4:	2000      	movs	r0, #0
 80013c6:	e7a1      	b.n	800130c <HAL_ADC_ConfigChannel+0x68>
 80013c8:	2000      	movs	r0, #0
 80013ca:	e79f      	b.n	800130c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80013cc:	2002      	movs	r0, #2
 80013ce:	e7a0      	b.n	8001312 <HAL_ADC_ConfigChannel+0x6e>
 80013d0:	40012400 	.word	0x40012400
 80013d4:	200000e8 	.word	0x200000e8
 80013d8:	431bde83 	.word	0x431bde83

080013dc <ADC_Enable>:
{
 80013dc:	b530      	push	{r4, r5, lr}
 80013de:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013e4:	6803      	ldr	r3, [r0, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	f012 0f01 	tst.w	r2, #1
 80013ec:	d12e      	bne.n	800144c <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <ADC_Enable+0x78>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a17      	ldr	r2, [pc, #92]	; (8001458 <ADC_Enable+0x7c>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	0c9b      	lsrs	r3, r3, #18
 8001402:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001404:	e002      	b.n	800140c <ADC_Enable+0x30>
      wait_loop_index--;
 8001406:	9b01      	ldr	r3, [sp, #4]
 8001408:	3b01      	subs	r3, #1
 800140a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800140c:	9b01      	ldr	r3, [sp, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f9      	bne.n	8001406 <ADC_Enable+0x2a>
 8001412:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001414:	f7ff fe7a 	bl	800110c <HAL_GetTick>
 8001418:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f013 0f01 	tst.w	r3, #1
 8001422:	d111      	bne.n	8001448 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001424:	f7ff fe72 	bl	800110c <HAL_GetTick>
 8001428:	1b40      	subs	r0, r0, r5
 800142a:	2802      	cmp	r0, #2
 800142c:	d9f5      	bls.n	800141a <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800143e:	2300      	movs	r3, #0
 8001440:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001444:	2001      	movs	r0, #1
 8001446:	e002      	b.n	800144e <ADC_Enable+0x72>
  return HAL_OK;
 8001448:	2000      	movs	r0, #0
 800144a:	e000      	b.n	800144e <ADC_Enable+0x72>
 800144c:	2000      	movs	r0, #0
}
 800144e:	b003      	add	sp, #12
 8001450:	bd30      	pop	{r4, r5, pc}
 8001452:	bf00      	nop
 8001454:	200000e8 	.word	0x200000e8
 8001458:	431bde83 	.word	0x431bde83

0800145c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800145c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001460:	2b01      	cmp	r3, #1
 8001462:	d06a      	beq.n	800153a <HAL_ADC_Start+0xde>
{
 8001464:	b510      	push	{r4, lr}
 8001466:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001468:	2301      	movs	r3, #1
 800146a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800146e:	f7ff ffb5 	bl	80013dc <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001472:	4602      	mov	r2, r0
 8001474:	2800      	cmp	r0, #0
 8001476:	d15b      	bne.n	8001530 <HAL_ADC_Start+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 8001478:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800147a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	492d      	ldr	r1, [pc, #180]	; (8001540 <HAL_ADC_Start+0xe4>)
 800148c:	428b      	cmp	r3, r1
 800148e:	d027      	beq.n	80014e0 <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001490:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001492:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8001496:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800149e:	d005      	beq.n	80014ac <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014a2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80014a6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80014aa:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014ae:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 80014b2:	d02b      	beq.n	800150c <HAL_ADC_Start+0xb0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014b6:	f021 0106 	bic.w	r1, r1, #6
 80014ba:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80014bc:	2100      	movs	r1, #0
 80014be:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014c2:	f06f 0102 	mvn.w	r1, #2
 80014c6:	6019      	str	r1, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	6899      	ldr	r1, [r3, #8]
 80014cc:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 80014d0:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 80014d4:	d01d      	beq.n	8001512 <HAL_ADC_Start+0xb6>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80014dc:	6099      	str	r1, [r3, #8]
 80014de:	e02a      	b.n	8001536 <HAL_ADC_Start+0xda>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e0:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80014e4:	6849      	ldr	r1, [r1, #4]
 80014e6:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80014ea:	d0d1      	beq.n	8001490 <HAL_ADC_Start+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80014f2:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014f4:	4913      	ldr	r1, [pc, #76]	; (8001544 <HAL_ADC_Start+0xe8>)
 80014f6:	6849      	ldr	r1, [r1, #4]
 80014f8:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80014fc:	d0d6      	beq.n	80014ac <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001500:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001504:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001508:	62a1      	str	r1, [r4, #40]	; 0x28
 800150a:	e7cf      	b.n	80014ac <HAL_ADC_Start+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800150c:	2100      	movs	r1, #0
 800150e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001510:	e7d4      	b.n	80014bc <HAL_ADC_Start+0x60>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001512:	490b      	ldr	r1, [pc, #44]	; (8001540 <HAL_ADC_Start+0xe4>)
 8001514:	428b      	cmp	r3, r1
 8001516:	d004      	beq.n	8001522 <HAL_ADC_Start+0xc6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001518:	6899      	ldr	r1, [r3, #8]
 800151a:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 800151e:	6099      	str	r1, [r3, #8]
 8001520:	e009      	b.n	8001536 <HAL_ADC_Start+0xda>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001522:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001526:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001528:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800152c:	d1d3      	bne.n	80014d6 <HAL_ADC_Start+0x7a>
 800152e:	e7f3      	b.n	8001518 <HAL_ADC_Start+0xbc>
    __HAL_UNLOCK(hadc);
 8001530:	2300      	movs	r3, #0
 8001532:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001536:	4610      	mov	r0, r2
 8001538:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800153a:	2202      	movs	r2, #2
}
 800153c:	4610      	mov	r0, r2
 800153e:	4770      	bx	lr
 8001540:	40012800 	.word	0x40012800
 8001544:	40012400 	.word	0x40012400

08001548 <HAL_ADC_Start_DMA>:
{
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800154a:	6804      	ldr	r4, [r0, #0]
 800154c:	4d45      	ldr	r5, [pc, #276]	; (8001664 <HAL_ADC_Start_DMA+0x11c>)
 800154e:	42ac      	cmp	r4, r5
 8001550:	d05b      	beq.n	800160a <HAL_ADC_Start_DMA+0xc2>
 8001552:	4b45      	ldr	r3, [pc, #276]	; (8001668 <HAL_ADC_Start_DMA+0x120>)
 8001554:	429c      	cmp	r4, r3
 8001556:	d058      	beq.n	800160a <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 8001558:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800155c:	2c01      	cmp	r4, #1
 800155e:	d07e      	beq.n	800165e <HAL_ADC_Start_DMA+0x116>
 8001560:	4616      	mov	r6, r2
 8001562:	460d      	mov	r5, r1
 8001564:	4604      	mov	r4, r0
 8001566:	2301      	movs	r3, #1
 8001568:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800156c:	f7ff ff36 	bl	80013dc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001570:	4607      	mov	r7, r0
 8001572:	2800      	cmp	r0, #0
 8001574:	d16e      	bne.n	8001654 <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 8001576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001578:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_ADC_Start_DMA+0x120>)
 800158a:	429a      	cmp	r2, r3
 800158c:	d044      	beq.n	8001618 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800158e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001590:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001594:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001596:	6853      	ldr	r3, [r2, #4]
 8001598:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800159c:	d005      	beq.n	80015aa <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800159e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80015b0:	d048      	beq.n	8001644 <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015b4:	f023 0306 	bic.w	r3, r3, #6
 80015b8:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80015ba:	2300      	movs	r3, #0
 80015bc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015c0:	6a23      	ldr	r3, [r4, #32]
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <HAL_ADC_Start_DMA+0x124>)
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015c6:	6a23      	ldr	r3, [r4, #32]
 80015c8:	4a29      	ldr	r2, [pc, #164]	; (8001670 <HAL_ADC_Start_DMA+0x128>)
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015cc:	6a23      	ldr	r3, [r4, #32]
 80015ce:	4a29      	ldr	r2, [pc, #164]	; (8001674 <HAL_ADC_Start_DMA+0x12c>)
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	f06f 0202 	mvn.w	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	6893      	ldr	r3, [r2, #8]
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015e4:	6821      	ldr	r1, [r4, #0]
 80015e6:	4633      	mov	r3, r6
 80015e8:	462a      	mov	r2, r5
 80015ea:	314c      	adds	r1, #76	; 0x4c
 80015ec:	6a20      	ldr	r0, [r4, #32]
 80015ee:	f000 fa1f 	bl	8001a30 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	6893      	ldr	r3, [r2, #8]
 80015f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015fe:	d024      	beq.n	800164a <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001600:	6893      	ldr	r3, [r2, #8]
 8001602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001606:	6093      	str	r3, [r2, #8]
 8001608:	e027      	b.n	800165a <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_ADC_Start_DMA+0x11c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001612:	d0a1      	beq.n	8001558 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 8001614:	2701      	movs	r7, #1
 8001616:	e020      	b.n	800165a <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001618:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001622:	d0b4      	beq.n	800158e <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800162a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_ADC_Start_DMA+0x11c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001634:	d0b9      	beq.n	80015aa <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001638:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800163c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001640:	62a3      	str	r3, [r4, #40]	; 0x28
 8001642:	e7b2      	b.n	80015aa <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 8001644:	2300      	movs	r3, #0
 8001646:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001648:	e7b7      	b.n	80015ba <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800164a:	6893      	ldr	r3, [r2, #8]
 800164c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001650:	6093      	str	r3, [r2, #8]
 8001652:	e002      	b.n	800165a <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 8001654:	2300      	movs	r3, #0
 8001656:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800165a:	4638      	mov	r0, r7
 800165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800165e:	2702      	movs	r7, #2
 8001660:	e7fb      	b.n	800165a <HAL_ADC_Start_DMA+0x112>
 8001662:	bf00      	nop
 8001664:	40012400 	.word	0x40012400
 8001668:	40012800 	.word	0x40012800
 800166c:	0800111b 	.word	0x0800111b
 8001670:	0800116f 	.word	0x0800116f
 8001674:	08001289 	.word	0x08001289

08001678 <ADC_ConversionStop_Disable>:
{
 8001678:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800167a:	6803      	ldr	r3, [r0, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	f012 0f01 	tst.w	r2, #1
 8001682:	d101      	bne.n	8001688 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001684:	2000      	movs	r0, #0
}
 8001686:	bd38      	pop	{r3, r4, r5, pc}
 8001688:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001692:	f7ff fd3b 	bl	800110c <HAL_GetTick>
 8001696:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f013 0f01 	tst.w	r3, #1
 80016a0:	d00e      	beq.n	80016c0 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016a2:	f7ff fd33 	bl	800110c <HAL_GetTick>
 80016a6:	1b40      	subs	r0, r0, r5
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d9f5      	bls.n	8001698 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
 80016be:	e7e2      	b.n	8001686 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80016c0:	2000      	movs	r0, #0
 80016c2:	e7e0      	b.n	8001686 <ADC_ConversionStop_Disable+0xe>

080016c4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d07f      	beq.n	80017c8 <HAL_ADC_Init+0x104>
{
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d033      	beq.n	800173a <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ffd0 	bl	8001678 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016da:	f013 0310 	ands.w	r3, r3, #16
 80016de:	d16d      	bne.n	80017bc <HAL_ADC_Init+0xf8>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d16b      	bne.n	80017bc <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 80016e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016e6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80016ea:	f022 0202 	bic.w	r2, r2, #2
 80016ee:	f042 0202 	orr.w	r2, r2, #2
 80016f2:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f4:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016f6:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f8:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016fa:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016fc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001700:	68a1      	ldr	r1, [r4, #8]
 8001702:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001706:	d021      	beq.n	800174c <HAL_ADC_Init+0x88>
 8001708:	2901      	cmp	r1, #1
 800170a:	d01c      	beq.n	8001746 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170c:	7d21      	ldrb	r1, [r4, #20]
 800170e:	2901      	cmp	r1, #1
 8001710:	d01f      	beq.n	8001752 <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 8001712:	6825      	ldr	r5, [r4, #0]
 8001714:	6869      	ldr	r1, [r5, #4]
 8001716:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800171a:	430b      	orrs	r3, r1
 800171c:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800171e:	6821      	ldr	r1, [r4, #0]
 8001720:	688d      	ldr	r5, [r1, #8]
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_ADC_Init+0x108>)
 8001724:	402b      	ands	r3, r5
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800172a:	68a3      	ldr	r3, [r4, #8]
 800172c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001730:	d020      	beq.n	8001774 <HAL_ADC_Init+0xb0>
 8001732:	2b01      	cmp	r3, #1
 8001734:	d01e      	beq.n	8001774 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8001736:	2100      	movs	r1, #0
 8001738:	e01f      	b.n	800177a <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 800173a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800173c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001740:	f003 fefa 	bl	8005538 <HAL_ADC_MspInit>
 8001744:	e7c5      	b.n	80016d2 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174a:	e7df      	b.n	800170c <HAL_ADC_Init+0x48>
 800174c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001750:	e7dc      	b.n	800170c <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001752:	b935      	cbnz	r5, 8001762 <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001754:	69a1      	ldr	r1, [r4, #24]
 8001756:	3901      	subs	r1, #1
 8001758:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 800175c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001760:	e7d7      	b.n	8001712 <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001762:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001764:	f041 0120 	orr.w	r1, r1, #32
 8001768:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800176c:	f041 0101 	orr.w	r1, r1, #1
 8001770:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001772:	e7ce      	b.n	8001712 <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001774:	6923      	ldr	r3, [r4, #16]
 8001776:	3b01      	subs	r3, #1
 8001778:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800177a:	6825      	ldr	r5, [r4, #0]
 800177c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800177e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001782:	430b      	orrs	r3, r1
 8001784:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_ADC_Init+0x10c>)
 800178c:	400b      	ands	r3, r1
 800178e:	429a      	cmp	r2, r3
 8001790:	d00b      	beq.n	80017aa <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 8001792:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001794:	f023 0312 	bic.w	r3, r3, #18
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80017a6:	2001      	movs	r0, #1
 80017a8:	e00d      	b.n	80017c6 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	2300      	movs	r3, #0
 80017ac:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80017ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017b0:	f023 0303 	bic.w	r3, r3, #3
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80017ba:	e004      	b.n	80017c6 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
}
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
}
 80017ca:	4770      	bx	lr
 80017cc:	ffe1f7fd 	.word	0xffe1f7fd
 80017d0:	ff1f0efe 	.word	0xff1f0efe

080017d4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d068      	beq.n	80018b6 <HAL_ADCEx_Calibration_Start+0xe2>
 80017e4:	4604      	mov	r4, r0
 80017e6:	2301      	movs	r3, #1
 80017e8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017ec:	f7ff ff44 	bl	8001678 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017f0:	4605      	mov	r5, r0
 80017f2:	b128      	cbz	r0, 8001800 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f4:	2300      	movs	r3, #0
 80017f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80017fa:	4628      	mov	r0, r5
 80017fc:	b002      	add	sp, #8
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001802:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_ADCEx_Calibration_Start+0xe8>)
 8001812:	681e      	ldr	r6, [r3, #0]
 8001814:	2002      	movs	r0, #2
 8001816:	f000 ff8f 	bl	8002738 <HAL_RCCEx_GetPeriphCLKFreq>
 800181a:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800181e:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8001820:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001822:	e002      	b.n	800182a <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 8001824:	9b01      	ldr	r3, [sp, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800182a:	9b01      	ldr	r3, [sp, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f9      	bne.n	8001824 <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff fdd3 	bl	80013dc <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6893      	ldr	r3, [r2, #8]
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001840:	f7ff fc64 	bl	800110c <HAL_GetTick>
 8001844:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	f012 0f08 	tst.w	r2, #8
 800184e:	d00f      	beq.n	8001870 <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001850:	f7ff fc5c 	bl	800110c <HAL_GetTick>
 8001854:	1b80      	subs	r0, r0, r6
 8001856:	280a      	cmp	r0, #10
 8001858:	d9f5      	bls.n	8001846 <HAL_ADCEx_Calibration_Start+0x72>
        ADC_STATE_CLR_SET(hadc->State,
 800185a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800185c:	f023 0312 	bic.w	r3, r3, #18
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001866:	2300      	movs	r3, #0
 8001868:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800186c:	2501      	movs	r5, #1
 800186e:	e7c4      	b.n	80017fa <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	f042 0204 	orr.w	r2, r2, #4
 8001876:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001878:	f7ff fc48 	bl	800110c <HAL_GetTick>
 800187c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f013 0f04 	tst.w	r3, #4
 8001886:	d00f      	beq.n	80018a8 <HAL_ADCEx_Calibration_Start+0xd4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001888:	f7ff fc40 	bl	800110c <HAL_GetTick>
 800188c:	1b80      	subs	r0, r0, r6
 800188e:	280a      	cmp	r0, #10
 8001890:	d9f5      	bls.n	800187e <HAL_ADCEx_Calibration_Start+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 8001892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001894:	f023 0312 	bic.w	r3, r3, #18
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800189e:	2300      	movs	r3, #0
 80018a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80018a4:	2501      	movs	r5, #1
 80018a6:	e7a8      	b.n	80017fa <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 80018a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80018b4:	e79e      	b.n	80017f4 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 80018b6:	2502      	movs	r5, #2
 80018b8:	e79f      	b.n	80017fa <HAL_ADCEx_Calibration_Start+0x26>
 80018ba:	bf00      	nop
 80018bc:	200000e8 	.word	0x200000e8

080018c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	0200      	lsls	r0, r0, #8
 80018d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80018d8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80018dc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80018e0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_NVIC_SetPriority+0x60>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f2:	f1c3 0407 	rsb	r4, r3, #7
 80018f6:	2c04      	cmp	r4, #4
 80018f8:	bf28      	it	cs
 80018fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fc:	1d1d      	adds	r5, r3, #4
 80018fe:	2d06      	cmp	r5, #6
 8001900:	d918      	bls.n	8001934 <HAL_NVIC_SetPriority+0x4c>
 8001902:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 35ff 	mov.w	r5, #4294967295
 8001908:	fa05 f404 	lsl.w	r4, r5, r4
 800190c:	ea21 0104 	bic.w	r1, r1, r4
 8001910:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001912:	fa05 f303 	lsl.w	r3, r5, r3
 8001916:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800191c:	2800      	cmp	r0, #0
 800191e:	db0b      	blt.n	8001938 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	0109      	lsls	r1, r1, #4
 8001922:	b2c9      	uxtb	r1, r1
 8001924:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001928:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800192c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001930:	bc30      	pop	{r4, r5}
 8001932:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001934:	2300      	movs	r3, #0
 8001936:	e7e5      	b.n	8001904 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	f000 000f 	and.w	r0, r0, #15
 800193c:	0109      	lsls	r1, r1, #4
 800193e:	b2c9      	uxtb	r1, r1
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <HAL_NVIC_SetPriority+0x64>)
 8001942:	5419      	strb	r1, [r3, r0]
 8001944:	e7f4      	b.n	8001930 <HAL_NVIC_SetPriority+0x48>
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	e000ed14 	.word	0xe000ed14

08001950 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001950:	2800      	cmp	r0, #0
 8001952:	db07      	blt.n	8001964 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001954:	f000 021f 	and.w	r2, r0, #31
 8001958:	0940      	lsrs	r0, r0, #5
 800195a:	2301      	movs	r3, #1
 800195c:	4093      	lsls	r3, r2
 800195e:	4a02      	ldr	r2, [pc, #8]	; (8001968 <HAL_NVIC_EnableIRQ+0x18>)
 8001960:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	3801      	subs	r0, #1
 800196e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001972:	d20a      	bcs.n	800198a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_SYSTICK_Config+0x24>)
 8001976:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_SYSTICK_Config+0x28>)
 800197a:	21f0      	movs	r1, #240	; 0xf0
 800197c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	2000      	movs	r0, #0
 8001982:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001998:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800199a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800199c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800199e:	2401      	movs	r4, #1
 80019a0:	40b4      	lsls	r4, r6
 80019a2:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019a4:	6804      	ldr	r4, [r0, #0]
 80019a6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019a8:	6843      	ldr	r3, [r0, #4]
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d005      	beq.n	80019ba <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80019ae:	6803      	ldr	r3, [r0, #0]
 80019b0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80019b2:	6803      	ldr	r3, [r0, #0]
 80019b4:	60da      	str	r2, [r3, #12]
  }
}
 80019b6:	bc70      	pop	{r4, r5, r6}
 80019b8:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80019ba:	6803      	ldr	r3, [r0, #0]
 80019bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80019be:	6803      	ldr	r3, [r0, #0]
 80019c0:	60d9      	str	r1, [r3, #12]
 80019c2:	e7f8      	b.n	80019b6 <DMA_SetConfig+0x1e>

080019c4 <HAL_DMA_Init>:
  if(hdma == NULL)
 80019c4:	b360      	cbz	r0, 8001a20 <HAL_DMA_Init+0x5c>
{
 80019c6:	b410      	push	{r4}
 80019c8:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019ca:	6801      	ldr	r1, [r0, #0]
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_DMA_Init+0x60>)
 80019ce:	440b      	add	r3, r1
 80019d0:	4815      	ldr	r0, [pc, #84]	; (8001a28 <HAL_DMA_Init+0x64>)
 80019d2:	fba0 0303 	umull	r0, r3, r0, r3
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_DMA_Init+0x68>)
 80019de:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80019e6:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019e8:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80019ec:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80019f0:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 80019f4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	68d4      	ldr	r4, [r2, #12]
 80019f8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fe:	6954      	ldr	r4, [r2, #20]
 8001a00:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a02:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	69d4      	ldr	r4, [r2, #28]
 8001a08:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001a0a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001a0c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0e:	2000      	movs	r0, #0
 8001a10:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001a18:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001a1c:	bc10      	pop	{r4}
 8001a1e:	4770      	bx	lr
    return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
}
 8001a22:	4770      	bx	lr
 8001a24:	bffdfff8 	.word	0xbffdfff8
 8001a28:	cccccccd 	.word	0xcccccccd
 8001a2c:	40020000 	.word	0x40020000

08001a30 <HAL_DMA_Start_IT>:
{
 8001a30:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001a32:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d032      	beq.n	8001aa0 <HAL_DMA_Start_IT+0x70>
 8001a3a:	2401      	movs	r4, #1
 8001a3c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a40:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001a44:	2c01      	cmp	r4, #1
 8001a46:	d004      	beq.n	8001a52 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001a4e:	2002      	movs	r0, #2
}
 8001a50:	bd38      	pop	{r3, r4, r5, pc}
 8001a52:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a54:	2002      	movs	r0, #2
 8001a56:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001a5e:	6825      	ldr	r5, [r4, #0]
 8001a60:	6828      	ldr	r0, [r5, #0]
 8001a62:	f020 0001 	bic.w	r0, r0, #1
 8001a66:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff ff95 	bl	8001998 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a70:	b15b      	cbz	r3, 8001a8a <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a72:	6822      	ldr	r2, [r4, #0]
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f043 030e 	orr.w	r3, r3, #14
 8001a7a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001a7c:	6822      	ldr	r2, [r4, #0]
 8001a7e:	6813      	ldr	r3, [r2, #0]
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	2000      	movs	r0, #0
 8001a88:	e7e2      	b.n	8001a50 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	6813      	ldr	r3, [r2, #0]
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	f043 030a 	orr.w	r3, r3, #10
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e7ed      	b.n	8001a7c <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	e7d5      	b.n	8001a50 <HAL_DMA_Start_IT+0x20>

08001aa4 <HAL_DMA_Abort_IT>:
{  
 8001aa4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aa6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
}
 8001ab4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	6802      	ldr	r2, [r0, #0]
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	f023 030e 	bic.w	r3, r3, #14
 8001abe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ac0:	6802      	ldr	r2, [r0, #0]
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aca:	6803      	ldr	r3, [r0, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_DMA_Abort_IT+0x90>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d014      	beq.n	8001afc <HAL_DMA_Abort_IT+0x58>
 8001ad2:	3214      	adds	r2, #20
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d01f      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x74>
 8001ad8:	3214      	adds	r2, #20
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01e      	beq.n	8001b1c <HAL_DMA_Abort_IT+0x78>
 8001ade:	3214      	adds	r2, #20
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01e      	beq.n	8001b22 <HAL_DMA_Abort_IT+0x7e>
 8001ae4:	3214      	adds	r2, #20
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01e      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x84>
 8001aea:	3214      	adds	r2, #20
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d002      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x52>
 8001af0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001af4:	e003      	b.n	8001afe <HAL_DMA_Abort_IT+0x5a>
 8001af6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001afa:	e000      	b.n	8001afe <HAL_DMA_Abort_IT+0x5a>
 8001afc:	2201      	movs	r2, #1
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_DMA_Abort_IT+0x94>)
 8001b00:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001b0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b10:	b16b      	cbz	r3, 8001b2e <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001b12:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2000      	movs	r0, #0
 8001b16:	e7cd      	b.n	8001ab4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b18:	2210      	movs	r2, #16
 8001b1a:	e7f0      	b.n	8001afe <HAL_DMA_Abort_IT+0x5a>
 8001b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b20:	e7ed      	b.n	8001afe <HAL_DMA_Abort_IT+0x5a>
 8001b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b26:	e7ea      	b.n	8001afe <HAL_DMA_Abort_IT+0x5a>
 8001b28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b2c:	e7e7      	b.n	8001afe <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7c0      	b.n	8001ab4 <HAL_DMA_Abort_IT+0x10>
 8001b32:	bf00      	nop
 8001b34:	40020008 	.word	0x40020008
 8001b38:	40020000 	.word	0x40020000

08001b3c <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <FLASH_Program_HalfWord+0x14>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <FLASH_Program_HalfWord+0x18>)
 8001b44:	6913      	ldr	r3, [r2, #16]
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001b4c:	8001      	strh	r1, [r0, #0]
}
 8001b4e:	4770      	bx	lr
 8001b50:	20000558 	.word	0x20000558
 8001b54:	40022000 	.word	0x40022000

08001b58 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <FLASH_SetErrorCode+0x6c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f013 0f10 	tst.w	r3, #16
 8001b60:	d027      	beq.n	8001bb2 <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <FLASH_SetErrorCode+0x70>)
 8001b64:	69d3      	ldr	r3, [r2, #28]
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001b6c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <FLASH_SetErrorCode+0x6c>)
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	f012 0f04 	tst.w	r2, #4
 8001b76:	d006      	beq.n	8001b86 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b78:	4913      	ldr	r1, [pc, #76]	; (8001bc8 <FLASH_SetErrorCode+0x70>)
 8001b7a:	69ca      	ldr	r2, [r1, #28]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001b82:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <FLASH_SetErrorCode+0x6c>)
 8001b88:	69d2      	ldr	r2, [r2, #28]
 8001b8a:	f012 0f01 	tst.w	r2, #1
 8001b8e:	d009      	beq.n	8001ba4 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001b90:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <FLASH_SetErrorCode+0x70>)
 8001b92:	69ca      	ldr	r2, [r1, #28]
 8001b94:	f042 0204 	orr.w	r2, r2, #4
 8001b98:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b9a:	490a      	ldr	r1, [pc, #40]	; (8001bc4 <FLASH_SetErrorCode+0x6c>)
 8001b9c:	69ca      	ldr	r2, [r1, #28]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ba4:	f240 1201 	movw	r2, #257	; 0x101
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <FLASH_SetErrorCode+0x5e>
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <FLASH_SetErrorCode+0x6c>)
 8001bae:	60d3      	str	r3, [r2, #12]
}  
 8001bb0:	4770      	bx	lr
  uint32_t flags = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e7db      	b.n	8001b6e <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <FLASH_SetErrorCode+0x6c>)
 8001bb8:	69d3      	ldr	r3, [r2, #28]
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	20000558 	.word	0x20000558

08001bcc <FLASH_WaitForLastOperation>:
{
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff fa9c 	bl	800110c <HAL_GetTick>
 8001bd4:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <FLASH_WaitForLastOperation+0x68>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f013 0f01 	tst.w	r3, #1
 8001bde:	d00a      	beq.n	8001bf6 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001be0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001be4:	d0f7      	beq.n	8001bd6 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001be6:	b30c      	cbz	r4, 8001c2c <FLASH_WaitForLastOperation+0x60>
 8001be8:	f7ff fa90 	bl	800110c <HAL_GetTick>
 8001bec:	1b40      	subs	r0, r0, r5
 8001bee:	42a0      	cmp	r0, r4
 8001bf0:	d9f1      	bls.n	8001bd6 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	e019      	b.n	8001c2a <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <FLASH_WaitForLastOperation+0x68>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f013 0f20 	tst.w	r3, #32
 8001bfe:	d002      	beq.n	8001c06 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <FLASH_WaitForLastOperation+0x68>)
 8001c02:	2220      	movs	r2, #32
 8001c04:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <FLASH_WaitForLastOperation+0x68>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f013 0f10 	tst.w	r3, #16
 8001c0e:	d109      	bne.n	8001c24 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <FLASH_WaitForLastOperation+0x68>)
 8001c12:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c14:	f013 0f01 	tst.w	r3, #1
 8001c18:	d104      	bne.n	8001c24 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <FLASH_WaitForLastOperation+0x68>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c1e:	f013 0f04 	tst.w	r3, #4
 8001c22:	d005      	beq.n	8001c30 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8001c24:	f7ff ff98 	bl	8001b58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c28:	2001      	movs	r0, #1
}
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e7fc      	b.n	8001c2a <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8001c30:	2000      	movs	r0, #0
 8001c32:	e7fa      	b.n	8001c2a <FLASH_WaitForLastOperation+0x5e>
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_FLASH_Program>:
{
 8001c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001c3c:	4c23      	ldr	r4, [pc, #140]	; (8001ccc <HAL_FLASH_Program+0x94>)
 8001c3e:	7e24      	ldrb	r4, [r4, #24]
 8001c40:	2c01      	cmp	r4, #1
 8001c42:	d041      	beq.n	8001cc8 <HAL_FLASH_Program+0x90>
 8001c44:	461e      	mov	r6, r3
 8001c46:	4690      	mov	r8, r2
 8001c48:	460f      	mov	r7, r1
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_FLASH_Program+0x94>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c56:	f7ff ffb9 	bl	8001bcc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	bb70      	cbnz	r0, 8001cbc <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c5e:	2c01      	cmp	r4, #1
 8001c60:	d029      	beq.n	8001cb6 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c62:	2c02      	cmp	r4, #2
 8001c64:	d024      	beq.n	8001cb0 <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8001c66:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001c6a:	2400      	movs	r4, #0
 8001c6c:	454c      	cmp	r4, r9
 8001c6e:	d225      	bcs.n	8001cbc <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001c70:	0121      	lsls	r1, r4, #4
 8001c72:	f1c1 0220 	rsb	r2, r1, #32
 8001c76:	f1a1 0320 	sub.w	r3, r1, #32
 8001c7a:	fa28 f101 	lsr.w	r1, r8, r1
 8001c7e:	fa06 f202 	lsl.w	r2, r6, r2
 8001c82:	4311      	orrs	r1, r2
 8001c84:	fa26 f303 	lsr.w	r3, r6, r3
 8001c88:	4319      	orrs	r1, r3
 8001c8a:	b289      	uxth	r1, r1
 8001c8c:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001c90:	f7ff ff54 	bl	8001b3c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c98:	f7ff ff98 	bl	8001bcc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_FLASH_Program+0x98>)
 8001c9e:	691d      	ldr	r5, [r3, #16]
 8001ca0:	f025 0501 	bic.w	r5, r5, #1
 8001ca4:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b940      	cbnz	r0, 8001cbc <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8001caa:	3401      	adds	r4, #1
 8001cac:	b2e4      	uxtb	r4, r4
 8001cae:	e7dd      	b.n	8001c6c <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8001cb0:	f04f 0902 	mov.w	r9, #2
 8001cb4:	e7d9      	b.n	8001c6a <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8001cb6:	f04f 0901 	mov.w	r9, #1
 8001cba:	e7d6      	b.n	8001c6a <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <HAL_FLASH_Program+0x94>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	7611      	strb	r1, [r2, #24]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e7fa      	b.n	8001cc2 <HAL_FLASH_Program+0x8a>
 8001ccc:	20000558 	.word	0x20000558
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <FLASH_MassErase+0x1c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <FLASH_MassErase+0x20>)
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	f042 0204 	orr.w	r2, r2, #4
 8001ce2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cea:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000558 	.word	0x20000558
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <FLASH_PageErase+0x1c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <FLASH_PageErase+0x20>)
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	f042 0202 	orr.w	r2, r2, #2
 8001d06:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001d08:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d10:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d12:	4770      	bx	lr
 8001d14:	20000558 	.word	0x20000558
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_FLASHEx_Erase+0x9c>)
 8001d1e:	7e1b      	ldrb	r3, [r3, #24]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d046      	beq.n	8001db2 <HAL_FLASHEx_Erase+0x96>
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	460e      	mov	r6, r1
 8001d28:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_FLASHEx_Erase+0x9c>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d020      	beq.n	8001d78 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d3a:	f7ff ff47 	bl	8001bcc <FLASH_WaitForLastOperation>
 8001d3e:	bb90      	cbnz	r0, 8001da6 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001d46:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d48:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d4a:	68e1      	ldr	r1, [r4, #12]
 8001d4c:	68a3      	ldr	r3, [r4, #8]
 8001d4e:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	d928      	bls.n	8001da8 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8001d56:	4628      	mov	r0, r5
 8001d58:	f7ff ffce 	bl	8001cf8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d60:	f7ff ff34 	bl	8001bcc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d64:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <HAL_FLASHEx_Erase+0xa0>)
 8001d66:	6913      	ldr	r3, [r2, #16]
 8001d68:	f023 0302 	bic.w	r3, r3, #2
 8001d6c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001d6e:	4602      	mov	r2, r0
 8001d70:	b9b8      	cbnz	r0, 8001da2 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8001d72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d76:	e7e8      	b.n	8001d4a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d7c:	f7ff ff26 	bl	8001bcc <FLASH_WaitForLastOperation>
 8001d80:	b108      	cbz	r0, 8001d86 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d82:	2201      	movs	r2, #1
 8001d84:	e010      	b.n	8001da8 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f7ff ffa4 	bl	8001cd4 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d90:	f7ff ff1c 	bl	8001bcc <FLASH_WaitForLastOperation>
 8001d94:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d96:	4909      	ldr	r1, [pc, #36]	; (8001dbc <HAL_FLASHEx_Erase+0xa0>)
 8001d98:	690b      	ldr	r3, [r1, #16]
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	610b      	str	r3, [r1, #16]
 8001da0:	e002      	b.n	8001da8 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8001da2:	6035      	str	r5, [r6, #0]
            break;
 8001da4:	e000      	b.n	8001da8 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001da6:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_FLASHEx_Erase+0x9c>)
 8001daa:	2100      	movs	r1, #0
 8001dac:	7619      	strb	r1, [r3, #24]
}
 8001dae:	4610      	mov	r0, r2
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001db2:	2202      	movs	r2, #2
}
 8001db4:	4610      	mov	r0, r2
 8001db6:	4770      	bx	lr
 8001db8:	20000558 	.word	0x20000558
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b4f0      	push	{r4, r5, r6, r7}
 8001dc2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc4:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001dc6:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc8:	e0a2      	b.n	8001f10 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dca:	2d00      	cmp	r5, #0
 8001dcc:	d05a      	beq.n	8001e84 <HAL_GPIO_Init+0xc4>
 8001dce:	2d01      	cmp	r5, #1
 8001dd0:	d100      	bne.n	8001dd4 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd2:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd4:	2bff      	cmp	r3, #255	; 0xff
 8001dd6:	d869      	bhi.n	8001eac <HAL_GPIO_Init+0xec>
 8001dd8:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dda:	2bff      	cmp	r3, #255	; 0xff
 8001ddc:	d869      	bhi.n	8001eb2 <HAL_GPIO_Init+0xf2>
 8001dde:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de0:	f8dc 4000 	ldr.w	r4, [ip]
 8001de4:	270f      	movs	r7, #15
 8001de6:	40af      	lsls	r7, r5
 8001de8:	ea24 0407 	bic.w	r4, r4, r7
 8001dec:	fa06 f505 	lsl.w	r5, r6, r5
 8001df0:	432c      	orrs	r4, r5
 8001df2:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df6:	684c      	ldr	r4, [r1, #4]
 8001df8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001dfc:	f000 8087 	beq.w	8001f0e <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e00:	4c5f      	ldr	r4, [pc, #380]	; (8001f80 <HAL_GPIO_Init+0x1c0>)
 8001e02:	69a5      	ldr	r5, [r4, #24]
 8001e04:	f045 0501 	orr.w	r5, r5, #1
 8001e08:	61a5      	str	r5, [r4, #24]
 8001e0a:	69a4      	ldr	r4, [r4, #24]
 8001e0c:	f004 0401 	and.w	r4, r4, #1
 8001e10:	9401      	str	r4, [sp, #4]
 8001e12:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001e14:	0895      	lsrs	r5, r2, #2
 8001e16:	1caf      	adds	r7, r5, #2
 8001e18:	4c5a      	ldr	r4, [pc, #360]	; (8001f84 <HAL_GPIO_Init+0x1c4>)
 8001e1a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e1e:	f002 0703 	and.w	r7, r2, #3
 8001e22:	00bf      	lsls	r7, r7, #2
 8001e24:	f04f 0c0f 	mov.w	ip, #15
 8001e28:	fa0c fc07 	lsl.w	ip, ip, r7
 8001e2c:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e30:	4c55      	ldr	r4, [pc, #340]	; (8001f88 <HAL_GPIO_Init+0x1c8>)
 8001e32:	42a0      	cmp	r0, r4
 8001e34:	d043      	beq.n	8001ebe <HAL_GPIO_Init+0xfe>
 8001e36:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e3a:	42a0      	cmp	r0, r4
 8001e3c:	f000 8081 	beq.w	8001f42 <HAL_GPIO_Init+0x182>
 8001e40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e44:	42a0      	cmp	r0, r4
 8001e46:	d07e      	beq.n	8001f46 <HAL_GPIO_Init+0x186>
 8001e48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e4c:	42a0      	cmp	r0, r4
 8001e4e:	d034      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e50:	2404      	movs	r4, #4
 8001e52:	e035      	b.n	8001ec0 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8001e54:	4f4d      	ldr	r7, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x1cc>)
 8001e56:	42bd      	cmp	r5, r7
 8001e58:	d014      	beq.n	8001e84 <HAL_GPIO_Init+0xc4>
 8001e5a:	d90b      	bls.n	8001e74 <HAL_GPIO_Init+0xb4>
 8001e5c:	4f4c      	ldr	r7, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x1d0>)
 8001e5e:	42bd      	cmp	r5, r7
 8001e60:	d010      	beq.n	8001e84 <HAL_GPIO_Init+0xc4>
 8001e62:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001e66:	42bd      	cmp	r5, r7
 8001e68:	d00c      	beq.n	8001e84 <HAL_GPIO_Init+0xc4>
 8001e6a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001e6e:	42bd      	cmp	r5, r7
 8001e70:	d1b0      	bne.n	8001dd4 <HAL_GPIO_Init+0x14>
 8001e72:	e007      	b.n	8001e84 <HAL_GPIO_Init+0xc4>
 8001e74:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001e78:	42bd      	cmp	r5, r7
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0xc4>
 8001e7c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001e80:	42bd      	cmp	r5, r7
 8001e82:	d1a7      	bne.n	8001dd4 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e84:	688d      	ldr	r5, [r1, #8]
 8001e86:	b17d      	cbz	r5, 8001ea8 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e88:	2d01      	cmp	r5, #1
 8001e8a:	d008      	beq.n	8001e9e <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8001e8c:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8e:	2608      	movs	r6, #8
 8001e90:	e7a0      	b.n	8001dd4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e92:	68ce      	ldr	r6, [r1, #12]
 8001e94:	3608      	adds	r6, #8
          break;
 8001e96:	e79d      	b.n	8001dd4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e98:	68ce      	ldr	r6, [r1, #12]
 8001e9a:	360c      	adds	r6, #12
          break;
 8001e9c:	e79a      	b.n	8001dd4 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001e9e:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea0:	2608      	movs	r6, #8
 8001ea2:	e797      	b.n	8001dd4 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea4:	2600      	movs	r6, #0
 8001ea6:	e795      	b.n	8001dd4 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea8:	2604      	movs	r6, #4
 8001eaa:	e793      	b.n	8001dd4 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eac:	f100 0c04 	add.w	ip, r0, #4
 8001eb0:	e793      	b.n	8001dda <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb2:	f1a2 0508 	sub.w	r5, r2, #8
 8001eb6:	00ad      	lsls	r5, r5, #2
 8001eb8:	e792      	b.n	8001de0 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eba:	2403      	movs	r4, #3
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x100>
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	40bc      	lsls	r4, r7
 8001ec2:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001ec6:	3502      	adds	r5, #2
 8001ec8:	4f2e      	ldr	r7, [pc, #184]	; (8001f84 <HAL_GPIO_Init+0x1c4>)
 8001eca:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ece:	684c      	ldr	r4, [r1, #4]
 8001ed0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001ed4:	d039      	beq.n	8001f4a <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed6:	4d2f      	ldr	r5, [pc, #188]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001ed8:	682c      	ldr	r4, [r5, #0]
 8001eda:	431c      	orrs	r4, r3
 8001edc:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ede:	684c      	ldr	r4, [r1, #4]
 8001ee0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001ee4:	d037      	beq.n	8001f56 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee6:	4d2b      	ldr	r5, [pc, #172]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001ee8:	686c      	ldr	r4, [r5, #4]
 8001eea:	431c      	orrs	r4, r3
 8001eec:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eee:	684c      	ldr	r4, [r1, #4]
 8001ef0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8001ef4:	d035      	beq.n	8001f62 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef6:	4d27      	ldr	r5, [pc, #156]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001ef8:	68ac      	ldr	r4, [r5, #8]
 8001efa:	431c      	orrs	r4, r3
 8001efc:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efe:	684c      	ldr	r4, [r1, #4]
 8001f00:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001f04:	d033      	beq.n	8001f6e <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f06:	4d23      	ldr	r5, [pc, #140]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001f08:	68ec      	ldr	r4, [r5, #12]
 8001f0a:	4323      	orrs	r3, r4
 8001f0c:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001f0e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f10:	680b      	ldr	r3, [r1, #0]
 8001f12:	fa33 f402 	lsrs.w	r4, r3, r2
 8001f16:	d030      	beq.n	8001f7a <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8001f18:	2401      	movs	r4, #1
 8001f1a:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1c:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001f1e:	429c      	cmp	r4, r3
 8001f20:	d1f5      	bne.n	8001f0e <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8001f22:	684d      	ldr	r5, [r1, #4]
 8001f24:	2d12      	cmp	r5, #18
 8001f26:	d0b7      	beq.n	8001e98 <HAL_GPIO_Init+0xd8>
 8001f28:	d894      	bhi.n	8001e54 <HAL_GPIO_Init+0x94>
 8001f2a:	2d02      	cmp	r5, #2
 8001f2c:	d0b1      	beq.n	8001e92 <HAL_GPIO_Init+0xd2>
 8001f2e:	f67f af4c 	bls.w	8001dca <HAL_GPIO_Init+0xa>
 8001f32:	2d03      	cmp	r5, #3
 8001f34:	d0b6      	beq.n	8001ea4 <HAL_GPIO_Init+0xe4>
 8001f36:	2d11      	cmp	r5, #17
 8001f38:	f47f af4c 	bne.w	8001dd4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f3c:	68ce      	ldr	r6, [r1, #12]
 8001f3e:	3604      	adds	r6, #4
          break;
 8001f40:	e748      	b.n	8001dd4 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f42:	2401      	movs	r4, #1
 8001f44:	e7bc      	b.n	8001ec0 <HAL_GPIO_Init+0x100>
 8001f46:	2402      	movs	r4, #2
 8001f48:	e7ba      	b.n	8001ec0 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f4a:	4d12      	ldr	r5, [pc, #72]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001f4c:	682c      	ldr	r4, [r5, #0]
 8001f4e:	ea24 0403 	bic.w	r4, r4, r3
 8001f52:	602c      	str	r4, [r5, #0]
 8001f54:	e7c3      	b.n	8001ede <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f56:	4d0f      	ldr	r5, [pc, #60]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001f58:	686c      	ldr	r4, [r5, #4]
 8001f5a:	ea24 0403 	bic.w	r4, r4, r3
 8001f5e:	606c      	str	r4, [r5, #4]
 8001f60:	e7c5      	b.n	8001eee <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f62:	4d0c      	ldr	r5, [pc, #48]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001f64:	68ac      	ldr	r4, [r5, #8]
 8001f66:	ea24 0403 	bic.w	r4, r4, r3
 8001f6a:	60ac      	str	r4, [r5, #8]
 8001f6c:	e7c7      	b.n	8001efe <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6e:	4d09      	ldr	r5, [pc, #36]	; (8001f94 <HAL_GPIO_Init+0x1d4>)
 8001f70:	68ec      	ldr	r4, [r5, #12]
 8001f72:	ea24 0303 	bic.w	r3, r4, r3
 8001f76:	60eb      	str	r3, [r5, #12]
 8001f78:	e7c9      	b.n	8001f0e <HAL_GPIO_Init+0x14e>
  }
}
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40010800 	.word	0x40010800
 8001f8c:	10210000 	.word	0x10210000
 8001f90:	10310000 	.word	0x10310000
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f98:	b912      	cbnz	r2, 8001fa0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f9a:	0409      	lsls	r1, r1, #16
 8001f9c:	6101      	str	r1, [r0, #16]
  }
}
 8001f9e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001fa0:	6101      	str	r1, [r0, #16]
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001fa8:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4203      	tst	r3, r0
 8001fb0:	d100      	bne.n	8001fb4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001fb2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fb4:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001fb6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb8:	f7ff fff4 	bl	8001fa4 <HAL_GPIO_EXTI_Callback>
}
 8001fbc:	e7f9      	b.n	8001fb2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001fbe:	bf00      	nop
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <RCC_Delay+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <RCC_Delay+0x28>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	0a5b      	lsrs	r3, r3, #9
 8001fd2:	fb00 f003 	mul.w	r0, r0, r3
 8001fd6:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8001fd8:	bf00      	nop
  }
  while (Delay --);
 8001fda:	9b01      	ldr	r3, [sp, #4]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	9201      	str	r2, [sp, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f9      	bne.n	8001fd8 <RCC_Delay+0x14>
}
 8001fe4:	b002      	add	sp, #8
 8001fe6:	4770      	bx	lr
 8001fe8:	200000e8 	.word	0x200000e8
 8001fec:	10624dd3 	.word	0x10624dd3

08001ff0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	f000 81f5 	beq.w	80023e0 <HAL_RCC_OscConfig+0x3f0>
{
 8001ff6:	b570      	push	{r4, r5, r6, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffc:	6803      	ldr	r3, [r0, #0]
 8001ffe:	f013 0f01 	tst.w	r3, #1
 8002002:	d02c      	beq.n	800205e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002004:	4bab      	ldr	r3, [pc, #684]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b04      	cmp	r3, #4
 800200e:	d01d      	beq.n	800204c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002010:	4ba8      	ldr	r3, [pc, #672]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d012      	beq.n	8002042 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201c:	6863      	ldr	r3, [r4, #4]
 800201e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002022:	d041      	beq.n	80020a8 <HAL_RCC_OscConfig+0xb8>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d155      	bne.n	80020d4 <HAL_RCC_OscConfig+0xe4>
 8002028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800202c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e037      	b.n	80020b2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002042:	4b9c      	ldr	r3, [pc, #624]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800204a:	d0e7      	beq.n	800201c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	4b99      	ldr	r3, [pc, #612]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002054:	d003      	beq.n	800205e <HAL_RCC_OscConfig+0x6e>
 8002056:	6863      	ldr	r3, [r4, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 81c3 	beq.w	80023e4 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	f013 0f02 	tst.w	r3, #2
 8002064:	d076      	beq.n	8002154 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002066:	4b93      	ldr	r3, [pc, #588]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f013 0f0c 	tst.w	r3, #12
 800206e:	d05f      	beq.n	8002130 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002070:	4b90      	ldr	r3, [pc, #576]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d054      	beq.n	8002126 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800207c:	6923      	ldr	r3, [r4, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 808a 	beq.w	8002198 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x2c8>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800208a:	f7ff f83f 	bl	800110c <HAL_GetTick>
 800208e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b88      	ldr	r3, [pc, #544]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f013 0f02 	tst.w	r3, #2
 8002098:	d175      	bne.n	8002186 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff f837 	bl	800110c <HAL_GetTick>
 800209e:	1b40      	subs	r0, r0, r5
 80020a0:	2802      	cmp	r0, #2
 80020a2:	d9f5      	bls.n	8002090 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80020a4:	2003      	movs	r0, #3
 80020a6:	e1a0      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	4a82      	ldr	r2, [pc, #520]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b2:	6863      	ldr	r3, [r4, #4]
 80020b4:	b343      	cbz	r3, 8002108 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80020b6:	f7ff f829 	bl	800110c <HAL_GetTick>
 80020ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020bc:	4b7d      	ldr	r3, [pc, #500]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020c4:	d1cb      	bne.n	800205e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c6:	f7ff f821 	bl	800110c <HAL_GetTick>
 80020ca:	1b40      	subs	r0, r0, r5
 80020cc:	2864      	cmp	r0, #100	; 0x64
 80020ce:	d9f5      	bls.n	80020bc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80020d0:	2003      	movs	r0, #3
 80020d2:	e18a      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_OscConfig+0xfe>
 80020da:	4b76      	ldr	r3, [pc, #472]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e7e1      	b.n	80020b2 <HAL_RCC_OscConfig+0xc2>
 80020ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020f2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e7d4      	b.n	80020b2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002108:	f7ff f800 	bl	800110c <HAL_GetTick>
 800210c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	4b69      	ldr	r3, [pc, #420]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002116:	d0a2      	beq.n	800205e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe fff8 	bl	800110c <HAL_GetTick>
 800211c:	1b40      	subs	r0, r0, r5
 800211e:	2864      	cmp	r0, #100	; 0x64
 8002120:	d9f5      	bls.n	800210e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002122:	2003      	movs	r0, #3
 8002124:	e161      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002126:	4b63      	ldr	r3, [pc, #396]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800212e:	d1a5      	bne.n	800207c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002130:	4b60      	ldr	r3, [pc, #384]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f013 0f02 	tst.w	r3, #2
 8002138:	d004      	beq.n	8002144 <HAL_RCC_OscConfig+0x154>
 800213a:	6923      	ldr	r3, [r4, #16]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8002140:	2001      	movs	r0, #1
 8002142:	e152      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4a5b      	ldr	r2, [pc, #364]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002146:	6813      	ldr	r3, [r2, #0]
 8002148:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800214c:	6961      	ldr	r1, [r4, #20]
 800214e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002152:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	f013 0f08 	tst.w	r3, #8
 800215a:	d032      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215c:	69a3      	ldr	r3, [r4, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d05b      	beq.n	800221a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_RCC_OscConfig+0x2cc>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002168:	f7fe ffd0 	bl	800110c <HAL_GetTick>
 800216c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	f013 0f02 	tst.w	r3, #2
 8002176:	d121      	bne.n	80021bc <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe ffc8 	bl	800110c <HAL_GetTick>
 800217c:	1b40      	subs	r0, r0, r5
 800217e:	2802      	cmp	r0, #2
 8002180:	d9f5      	bls.n	800216e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002182:	2003      	movs	r0, #3
 8002184:	e131      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800218e:	6961      	ldr	r1, [r4, #20]
 8002190:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e7dd      	b.n	8002154 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002198:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x2c8>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800219e:	f7fe ffb5 	bl	800110c <HAL_GetTick>
 80021a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f013 0f02 	tst.w	r3, #2
 80021ac:	d0d2      	beq.n	8002154 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7fe ffad 	bl	800110c <HAL_GetTick>
 80021b2:	1b40      	subs	r0, r0, r5
 80021b4:	2802      	cmp	r0, #2
 80021b6:	d9f5      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80021b8:	2003      	movs	r0, #3
 80021ba:	e116      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff ff01 	bl	8001fc4 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f013 0f04 	tst.w	r3, #4
 80021c8:	f000 8098 	beq.w	80022fc <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021d4:	d133      	bne.n	800223e <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021de:	61da      	str	r2, [r3, #28]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021ea:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_OscConfig+0x2d0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021f4:	d025      	beq.n	8002242 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f6:	68e3      	ldr	r3, [r4, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d036      	beq.n	800226a <HAL_RCC_OscConfig+0x27a>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d14c      	bne.n	800229a <HAL_RCC_OscConfig+0x2aa>
 8002200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002204:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	621a      	str	r2, [r3, #32]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	f022 0204 	bic.w	r2, r2, #4
 8002216:	621a      	str	r2, [r3, #32]
 8002218:	e02c      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_RCC_OscConfig+0x2cc>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002220:	f7fe ff74 	bl	800110c <HAL_GetTick>
 8002224:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002226:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f013 0f02 	tst.w	r3, #2
 800222e:	d0c8      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002230:	f7fe ff6c 	bl	800110c <HAL_GetTick>
 8002234:	1b40      	subs	r0, r0, r5
 8002236:	2802      	cmp	r0, #2
 8002238:	d9f5      	bls.n	8002226 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 800223a:	2003      	movs	r0, #3
 800223c:	e0d5      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2500      	movs	r5, #0
 8002240:	e7d4      	b.n	80021ec <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_RCC_OscConfig+0x2d0>)
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800224c:	f7fe ff5e 	bl	800110c <HAL_GetTick>
 8002250:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x2d0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f413 7f80 	tst.w	r3, #256	; 0x100
 800225a:	d1cc      	bne.n	80021f6 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7fe ff56 	bl	800110c <HAL_GetTick>
 8002260:	1b80      	subs	r0, r0, r6
 8002262:	2864      	cmp	r0, #100	; 0x64
 8002264:	d9f5      	bls.n	8002252 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8002266:	2003      	movs	r0, #3
 8002268:	e0bf      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 800226c:	6a13      	ldr	r3, [r2, #32]
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002274:	68e3      	ldr	r3, [r4, #12]
 8002276:	b37b      	cbz	r3, 80022d8 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8002278:	f7fe ff48 	bl	800110c <HAL_GetTick>
 800227c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	f013 0f02 	tst.w	r3, #2
 8002286:	d138      	bne.n	80022fa <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe ff40 	bl	800110c <HAL_GetTick>
 800228c:	1b80      	subs	r0, r0, r6
 800228e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002292:	4298      	cmp	r0, r3
 8002294:	d9f3      	bls.n	800227e <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e0a7      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229a:	2b05      	cmp	r3, #5
 800229c:	d012      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2d4>
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_OscConfig+0x2c4>)
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	621a      	str	r2, [r3, #32]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	f022 0204 	bic.w	r2, r2, #4
 80022ae:	621a      	str	r2, [r3, #32]
 80022b0:	e7e0      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	42420000 	.word	0x42420000
 80022bc:	42420480 	.word	0x42420480
 80022c0:	40007000 	.word	0x40007000
 80022c4:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 80022c6:	6a1a      	ldr	r2, [r3, #32]
 80022c8:	f042 0204 	orr.w	r2, r2, #4
 80022cc:	621a      	str	r2, [r3, #32]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	621a      	str	r2, [r3, #32]
 80022d6:	e7cd      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 80022d8:	f7fe ff18 	bl	800110c <HAL_GetTick>
 80022dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022de:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f013 0f02 	tst.w	r3, #2
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7fe ff10 	bl	800110c <HAL_GetTick>
 80022ec:	1b80      	subs	r0, r0, r6
 80022ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80022f2:	4298      	cmp	r0, r3
 80022f4:	d9f3      	bls.n	80022de <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 80022f6:	2003      	movs	r0, #3
 80022f8:	e077      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 80022fa:	b9e5      	cbnz	r5, 8002336 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fc:	69e3      	ldr	r3, [r4, #28]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d072      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002302:	4a3d      	ldr	r2, [pc, #244]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 8002304:	6852      	ldr	r2, [r2, #4]
 8002306:	f002 020c 	and.w	r2, r2, #12
 800230a:	2a08      	cmp	r2, #8
 800230c:	d056      	beq.n	80023bc <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	2b02      	cmp	r3, #2
 8002310:	d017      	beq.n	8002342 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_RCC_OscConfig+0x40c>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002318:	f7fe fef8 	bl	800110c <HAL_GetTick>
 800231c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002326:	d047      	beq.n	80023b8 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fef0 	bl	800110c <HAL_GetTick>
 800232c:	1b00      	subs	r0, r0, r4
 800232e:	2802      	cmp	r0, #2
 8002330:	d9f5      	bls.n	800231e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8002332:	2003      	movs	r0, #3
 8002334:	e059      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4a30      	ldr	r2, [pc, #192]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 8002338:	69d3      	ldr	r3, [r2, #28]
 800233a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233e:	61d3      	str	r3, [r2, #28]
 8002340:	e7dc      	b.n	80022fc <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_RCC_OscConfig+0x40c>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002348:	f7fe fee0 	bl	800110c <HAL_GetTick>
 800234c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002356:	d006      	beq.n	8002366 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fed8 	bl	800110c <HAL_GetTick>
 800235c:	1b40      	subs	r0, r0, r5
 800235e:	2802      	cmp	r0, #2
 8002360:	d9f5      	bls.n	800234e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002362:	2003      	movs	r0, #3
 8002364:	e041      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002366:	6a23      	ldr	r3, [r4, #32]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d01a      	beq.n	80023a4 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236e:	4922      	ldr	r1, [pc, #136]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 8002370:	684b      	ldr	r3, [r1, #4]
 8002372:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002376:	6a22      	ldr	r2, [r4, #32]
 8002378:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800237a:	4302      	orrs	r2, r0
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_RCC_OscConfig+0x40c>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002386:	f7fe fec1 	bl	800110c <HAL_GetTick>
 800238a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002394:	d10e      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe feb9 	bl	800110c <HAL_GetTick>
 800239a:	1b00      	subs	r0, r0, r4
 800239c:	2802      	cmp	r0, #2
 800239e:	d9f5      	bls.n	800238c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80023a0:	2003      	movs	r0, #3
 80023a2:	e022      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 80023a6:	6853      	ldr	r3, [r2, #4]
 80023a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023ac:	68a1      	ldr	r1, [r4, #8]
 80023ae:	430b      	orrs	r3, r1
 80023b0:	6053      	str	r3, [r2, #4]
 80023b2:	e7dc      	b.n	800236e <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 80023b4:	2000      	movs	r0, #0
 80023b6:	e018      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
 80023b8:	2000      	movs	r0, #0
 80023ba:	e016      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d016      	beq.n	80023ee <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCC_OscConfig+0x408>)
 80023c2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80023c8:	6a22      	ldr	r2, [r4, #32]
 80023ca:	4291      	cmp	r1, r2
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 80023ce:	2001      	movs	r0, #1
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00a      	beq.n	80023f2 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 80023dc:	2001      	movs	r0, #1
 80023de:	e004      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 80023e0:	2001      	movs	r0, #1
}
 80023e2:	4770      	bx	lr
        return HAL_ERROR;
 80023e4:	2001      	movs	r0, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 80023e8:	2000      	movs	r0, #0
}
 80023ea:	b002      	add	sp, #8
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80023ee:	2001      	movs	r0, #1
 80023f0:	e7fb      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 80023f2:	2000      	movs	r0, #0
 80023f4:	e7f9      	b.n	80023ea <HAL_RCC_OscConfig+0x3fa>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	42420060 	.word	0x42420060

08002400 <HAL_RCC_GetSysClockFreq>:
{
 8002400:	b410      	push	{r4}
 8002402:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002404:	4c16      	ldr	r4, [pc, #88]	; (8002460 <HAL_RCC_GetSysClockFreq+0x60>)
 8002406:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800240a:	f10d 0c18 	add.w	ip, sp, #24
 800240e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002412:	8a23      	ldrh	r3, [r4, #16]
 8002414:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_GetSysClockFreq+0x64>)
 800241a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800241c:	f003 020c 	and.w	r2, r3, #12
 8002420:	2a08      	cmp	r2, #8
 8002422:	d11a      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002424:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002428:	4462      	add	r2, ip
 800242a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800242e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002432:	d105      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <HAL_RCC_GetSysClockFreq+0x68>)
 8002436:	fb00 f002 	mul.w	r0, r0, r2
}
 800243a:	b007      	add	sp, #28
 800243c:	bc10      	pop	{r4}
 800243e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_RCC_GetSysClockFreq+0x64>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002448:	4463      	add	r3, ip
 800244a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800244e:	4807      	ldr	r0, [pc, #28]	; (800246c <HAL_RCC_GetSysClockFreq+0x6c>)
 8002450:	fb00 f002 	mul.w	r0, r0, r2
 8002454:	fbb0 f0f3 	udiv	r0, r0, r3
 8002458:	e7ef      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800245a:	4804      	ldr	r0, [pc, #16]	; (800246c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800245c:	e7ed      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x3a>
 800245e:	bf00      	nop
 8002460:	08005a64 	.word	0x08005a64
 8002464:	40021000 	.word	0x40021000
 8002468:	003d0900 	.word	0x003d0900
 800246c:	007a1200 	.word	0x007a1200

08002470 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002470:	2800      	cmp	r0, #0
 8002472:	f000 80a3 	beq.w	80025bc <HAL_RCC_ClockConfig+0x14c>
{
 8002476:	b570      	push	{r4, r5, r6, lr}
 8002478:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247a:	4b52      	ldr	r3, [pc, #328]	; (80025c4 <HAL_RCC_ClockConfig+0x154>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	428b      	cmp	r3, r1
 8002484:	d20c      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_RCC_ClockConfig+0x154>)
 8002488:	6813      	ldr	r3, [r2, #0]
 800248a:	f023 0307 	bic.w	r3, r3, #7
 800248e:	430b      	orrs	r3, r1
 8002490:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	428b      	cmp	r3, r1
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800249c:	2001      	movs	r0, #1
}
 800249e:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	f013 0f02 	tst.w	r3, #2
 80024a6:	d017      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	f013 0f04 	tst.w	r3, #4
 80024ac:	d004      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ae:	4a46      	ldr	r2, [pc, #280]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 80024b0:	6853      	ldr	r3, [r2, #4]
 80024b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024b6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	f013 0f08 	tst.w	r3, #8
 80024be:	d004      	beq.n	80024ca <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4a41      	ldr	r2, [pc, #260]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 80024c2:	6853      	ldr	r3, [r2, #4]
 80024c4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024c8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ca:	4a3f      	ldr	r2, [pc, #252]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 80024cc:	6853      	ldr	r3, [r2, #4]
 80024ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d2:	68a0      	ldr	r0, [r4, #8]
 80024d4:	4303      	orrs	r3, r0
 80024d6:	6053      	str	r3, [r2, #4]
 80024d8:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	f013 0f01 	tst.w	r3, #1
 80024e0:	d031      	beq.n	8002546 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e2:	6863      	ldr	r3, [r4, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d020      	beq.n	800252a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d025      	beq.n	8002538 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4a36      	ldr	r2, [pc, #216]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	f012 0f02 	tst.w	r2, #2
 80024f4:	d064      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4934      	ldr	r1, [pc, #208]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 80024f8:	684a      	ldr	r2, [r1, #4]
 80024fa:	f022 0203 	bic.w	r2, r2, #3
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002502:	f7fe fe03 	bl	800110c <HAL_GetTick>
 8002506:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002508:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	6862      	ldr	r2, [r4, #4]
 8002512:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002516:	d016      	beq.n	8002546 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fdf8 	bl	800110c <HAL_GetTick>
 800251c:	1b80      	subs	r0, r0, r6
 800251e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002522:	4298      	cmp	r0, r3
 8002524:	d9f0      	bls.n	8002508 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002526:	2003      	movs	r0, #3
 8002528:	e7b9      	b.n	800249e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002532:	d1e0      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002534:	2001      	movs	r0, #1
 8002536:	e7b2      	b.n	800249e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002540:	d1d9      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002542:	2001      	movs	r0, #1
 8002544:	e7ab      	b.n	800249e <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002546:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_RCC_ClockConfig+0x154>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	42ab      	cmp	r3, r5
 8002550:	d90c      	bls.n	800256c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_RCC_ClockConfig+0x154>)
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	432b      	orrs	r3, r5
 800255c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	6813      	ldr	r3, [r2, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	42ab      	cmp	r3, r5
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8002568:	2001      	movs	r0, #1
 800256a:	e798      	b.n	800249e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	f013 0f04 	tst.w	r3, #4
 8002572:	d006      	beq.n	8002582 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 8002576:	6853      	ldr	r3, [r2, #4]
 8002578:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800257c:	68e1      	ldr	r1, [r4, #12]
 800257e:	430b      	orrs	r3, r1
 8002580:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	f013 0f08 	tst.w	r3, #8
 8002588:	d007      	beq.n	800259a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 800258c:	6853      	ldr	r3, [r2, #4]
 800258e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002592:	6921      	ldr	r1, [r4, #16]
 8002594:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002598:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259a:	f7ff ff31 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x158>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x15c>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	40d8      	lsrs	r0, r3
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_RCC_ClockConfig+0x160>)
 80025ae:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_RCC_ClockConfig+0x164>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f7fe fd66 	bl	8001084 <HAL_InitTick>
  return HAL_OK;
 80025b8:	2000      	movs	r0, #0
 80025ba:	e770      	b.n	800249e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80025bc:	2001      	movs	r0, #1
}
 80025be:	4770      	bx	lr
        return HAL_ERROR;
 80025c0:	2001      	movs	r0, #1
 80025c2:	e76c      	b.n	800249e <HAL_RCC_ClockConfig+0x2e>
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08006910 	.word	0x08006910
 80025d0:	200000e8 	.word	0x200000e8
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetHCLKFreq>:
}
 80025d8:	4b01      	ldr	r3, [pc, #4]	; (80025e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	200000e8 	.word	0x200000e8

080025e4 <HAL_RCC_GetPCLK1Freq>:
{
 80025e4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e6:	f7ff fff7 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80025f2:	4a03      	ldr	r2, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80025f6:	40d8      	lsrs	r0, r3
 80025f8:	bd08      	pop	{r3, pc}
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	08006920 	.word	0x08006920

08002604 <HAL_RCC_GetPCLK2Freq>:
{
 8002604:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002606:	f7ff ffe7 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_GetPCLK2Freq+0x18>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002612:	4a03      	ldr	r2, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
}
 8002616:	40d8      	lsrs	r0, r3
 8002618:	bd08      	pop	{r3, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	08006920 	.word	0x08006920

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800262a:	6803      	ldr	r3, [r0, #0]
 800262c:	f013 0f01 	tst.w	r3, #1
 8002630:	d034      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800263a:	d148      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	4b3b      	ldr	r3, [pc, #236]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002644:	61da      	str	r2, [r3, #28]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002650:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f413 7f80 	tst.w	r3, #256	; 0x100
 800265a:	d03a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800265c:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002660:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002664:	d011      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002666:	6862      	ldr	r2, [r4, #4]
 8002668:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800266c:	429a      	cmp	r2, r3
 800266e:	d00c      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002670:	4a2e      	ldr	r2, [pc, #184]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002672:	6a13      	ldr	r3, [r2, #32]
 8002674:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002678:	492e      	ldr	r1, [pc, #184]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800267a:	2601      	movs	r6, #1
 800267c:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267e:	2600      	movs	r6, #0
 8002680:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002682:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002684:	f013 0f01 	tst.w	r3, #1
 8002688:	d137      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800268a:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800268c:	6a13      	ldr	r3, [r2, #32]
 800268e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002692:	6861      	ldr	r1, [r4, #4]
 8002694:	430b      	orrs	r3, r1
 8002696:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002698:	2d00      	cmp	r5, #0
 800269a:	d13f      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f013 0f02 	tst.w	r3, #2
 80026a2:	d006      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026a6:	6853      	ldr	r3, [r2, #4]
 80026a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026ac:	68a1      	ldr	r1, [r4, #8]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f013 0f10 	tst.w	r3, #16
 80026b8:	d035      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026bc:	6853      	ldr	r3, [r2, #4]
 80026be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026c2:	68e1      	ldr	r1, [r4, #12]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026c8:	2000      	movs	r0, #0
}
 80026ca:	b002      	add	sp, #8
 80026cc:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2500      	movs	r5, #0
 80026d0:	e7bf      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80026d4:	6813      	ldr	r3, [r2, #0]
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026dc:	f7fe fd16 	bl	800110c <HAL_GetTick>
 80026e0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026ea:	d1b7      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ec:	f7fe fd0e 	bl	800110c <HAL_GetTick>
 80026f0:	1b80      	subs	r0, r0, r6
 80026f2:	2864      	cmp	r0, #100	; 0x64
 80026f4:	d9f5      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80026f6:	2003      	movs	r0, #3
 80026f8:	e7e7      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 80026fa:	f7fe fd07 	bl	800110c <HAL_GetTick>
 80026fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f013 0f02 	tst.w	r3, #2
 8002708:	d1bf      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fcff 	bl	800110c <HAL_GetTick>
 800270e:	1b80      	subs	r0, r0, r6
 8002710:	f241 3388 	movw	r3, #5000	; 0x1388
 8002714:	4298      	cmp	r0, r3
 8002716:	d9f3      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8002718:	2003      	movs	r0, #3
 800271a:	e7d6      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	69d3      	ldr	r3, [r2, #28]
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002722:	61d3      	str	r3, [r2, #28]
 8002724:	e7ba      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002726:	2000      	movs	r0, #0
 8002728:	e7cf      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	42420440 	.word	0x42420440

08002738 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002738:	b530      	push	{r4, r5, lr}
 800273a:	b087      	sub	sp, #28
 800273c:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800273e:	4c38      	ldr	r4, [pc, #224]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8002740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002744:	f10d 0c18 	add.w	ip, sp, #24
 8002748:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800274c:	8a23      	ldrh	r3, [r4, #16]
 800274e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002752:	2d02      	cmp	r5, #2
 8002754:	d050      	beq.n	80027f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8002756:	2d10      	cmp	r5, #16
 8002758:	d003      	beq.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 800275a:	2d01      	cmp	r5, #1
 800275c:	d02b      	beq.n	80027b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 800275e:	2000      	movs	r0, #0
 8002760:	e054      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002764:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800276c:	d050      	beq.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800276e:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8002772:	a906      	add	r1, sp, #24
 8002774:	440b      	add	r3, r1
 8002776:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800277e:	d016      	beq.n	80027ae <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002788:	440b      	add	r3, r1
 800278a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002790:	fbb3 f3f2 	udiv	r3, r3, r2
 8002794:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80027a0:	d134      	bne.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80027a2:	0040      	lsls	r0, r0, #1
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80027a6:	fba3 3000 	umull	r3, r0, r3, r0
 80027aa:	0840      	lsrs	r0, r0, #1
 80027ac:	e02e      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80027b0:	fb03 f000 	mul.w	r0, r3, r0
 80027b4:	e7f0      	b.n	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80027ba:	f240 3202 	movw	r2, #770	; 0x302
 80027be:	401a      	ands	r2, r3
 80027c0:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80027c4:	d026      	beq.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ce:	d004      	beq.n	80027da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  uint32_t temp_reg = 0U, frequency = 0U;
 80027d6:	2000      	movs	r0, #0
 80027d8:	e018      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80027dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027de:	f012 0f02 	tst.w	r2, #2
 80027e2:	d0f5      	beq.n	80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 80027e4:	f649 4040 	movw	r0, #40000	; 0x9c40
 80027e8:	e010      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027f2:	d112      	bne.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  uint32_t temp_reg = 0U, frequency = 0U;
 80027f4:	2000      	movs	r0, #0
 80027f6:	e009      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80027f8:	f7ff ff04 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002804:	3301      	adds	r3, #1
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 800280c:	b007      	add	sp, #28
 800280e:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 8002810:	2000      	movs	r0, #0
 8002812:	e7fb      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 8002814:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002818:	e7f8      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 800281a:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 800281e:	e7f5      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8002820:	08005a78 	.word	0x08005a78
 8002824:	40021000 	.word	0x40021000
 8002828:	007a1200 	.word	0x007a1200
 800282c:	aaaaaaab 	.word	0xaaaaaaab
 8002830:	003d0900 	.word	0x003d0900

08002834 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002834:	2800      	cmp	r0, #0
 8002836:	d039      	beq.n	80028ac <HAL_SPI_Init+0x78>
{
 8002838:	b510      	push	{r4, lr}
 800283a:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002840:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002844:	2b00      	cmp	r3, #0
 8002846:	d02c      	beq.n	80028a2 <HAL_SPI_Init+0x6e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002856:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002858:	6863      	ldr	r3, [r4, #4]
 800285a:	68a2      	ldr	r2, [r4, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	68e2      	ldr	r2, [r4, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	6922      	ldr	r2, [r4, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	6962      	ldr	r2, [r4, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	69a2      	ldr	r2, [r4, #24]
 800286c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002870:	4313      	orrs	r3, r2
 8002872:	69e2      	ldr	r2, [r4, #28]
 8002874:	4313      	orrs	r3, r2
 8002876:	6a22      	ldr	r2, [r4, #32]
 8002878:	4313      	orrs	r3, r2
 800287a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800287c:	6822      	ldr	r2, [r4, #0]
 800287e:	430b      	orrs	r3, r1
 8002880:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002882:	8b63      	ldrh	r3, [r4, #26]
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800288c:	6822      	ldr	r2, [r4, #0]
 800288e:	69d3      	ldr	r3, [r2, #28]
 8002890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002894:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002896:	2000      	movs	r0, #0
 8002898:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800289a:	2301      	movs	r3, #1
 800289c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80028a0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80028a2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80028a6:	f002 fe7f 	bl	80055a8 <HAL_SPI_MspInit>
 80028aa:	e7cd      	b.n	8002848 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80028ac:	2001      	movs	r0, #1
}
 80028ae:	4770      	bx	lr

080028b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b2:	6a03      	ldr	r3, [r0, #32]
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028c0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	680d      	ldr	r5, [r1, #0]
 80028c6:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ca:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028ce:	688b      	ldr	r3, [r1, #8]
 80028d0:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028d2:	4d0d      	ldr	r5, [pc, #52]	; (8002908 <TIM_OC1_SetConfig+0x58>)
 80028d4:	42a8      	cmp	r0, r5
 80028d6:	d009      	beq.n	80028ec <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	4d0b      	ldr	r5, [pc, #44]	; (8002908 <TIM_OC1_SetConfig+0x58>)
 80028da:	42a8      	cmp	r0, r5
 80028dc:	d00d      	beq.n	80028fa <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028de:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e0:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028e2:	684a      	ldr	r2, [r1, #4]
 80028e4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e6:	6203      	str	r3, [r0, #32]
}
 80028e8:	bc70      	pop	{r4, r5, r6}
 80028ea:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ec:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80028f0:	68cc      	ldr	r4, [r1, #12]
 80028f2:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	e7ee      	b.n	80028d8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80028fe:	694c      	ldr	r4, [r1, #20]
 8002900:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8002902:	698a      	ldr	r2, [r1, #24]
 8002904:	4322      	orrs	r2, r4
 8002906:	e7ea      	b.n	80028de <TIM_OC1_SetConfig+0x2e>
 8002908:	40012c00 	.word	0x40012c00

0800290c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800290c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800290e:	6a03      	ldr	r3, [r0, #32]
 8002910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002914:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002916:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002918:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800291c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	680d      	ldr	r5, [r1, #0]
 8002922:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002928:	688d      	ldr	r5, [r1, #8]
 800292a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800292e:	4d0f      	ldr	r5, [pc, #60]	; (800296c <TIM_OC3_SetConfig+0x60>)
 8002930:	42a8      	cmp	r0, r5
 8002932:	d009      	beq.n	8002948 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002934:	4d0d      	ldr	r5, [pc, #52]	; (800296c <TIM_OC3_SetConfig+0x60>)
 8002936:	42a8      	cmp	r0, r5
 8002938:	d00e      	beq.n	8002958 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800293e:	684a      	ldr	r2, [r1, #4]
 8002940:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	6203      	str	r3, [r0, #32]
}
 8002944:	bc30      	pop	{r4, r5}
 8002946:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800294c:	68cd      	ldr	r5, [r1, #12]
 800294e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002956:	e7ed      	b.n	8002934 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002958:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800295c:	694d      	ldr	r5, [r1, #20]
 800295e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002962:	698d      	ldr	r5, [r1, #24]
 8002964:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002968:	e7e7      	b.n	800293a <TIM_OC3_SetConfig+0x2e>
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00

08002970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002972:	6a03      	ldr	r3, [r0, #32]
 8002974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002978:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002980:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002984:	680d      	ldr	r5, [r1, #0]
 8002986:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800298a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800298e:	688d      	ldr	r5, [r1, #8]
 8002990:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002994:	4d07      	ldr	r5, [pc, #28]	; (80029b4 <TIM_OC4_SetConfig+0x44>)
 8002996:	42a8      	cmp	r0, r5
 8002998:	d006      	beq.n	80029a8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800299c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800299e:	684a      	ldr	r2, [r1, #4]
 80029a0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a2:	6203      	str	r3, [r0, #32]
}
 80029a4:	bc30      	pop	{r4, r5}
 80029a6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029a8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029ac:	694d      	ldr	r5, [r1, #20]
 80029ae:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80029b2:	e7f2      	b.n	800299a <TIM_OC4_SetConfig+0x2a>
 80029b4:	40012c00 	.word	0x40012c00

080029b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029bc:	6a04      	ldr	r4, [r0, #32]
 80029be:	f024 0401 	bic.w	r4, r4, #1
 80029c2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ca:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ce:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80029d2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029d4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029d6:	6203      	str	r3, [r0, #32]
}
 80029d8:	bc10      	pop	{r4}
 80029da:	4770      	bx	lr

080029dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029dc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029de:	6a03      	ldr	r3, [r0, #32]
 80029e0:	f023 0310 	bic.w	r3, r3, #16
 80029e4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80029e8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029ea:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ee:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029fc:	6203      	str	r3, [r0, #32]
}
 80029fe:	bc10      	pop	{r4}
 8002a00:	4770      	bx	lr

08002a02 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a02:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a08:	4319      	orrs	r1, r3
 8002a0a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0e:	6081      	str	r1, [r0, #8]
}
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a12:	6802      	ldr	r2, [r0, #0]
 8002a14:	68d3      	ldr	r3, [r2, #12]
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1c:	6802      	ldr	r2, [r0, #0]
 8002a1e:	6893      	ldr	r3, [r2, #8]
 8002a20:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d003      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	2000      	movs	r0, #0
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_OC_MspInit>:
}
 8002a34:	4770      	bx	lr

08002a36 <HAL_TIM_OnePulse_MspInit>:
}
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIM_PeriodElapsedCallback>:
}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_IC_CaptureCallback>:
}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIM_TriggerCallback>:
}
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIM_IRQHandler>:
{
 8002a42:	b510      	push	{r4, lr}
 8002a44:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a46:	6803      	ldr	r3, [r0, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	f012 0f02 	tst.w	r2, #2
 8002a4e:	d011      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	f012 0f02 	tst.w	r2, #2
 8002a56:	d00d      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a58:	f06f 0202 	mvn.w	r2, #2
 8002a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a62:	6803      	ldr	r3, [r0, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f013 0f03 	tst.w	r3, #3
 8002a6a:	d070      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6c:	f7ff ffe6 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a70:	2300      	movs	r3, #0
 8002a72:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	f012 0f04 	tst.w	r2, #4
 8002a7c:	d012      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	f012 0f04 	tst.w	r2, #4
 8002a84:	d00e      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a86:	f06f 0204 	mvn.w	r2, #4
 8002a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002a98:	d05f      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7ff ffce 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	f012 0f08 	tst.w	r2, #8
 8002aac:	d012      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	f012 0f08 	tst.w	r2, #8
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab6:	f06f 0208 	mvn.w	r2, #8
 8002aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abc:	2304      	movs	r3, #4
 8002abe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f013 0f03 	tst.w	r3, #3
 8002ac8:	d04e      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	4620      	mov	r0, r4
 8002acc:	f7ff ffb6 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	f012 0f10 	tst.w	r2, #16
 8002adc:	d012      	beq.n	8002b04 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	f012 0f10 	tst.w	r2, #16
 8002ae4:	d00e      	beq.n	8002b04 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae6:	f06f 0210 	mvn.w	r2, #16
 8002aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aec:	2308      	movs	r3, #8
 8002aee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002af8:	d03d      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff ff9e 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b00:	2300      	movs	r3, #0
 8002b02:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	f012 0f01 	tst.w	r2, #1
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	f012 0f01 	tst.w	r2, #1
 8002b14:	d136      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b1e:	d003      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b26:	d134      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b38:	d132      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	f012 0f20 	tst.w	r2, #32
 8002b42:	d003      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	f012 0f20 	tst.w	r2, #32
 8002b4a:	d130      	bne.n	8002bae <HAL_TIM_IRQHandler+0x16c>
}
 8002b4c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	f7ff ff74 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff ff73 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
 8002b58:	e78a      	b.n	8002a70 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7ff ff6d 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff ff6c 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
 8002b66:	e79b      	b.n	8002aa0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff ff66 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7ff ff65 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
 8002b74:	e7ac      	b.n	8002ad0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7ff ff5f 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7ff ff5e 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
 8002b82:	e7bd      	b.n	8002b00 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b84:	f06f 0201 	mvn.w	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7ff ff54 	bl	8002a38 <HAL_TIM_PeriodElapsedCallback>
 8002b90:	e7c1      	b.n	8002b16 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 f9c5 	bl	8002f28 <HAL_TIMEx_BreakCallback>
 8002b9e:	e7c3      	b.n	8002b28 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ba4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff ff4a 	bl	8002a40 <HAL_TIM_TriggerCallback>
 8002bac:	e7c5      	b.n	8002b3a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bae:	f06f 0220 	mvn.w	r2, #32
 8002bb2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f000 f9b6 	bl	8002f26 <HAL_TIMEx_CommutCallback>
}
 8002bba:	e7c7      	b.n	8002b4c <HAL_TIM_IRQHandler+0x10a>

08002bbc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002bbc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <TIM_Base_SetConfig+0x70>)
 8002bc0:	4290      	cmp	r0, r2
 8002bc2:	d00a      	beq.n	8002bda <TIM_Base_SetConfig+0x1e>
 8002bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bc8:	d007      	beq.n	8002bda <TIM_Base_SetConfig+0x1e>
 8002bca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bce:	4290      	cmp	r0, r2
 8002bd0:	d003      	beq.n	8002bda <TIM_Base_SetConfig+0x1e>
 8002bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bd6:	4290      	cmp	r0, r2
 8002bd8:	d103      	bne.n	8002be2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bde:	684a      	ldr	r2, [r1, #4]
 8002be0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <TIM_Base_SetConfig+0x70>)
 8002be4:	4290      	cmp	r0, r2
 8002be6:	d00a      	beq.n	8002bfe <TIM_Base_SetConfig+0x42>
 8002be8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bec:	d007      	beq.n	8002bfe <TIM_Base_SetConfig+0x42>
 8002bee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bf2:	4290      	cmp	r0, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0x42>
 8002bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bfa:	4290      	cmp	r0, r2
 8002bfc:	d103      	bne.n	8002c06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c02:	68ca      	ldr	r2, [r1, #12]
 8002c04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0a:	694a      	ldr	r2, [r1, #20]
 8002c0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002c0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	688b      	ldr	r3, [r1, #8]
 8002c12:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c14:	680b      	ldr	r3, [r1, #0]
 8002c16:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <TIM_Base_SetConfig+0x70>)
 8002c1a:	4298      	cmp	r0, r3
 8002c1c:	d002      	beq.n	8002c24 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	6143      	str	r3, [r0, #20]
}
 8002c22:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002c24:	690b      	ldr	r3, [r1, #16]
 8002c26:	6303      	str	r3, [r0, #48]	; 0x30
 8002c28:	e7f9      	b.n	8002c1e <TIM_Base_SetConfig+0x62>
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00

08002c30 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002c30:	b1a8      	cbz	r0, 8002c5e <HAL_TIM_Base_Init+0x2e>
{
 8002c32:	b510      	push	{r4, lr}
 8002c34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c3a:	b15b      	cbz	r3, 8002c54 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c42:	1d21      	adds	r1, r4, #4
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	f7ff ffb9 	bl	8002bbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c50:	2000      	movs	r0, #0
}
 8002c52:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c58:	f002 fce2 	bl	8005620 <HAL_TIM_Base_MspInit>
 8002c5c:	e7ee      	b.n	8002c3c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002c62:	b1a8      	cbz	r0, 8002c90 <HAL_TIM_OC_Init+0x2e>
{
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c6c:	b15b      	cbz	r3, 8002c86 <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c74:	1d21      	adds	r1, r4, #4
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	f7ff ffa0 	bl	8002bbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c82:	2000      	movs	r0, #0
}
 8002c84:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002c8a:	f7ff fed3 	bl	8002a34 <HAL_TIM_OC_MspInit>
 8002c8e:	e7ee      	b.n	8002c6e <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8002c90:	2001      	movs	r0, #1
}
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8002c94:	b1f8      	cbz	r0, 8002cd6 <HAL_TIM_OnePulse_Init+0x42>
{
 8002c96:	b538      	push	{r3, r4, r5, lr}
 8002c98:	4604      	mov	r4, r0
 8002c9a:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ca0:	b1a3      	cbz	r3, 8002ccc <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	1d21      	adds	r1, r4, #4
 8002caa:	6820      	ldr	r0, [r4, #0]
 8002cac:	f7ff ff86 	bl	8002bbc <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	6813      	ldr	r3, [r2, #0]
 8002cb4:	f023 0308 	bic.w	r3, r3, #8
 8002cb8:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002cba:	6822      	ldr	r2, [r4, #0]
 8002cbc:	6813      	ldr	r3, [r2, #0]
 8002cbe:	432b      	orrs	r3, r5
 8002cc0:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cc8:	2000      	movs	r0, #0
}
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002ccc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8002cd0:	f7ff feb1 	bl	8002a36 <HAL_TIM_OnePulse_MspInit>
 8002cd4:	e7e5      	b.n	8002ca2 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 8002cd6:	2001      	movs	r0, #1
}
 8002cd8:	4770      	bx	lr
	...

08002cdc <TIM_OC2_SetConfig>:
{
 8002cdc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cde:	6a03      	ldr	r3, [r0, #32]
 8002ce0:	f023 0310 	bic.w	r3, r3, #16
 8002ce4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002ce6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002ce8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002cea:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf0:	680d      	ldr	r5, [r1, #0]
 8002cf2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002cf6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cfa:	688d      	ldr	r5, [r1, #8]
 8002cfc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d00:	4d0e      	ldr	r5, [pc, #56]	; (8002d3c <TIM_OC2_SetConfig+0x60>)
 8002d02:	42a8      	cmp	r0, r5
 8002d04:	d009      	beq.n	8002d1a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d06:	4d0d      	ldr	r5, [pc, #52]	; (8002d3c <TIM_OC2_SetConfig+0x60>)
 8002d08:	42a8      	cmp	r0, r5
 8002d0a:	d00e      	beq.n	8002d2a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002d0c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d0e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d10:	684a      	ldr	r2, [r1, #4]
 8002d12:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002d14:	6203      	str	r3, [r0, #32]
}
 8002d16:	bc30      	pop	{r4, r5}
 8002d18:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d1e:	68cd      	ldr	r5, [r1, #12]
 8002d20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d28:	e7ed      	b.n	8002d06 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d2a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d2e:	694d      	ldr	r5, [r1, #20]
 8002d30:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d34:	698d      	ldr	r5, [r1, #24]
 8002d36:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002d3a:	e7e7      	b.n	8002d0c <TIM_OC2_SetConfig+0x30>
 8002d3c:	40012c00 	.word	0x40012c00

08002d40 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002d40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d028      	beq.n	8002d9a <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002d58:	2a0c      	cmp	r2, #12
 8002d5a:	d80b      	bhi.n	8002d74 <HAL_TIM_OC_ConfigChannel+0x34>
 8002d5c:	e8df f002 	tbb	[pc, r2]
 8002d60:	0a0a0a07 	.word	0x0a0a0a07
 8002d64:	0a0a0a11 	.word	0x0a0a0a11
 8002d68:	0a0a0a15 	.word	0x0a0a0a15
 8002d6c:	19          	.byte	0x19
 8002d6d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d6e:	6800      	ldr	r0, [r0, #0]
 8002d70:	f7ff fd9e 	bl	80028b0 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002d80:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d82:	6800      	ldr	r0, [r0, #0]
 8002d84:	f7ff ffaa 	bl	8002cdc <TIM_OC2_SetConfig>
      break;
 8002d88:	e7f4      	b.n	8002d74 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d8a:	6800      	ldr	r0, [r0, #0]
 8002d8c:	f7ff fdbe 	bl	800290c <TIM_OC3_SetConfig>
      break;
 8002d90:	e7f0      	b.n	8002d74 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d92:	6800      	ldr	r0, [r0, #0]
 8002d94:	f7ff fdec 	bl	8002970 <TIM_OC4_SetConfig>
      break;
 8002d98:	e7ec      	b.n	8002d74 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8002d9a:	2002      	movs	r0, #2
}
 8002d9c:	4770      	bx	lr

08002d9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d9e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002da0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002daa:	430b      	orrs	r3, r1
 8002dac:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dae:	6083      	str	r3, [r0, #8]
}
 8002db0:	bc10      	pop	{r4}
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002db4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d066      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xd6>
{
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	6802      	ldr	r2, [r0, #0]
 8002dce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002dda:	680b      	ldr	r3, [r1, #0]
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d04a      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0xc2>
 8002de0:	d913      	bls.n	8002e0a <HAL_TIM_ConfigClockSource+0x56>
 8002de2:	2b60      	cmp	r3, #96	; 0x60
 8002de4:	d03d      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0xae>
 8002de6:	d91e      	bls.n	8002e26 <HAL_TIM_ConfigClockSource+0x72>
 8002de8:	2b70      	cmp	r3, #112	; 0x70
 8002dea:	d028      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x8a>
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d130      	bne.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	68cb      	ldr	r3, [r1, #12]
 8002df4:	684a      	ldr	r2, [r1, #4]
 8002df6:	6889      	ldr	r1, [r1, #8]
 8002df8:	6800      	ldr	r0, [r0, #0]
 8002dfa:	f7ff ffd0 	bl	8002d9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dfe:	6822      	ldr	r2, [r4, #0]
 8002e00:	6893      	ldr	r3, [r2, #8]
 8002e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e06:	6093      	str	r3, [r2, #8]
      break;
 8002e08:	e024      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d006      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x68>
 8002e0e:	d904      	bls.n	8002e1a <HAL_TIM_ConfigClockSource+0x66>
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d003      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x68>
 8002e14:	2b30      	cmp	r3, #48	; 0x30
 8002e16:	d001      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x68>
 8002e18:	e01c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
 8002e1a:	b9db      	cbnz	r3, 8002e54 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6820      	ldr	r0, [r4, #0]
 8002e20:	f7ff fdef 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002e24:	e016      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002e26:	2b50      	cmp	r3, #80	; 0x50
 8002e28:	d114      	bne.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	68ca      	ldr	r2, [r1, #12]
 8002e2c:	6849      	ldr	r1, [r1, #4]
 8002e2e:	6800      	ldr	r0, [r0, #0]
 8002e30:	f7ff fdc2 	bl	80029b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e34:	2150      	movs	r1, #80	; 0x50
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	f7ff fde3 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e00a      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002e3e:	68cb      	ldr	r3, [r1, #12]
 8002e40:	684a      	ldr	r2, [r1, #4]
 8002e42:	6889      	ldr	r1, [r1, #8]
 8002e44:	6800      	ldr	r0, [r0, #0]
 8002e46:	f7ff ffaa 	bl	8002d9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002e52:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e60:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e62:	68ca      	ldr	r2, [r1, #12]
 8002e64:	6849      	ldr	r1, [r1, #4]
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	f7ff fdb8 	bl	80029dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e6c:	2160      	movs	r1, #96	; 0x60
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	f7ff fdc7 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002e74:	e7ee      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	68ca      	ldr	r2, [r1, #12]
 8002e78:	6849      	ldr	r1, [r1, #4]
 8002e7a:	6800      	ldr	r0, [r0, #0]
 8002e7c:	f7ff fd9c 	bl	80029b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e80:	2140      	movs	r1, #64	; 0x40
 8002e82:	6820      	ldr	r0, [r4, #0]
 8002e84:	f7ff fdbd 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002e88:	e7e4      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8002e8a:	2002      	movs	r0, #2
}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d01c      	beq.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002e96:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002e98:	2601      	movs	r6, #1
 8002e9a:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	6802      	ldr	r2, [r0, #0]
 8002ea6:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea8:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eaa:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eae:	680c      	ldr	r4, [r1, #0]
 8002eb0:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb2:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb6:	684b      	ldr	r3, [r1, #4]
 8002eb8:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ebc:	6802      	ldr	r2, [r0, #0]
 8002ebe:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002eca:	4618      	mov	r0, r3
}
 8002ecc:	bc70      	pop	{r4, r5, r6}
 8002ece:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002ed0:	2002      	movs	r0, #2
}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d022      	beq.n	8002f22 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8002edc:	2301      	movs	r3, #1
 8002ede:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ee2:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	688a      	ldr	r2, [r1, #8]
 8002eea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ef0:	684a      	ldr	r2, [r1, #4]
 8002ef2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef8:	680a      	ldr	r2, [r1, #0]
 8002efa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f00:	690a      	ldr	r2, [r1, #16]
 8002f02:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f08:	694a      	ldr	r2, [r1, #20]
 8002f0a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f10:	69ca      	ldr	r2, [r1, #28]
 8002f12:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f14:	6802      	ldr	r2, [r0, #0]
 8002f16:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002f1e:	4618      	mov	r0, r3
 8002f20:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f22:	2002      	movs	r0, #2
}
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f28:	4770      	bx	lr

08002f2a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f2a:	6802      	ldr	r2, [r0, #0]
 8002f2c:	68d3      	ldr	r3, [r2, #12]
 8002f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f32:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f34:	6802      	ldr	r2, [r0, #0]
 8002f36:	6953      	ldr	r3, [r2, #20]
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002f44:	4770      	bx	lr

08002f46 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b21      	cmp	r3, #33	; 0x21
 8002f4e:	d12a      	bne.n	8002fa6 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f50:	6883      	ldr	r3, [r0, #8]
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d016      	beq.n	8002f86 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f58:	6a03      	ldr	r3, [r0, #32]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	6202      	str	r2, [r0, #32]
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	6803      	ldr	r3, [r0, #0]
 8002f62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f64:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002f6c:	b9eb      	cbnz	r3, 8002faa <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f6e:	6802      	ldr	r2, [r0, #0]
 8002f70:	68d3      	ldr	r3, [r2, #12]
 8002f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f76:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f78:	6802      	ldr	r2, [r0, #0]
 8002f7a:	68d3      	ldr	r3, [r2, #12]
 8002f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f80:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8002f82:	2000      	movs	r0, #0
 8002f84:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f86:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	6802      	ldr	r2, [r0, #0]
 8002f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f90:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f92:	6903      	ldr	r3, [r0, #16]
 8002f94:	b91b      	cbnz	r3, 8002f9e <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8002f96:	6a03      	ldr	r3, [r0, #32]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	6203      	str	r3, [r0, #32]
 8002f9c:	e7e2      	b.n	8002f64 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8002f9e:	6a03      	ldr	r3, [r0, #32]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	6203      	str	r3, [r0, #32]
 8002fa4:	e7de      	b.n	8002f64 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	4770      	bx	lr
    return HAL_OK;
 8002faa:	2000      	movs	r0, #0
  }
}
 8002fac:	4770      	bx	lr
	...

08002fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb4:	6802      	ldr	r2, [r0, #0]
 8002fb6:	6913      	ldr	r3, [r2, #16]
 8002fb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fbc:	68c1      	ldr	r1, [r0, #12]
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fc2:	6883      	ldr	r3, [r0, #8]
 8002fc4:	6902      	ldr	r2, [r0, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	6942      	ldr	r2, [r0, #20]
 8002fca:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002fcc:	6801      	ldr	r1, [r0, #0]
 8002fce:	68cb      	ldr	r3, [r1, #12]
 8002fd0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fd4:	f023 030c 	bic.w	r3, r3, #12
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fdc:	6802      	ldr	r2, [r0, #0]
 8002fde:	6953      	ldr	r3, [r2, #20]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	6981      	ldr	r1, [r0, #24]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002fea:	6802      	ldr	r2, [r0, #0]
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <UART_SetConfig+0xc4>)
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d01f      	beq.n	8003032 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ff2:	f7ff faf7 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ffa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ffe:	6863      	ldr	r3, [r4, #4]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	fbb0 f0f3 	udiv	r0, r0, r3
 8003006:	4d1c      	ldr	r5, [pc, #112]	; (8003078 <UART_SetConfig+0xc8>)
 8003008:	fba5 3200 	umull	r3, r2, r5, r0
 800300c:	0951      	lsrs	r1, r2, #5
 800300e:	2264      	movs	r2, #100	; 0x64
 8003010:	fb02 0211 	mls	r2, r2, r1, r0
 8003014:	0113      	lsls	r3, r2, #4
 8003016:	3332      	adds	r3, #50	; 0x32
 8003018:	fba5 2303 	umull	r2, r3, r5, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003022:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	4413      	add	r3, r2
 800302e:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8003030:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003032:	f7ff fae7 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800303a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800303e:	6863      	ldr	r3, [r4, #4]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	fbb0 f0f3 	udiv	r0, r0, r3
 8003046:	4d0c      	ldr	r5, [pc, #48]	; (8003078 <UART_SetConfig+0xc8>)
 8003048:	fba5 3200 	umull	r3, r2, r5, r0
 800304c:	0951      	lsrs	r1, r2, #5
 800304e:	2264      	movs	r2, #100	; 0x64
 8003050:	fb02 0211 	mls	r2, r2, r1, r0
 8003054:	0113      	lsls	r3, r2, #4
 8003056:	3332      	adds	r3, #50	; 0x32
 8003058:	fba5 2303 	umull	r2, r3, r5, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003062:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	6821      	ldr	r1, [r4, #0]
 800306c:	4413      	add	r3, r2
 800306e:	608b      	str	r3, [r1, #8]
 8003070:	e7de      	b.n	8003030 <UART_SetConfig+0x80>
 8003072:	bf00      	nop
 8003074:	40013800 	.word	0x40013800
 8003078:	51eb851f 	.word	0x51eb851f

0800307c <HAL_UART_Init>:
  if (huart == NULL)
 800307c:	b358      	cbz	r0, 80030d6 <HAL_UART_Init+0x5a>
{
 800307e:	b510      	push	{r4, lr}
 8003080:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003086:	b30b      	cbz	r3, 80030cc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	2324      	movs	r3, #36	; 0x24
 800308a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	68d3      	ldr	r3, [r2, #12]
 8003092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003096:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff ff89 	bl	8002fb0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	6913      	ldr	r3, [r2, #16]
 80030a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80030a6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	6953      	ldr	r3, [r2, #20]
 80030ac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80030b0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	68d3      	ldr	r3, [r2, #12]
 80030b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030ba:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	2000      	movs	r0, #0
 80030be:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030c0:	2320      	movs	r3, #32
 80030c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80030ca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80030cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80030d0:	f002 face 	bl	8005670 <HAL_UART_MspInit>
 80030d4:	e7d8      	b.n	8003088 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80030d6:	2001      	movs	r0, #1
}
 80030d8:	4770      	bx	lr

080030da <HAL_UART_TxCpltCallback>:
}
 80030da:	4770      	bx	lr

080030dc <UART_EndTransmit_IT>:
{
 80030dc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030de:	6801      	ldr	r1, [r0, #0]
 80030e0:	68cb      	ldr	r3, [r1, #12]
 80030e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e6:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	2320      	movs	r3, #32
 80030ea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80030ee:	f7ff fff4 	bl	80030da <HAL_UART_TxCpltCallback>
}
 80030f2:	2000      	movs	r0, #0
 80030f4:	bd08      	pop	{r3, pc}

080030f6 <HAL_UART_RxCpltCallback>:
}
 80030f6:	4770      	bx	lr

080030f8 <UART_Receive_IT>:
{
 80030f8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030fa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b22      	cmp	r3, #34	; 0x22
 8003102:	d145      	bne.n	8003190 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003104:	6883      	ldr	r3, [r0, #8]
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	d00e      	beq.n	800312a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800310c:	6903      	ldr	r3, [r0, #16]
 800310e:	bb03      	cbnz	r3, 8003152 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003110:	6803      	ldr	r3, [r0, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	6281      	str	r1, [r0, #40]	; 0x28
 800311a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800311c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800311e:	3b01      	subs	r3, #1
 8003120:	b29b      	uxth	r3, r3
 8003122:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003124:	b1f3      	cbz	r3, 8003164 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8003126:	2000      	movs	r0, #0
 8003128:	e033      	b.n	8003192 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800312a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800312c:	6903      	ldr	r3, [r0, #16]
 800312e:	b943      	cbnz	r3, 8003142 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003130:	6803      	ldr	r3, [r0, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003138:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800313a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800313c:	3302      	adds	r3, #2
 800313e:	6283      	str	r3, [r0, #40]	; 0x28
 8003140:	e7ec      	b.n	800311c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800314a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800314c:	3301      	adds	r3, #1
 800314e:	6283      	str	r3, [r0, #40]	; 0x28
 8003150:	e7e4      	b.n	800311c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003152:	6803      	ldr	r3, [r0, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003158:	1c51      	adds	r1, r2, #1
 800315a:	6281      	str	r1, [r0, #40]	; 0x28
 800315c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003160:	7013      	strb	r3, [r2, #0]
 8003162:	e7db      	b.n	800311c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003164:	6802      	ldr	r2, [r0, #0]
 8003166:	68d3      	ldr	r3, [r2, #12]
 8003168:	f023 0320 	bic.w	r3, r3, #32
 800316c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800316e:	6802      	ldr	r2, [r0, #0]
 8003170:	68d3      	ldr	r3, [r2, #12]
 8003172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003176:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003178:	6802      	ldr	r2, [r0, #0]
 800317a:	6953      	ldr	r3, [r2, #20]
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003182:	2320      	movs	r3, #32
 8003184:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003188:	f7ff ffb5 	bl	80030f6 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800318c:	2000      	movs	r0, #0
 800318e:	e000      	b.n	8003192 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8003190:	2002      	movs	r0, #2
}
 8003192:	bd08      	pop	{r3, pc}

08003194 <HAL_UART_ErrorCallback>:
}
 8003194:	4770      	bx	lr
	...

08003198 <HAL_UART_IRQHandler>:
{
 8003198:	b510      	push	{r4, lr}
 800319a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800319c:	6802      	ldr	r2, [r0, #0]
 800319e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a0:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a2:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80031a4:	f013 000f 	ands.w	r0, r3, #15
 80031a8:	d105      	bne.n	80031b6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031aa:	f013 0f20 	tst.w	r3, #32
 80031ae:	d002      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1e>
 80031b0:	f011 0f20 	tst.w	r1, #32
 80031b4:	d153      	bne.n	800325e <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d067      	beq.n	800328a <HAL_UART_IRQHandler+0xf2>
 80031ba:	f012 0201 	ands.w	r2, r2, #1
 80031be:	d102      	bne.n	80031c6 <HAL_UART_IRQHandler+0x2e>
 80031c0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80031c4:	d061      	beq.n	800328a <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031c6:	f013 0f01 	tst.w	r3, #1
 80031ca:	d006      	beq.n	80031da <HAL_UART_IRQHandler+0x42>
 80031cc:	f411 7f80 	tst.w	r1, #256	; 0x100
 80031d0:	d003      	beq.n	80031da <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80031d4:	f040 0001 	orr.w	r0, r0, #1
 80031d8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031da:	f013 0f04 	tst.w	r3, #4
 80031de:	d004      	beq.n	80031ea <HAL_UART_IRQHandler+0x52>
 80031e0:	b11a      	cbz	r2, 80031ea <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80031e4:	f040 0002 	orr.w	r0, r0, #2
 80031e8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ea:	f013 0f02 	tst.w	r3, #2
 80031ee:	d004      	beq.n	80031fa <HAL_UART_IRQHandler+0x62>
 80031f0:	b11a      	cbz	r2, 80031fa <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80031f4:	f040 0004 	orr.w	r0, r0, #4
 80031f8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031fa:	f013 0f08 	tst.w	r3, #8
 80031fe:	d004      	beq.n	800320a <HAL_UART_IRQHandler+0x72>
 8003200:	b11a      	cbz	r2, 800320a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003202:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003204:	f042 0208 	orr.w	r2, r2, #8
 8003208:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800320c:	2a00      	cmp	r2, #0
 800320e:	d048      	beq.n	80032a2 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003210:	f013 0f20 	tst.w	r3, #32
 8003214:	d002      	beq.n	800321c <HAL_UART_IRQHandler+0x84>
 8003216:	f011 0f20 	tst.w	r1, #32
 800321a:	d124      	bne.n	8003266 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003224:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003226:	f012 0f08 	tst.w	r2, #8
 800322a:	d100      	bne.n	800322e <HAL_UART_IRQHandler+0x96>
 800322c:	b33b      	cbz	r3, 800327e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff fe7b 	bl	8002f2a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	f012 0f40 	tst.w	r2, #64	; 0x40
 800323c:	d01b      	beq.n	8003276 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003244:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003248:	b18b      	cbz	r3, 800326e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800324a:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_UART_IRQHandler+0x11c>)
 800324c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800324e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003250:	f7fe fc28 	bl	8001aa4 <HAL_DMA_Abort_IT>
 8003254:	b328      	cbz	r0, 80032a2 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003256:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003258:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800325a:	4798      	blx	r3
 800325c:	e021      	b.n	80032a2 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff ff4a 	bl	80030f8 <UART_Receive_IT>
      return;
 8003264:	e01d      	b.n	80032a2 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8003266:	4620      	mov	r0, r4
 8003268:	f7ff ff46 	bl	80030f8 <UART_Receive_IT>
 800326c:	e7d6      	b.n	800321c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800326e:	4620      	mov	r0, r4
 8003270:	f7ff ff90 	bl	8003194 <HAL_UART_ErrorCallback>
 8003274:	e015      	b.n	80032a2 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8003276:	4620      	mov	r0, r4
 8003278:	f7ff ff8c 	bl	8003194 <HAL_UART_ErrorCallback>
 800327c:	e011      	b.n	80032a2 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 800327e:	4620      	mov	r0, r4
 8003280:	f7ff ff88 	bl	8003194 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	2300      	movs	r3, #0
 8003286:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003288:	e00b      	b.n	80032a2 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800328a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800328e:	d002      	beq.n	8003296 <HAL_UART_IRQHandler+0xfe>
 8003290:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003294:	d106      	bne.n	80032a4 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003296:	f013 0f40 	tst.w	r3, #64	; 0x40
 800329a:	d002      	beq.n	80032a2 <HAL_UART_IRQHandler+0x10a>
 800329c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80032a0:	d104      	bne.n	80032ac <HAL_UART_IRQHandler+0x114>
}
 80032a2:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80032a4:	4620      	mov	r0, r4
 80032a6:	f7ff fe4e 	bl	8002f46 <UART_Transmit_IT>
    return;
 80032aa:	e7fa      	b.n	80032a2 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff ff15 	bl	80030dc <UART_EndTransmit_IT>
    return;
 80032b2:	e7f6      	b.n	80032a2 <HAL_UART_IRQHandler+0x10a>
 80032b4:	080032b9 	.word	0x080032b9

080032b8 <UART_DMAAbortOnError>:
{
 80032b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80032bc:	2300      	movs	r3, #0
 80032be:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032c0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80032c2:	f7ff ff67 	bl	8003194 <HAL_UART_ErrorCallback>
}
 80032c6:	bd08      	pop	{r3, pc}

080032c8 <simple_delay_ms>:



void simple_delay_ms(const uint16_t ms)
{
  uint32_t i = ms * 7200;
 80032c8:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80032cc:	fb03 f000 	mul.w	r0, r3, r0
  while (i-- > 0) {
 80032d0:	e001      	b.n	80032d6 <simple_delay_ms+0xe>
    asm("nop");
 80032d2:	bf00      	nop
  while (i-- > 0) {
 80032d4:	4618      	mov	r0, r3
 80032d6:	1e43      	subs	r3, r0, #1
 80032d8:	2800      	cmp	r0, #0
 80032da:	d1fa      	bne.n	80032d2 <simple_delay_ms+0xa>
  }
}
 80032dc:	4770      	bx	lr

080032de <simple_delay_us>:

void simple_delay_us(const uint16_t us)
{
  uint16_t i = us * 7;
 80032de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80032e2:	b280      	uxth	r0, r0
  while (i-- > 0) {
 80032e4:	e001      	b.n	80032ea <simple_delay_us+0xc>
    asm("nop");
 80032e6:	bf00      	nop
  while (i-- > 0) {
 80032e8:	4618      	mov	r0, r3
 80032ea:	1e43      	subs	r3, r0, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d1f9      	bne.n	80032e6 <simple_delay_us+0x8>
  }
}
 80032f2:	4770      	bx	lr

080032f4 <crc8>:
 *      Author: kowma
 */
#include "main.h"
#include "ds18b20.h"

unsigned char crc8(void const *mem, size_t len) {
 80032f4:	b430      	push	{r4, r5}
	uint8_t crc = 0;
 80032f6:	2200      	movs	r2, #0
	unsigned char const *data = mem;

		while (len--) {
 80032f8:	e010      	b.n	800331c <crc8+0x28>
			uint8_t inbyte = *data++;
			for (uint8_t i = 8; i; i--) {
				uint8_t mix = (crc ^ inbyte) & 0x01;
				crc >>= 1;
				if (mix) crc ^= 0x8C;
				inbyte >>= 1;
 80032fa:	0840      	lsrs	r0, r0, #1
			for (uint8_t i = 8; i; i--) {
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	b153      	cbz	r3, 8003318 <crc8+0x24>
				uint8_t mix = (crc ^ inbyte) & 0x01;
 8003302:	ea82 0100 	eor.w	r1, r2, r0
				if (mix) crc ^= 0x8C;
 8003306:	f011 0f01 	tst.w	r1, #1
 800330a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800330e:	d0f4      	beq.n	80032fa <crc8+0x6>
 8003310:	f082 028c 	eor.w	r2, r2, #140	; 0x8c
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	e7f0      	b.n	80032fa <crc8+0x6>
			uint8_t inbyte = *data++;
 8003318:	4628      	mov	r0, r5
		while (len--) {
 800331a:	4621      	mov	r1, r4
 800331c:	1e4c      	subs	r4, r1, #1
 800331e:	b119      	cbz	r1, 8003328 <crc8+0x34>
			uint8_t inbyte = *data++;
 8003320:	1c45      	adds	r5, r0, #1
 8003322:	7800      	ldrb	r0, [r0, #0]
			for (uint8_t i = 8; i; i--) {
 8003324:	2308      	movs	r3, #8
 8003326:	e7eb      	b.n	8003300 <crc8+0xc>
			}
		}
		return crc;
}
 8003328:	4610      	mov	r0, r2
 800332a:	bc30      	pop	{r4, r5}
 800332c:	4770      	bx	lr
	...

08003330 <oneWire_direction_set>:
}scratchpad[DS1820_INPUTS][MAX_DS18B20_SENSORS_AMOUNT];



void oneWire_direction_set(uint8_t direction, uint8_t input_no)
{
 8003330:	b500      	push	{lr}
 8003332:	b085      	sub	sp, #20
	uint16_t pin=0;
	GPIO_InitTypeDef	GPIO_InitStruct;
	if(input_no == 0)	pin = ONE_WIRE_DATA1_Pin;
 8003334:	b119      	cbz	r1, 800333e <oneWire_direction_set+0xe>
	else if(input_no == 1)	pin = ONE_WIRE_DATA2_Pin;
 8003336:	2901      	cmp	r1, #1
 8003338:	d009      	beq.n	800334e <oneWire_direction_set+0x1e>
	uint16_t pin=0;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <oneWire_direction_set+0x10>
	if(input_no == 0)	pin = ONE_WIRE_DATA1_Pin;
 800333e:	2308      	movs	r3, #8

	if(direction == ONE_WIRE_BUS_INPUT)
 8003340:	2801      	cmp	r0, #1
 8003342:	d006      	beq.n	8003352 <oneWire_direction_set+0x22>
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
		GPIO_InitStruct.Pin = pin;// Pin for 1-Wire bus
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
	}
	else if(direction ==  ONE_WIRE_BUS_OUTPUT)
 8003344:	2802      	cmp	r0, #2
 8003346:	d010      	beq.n	800336a <oneWire_direction_set+0x3a>
	else
	{
		// error
	}

}
 8003348:	b005      	add	sp, #20
 800334a:	f85d fb04 	ldr.w	pc, [sp], #4
	else if(input_no == 1)	pin = ONE_WIRE_DATA2_Pin;
 800334e:	2310      	movs	r3, #16
 8003350:	e7f6      	b.n	8003340 <oneWire_direction_set+0x10>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8003352:	2200      	movs	r2, #0
 8003354:	9201      	str	r2, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003356:	9202      	str	r2, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8003358:	2201      	movs	r2, #1
 800335a:	9203      	str	r2, [sp, #12]
		GPIO_InitStruct.Pin = pin;// Pin for 1-Wire bus
 800335c:	a904      	add	r1, sp, #16
 800335e:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8003362:	4808      	ldr	r0, [pc, #32]	; (8003384 <oneWire_direction_set+0x54>)
 8003364:	f7fe fd2c 	bl	8001dc0 <HAL_GPIO_Init>
 8003368:	e7ee      	b.n	8003348 <oneWire_direction_set+0x18>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800336a:	2211      	movs	r2, #17
 800336c:	9201      	str	r2, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800336e:	2200      	movs	r2, #0
 8003370:	9202      	str	r2, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8003372:	2201      	movs	r2, #1
 8003374:	9203      	str	r2, [sp, #12]
		GPIO_InitStruct.Pin = pin; // Pin for 1-Wire bus
 8003376:	a904      	add	r1, sp, #16
 8003378:	f841 3d10 	str.w	r3, [r1, #-16]!
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 800337c:	4801      	ldr	r0, [pc, #4]	; (8003384 <oneWire_direction_set+0x54>)
 800337e:	f7fe fd1f 	bl	8001dc0 <HAL_GPIO_Init>
}
 8003382:	e7e1      	b.n	8003348 <oneWire_direction_set+0x18>
 8003384:	40010800 	.word	0x40010800

08003388 <oneWire_init>:

uint8_t oneWire_init(uint8_t input_no)
{
 8003388:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	//TIM2->CR1 |= (1<<3); //OPM
	uint16_t pin =0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 800338a:	4605      	mov	r5, r0
 800338c:	b118      	cbz	r0, 8003396 <oneWire_init+0xe>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 800338e:	2801      	cmp	r0, #1
 8003390:	d020      	beq.n	80033d4 <oneWire_init+0x4c>
	uint16_t pin =0;
 8003392:	2600      	movs	r6, #0
 8003394:	e000      	b.n	8003398 <oneWire_init+0x10>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003396:	2608      	movs	r6, #8
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,input_no);
 8003398:	4629      	mov	r1, r5
 800339a:	2002      	movs	r0, #2
 800339c:	f7ff ffc8 	bl	8003330 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin;
 80033a0:	4c0e      	ldr	r4, [pc, #56]	; (80033dc <oneWire_init+0x54>)
 80033a2:	68e3      	ldr	r3, [r4, #12]
 80033a4:	ea23 0306 	bic.w	r3, r3, r6
 80033a8:	60e3      	str	r3, [r4, #12]
	simple_delay_us(500);
 80033aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033ae:	f7ff ff96 	bl	80032de <simple_delay_us>

	oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 80033b2:	4629      	mov	r1, r5
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7ff ffbb 	bl	8003330 <oneWire_direction_set>
	simple_delay_us(70);
 80033ba:	2046      	movs	r0, #70	; 0x46
 80033bc:	f7ff ff8f 	bl	80032de <simple_delay_us>

	if(ONE_WIRE_DATA1_GPIO_Port->IDR & pin) // if 0 - then there is devices on bus
 80033c0:	68a3      	ldr	r3, [r4, #8]
 80033c2:	421e      	tst	r6, r3
 80033c4:	d108      	bne.n	80033d8 <oneWire_init+0x50>
	{
		i = ONE_WIRE_PRESENCE_FAIL;
	}
	else i = ONE_WIRE_PRESENCE_SUCCESS;
 80033c6:	2401      	movs	r4, #1
	simple_delay_us(410);
 80033c8:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80033cc:	f7ff ff87 	bl	80032de <simple_delay_us>
	return i;
}
 80033d0:	4620      	mov	r0, r4
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 80033d4:	2610      	movs	r6, #16
 80033d6:	e7df      	b.n	8003398 <oneWire_init+0x10>
		i = ONE_WIRE_PRESENCE_FAIL;
 80033d8:	2400      	movs	r4, #0
 80033da:	e7f5      	b.n	80033c8 <oneWire_init+0x40>
 80033dc:	40010800 	.word	0x40010800

080033e0 <oneWire_writeBit>:

void oneWire_writeBit(uint8_t value,uint8_t input_no)
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4605      	mov	r5, r0
	uint16_t pin =0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 80033e4:	460c      	mov	r4, r1
 80033e6:	b119      	cbz	r1, 80033f0 <oneWire_writeBit+0x10>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 80033e8:	2901      	cmp	r1, #1
 80033ea:	d017      	beq.n	800341c <oneWire_writeBit+0x3c>
	uint16_t pin =0;
 80033ec:	2100      	movs	r1, #0
 80033ee:	e000      	b.n	80033f2 <oneWire_writeBit+0x12>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 80033f0:	2108      	movs	r1, #8
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin; // todo check
 80033f2:	4a11      	ldr	r2, [pc, #68]	; (8003438 <oneWire_writeBit+0x58>)
 80033f4:	68d3      	ldr	r3, [r2, #12]
 80033f6:	ea23 0301 	bic.w	r3, r3, r1
 80033fa:	60d3      	str	r3, [r2, #12]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,input_no);
 80033fc:	4621      	mov	r1, r4
 80033fe:	2002      	movs	r0, #2
 8003400:	f7ff ff96 	bl	8003330 <oneWire_direction_set>
	if(value)
 8003404:	b965      	cbnz	r5, 8003420 <oneWire_writeBit+0x40>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
		simple_delay_us(64);
	}
	else
	{
		simple_delay_us(60);
 8003406:	203c      	movs	r0, #60	; 0x3c
 8003408:	f7ff ff69 	bl	80032de <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 800340c:	4621      	mov	r1, r4
 800340e:	2001      	movs	r0, #1
 8003410:	f7ff ff8e 	bl	8003330 <oneWire_direction_set>
		simple_delay_us(10);
 8003414:	200a      	movs	r0, #10
 8003416:	f7ff ff62 	bl	80032de <simple_delay_us>
	}
}
 800341a:	bd38      	pop	{r3, r4, r5, pc}
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 800341c:	2110      	movs	r1, #16
 800341e:	e7e8      	b.n	80033f2 <oneWire_writeBit+0x12>
		simple_delay_us(6);
 8003420:	2006      	movs	r0, #6
 8003422:	f7ff ff5c 	bl	80032de <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 8003426:	4621      	mov	r1, r4
 8003428:	2001      	movs	r0, #1
 800342a:	f7ff ff81 	bl	8003330 <oneWire_direction_set>
		simple_delay_us(64);
 800342e:	2040      	movs	r0, #64	; 0x40
 8003430:	f7ff ff55 	bl	80032de <simple_delay_us>
 8003434:	e7f1      	b.n	800341a <oneWire_writeBit+0x3a>
 8003436:	bf00      	nop
 8003438:	40010800 	.word	0x40010800

0800343c <oneWire_writeByte>:
void oneWire_writeByte(uint8_t byte, uint8_t input_no)
{
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4606      	mov	r6, r0
	uint16_t pin = 0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003440:	460d      	mov	r5, r1
 8003442:	b119      	cbz	r1, 800344c <oneWire_writeByte+0x10>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 8003444:	2901      	cmp	r1, #1
 8003446:	d00d      	beq.n	8003464 <oneWire_writeByte+0x28>
	uint16_t pin = 0;
 8003448:	2400      	movs	r4, #0
 800344a:	e000      	b.n	800344e <oneWire_writeByte+0x12>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 800344c:	2408      	movs	r4, #8
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,pin);
 800344e:	4621      	mov	r1, r4
 8003450:	2002      	movs	r0, #2
 8003452:	f7ff ff6d 	bl	8003330 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <oneWire_writeByte+0x44>)
 8003458:	68d9      	ldr	r1, [r3, #12]
 800345a:	ea21 0104 	bic.w	r1, r1, r4
 800345e:	60d9      	str	r1, [r3, #12]
	for(uint8_t i=0; i<8; i++){
 8003460:	2400      	movs	r4, #0
 8003462:	e009      	b.n	8003478 <oneWire_writeByte+0x3c>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 8003464:	2410      	movs	r4, #16
 8003466:	e7f2      	b.n	800344e <oneWire_writeByte+0x12>
		oneWire_writeBit(byte & 1<<i, input_no);
 8003468:	2001      	movs	r0, #1
 800346a:	40a0      	lsls	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	4030      	ands	r0, r6
 8003470:	f7ff ffb6 	bl	80033e0 <oneWire_writeBit>
	for(uint8_t i=0; i<8; i++){
 8003474:	3401      	adds	r4, #1
 8003476:	b2e4      	uxtb	r4, r4
 8003478:	2c07      	cmp	r4, #7
 800347a:	d9f5      	bls.n	8003468 <oneWire_writeByte+0x2c>
	}
}
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	bf00      	nop
 8003480:	40010800 	.word	0x40010800

08003484 <oneWire_readbit>:

uint8_t oneWire_readbit(uint8_t input_no)
{
 8003484:	b570      	push	{r4, r5, r6, lr}
	uint16_t pin = 0;
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003486:	4605      	mov	r5, r0
 8003488:	b118      	cbz	r0, 8003492 <oneWire_readbit+0xe>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 800348a:	2801      	cmp	r0, #1
 800348c:	d01d      	beq.n	80034ca <oneWire_readbit+0x46>
	uint16_t pin = 0;
 800348e:	2600      	movs	r6, #0
 8003490:	e000      	b.n	8003494 <oneWire_readbit+0x10>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003492:	2608      	movs	r6, #8
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT,input_no);
 8003494:	4629      	mov	r1, r5
 8003496:	2002      	movs	r0, #2
 8003498:	f7ff ff4a 	bl	8003330 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~pin;
 800349c:	4c0e      	ldr	r4, [pc, #56]	; (80034d8 <oneWire_readbit+0x54>)
 800349e:	68e3      	ldr	r3, [r4, #12]
 80034a0:	ea23 0306 	bic.w	r3, r3, r6
 80034a4:	60e3      	str	r3, [r4, #12]
	simple_delay_us(2);
 80034a6:	2002      	movs	r0, #2
 80034a8:	f7ff ff19 	bl	80032de <simple_delay_us>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 80034ac:	4629      	mov	r1, r5
 80034ae:	2001      	movs	r0, #1
 80034b0:	f7ff ff3e 	bl	8003330 <oneWire_direction_set>
	simple_delay_us(10);
 80034b4:	200a      	movs	r0, #10
 80034b6:	f7ff ff12 	bl	80032de <simple_delay_us>
	if(ONE_WIRE_DATA1_GPIO_Port->IDR & pin)
 80034ba:	68a3      	ldr	r3, [r4, #8]
 80034bc:	421e      	tst	r6, r3
 80034be:	d106      	bne.n	80034ce <oneWire_readbit+0x4a>
	{
		simple_delay_us(60);
		return 1;
	}
	else{
		simple_delay_us(60);
 80034c0:	203c      	movs	r0, #60	; 0x3c
 80034c2:	f7ff ff0c 	bl	80032de <simple_delay_us>
		return 0;
 80034c6:	2000      	movs	r0, #0
	}
}
 80034c8:	bd70      	pop	{r4, r5, r6, pc}
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 80034ca:	2610      	movs	r6, #16
 80034cc:	e7e2      	b.n	8003494 <oneWire_readbit+0x10>
		simple_delay_us(60);
 80034ce:	203c      	movs	r0, #60	; 0x3c
 80034d0:	f7ff ff05 	bl	80032de <simple_delay_us>
		return 1;
 80034d4:	2001      	movs	r0, #1
 80034d6:	e7f7      	b.n	80034c8 <oneWire_readbit+0x44>
 80034d8:	40010800 	.word	0x40010800

080034dc <oneWire_readbyte>:

uint8_t oneWire_readbyte(uint8_t input_no)
{
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4606      	mov	r6, r0
	uint8_t data = 0;
	for(uint8_t i = 0; i< 8 ; i++)
 80034e0:	2400      	movs	r4, #0
	uint8_t data = 0;
 80034e2:	4625      	mov	r5, r4
	for(uint8_t i = 0; i< 8 ; i++)
 80034e4:	e001      	b.n	80034ea <oneWire_readbyte+0xe>
 80034e6:	3401      	adds	r4, #1
 80034e8:	b2e4      	uxtb	r4, r4
 80034ea:	2c07      	cmp	r4, #7
 80034ec:	d809      	bhi.n	8003502 <oneWire_readbyte+0x26>
	{
		if(oneWire_readbit(input_no)) data |= (1 << i);
 80034ee:	4630      	mov	r0, r6
 80034f0:	f7ff ffc8 	bl	8003484 <oneWire_readbit>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d0f6      	beq.n	80034e6 <oneWire_readbyte+0xa>
 80034f8:	2301      	movs	r3, #1
 80034fa:	40a3      	lsls	r3, r4
 80034fc:	431d      	orrs	r5, r3
 80034fe:	b2ed      	uxtb	r5, r5
 8003500:	e7f1      	b.n	80034e6 <oneWire_readbyte+0xa>
	}
	return data;
}
 8003502:	4628      	mov	r0, r5
 8003504:	bd70      	pop	{r4, r5, r6, pc}
	...

08003508 <write_data_to_struct>:
}
*/

void write_data_to_struct(uint8_t bit_cnt, uint8_t bit_data, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 8003508:	2807      	cmp	r0, #7
 800350a:	d80a      	bhi.n	8003522 <write_data_to_struct+0x1a>
	{
		 if(bit_data) rom_address[0][deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 800350c:	2900      	cmp	r1, #0
 800350e:	d039      	beq.n	8003584 <write_data_to_struct+0x7c>
 8003510:	2301      	movs	r3, #1
 8003512:	4083      	lsls	r3, r0
 8003514:	491c      	ldr	r1, [pc, #112]	; (8003588 <write_data_to_struct+0x80>)
 8003516:	f811 0032 	ldrb.w	r0, [r1, r2, lsl #3]
 800351a:	4318      	orrs	r0, r3
 800351c:	f801 0032 	strb.w	r0, [r1, r2, lsl #3]
 8003520:	4770      	bx	lr
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8003522:	f1a0 0308 	sub.w	r3, r0, #8
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b1f      	cmp	r3, #31
 800352a:	d80c      	bhi.n	8003546 <write_data_to_struct+0x3e>
	{
		if(bit_data) rom_address[0][deviceNo].ROM_NO_FIRST_HALF |= (1 << (bit_cnt - 8));
 800352c:	b351      	cbz	r1, 8003584 <write_data_to_struct+0x7c>
 800352e:	3808      	subs	r0, #8
 8003530:	2101      	movs	r1, #1
 8003532:	4081      	lsls	r1, r0
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <write_data_to_struct+0x80>)
 8003536:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800353a:	f8d2 0001 	ldr.w	r0, [r2, #1]
 800353e:	4308      	orrs	r0, r1
 8003540:	f8c2 0001 	str.w	r0, [r2, #1]
 8003544:	4770      	bx	lr
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) )  // Serial no first half
 8003546:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b0f      	cmp	r3, #15
 800354e:	d80d      	bhi.n	800356c <write_data_to_struct+0x64>
	{
		if(bit_data) rom_address[0][deviceNo].ROM_NO_SECOUND_HALF |= (1 << (bit_cnt - 40 ));
 8003550:	b1c1      	cbz	r1, 8003584 <write_data_to_struct+0x7c>
 8003552:	3828      	subs	r0, #40	; 0x28
 8003554:	2301      	movs	r3, #1
 8003556:	fa03 f000 	lsl.w	r0, r3, r0
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <write_data_to_struct+0x80>)
 800355c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8003560:	f8b2 3005 	ldrh.w	r3, [r2, #5]
 8003564:	4303      	orrs	r3, r0
 8003566:	f8a2 3005 	strh.w	r3, [r2, #5]
 800356a:	4770      	bx	lr
	}
	else if( bit_cnt >= 56) // CRC
 800356c:	2837      	cmp	r0, #55	; 0x37
 800356e:	d909      	bls.n	8003584 <write_data_to_struct+0x7c>
	{
		if(bit_data) rom_address[0][deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
 8003570:	b141      	cbz	r1, 8003584 <write_data_to_struct+0x7c>
 8003572:	3838      	subs	r0, #56	; 0x38
 8003574:	2101      	movs	r1, #1
 8003576:	4081      	lsls	r1, r0
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <write_data_to_struct+0x80>)
 800357a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800357e:	79d0      	ldrb	r0, [r2, #7]
 8003580:	4308      	orrs	r0, r1
 8003582:	71d0      	strb	r0, [r2, #7]
	}
}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000ef0 	.word	0x20000ef0

0800358c <read_address_bit_form_struct>:
//	}
//}

uint8_t read_address_bit_form_struct(uint8_t bit_cnt, uint8_t deviceNo)
{
	if(bit_cnt < 8) // write to family no
 800358c:	2807      	cmp	r0, #7
 800358e:	d918      	bls.n	80035c2 <read_address_bit_form_struct+0x36>
	{
		 return ((rom_address[0][deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 8003590:	f1a0 0308 	sub.w	r3, r0, #8
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b1f      	cmp	r3, #31
 8003598:	d91e      	bls.n	80035d8 <read_address_bit_form_struct+0x4c>
	{
		return ((rom_address[0][deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) ) // Serial no first half
 800359a:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d927      	bls.n	80035f4 <read_address_bit_form_struct+0x68>
	{
		return ((rom_address[0][deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
	}
	else if( bit_cnt >= 56) // CRC
 80035a4:	2837      	cmp	r0, #55	; 0x37
 80035a6:	d933      	bls.n	8003610 <read_address_bit_form_struct+0x84>
	{
		return ((rom_address[0][deviceNo].ROM_CRC & (1 << (bit_cnt - 56) )) > 0) ;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <read_address_bit_form_struct+0x88>)
 80035aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80035ae:	79ca      	ldrb	r2, [r1, #7]
 80035b0:	3838      	subs	r0, #56	; 0x38
 80035b2:	2301      	movs	r3, #1
 80035b4:	fa03 f000 	lsl.w	r0, r3, r0
 80035b8:	4202      	tst	r2, r0
 80035ba:	bf14      	ite	ne
 80035bc:	4618      	movne	r0, r3
 80035be:	2000      	moveq	r0, #0
 80035c0:	4770      	bx	lr
		 return ((rom_address[0][deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <read_address_bit_form_struct+0x88>)
 80035c4:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
 80035c8:	2301      	movs	r3, #1
 80035ca:	fa03 f000 	lsl.w	r0, r3, r0
 80035ce:	4202      	tst	r2, r0
 80035d0:	bf14      	ite	ne
 80035d2:	4618      	movne	r0, r3
 80035d4:	2000      	moveq	r0, #0
 80035d6:	4770      	bx	lr
		return ((rom_address[0][deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <read_address_bit_form_struct+0x88>)
 80035da:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80035de:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80035e2:	3808      	subs	r0, #8
 80035e4:	2301      	movs	r3, #1
 80035e6:	fa03 f000 	lsl.w	r0, r3, r0
 80035ea:	4202      	tst	r2, r0
 80035ec:	bf14      	ite	ne
 80035ee:	4618      	movne	r0, r3
 80035f0:	2000      	moveq	r0, #0
 80035f2:	4770      	bx	lr
		return ((rom_address[0][deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <read_address_bit_form_struct+0x88>)
 80035f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80035fa:	f8b1 2005 	ldrh.w	r2, [r1, #5]
 80035fe:	3828      	subs	r0, #40	; 0x28
 8003600:	2301      	movs	r3, #1
 8003602:	fa03 f000 	lsl.w	r0, r3, r0
 8003606:	4202      	tst	r2, r0
 8003608:	bf14      	ite	ne
 800360a:	4618      	movne	r0, r3
 800360c:	2000      	moveq	r0, #0
 800360e:	4770      	bx	lr
	}
	else // not used // TODO add asset
	{
		return 0;
 8003610:	2000      	movs	r0, #0
	}

}
 8003612:	4770      	bx	lr
 8003614:	20000ef0 	.word	0x20000ef0

08003618 <ds18b20_check_crc>:
//	}
//}


uint8_t ds18b20_check_crc(uint8_t DS18B20_sensor_no)
{
 8003618:	b510      	push	{r4, lr}
	uint8_t sensor_crc;
	sensor_crc = crc8(&rom_address[0][DS18B20_sensor_no], 7);
 800361a:	4c07      	ldr	r4, [pc, #28]	; (8003638 <ds18b20_check_crc+0x20>)
 800361c:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8003620:	2107      	movs	r1, #7
 8003622:	4620      	mov	r0, r4
 8003624:	f7ff fe66 	bl	80032f4 <crc8>
	if(sensor_crc == rom_address[0][DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8003628:	79e3      	ldrb	r3, [r4, #7]
 800362a:	4283      	cmp	r3, r0
 800362c:	d001      	beq.n	8003632 <ds18b20_check_crc+0x1a>
	else return DS18B20_CRC_ACK_FAIL;
 800362e:	2000      	movs	r0, #0

}
 8003630:	bd10      	pop	{r4, pc}
	if(sensor_crc == rom_address[0][DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 8003632:	2001      	movs	r0, #1
 8003634:	e7fc      	b.n	8003630 <ds18b20_check_crc+0x18>
 8003636:	bf00      	nop
 8003638:	20000ef0 	.word	0x20000ef0

0800363c <ds18b20_search_rom>:
/***
 * searching algorithm based on :
 * https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/187.html
 */
uint8_t ds18b20_search_rom(uint8_t input_no)
{
 800363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	4607      	mov	r7, r0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
	uint8_t lastDiscrepancy = 0, searchDirection = 0, lastZero = 0; // może byc 0 bo na pierwszych 8 pozycjach zapisana jest rodzina urządzeń
 8003642:	f04f 0a00 	mov.w	sl, #0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
 8003646:	46d0      	mov	r8, sl
	do{
		if(oneWire_init(input_no) == ONE_WIRE_PRESENCE_FAIL) return ROM_SARCHING_ERROR;
 8003648:	4638      	mov	r0, r7
 800364a:	f7ff fe9d 	bl	8003388 <oneWire_init>
 800364e:	4603      	mov	r3, r0
 8003650:	2800      	cmp	r0, #0
 8003652:	d060      	beq.n	8003716 <ds18b20_search_rom+0xda>

		// there is at least one sensor - someone send presensce ack
		oneWire_writeByte(0xF0,input_no);
 8003654:	4639      	mov	r1, r7
 8003656:	20f0      	movs	r0, #240	; 0xf0
 8003658:	f7ff fef0 	bl	800343c <oneWire_writeByte>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 800365c:	f04f 0900 	mov.w	r9, #0
 8003660:	464c      	mov	r4, r9
 8003662:	e01e      	b.n	80036a2 <ds18b20_search_rom+0x66>
			}
			else{
				return ROM_SARCHING_ERROR;
			}
		}
		lastDiscrepancy = lastZero;
 8003664:	46ca      	mov	sl, r9
 8003666:	e7ef      	b.n	8003648 <ds18b20_search_rom+0xc>
					searchDirection = 1;
 8003668:	2601      	movs	r6, #1
				oneWire_writeBit(searchDirection,input_no);
 800366a:	4639      	mov	r1, r7
 800366c:	4630      	mov	r0, r6
 800366e:	f7ff feb7 	bl	80033e0 <oneWire_writeBit>
				write_data_to_struct(bit_counter, searchDirection, devices_counter);
 8003672:	4642      	mov	r2, r8
 8003674:	4631      	mov	r1, r6
 8003676:	4620      	mov	r0, r4
 8003678:	f7ff ff46 	bl	8003508 <write_data_to_struct>
				searchDirection ? (lastZero = lastZero) : (lastZero = bit_counter+1);
 800367c:	b97e      	cbnz	r6, 800369e <ds18b20_search_rom+0x62>
 800367e:	f104 0901 	add.w	r9, r4, #1
 8003682:	fa5f f989 	uxtb.w	r9, r9
 8003686:	e00a      	b.n	800369e <ds18b20_search_rom+0x62>
			else if( true_bit != complement_bit)
 8003688:	42b5      	cmp	r5, r6
 800368a:	d043      	beq.n	8003714 <ds18b20_search_rom+0xd8>
				write_data_to_struct(bit_counter, true_bit, devices_counter);
 800368c:	4642      	mov	r2, r8
 800368e:	4629      	mov	r1, r5
 8003690:	4620      	mov	r0, r4
 8003692:	f7ff ff39 	bl	8003508 <write_data_to_struct>
				oneWire_writeBit(true_bit,input_no);
 8003696:	4639      	mov	r1, r7
 8003698:	4628      	mov	r0, r5
 800369a:	f7ff fea1 	bl	80033e0 <oneWire_writeBit>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 800369e:	3401      	adds	r4, #1
 80036a0:	b2e4      	uxtb	r4, r4
 80036a2:	2c3f      	cmp	r4, #63	; 0x3f
 80036a4:	d817      	bhi.n	80036d6 <ds18b20_search_rom+0x9a>
			true_bit = oneWire_readbit(input_no);
 80036a6:	4638      	mov	r0, r7
 80036a8:	f7ff feec 	bl	8003484 <oneWire_readbit>
 80036ac:	4605      	mov	r5, r0
			complement_bit = oneWire_readbit(input_no);
 80036ae:	4638      	mov	r0, r7
 80036b0:	f7ff fee8 	bl	8003484 <oneWire_readbit>
 80036b4:	4606      	mov	r6, r0
			if( ( true_bit ==  0 ) && (complement_bit == 0) ) {
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	d1e6      	bne.n	8003688 <ds18b20_search_rom+0x4c>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d1e4      	bne.n	8003688 <ds18b20_search_rom+0x4c>
				if((bit_counter + 1) ==  lastDiscrepancy)
 80036be:	1c63      	adds	r3, r4, #1
 80036c0:	4553      	cmp	r3, sl
 80036c2:	d0d1      	beq.n	8003668 <ds18b20_search_rom+0x2c>
				else if((bit_counter + 1) > lastDiscrepancy )
 80036c4:	dcd1      	bgt.n	800366a <ds18b20_search_rom+0x2e>
					searchDirection = read_address_bit_form_struct(bit_counter, devices_counter-1);
 80036c6:	f108 31ff 	add.w	r1, r8, #4294967295
 80036ca:	b2c9      	uxtb	r1, r1
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ff5d 	bl	800358c <read_address_bit_form_struct>
 80036d2:	4606      	mov	r6, r0
 80036d4:	e7c9      	b.n	800366a <ds18b20_search_rom+0x2e>
		lastZero = 0;
		if(lastDiscrepancy != 0)
 80036d6:	f1b9 0f00 	cmp.w	r9, #0
 80036da:	d003      	beq.n	80036e4 <ds18b20_search_rom+0xa8>
		{
			devices_counter++  ;
 80036dc:	f108 0801 	add.w	r8, r8, #1
 80036e0:	fa5f f888 	uxtb.w	r8, r8
		}

	}while(lastDiscrepancy != 0);
 80036e4:	f1b9 0f00 	cmp.w	r9, #0
 80036e8:	d1bc      	bne.n	8003664 <ds18b20_search_rom+0x28>

	ds18b20_sensors_amount = devices_counter + 1; //counter from 0 to device amount - 1
 80036ea:	f108 0801 	add.w	r8, r8, #1
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <ds18b20_search_rom+0xe0>)
 80036f0:	f883 8000 	strb.w	r8, [r3]


	// check CRC codes ..

	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <ds18b20_search_rom+0xe0>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	454b      	cmp	r3, r9
 80036fa:	d909      	bls.n	8003710 <ds18b20_search_rom+0xd4>
	{
		if(ds18b20_check_crc(founded_sensor_no) == DS18B20_CRC_ACK_FAIL)
 80036fc:	4648      	mov	r0, r9
 80036fe:	f7ff ff8b 	bl	8003618 <ds18b20_check_crc>
 8003702:	4603      	mov	r3, r0
 8003704:	b138      	cbz	r0, 8003716 <ds18b20_search_rom+0xda>
	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 8003706:	f109 0901 	add.w	r9, r9, #1
 800370a:	fa5f f989 	uxtb.w	r9, r9
 800370e:	e7f1      	b.n	80036f4 <ds18b20_search_rom+0xb8>
		{
			return DS18B20_CRC_ACK_FAIL;
		}
	}
	return ROM_SARCHING_OK;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <ds18b20_search_rom+0xda>
				return ROM_SARCHING_ERROR;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371c:	2000053c 	.word	0x2000053c

08003720 <ds18b20_convertT>:
	return CONVERTION_OK;
}


uint8_t ds18b20_convertT(uint8_t input_no) // for all sensor // there is no reason to convert only one sensor
{
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4606      	mov	r6, r0
	uint8_t convertion_time_counter = 300 / 5; // TODO jeśli zmienimy daomyślną rozdzielczość licznik można zmiejszyć
	uint16_t pin = 0;
	if(!oneWire_init(input_no)) return 0;
 8003724:	f7ff fe30 	bl	8003388 <oneWire_init>
 8003728:	4604      	mov	r4, r0
 800372a:	b320      	cbz	r0, 8003776 <ds18b20_convertT+0x56>

	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 800372c:	b11e      	cbz	r6, 8003736 <ds18b20_convertT+0x16>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 800372e:	2e01      	cmp	r6, #1
 8003730:	d01e      	beq.n	8003770 <ds18b20_convertT+0x50>
	uint16_t pin = 0;
 8003732:	2500      	movs	r5, #0
 8003734:	e000      	b.n	8003738 <ds18b20_convertT+0x18>
	if(input_no == 0) pin = ONE_WIRE_DATA1_Pin;
 8003736:	2508      	movs	r5, #8
	oneWire_writeByte(DS18B20_COMMAND_SKIP_ROM, input_no);
 8003738:	4631      	mov	r1, r6
 800373a:	20cc      	movs	r0, #204	; 0xcc
 800373c:	f7ff fe7e 	bl	800343c <oneWire_writeByte>
	oneWire_writeByte(DS18B20_COMMAND_CONVERT_T, input_no);
 8003740:	4631      	mov	r1, r6
 8003742:	2044      	movs	r0, #68	; 0x44
 8003744:	f7ff fe7a 	bl	800343c <oneWire_writeByte>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT,input_no);
 8003748:	4631      	mov	r1, r6
 800374a:	2001      	movs	r0, #1
 800374c:	f7ff fdf0 	bl	8003330 <oneWire_direction_set>
	simple_delay_ms(80);
 8003750:	2050      	movs	r0, #80	; 0x50
 8003752:	f7ff fdb9 	bl	80032c8 <simple_delay_ms>
	uint8_t convertion_time_counter = 300 / 5; // TODO jeśli zmienimy daomyślną rozdzielczość licznik można zmiejszyć
 8003756:	243c      	movs	r4, #60	; 0x3c
	while(!(ONE_WIRE_DATA1_GPIO_Port->IDR & pin))
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <ds18b20_convertT+0x5c>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	421d      	tst	r5, r3
 800375e:	d109      	bne.n	8003774 <ds18b20_convertT+0x54>
	{
		simple_delay_ms(5);
 8003760:	2005      	movs	r0, #5
 8003762:	f7ff fdb1 	bl	80032c8 <simple_delay_ms>
		if(convertion_time_counter-- == 0) return CONVERTION_ERROR;
 8003766:	1e63      	subs	r3, r4, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	b124      	cbz	r4, 8003776 <ds18b20_convertT+0x56>
 800376c:	461c      	mov	r4, r3
 800376e:	e7f3      	b.n	8003758 <ds18b20_convertT+0x38>
	else if(input_no == 1) pin = ONE_WIRE_DATA2_Pin;
 8003770:	2510      	movs	r5, #16
 8003772:	e7e1      	b.n	8003738 <ds18b20_convertT+0x18>
	}
	return CONVERTION_OK;
 8003774:	2401      	movs	r4, #1
}
 8003776:	4620      	mov	r0, r4
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 800377a:	bf00      	nop
 800377c:	40010800 	.word	0x40010800

08003780 <calculate_data_address>:
 * data scratchpad  = base +  [INPUT * sizeof scratchpad[] ] + [ SENSOR * sizeof scratchpad[][] ]
 * data scratchpad  = base +  72 * INPUT + 9 * sensor
*/
void calculate_data_address(uint8_t *address_tab)
{
	address_tab[0] = sizeof(scratchpad) / ( MAX_DS18B20_SENSORS_AMOUNT * DS1820_INPUTS);
 8003780:	2309      	movs	r3, #9
 8003782:	7003      	strb	r3, [r0, #0]
	address_tab[1] = sizeof(rom_address) / (MAX_DS18B20_SENSORS_AMOUNT * DS1820_INPUTS);
 8003784:	2308      	movs	r3, #8
 8003786:	7043      	strb	r3, [r0, #1]
}
 8003788:	4770      	bx	lr
	...

0800378c <ds18b20_read_scratchpad>:

uint8_t ds18b20_read_scratchpad(uint8_t sensorNumber,uint8_t input_no)
{
 800378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	4607      	mov	r7, r0
 8003794:	460d      	mov	r5, r1
	if(!oneWire_init(input_no)) return ONE_WIRE_PRESENCE_FAIL;
 8003796:	4608      	mov	r0, r1
 8003798:	f7ff fdf6 	bl	8003388 <oneWire_init>
 800379c:	4603      	mov	r3, r0
 800379e:	b918      	cbnz	r0, 80037a8 <ds18b20_read_scratchpad+0x1c>
	{
		*(data + i)= oneWire_readbyte(input_no);
	}
	// TODO  check CRC
	return READ_OK;
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	b002      	add	sp, #8
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	calculate_data_address(address_tab);
 80037a8:	a801      	add	r0, sp, #4
 80037aa:	f7ff ffe9 	bl	8003780 <calculate_data_address>
	uint8_t *address  = (uint8_t*) &rom_address + (MAX_DS18B20_SENSORS_AMOUNT * address_tab[1] * input_no) + (address_tab[1] * sensorNumber); ;
 80037ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80037b2:	00de      	lsls	r6, r3, #3
 80037b4:	fb07 f303 	mul.w	r3, r7, r3
 80037b8:	fb05 3306 	mla	r3, r5, r6, r3
 80037bc:	4e1c      	ldr	r6, [pc, #112]	; (8003830 <ds18b20_read_scratchpad+0xa4>)
 80037be:	441e      	add	r6, r3
	uint8_t *data  = (uint8_t*) &scratchpad + (MAX_DS18B20_SENSORS_AMOUNT * address_tab[0] * input_no) + (address_tab[0] * sensorNumber);
 80037c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037c4:	00da      	lsls	r2, r3, #3
 80037c6:	fb03 f307 	mul.w	r3, r3, r7
 80037ca:	fb02 3705 	mla	r7, r2, r5, r3
	if(ds18b20_sensors_amount == 1) // TODO do przetesotwania z jednym sensorem
 80037ce:	4b19      	ldr	r3, [pc, #100]	; (8003834 <ds18b20_read_scratchpad+0xa8>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d007      	beq.n	80037e6 <ds18b20_read_scratchpad+0x5a>
	else if(ds18b20_sensors_amount > 1)
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d927      	bls.n	800382a <ds18b20_read_scratchpad+0x9e>
		oneWire_writeByte(DS18B20_COMMAND_MATCH_ROM,input_no);
 80037da:	4629      	mov	r1, r5
 80037dc:	2055      	movs	r0, #85	; 0x55
 80037de:	f7ff fe2d 	bl	800343c <oneWire_writeByte>
		for(uint8_t i=0; i< 8 ; i++)
 80037e2:	2400      	movs	r4, #0
 80037e4:	e00d      	b.n	8003802 <ds18b20_read_scratchpad+0x76>
		oneWire_writeByte(DS18B20_COMMAND_SKIP_ROM,input_no);
 80037e6:	4629      	mov	r1, r5
 80037e8:	20cc      	movs	r0, #204	; 0xcc
 80037ea:	f7ff fe27 	bl	800343c <oneWire_writeByte>
 80037ee:	e00a      	b.n	8003806 <ds18b20_read_scratchpad+0x7a>
			oneWire_writeByte(*(address++),input_no);
 80037f0:	f106 0801 	add.w	r8, r6, #1
 80037f4:	4629      	mov	r1, r5
 80037f6:	7830      	ldrb	r0, [r6, #0]
 80037f8:	f7ff fe20 	bl	800343c <oneWire_writeByte>
		for(uint8_t i=0; i< 8 ; i++)
 80037fc:	3401      	adds	r4, #1
 80037fe:	b2e4      	uxtb	r4, r4
			oneWire_writeByte(*(address++),input_no);
 8003800:	4646      	mov	r6, r8
		for(uint8_t i=0; i< 8 ; i++)
 8003802:	2c07      	cmp	r4, #7
 8003804:	d9f4      	bls.n	80037f0 <ds18b20_read_scratchpad+0x64>
	oneWire_writeByte(DS18B20_COMMAND_READ_SCRATCHPAD,input_no);
 8003806:	4629      	mov	r1, r5
 8003808:	20be      	movs	r0, #190	; 0xbe
 800380a:	f7ff fe17 	bl	800343c <oneWire_writeByte>
	for(uint8_t i=0; i<9 ; i++)
 800380e:	2400      	movs	r4, #0
 8003810:	e007      	b.n	8003822 <ds18b20_read_scratchpad+0x96>
		*(data + i)= oneWire_readbyte(input_no);
 8003812:	193e      	adds	r6, r7, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f7ff fe61 	bl	80034dc <oneWire_readbyte>
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <ds18b20_read_scratchpad+0xac>)
 800381c:	5598      	strb	r0, [r3, r6]
	for(uint8_t i=0; i<9 ; i++)
 800381e:	3401      	adds	r4, #1
 8003820:	b2e4      	uxtb	r4, r4
 8003822:	2c08      	cmp	r4, #8
 8003824:	d9f5      	bls.n	8003812 <ds18b20_read_scratchpad+0x86>
	return READ_OK;
 8003826:	2301      	movs	r3, #1
 8003828:	e7ba      	b.n	80037a0 <ds18b20_read_scratchpad+0x14>
		return READ_ERROR;
 800382a:	2300      	movs	r3, #0
 800382c:	e7b8      	b.n	80037a0 <ds18b20_read_scratchpad+0x14>
 800382e:	bf00      	nop
 8003830:	20000ef0 	.word	0x20000ef0
 8003834:	2000053c 	.word	0x2000053c
 8003838:	20000e20 	.word	0x20000e20

0800383c <ds18b20_get_scratchpad_temperature>:
	return READ_OK;
}


uint16_t ds18b20_get_scratchpad_temperature(uint8_t sensor_number,uint8_t input_no)
{
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4605      	mov	r5, r0
 8003840:	460c      	mov	r4, r1
	uint16_t temperature;
	if(ds18b20_convertT(input_no) == CONVERTION_ERROR) return CONVERTION_ERROR;
 8003842:	4608      	mov	r0, r1
 8003844:	f7ff ff6c 	bl	8003720 <ds18b20_convertT>
 8003848:	b908      	cbnz	r0, 800384e <ds18b20_get_scratchpad_temperature+0x12>
 800384a:	2000      	movs	r0, #0
	if(ds18b20_read_scratchpad(sensor_number,input_no) != READ_OK ) return GET_TEMPERATURE_ERROR;
	temperature = scratchpad[input_no][sensor_number].temperature;
	return temperature;
}
 800384c:	bd38      	pop	{r3, r4, r5, pc}
	if(ds18b20_read_scratchpad(sensor_number,input_no) != READ_OK ) return GET_TEMPERATURE_ERROR;
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f7ff ff9b 	bl	800378c <ds18b20_read_scratchpad>
 8003856:	2801      	cmp	r0, #1
 8003858:	d108      	bne.n	800386c <ds18b20_get_scratchpad_temperature+0x30>
	temperature = scratchpad[input_no][sensor_number].temperature;
 800385a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800385e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8003862:	00e3      	lsls	r3, r4, #3
 8003864:	441d      	add	r5, r3
 8003866:	4b03      	ldr	r3, [pc, #12]	; (8003874 <ds18b20_get_scratchpad_temperature+0x38>)
 8003868:	5b58      	ldrh	r0, [r3, r5]
	return temperature;
 800386a:	e7ef      	b.n	800384c <ds18b20_get_scratchpad_temperature+0x10>
	if(ds18b20_read_scratchpad(sensor_number,input_no) != READ_OK ) return GET_TEMPERATURE_ERROR;
 800386c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003870:	e7ec      	b.n	800384c <ds18b20_get_scratchpad_temperature+0x10>
 8003872:	bf00      	nop
 8003874:	20000e20 	.word	0x20000e20

08003878 <ds18b20_initalize>:
	}
	*(temperature_str_hex++) = '\0';
}

void ds18b20_initalize(uint8_t input_no)
{
 8003878:	b508      	push	{r3, lr}
	ds18b20_search_rom(input_no);
 800387a:	f7ff fedf 	bl	800363c <ds18b20_search_rom>
	if(ds18b20_sensors_amount) HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_OK;
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <ds18b20_initalize+0x18>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b123      	cbz	r3, 800388e <ds18b20_initalize+0x16>
 8003884:	4a03      	ldr	r2, [pc, #12]	; (8003894 <ds18b20_initalize+0x1c>)
 8003886:	7813      	ldrb	r3, [r2, #0]
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	7013      	strb	r3, [r2, #0]
}
 800388e:	bd08      	pop	{r3, pc}
 8003890:	2000053c 	.word	0x2000053c
 8003894:	200005a0 	.word	0x200005a0

08003898 <ds18b20_convert_temperature>:
 * ds18b20_convert_temperature duration is about 6ms
 *
 */
void ds18b20_convert_temperature(uint16_t ms_time_counter)
{
	if(ds_handler_flag == DS_HANDLER_FLAG_BUSY) return ;
 8003898:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <ds18b20_convert_temperature+0x5c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d004      	beq.n	80038ac <ds18b20_convert_temperature+0x14>
	if(ms_time_counter != ms_counter) return;
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <ds18b20_convert_temperature+0x60>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	4283      	cmp	r3, r0
 80038aa:	d000      	beq.n	80038ae <ds18b20_convert_temperature+0x16>
 80038ac:	4770      	bx	lr
{
 80038ae:	b510      	push	{r4, lr}
	LED_RED_GPIO_Port->BSRR= LED_RED_Pin;
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <ds18b20_convert_temperature+0x64>)
 80038b2:	2220      	movs	r2, #32
 80038b4:	611a      	str	r2, [r3, #16]
	for(uint8_t inp_idx = 0; inp_idx < DS1820_INPUTS; inp_idx++)
 80038b6:	2400      	movs	r4, #0
 80038b8:	e001      	b.n	80038be <ds18b20_convert_temperature+0x26>
 80038ba:	3401      	adds	r4, #1
 80038bc:	b2e4      	uxtb	r4, r4
 80038be:	2c01      	cmp	r4, #1
 80038c0:	d811      	bhi.n	80038e6 <ds18b20_convert_temperature+0x4e>
	{
		if(!oneWire_init(inp_idx)) continue ;
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff fd60 	bl	8003388 <oneWire_init>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d0f6      	beq.n	80038ba <ds18b20_convert_temperature+0x22>
		oneWire_writeByte(DS18B20_COMMAND_SKIP_ROM, inp_idx);
 80038cc:	4621      	mov	r1, r4
 80038ce:	20cc      	movs	r0, #204	; 0xcc
 80038d0:	f7ff fdb4 	bl	800343c <oneWire_writeByte>
		oneWire_writeByte(DS18B20_COMMAND_CONVERT_T, inp_idx);
 80038d4:	4621      	mov	r1, r4
 80038d6:	2044      	movs	r0, #68	; 0x44
 80038d8:	f7ff fdb0 	bl	800343c <oneWire_writeByte>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT,inp_idx);
 80038dc:	4621      	mov	r1, r4
 80038de:	2001      	movs	r0, #1
 80038e0:	f7ff fd26 	bl	8003330 <oneWire_direction_set>
 80038e4:	e7e9      	b.n	80038ba <ds18b20_convert_temperature+0x22>
	}

	LED_RED_GPIO_Port->BRR = LED_RED_Pin;
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <ds18b20_convert_temperature+0x64>)
 80038e8:	2220      	movs	r2, #32
 80038ea:	615a      	str	r2, [r3, #20]
	ds_handler_flag = DS_HANDLER_FLAG_BUSY;
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <ds18b20_convert_temperature+0x5c>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
}
 80038f2:	bd10      	pop	{r4, pc}
 80038f4:	20000aa0 	.word	0x20000aa0
 80038f8:	200007c0 	.word	0x200007c0
 80038fc:	40010800 	.word	0x40010800

08003900 <ds18b20_read_primary_sensor>:
void ds18b20_read_primary_sensor(uint16_t ms_time_counter)
{
	if(ds_handler_flag == DS_HANDLER_FLAG_BUSY) return ;
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <ds18b20_read_primary_sensor+0x70>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d004      	beq.n	8003914 <ds18b20_read_primary_sensor+0x14>
	if(ms_time_counter != ms_counter) return;
 800390a:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <ds18b20_read_primary_sensor+0x74>)
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	4283      	cmp	r3, r0
 8003912:	d000      	beq.n	8003916 <ds18b20_read_primary_sensor+0x16>
 8003914:	4770      	bx	lr
{
 8003916:	b510      	push	{r4, lr}
 8003918:	b082      	sub	sp, #8

	if(!oneWire_init(DS18B20_IN1))
 800391a:	2000      	movs	r0, #0
 800391c:	f7ff fd34 	bl	8003388 <oneWire_init>
 8003920:	b930      	cbnz	r0, 8003930 <ds18b20_read_primary_sensor+0x30>
	{
		HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_ERROR;
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <ds18b20_read_primary_sensor+0x78>)
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	f36f 0200 	bfc	r2, #0, #1
 800392a:	701a      	strb	r2, [r3, #0]
	{
		*(data + i)= oneWire_readbyte(DS18B20_IN1);
	}
	ds_handler_flag = DS_HANDLER_FLAG_BUSY;
	HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_OK;
}
 800392c:	b002      	add	sp, #8
 800392e:	bd10      	pop	{r4, pc}
	calculate_data_address(address_tab);
 8003930:	a801      	add	r0, sp, #4
 8003932:	f7ff ff25 	bl	8003780 <calculate_data_address>
	oneWire_writeByte(DS18B20_COMMAND_SKIP_ROM,DS18B20_IN1); // only one sensor should be in input 1
 8003936:	2100      	movs	r1, #0
 8003938:	20cc      	movs	r0, #204	; 0xcc
 800393a:	f7ff fd7f 	bl	800343c <oneWire_writeByte>
	oneWire_writeByte(DS18B20_COMMAND_READ_SCRATCHPAD,DS18B20_IN1);
 800393e:	2100      	movs	r1, #0
 8003940:	20be      	movs	r0, #190	; 0xbe
 8003942:	f7ff fd7b 	bl	800343c <oneWire_writeByte>
	for(uint8_t i=0; i<3 ; i++) // read onlu temperature
 8003946:	2400      	movs	r4, #0
 8003948:	e006      	b.n	8003958 <ds18b20_read_primary_sensor+0x58>
		*(data + i)= oneWire_readbyte(DS18B20_IN1);
 800394a:	2000      	movs	r0, #0
 800394c:	f7ff fdc6 	bl	80034dc <oneWire_readbyte>
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <ds18b20_read_primary_sensor+0x7c>)
 8003952:	5518      	strb	r0, [r3, r4]
	for(uint8_t i=0; i<3 ; i++) // read onlu temperature
 8003954:	3401      	adds	r4, #1
 8003956:	b2e4      	uxtb	r4, r4
 8003958:	2c02      	cmp	r4, #2
 800395a:	d9f6      	bls.n	800394a <ds18b20_read_primary_sensor+0x4a>
	ds_handler_flag = DS_HANDLER_FLAG_BUSY;
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <ds18b20_read_primary_sensor+0x70>)
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
	HC_status.primary_temperature_sensor = STATUS_PRIMARY_TEMP_SENSOR_OK;
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <ds18b20_read_primary_sensor+0x78>)
 8003964:	7813      	ldrb	r3, [r2, #0]
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	7013      	strb	r3, [r2, #0]
 800396c:	e7de      	b.n	800392c <ds18b20_read_primary_sensor+0x2c>
 800396e:	bf00      	nop
 8003970:	20000aa0 	.word	0x20000aa0
 8003974:	200007c0 	.word	0x200007c0
 8003978:	200005a0 	.word	0x200005a0
 800397c:	20000e20 	.word	0x20000e20

08003980 <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <EE_FindValidPage+0x48>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <EE_FindValidPage+0x4c>)
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 800398c:	b188      	cbz	r0, 80039b2 <EE_FindValidPage+0x32>
 800398e:	2801      	cmp	r0, #1
 8003990:	d113      	bne.n	80039ba <EE_FindValidPage+0x3a>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8003992:	b93a      	cbnz	r2, 80039a4 <EE_FindValidPage+0x24>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8003994:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8003998:	428b      	cmp	r3, r1
 800399a:	d001      	beq.n	80039a0 <EE_FindValidPage+0x20>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800399c:	2301      	movs	r3, #1
 800399e:	e00d      	b.n	80039bc <EE_FindValidPage+0x3c>
          return PAGE0;         /* Page0 valid */
 80039a0:	4613      	mov	r3, r2
 80039a2:	e00b      	b.n	80039bc <EE_FindValidPage+0x3c>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 80039a4:	b963      	cbnz	r3, 80039c0 <EE_FindValidPage+0x40>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 80039a6:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80039aa:	428a      	cmp	r2, r1
 80039ac:	d106      	bne.n	80039bc <EE_FindValidPage+0x3c>
        {
          return PAGE1;         /* Page1 valid */
 80039ae:	2301      	movs	r3, #1
 80039b0:	e004      	b.n	80039bc <EE_FindValidPage+0x3c>
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 80039b2:	b11b      	cbz	r3, 80039bc <EE_FindValidPage+0x3c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 80039b4:	b932      	cbnz	r2, 80039c4 <EE_FindValidPage+0x44>
      {
        return PAGE1;           /* Page1 valid */
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <EE_FindValidPage+0x3c>
      {
        return NO_VALID_PAGE ;  /* No valid Page */
      }

    default:
      return PAGE0;             /* Page0 valid */
 80039ba:	2300      	movs	r3, #0
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	4770      	bx	lr
        return NO_VALID_PAGE;   /* No valid Page */
 80039c0:	23ab      	movs	r3, #171	; 0xab
 80039c2:	e7fb      	b.n	80039bc <EE_FindValidPage+0x3c>
        return NO_VALID_PAGE ;  /* No valid Page */
 80039c4:	23ab      	movs	r3, #171	; 0xab
 80039c6:	e7f9      	b.n	80039bc <EE_FindValidPage+0x3c>
 80039c8:	0801f800 	.word	0x0801f800
 80039cc:	0801fc00 	.word	0x0801fc00

080039d0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4605      	mov	r5, r0
 80039d4:	460e      	mov	r6, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint16_t validpage = PAGE0;
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f7ff ffd2 	bl	8003980 <EE_FindValidPage>

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80039dc:	28ab      	cmp	r0, #171	; 0xab
 80039de:	d021      	beq.n	8003a24 <EE_VerifyPageFullWriteVariable+0x54>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80039e0:	f500 3400 	add.w	r4, r0, #131072	; 0x20000
 80039e4:	347e      	adds	r4, #126	; 0x7e
 80039e6:	02a4      	lsls	r4, r4, #10

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	480f      	ldr	r0, [pc, #60]	; (8003a28 <EE_VerifyPageFullWriteVariable+0x58>)
 80039ec:	eb00 2083 	add.w	r0, r0, r3, lsl #10

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 80039f0:	4284      	cmp	r4, r0
 80039f2:	d216      	bcs.n	8003a22 <EE_VerifyPageFullWriteVariable+0x52>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d001      	beq.n	8003a00 <EE_VerifyPageFullWriteVariable+0x30>
      return flashstatus;
    }
    else
    {
      /* Next address location */
      address = address + 4;
 80039fc:	3404      	adds	r4, #4
 80039fe:	e7f7      	b.n	80039f0 <EE_VerifyPageFullWriteVariable+0x20>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 8003a00:	b2b2      	uxth	r2, r6
 8003a02:	2300      	movs	r3, #0
 8003a04:	4621      	mov	r1, r4
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7fe f916 	bl	8001c38 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8003a0c:	b108      	cbz	r0, 8003a12 <EE_VerifyPageFullWriteVariable+0x42>
        return flashstatus;
 8003a0e:	b280      	uxth	r0, r0
 8003a10:	e008      	b.n	8003a24 <EE_VerifyPageFullWriteVariable+0x54>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 8003a12:	b2aa      	uxth	r2, r5
 8003a14:	2300      	movs	r3, #0
 8003a16:	1ca1      	adds	r1, r4, #2
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f7fe f90d 	bl	8001c38 <HAL_FLASH_Program>
      return flashstatus;
 8003a1e:	b280      	uxth	r0, r0
 8003a20:	e000      	b.n	8003a24 <EE_VerifyPageFullWriteVariable+0x54>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8003a22:	2080      	movs	r0, #128	; 0x80
}
 8003a24:	bd70      	pop	{r4, r5, r6, pc}
 8003a26:	bf00      	nop
 8003a28:	0801f7ff 	.word	0x0801f7ff

08003a2c <EE_ReadVariable>:
{
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4604      	mov	r4, r0
 8003a30:	460d      	mov	r5, r1
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f7ff ffa4 	bl	8003980 <EE_FindValidPage>
  if (validpage == NO_VALID_PAGE)
 8003a38:	28ab      	cmp	r0, #171	; 0xab
 8003a3a:	d016      	beq.n	8003a6a <EE_ReadVariable+0x3e>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8003a3c:	f500 3200 	add.w	r2, r0, #131072	; 0x20000
 8003a40:	327e      	adds	r2, #126	; 0x7e
 8003a42:	0292      	lsls	r2, r2, #10
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <EE_ReadVariable+0x40>)
 8003a48:	eb00 2083 	add.w	r0, r0, r3, lsl #10
  while (address > (PageStartAddress + 2))
 8003a4c:	1c93      	adds	r3, r2, #2
 8003a4e:	4283      	cmp	r3, r0
 8003a50:	d20a      	bcs.n	8003a68 <EE_ReadVariable+0x3c>
    addressvalue = (*(__IO uint16_t*)address);
 8003a52:	8803      	ldrh	r3, [r0, #0]
 8003a54:	b29b      	uxth	r3, r3
    if (addressvalue == VirtAddress)
 8003a56:	42a3      	cmp	r3, r4
 8003a58:	d001      	beq.n	8003a5e <EE_ReadVariable+0x32>
      address = address - 4;
 8003a5a:	3804      	subs	r0, #4
 8003a5c:	e7f6      	b.n	8003a4c <EE_ReadVariable+0x20>
      *Data = (*(__IO uint16_t*)(address - 2));
 8003a5e:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 8003a62:	802b      	strh	r3, [r5, #0]
      readstatus = 0;
 8003a64:	2000      	movs	r0, #0
      break;
 8003a66:	e000      	b.n	8003a6a <EE_ReadVariable+0x3e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8003a68:	2001      	movs	r0, #1
}
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	0801f7fe 	.word	0x0801f7fe

08003a70 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8003a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	4605      	mov	r5, r0
 8003a78:	460f      	mov	r7, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	9005      	str	r0, [sp, #20]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003a7e:	f7ff ff7f 	bl	8003980 <EE_FindValidPage>

  if (validpage == PAGE1)       /* Page1 valid */
 8003a82:	2801      	cmp	r0, #1
 8003a84:	d011      	beq.n	8003aaa <EE_PageTransfer+0x3a>
    newpageaddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d14b      	bne.n	8003b22 <EE_PageTransfer+0xb2>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 8003a8a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003b2c <EE_PageTransfer+0xbc>
    newpageaddress = PAGE1_BASE_ADDRESS;
 8003a8e:	4e26      	ldr	r6, [pc, #152]	; (8003b28 <EE_PageTransfer+0xb8>)
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);
 8003a90:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8003a94:	2300      	movs	r3, #0
 8003a96:	4631      	mov	r1, r6
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7fe f8cd 	bl	8001c38 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8003a9e:	b140      	cbz	r0, 8003ab2 <EE_PageTransfer+0x42>
  {
    return flashstatus;
 8003aa0:	b284      	uxth	r4, r0



  /* Return last operation flash status */
  return flashstatus;
}
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	b006      	add	sp, #24
 8003aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    oldpageid = PAGE1_ID;
 8003aaa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003b28 <EE_PageTransfer+0xb8>
    newpageaddress = PAGE0_BASE_ADDRESS;
 8003aae:	4e1f      	ldr	r6, [pc, #124]	; (8003b2c <EE_PageTransfer+0xbc>)
 8003ab0:	e7ee      	b.n	8003a90 <EE_PageTransfer+0x20>
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f7ff ff8b 	bl	80039d0 <EE_VerifyPageFullWriteVariable>
  if (eepromstatus != HAL_OK)
 8003aba:	4604      	mov	r4, r0
 8003abc:	b110      	cbz	r0, 8003ac4 <EE_PageTransfer+0x54>
 8003abe:	e7f0      	b.n	8003aa2 <EE_PageTransfer+0x32>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8003ac0:	3401      	adds	r4, #1
 8003ac2:	b2a4      	uxth	r4, r4
 8003ac4:	2c08      	cmp	r4, #8
 8003ac6:	d814      	bhi.n	8003af2 <EE_PageTransfer+0x82>
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <EE_PageTransfer+0xc0>)
 8003aca:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ace:	42a8      	cmp	r0, r5
 8003ad0:	d0f6      	beq.n	8003ac0 <EE_PageTransfer+0x50>
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8003ad2:	4918      	ldr	r1, [pc, #96]	; (8003b34 <EE_PageTransfer+0xc4>)
 8003ad4:	f7ff ffaa 	bl	8003a2c <EE_ReadVariable>
      if (readstatus != 0x1)
 8003ad8:	2801      	cmp	r0, #1
 8003ada:	d0f1      	beq.n	8003ac0 <EE_PageTransfer+0x50>
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <EE_PageTransfer+0xc4>)
 8003ade:	8819      	ldrh	r1, [r3, #0]
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <EE_PageTransfer+0xc0>)
 8003ae2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ae6:	f7ff ff73 	bl	80039d0 <EE_VerifyPageFullWriteVariable>
        if (eepromstatus != HAL_OK)
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d0e8      	beq.n	8003ac0 <EE_PageTransfer+0x50>
          return eepromstatus;
 8003aee:	4604      	mov	r4, r0
 8003af0:	e7d7      	b.n	8003aa2 <EE_PageTransfer+0x32>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003af2:	2300      	movs	r3, #0
 8003af4:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8003af6:	f8cd 800c 	str.w	r8, [sp, #12]
  s_eraseinit.NbPages     = 1;
 8003afa:	2301      	movs	r3, #1
 8003afc:	9304      	str	r3, [sp, #16]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003afe:	a905      	add	r1, sp, #20
 8003b00:	a801      	add	r0, sp, #4
 8003b02:	f7fe f90b 	bl	8001d1c <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8003b06:	b108      	cbz	r0, 8003b0c <EE_PageTransfer+0x9c>
    return flashstatus;
 8003b08:	b284      	uxth	r4, r0
 8003b0a:	e7ca      	b.n	8003aa2 <EE_PageTransfer+0x32>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2300      	movs	r3, #0
 8003b10:	4631      	mov	r1, r6
 8003b12:	2001      	movs	r0, #1
 8003b14:	f7fe f890 	bl	8001c38 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8003b18:	b908      	cbnz	r0, 8003b1e <EE_PageTransfer+0xae>
  return flashstatus;
 8003b1a:	b284      	uxth	r4, r0
 8003b1c:	e7c1      	b.n	8003aa2 <EE_PageTransfer+0x32>
    return flashstatus;
 8003b1e:	b284      	uxth	r4, r0
 8003b20:	e7bf      	b.n	8003aa2 <EE_PageTransfer+0x32>
    return NO_VALID_PAGE;       /* No valid Page */
 8003b22:	24ab      	movs	r4, #171	; 0xab
 8003b24:	e7bd      	b.n	8003aa2 <EE_PageTransfer+0x32>
 8003b26:	bf00      	nop
 8003b28:	0801fc00 	.word	0x0801fc00
 8003b2c:	0801f800 	.word	0x0801f800
 8003b30:	200000e0 	.word	0x200000e0
 8003b34:	2000053e 	.word	0x2000053e

08003b38 <EE_WriteVariable>:
{
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003b3e:	f7ff ff47 	bl	80039d0 <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 8003b42:	2880      	cmp	r0, #128	; 0x80
 8003b44:	d000      	beq.n	8003b48 <EE_WriteVariable+0x10>
}
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7ff ff90 	bl	8003a70 <EE_PageTransfer>
 8003b50:	e7f9      	b.n	8003b46 <EE_WriteVariable+0xe>
	...

08003b54 <rom_wite_mem1_data>:
		rom_wite_PID_data(100,100,100);
	}
}

void rom_wite_mem1_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4604      	mov	r4, r0
 8003b58:	460d      	mov	r5, r1
	rom_mem.rom_str.memory1_temp = (uint16_t) ui_temp*10;
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7fc ff4d 	bl	80009fc <__aeabi_d2uiz>
 8003b62:	b280      	uxth	r0, r0
 8003b64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b68:	0041      	lsls	r1, r0, #1
 8003b6a:	b289      	uxth	r1, r1
 8003b6c:	4e08      	ldr	r6, [pc, #32]	; (8003b90 <rom_wite_mem1_data+0x3c>)
 8003b6e:	8071      	strh	r1, [r6, #2]
	rom_mem.rom_str.memory1_time = ui_time_hours*100 + ui_time_minutes;
 8003b70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003b74:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003b78:	00a3      	lsls	r3, r4, #2
 8003b7a:	441d      	add	r5, r3
 8003b7c:	8035      	strh	r5, [r6, #0]
	EE_WriteVariable(EE_VADDR_MEM1_TEMP, rom_mem.rom_str.memory1_temp);
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f7ff ffda 	bl	8003b38 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM1_TIME, rom_mem.rom_str.memory1_time);
 8003b84:	8831      	ldrh	r1, [r6, #0]
 8003b86:	2001      	movs	r0, #1
 8003b88:	f7ff ffd6 	bl	8003b38 <EE_WriteVariable>
}
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000f70 	.word	0x20000f70

08003b94 <rom_wite_mem2_data>:
void rom_wite_mem2_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	4604      	mov	r4, r0
 8003b98:	460d      	mov	r5, r1
	rom_mem.rom_str.memory2_temp = (uint16_t) ui_temp*10;
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fc ff2d 	bl	80009fc <__aeabi_d2uiz>
 8003ba2:	b280      	uxth	r0, r0
 8003ba4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ba8:	0041      	lsls	r1, r0, #1
 8003baa:	b289      	uxth	r1, r1
 8003bac:	4e08      	ldr	r6, [pc, #32]	; (8003bd0 <rom_wite_mem2_data+0x3c>)
 8003bae:	80f1      	strh	r1, [r6, #6]
	rom_mem.rom_str.memory2_time = ui_time_hours*100 + ui_time_minutes;
 8003bb0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003bb4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003bb8:	00a3      	lsls	r3, r4, #2
 8003bba:	441d      	add	r5, r3
 8003bbc:	80b5      	strh	r5, [r6, #4]
	EE_WriteVariable(EE_VADDR_MEM2_TEMP, rom_mem.rom_str.memory2_temp);
 8003bbe:	2004      	movs	r0, #4
 8003bc0:	f7ff ffba 	bl	8003b38 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM2_TIME, rom_mem.rom_str.memory2_time);
 8003bc4:	88b1      	ldrh	r1, [r6, #4]
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	f7ff ffb6 	bl	8003b38 <EE_WriteVariable>
}
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000f70 	.word	0x20000f70

08003bd4 <rom_wite_mem3_data>:
void rom_wite_mem3_data(uint8_t ui_time_hours,uint8_t ui_time_minutes, double ui_temp)
{
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	460d      	mov	r5, r1
	rom_mem.rom_str.memory3_temp = (uint16_t) ui_temp*10;
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7fc ff0d 	bl	80009fc <__aeabi_d2uiz>
 8003be2:	b280      	uxth	r0, r0
 8003be4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003be8:	0041      	lsls	r1, r0, #1
 8003bea:	b289      	uxth	r1, r1
 8003bec:	4e08      	ldr	r6, [pc, #32]	; (8003c10 <rom_wite_mem3_data+0x3c>)
 8003bee:	8171      	strh	r1, [r6, #10]
	rom_mem.rom_str.memory3_time = ui_time_hours*100 + ui_time_minutes;
 8003bf0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003bf4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003bf8:	00a3      	lsls	r3, r4, #2
 8003bfa:	441d      	add	r5, r3
 8003bfc:	8135      	strh	r5, [r6, #8]
	EE_WriteVariable(EE_VADDR_MEM3_TEMP, rom_mem.rom_str.memory3_temp);
 8003bfe:	2006      	movs	r0, #6
 8003c00:	f7ff ff9a 	bl	8003b38 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_MEM3_TIME, rom_mem.rom_str.memory3_time);
 8003c04:	8931      	ldrh	r1, [r6, #8]
 8003c06:	2005      	movs	r0, #5
 8003c08:	f7ff ff96 	bl	8003b38 <EE_WriteVariable>
}
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000f70 	.word	0x20000f70

08003c14 <rom_wite_PID_data>:
void rom_wite_PID_data(uint8_t P, uint8_t I, uint8_t D){
 8003c14:	b510      	push	{r4, lr}
	rom_mem.rom_str.PID_P = P;
 8003c16:	4c08      	ldr	r4, [pc, #32]	; (8003c38 <rom_wite_PID_data+0x24>)
 8003c18:	81a0      	strh	r0, [r4, #12]
	rom_mem.rom_str.PID_I = I;
 8003c1a:	81e1      	strh	r1, [r4, #14]
	rom_mem.rom_str.PID_D = D;
 8003c1c:	8222      	strh	r2, [r4, #16]
	EE_WriteVariable(EE_VADDR_PID_P, rom_mem.rom_str.PID_P);
 8003c1e:	4601      	mov	r1, r0
 8003c20:	2007      	movs	r0, #7
 8003c22:	f7ff ff89 	bl	8003b38 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_PID_I, rom_mem.rom_str.PID_I);
 8003c26:	89e1      	ldrh	r1, [r4, #14]
 8003c28:	2008      	movs	r0, #8
 8003c2a:	f7ff ff85 	bl	8003b38 <EE_WriteVariable>
	EE_WriteVariable(EE_VADDR_PID_D, rom_mem.rom_str.PID_D);
 8003c2e:	8a21      	ldrh	r1, [r4, #16]
 8003c30:	2009      	movs	r0, #9
 8003c32:	f7ff ff81 	bl	8003b38 <EE_WriteVariable>
}
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	20000f70 	.word	0x20000f70
 8003c3c:	00000000 	.word	0x00000000

08003c40 <rom_value_init>:
{
 8003c40:	b510      	push	{r4, lr}
	for(uint8_t addr = 0; addr  < NB_OF_VAR ; addr++)
 8003c42:	2400      	movs	r4, #0
 8003c44:	e008      	b.n	8003c58 <rom_value_init+0x18>
		EE_ReadVariable(addr, &rom_mem.rom_table[addr-1]);
 8003c46:	1e61      	subs	r1, r4, #1
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <rom_value_init+0xa8>)
 8003c4a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f7ff feec 	bl	8003a2c <EE_ReadVariable>
	for(uint8_t addr = 0; addr  < NB_OF_VAR ; addr++)
 8003c54:	3401      	adds	r4, #1
 8003c56:	b2e4      	uxtb	r4, r4
 8003c58:	2c08      	cmp	r4, #8
 8003c5a:	d9f4      	bls.n	8003c46 <rom_value_init+0x6>
	if( (rom_mem.rom_str.memory1_temp == 0) && (rom_mem.rom_str.memory1_time == 0) )
 8003c5c:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <rom_value_init+0xa8>)
 8003c5e:	885b      	ldrh	r3, [r3, #2]
 8003c60:	b913      	cbnz	r3, 8003c68 <rom_value_init+0x28>
 8003c62:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <rom_value_init+0xa8>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b19b      	cbz	r3, 8003c90 <rom_value_init+0x50>
	if( (rom_mem.rom_str.memory2_temp == 0) && (rom_mem.rom_str.memory2_time == 0) )
 8003c68:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <rom_value_init+0xa8>)
 8003c6a:	88db      	ldrh	r3, [r3, #6]
 8003c6c:	b913      	cbnz	r3, 8003c74 <rom_value_init+0x34>
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <rom_value_init+0xa8>)
 8003c70:	889b      	ldrh	r3, [r3, #4]
 8003c72:	b1ab      	cbz	r3, 8003ca0 <rom_value_init+0x60>
	if((rom_mem.rom_str.memory3_temp == 0) && (rom_mem.rom_str.memory3_time == 0))
 8003c74:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <rom_value_init+0xa8>)
 8003c76:	895b      	ldrh	r3, [r3, #10]
 8003c78:	b913      	cbnz	r3, 8003c80 <rom_value_init+0x40>
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <rom_value_init+0xa8>)
 8003c7c:	891b      	ldrh	r3, [r3, #8]
 8003c7e:	b1bb      	cbz	r3, 8003cb0 <rom_value_init+0x70>
	if((rom_mem.rom_str.PID_P + rom_mem.rom_str.PID_I + rom_mem.rom_str.PID_D) == 0 )
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <rom_value_init+0xa8>)
 8003c82:	8993      	ldrh	r3, [r2, #12]
 8003c84:	89d1      	ldrh	r1, [r2, #14]
 8003c86:	440b      	add	r3, r1
 8003c88:	8a12      	ldrh	r2, [r2, #16]
 8003c8a:	42d3      	cmn	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <rom_value_init+0x80>
}
 8003c8e:	bd10      	pop	{r4, pc}
		rom_wite_mem1_data(11,11, 31.1);
 8003c90:	a30f      	add	r3, pc, #60	; (adr r3, 8003cd0 <rom_value_init+0x90>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	210b      	movs	r1, #11
 8003c98:	4608      	mov	r0, r1
 8003c9a:	f7ff ff5b 	bl	8003b54 <rom_wite_mem1_data>
 8003c9e:	e7e3      	b.n	8003c68 <rom_value_init+0x28>
		rom_wite_mem2_data(22,22, 32.2);
 8003ca0:	a30d      	add	r3, pc, #52	; (adr r3, 8003cd8 <rom_value_init+0x98>)
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	2116      	movs	r1, #22
 8003ca8:	4608      	mov	r0, r1
 8003caa:	f7ff ff73 	bl	8003b94 <rom_wite_mem2_data>
 8003cae:	e7e1      	b.n	8003c74 <rom_value_init+0x34>
		rom_wite_mem3_data(33,33, 33.3);
 8003cb0:	a30b      	add	r3, pc, #44	; (adr r3, 8003ce0 <rom_value_init+0xa0>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	2121      	movs	r1, #33	; 0x21
 8003cb8:	4608      	mov	r0, r1
 8003cba:	f7ff ff8b 	bl	8003bd4 <rom_wite_mem3_data>
 8003cbe:	e7df      	b.n	8003c80 <rom_value_init+0x40>
		rom_wite_PID_data(100,100,100);
 8003cc0:	2264      	movs	r2, #100	; 0x64
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7ff ffa5 	bl	8003c14 <rom_wite_PID_data>
}
 8003cca:	e7e0      	b.n	8003c8e <rom_value_init+0x4e>
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	9999999a 	.word	0x9999999a
 8003cd4:	403f1999 	.word	0x403f1999
 8003cd8:	9999999a 	.word	0x9999999a
 8003cdc:	40401999 	.word	0x40401999
 8003ce0:	66666666 	.word	0x66666666
 8003ce4:	4040a666 	.word	0x4040a666
 8003ce8:	20000f70 	.word	0x20000f70

08003cec <LCD_Data_Bus_Input>:
//
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void LCD_Data_Bus_Input(void){
	GPIOB->CRL &= 0x000000ff;
 8003cec:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <LCD_Data_Bus_Input+0x18>)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x88888800; 	// TODO sprawdzić czy nie będzie problemów z czujnikami
 8003cf4:	6813      	ldr	r3, [r2, #0]
 8003cf6:	f043 2388 	orr.w	r3, r3, #2281736192	; 0x88008800
 8003cfa:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40010c00 	.word	0x40010c00

08003d08 <LCD_Data_Bus_Output>:
void LCD_Data_Bus_Output(void){
	GPIOB->CRL &= 0x000000ff;
 8003d08:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <LCD_Data_Bus_Output+0x18>)
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x77777700;	// TODO sprawdzić czy nie będzie problemów z czujnikami
 8003d10:	6813      	ldr	r3, [r2, #0]
 8003d12:	f043 2377 	orr.w	r3, r3, #1996519168	; 0x77007700
 8003d16:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010c00 	.word	0x40010c00

08003d24 <_LCD_Send_Half>:

void _LCD_Send_Half(uint8_t half_byte)
{
 8003d24:	b538      	push	{r3, r4, r5, lr}
	half_byte = (half_byte & 0x0f);
 8003d26:	f000 050f 	and.w	r5, r0, #15
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003d2a:	4c0c      	ldr	r4, [pc, #48]	; (8003d5c <_LCD_Send_Half+0x38>)
 8003d2c:	68e3      	ldr	r3, [r4, #12]
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	60e3      	str	r3, [r4, #12]
	simple_delay_us(8);
 8003d34:	2008      	movs	r0, #8
 8003d36:	f7ff fad2 	bl	80032de <simple_delay_us>

	LCD_D4_GPIO_Port->ODR &= 0xfff0;
 8003d3a:	68e3      	ldr	r3, [r4, #12]
 8003d3c:	f023 030f 	bic.w	r3, r3, #15
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	60e3      	str	r3, [r4, #12]
	LCD_D4_GPIO_Port->ODR |= half_byte;
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	431d      	orrs	r5, r3
 8003d4a:	60e5      	str	r5, [r4, #12]

	simple_delay_us(8);
 8003d4c:	2008      	movs	r0, #8
 8003d4e:	f7ff fac6 	bl	80032de <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003d52:	68e3      	ldr	r3, [r4, #12]
 8003d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d58:	60e3      	str	r3, [r4, #12]
}
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	40010c00 	.word	0x40010c00

08003d60 <_LCD_Write>:


void _LCD_Write(uint8_t data){
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4604      	mov	r4, r0
	LCD_Data_Bus_Output();
 8003d64:	f7ff ffd0 	bl	8003d08 <LCD_Data_Bus_Output>

	LCD_RW_GPIO_Port->ODR &= ~LCD_RW_Pin;
 8003d68:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <_LCD_Write+0x20>)
 8003d6a:	68d3      	ldr	r3, [r2, #12]
 8003d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d70:	60d3      	str	r3, [r2, #12]

	_LCD_Send_Half(data >> 4);
 8003d72:	0920      	lsrs	r0, r4, #4
 8003d74:	f7ff ffd6 	bl	8003d24 <_LCD_Send_Half>
	_LCD_Send_Half(data);
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f7ff ffd3 	bl	8003d24 <_LCD_Send_Half>
}
 8003d7e:	bd10      	pop	{r4, pc}
 8003d80:	40010c00 	.word	0x40010c00

08003d84 <_LCD_Read_Half>:
//
// Funkcja odczytu bajtu z wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
uint8_t _LCD_Read_Half()
{
 8003d84:	b538      	push	{r3, r4, r5, lr}
	uint8_t tmp = 0;
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003d86:	4c0a      	ldr	r4, [pc, #40]	; (8003db0 <_LCD_Read_Half+0x2c>)
 8003d88:	68e3      	ldr	r3, [r4, #12]
 8003d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8e:	60e3      	str	r3, [r4, #12]
	simple_delay_us(8);
 8003d90:	2008      	movs	r0, #8
 8003d92:	f7ff faa4 	bl	80032de <simple_delay_us>
	tmp = (uint8_t) (LCD_D4_GPIO_Port->IDR & 0x000f);
 8003d96:	68a5      	ldr	r5, [r4, #8]
 8003d98:	f005 050f 	and.w	r5, r5, #15
	simple_delay_us(8);
 8003d9c:	2008      	movs	r0, #8
 8003d9e:	f7ff fa9e 	bl	80032de <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003da2:	68e3      	ldr	r3, [r4, #12]
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	60e3      	str	r3, [r4, #12]
	return tmp;
}
 8003daa:	4628      	mov	r0, r5
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	bf00      	nop
 8003db0:	40010c00 	.word	0x40010c00

08003db4 <_LCD_Read>:



uint8_t _LCD_Read(void){
 8003db4:	b510      	push	{r4, lr}
	uint8_t tmp = 0;

	LCD_Data_Bus_Input();
 8003db6:	f7ff ff99 	bl	8003cec <LCD_Data_Bus_Input>
	LCD_RW_GPIO_Port->ODR |= LCD_RW_Pin;
 8003dba:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <_LCD_Read+0x34>)
 8003dbc:	68d3      	ldr	r3, [r2, #12]
 8003dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc2:	60d3      	str	r3, [r2, #12]
	//LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
	simple_delay_us(8);
 8003dc4:	2008      	movs	r0, #8
 8003dc6:	f7ff fa8a 	bl	80032de <simple_delay_us>
	tmp |= ((_LCD_Read_Half() << 4) & 0xf0);
 8003dca:	f7ff ffdb 	bl	8003d84 <_LCD_Read_Half>
 8003dce:	0100      	lsls	r0, r0, #4
 8003dd0:	b244      	sxtb	r4, r0
	tmp |= (_LCD_Read_Half() & 0x0f);
 8003dd2:	f7ff ffd7 	bl	8003d84 <_LCD_Read_Half>
 8003dd6:	f000 000f 	and.w	r0, r0, #15
 8003dda:	4304      	orrs	r4, r0
 8003ddc:	b2e4      	uxtb	r4, r4

	simple_delay_us(8);
 8003dde:	2008      	movs	r0, #8
 8003de0:	f7ff fa7d 	bl	80032de <simple_delay_us>
	//LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
	return tmp;
}
 8003de4:	4620      	mov	r0, r4
 8003de6:	bd10      	pop	{r4, pc}
 8003de8:	40010c00 	.word	0x40010c00

08003dec <LCD_ReadStatus>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
uint8_t LCD_ReadStatus(void){
 8003dec:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <LCD_ReadStatus+0x18>)
 8003df0:	68d3      	ldr	r3, [r2, #12]
 8003df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df6:	60d3      	str	r3, [r2, #12]
	simple_delay_us(8);
 8003df8:	2008      	movs	r0, #8
 8003dfa:	f7ff fa70 	bl	80032de <simple_delay_us>
	return _LCD_Read();
 8003dfe:	f7ff ffd9 	bl	8003db4 <_LCD_Read>
}
 8003e02:	bd08      	pop	{r3, pc}
 8003e04:	40010800 	.word	0x40010800

08003e08 <LCD_WriteCommand>:
void LCD_WriteCommand(uint8_t command){
 8003e08:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <LCD_WriteCommand+0x24>)
 8003e0c:	68d3      	ldr	r3, [r2, #12]
 8003e0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e12:	60d3      	str	r3, [r2, #12]
	_LCD_Write(command);
 8003e14:	f7ff ffa4 	bl	8003d60 <_LCD_Write>
	simple_delay_us(8);
 8003e18:	2008      	movs	r0, #8
 8003e1a:	f7ff fa60 	bl	80032de <simple_delay_us>
	while(LCD_ReadStatus() & 0x80);
 8003e1e:	f7ff ffe5 	bl	8003dec <LCD_ReadStatus>
 8003e22:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003e26:	d1fa      	bne.n	8003e1e <LCD_WriteCommand+0x16>
}
 8003e28:	bd08      	pop	{r3, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40010800 	.word	0x40010800

08003e30 <LCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(uint8_t data){
 8003e30:	b508      	push	{r3, lr}
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8003e32:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <LCD_WriteData+0x18>)
 8003e34:	68d3      	ldr	r3, [r2, #12]
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	60d3      	str	r3, [r2, #12]
	_LCD_Write(data);
 8003e3c:	f7ff ff90 	bl	8003d60 <_LCD_Write>
	simple_delay_us(15);
 8003e40:	200f      	movs	r0, #15
 8003e42:	f7ff fa4c 	bl	80032de <simple_delay_us>
	//while(LCD_ReadStatus() & 0x80);
}
 8003e46:	bd08      	pop	{r3, pc}
 8003e48:	40010800 	.word	0x40010800

08003e4c <LCD_GoTo>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja ustawienia współrzędnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(uint8_t x, uint8_t y){
 8003e4c:	b508      	push	{r3, lr}
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8003e4e:	eb00 1081 	add.w	r0, r0, r1, lsl #6
 8003e52:	b240      	sxtb	r0, r0
 8003e54:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003e58:	b2c0      	uxtb	r0, r0
 8003e5a:	f7ff ffd5 	bl	8003e08 <LCD_WriteCommand>
}
 8003e5e:	bd08      	pop	{r3, pc}

08003e60 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 8003e60:	b538      	push	{r3, r4, r5, lr}


	LCD_Data_Bus_Output();
 8003e62:	f7ff ff51 	bl	8003d08 <LCD_Data_Bus_Output>
	simple_delay_ms(15);
 8003e66:	200f      	movs	r0, #15
 8003e68:	f7ff fa2e 	bl	80032c8 <simple_delay_ms>
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <LCD_Initalize+0xcc>)
 8003e6e:	68d3      	ldr	r3, [r2, #12]
 8003e70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e74:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <LCD_Initalize+0xd0>)
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e7e:	60da      	str	r2, [r3, #12]
	LCD_RW_GPIO_Port->ODR  &= ~LCD_RW_Pin;
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e86:	60da      	str	r2, [r3, #12]

	for(uint8_t i = 0; i < 3; i++){
 8003e88:	2400      	movs	r4, #0
 8003e8a:	e017      	b.n	8003ebc <LCD_Initalize+0x5c>
		LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <LCD_Initalize+0xd0>)
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e94:	60da      	str	r2, [r3, #12]
		LCD_D4_GPIO_Port->ODR &= 0xfff0;
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	f022 020f 	bic.w	r2, r2, #15
 8003e9c:	0412      	lsls	r2, r2, #16
 8003e9e:	0c12      	lsrs	r2, r2, #16
 8003ea0:	60da      	str	r2, [r3, #12]
		LCD_D4_GPIO_Port->ODR |=  0x0003;
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	f042 0203 	orr.w	r2, r2, #3
 8003ea8:	60da      	str	r2, [r3, #12]
		LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb0:	60da      	str	r2, [r3, #12]
		simple_delay_ms(5);
 8003eb2:	2005      	movs	r0, #5
 8003eb4:	f7ff fa08 	bl	80032c8 <simple_delay_ms>
	for(uint8_t i = 0; i < 3; i++){
 8003eb8:	3401      	adds	r4, #1
 8003eba:	b2e4      	uxtb	r4, r4
 8003ebc:	2c02      	cmp	r4, #2
 8003ebe:	d9e5      	bls.n	8003e8c <LCD_Initalize+0x2c>
	  }

	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT);
 8003ec0:	2028      	movs	r0, #40	; 0x28
 8003ec2:	f7ff ffa1 	bl	8003e08 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f7ff f9fe 	bl	80032c8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8003ecc:	2008      	movs	r0, #8
 8003ece:	f7ff ff9b 	bl	8003e08 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f7ff f9f8 	bl	80032c8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_CLEAR);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7ff ff95 	bl	8003e08 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f7ff f9f2 	bl	80032c8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 8003ee4:	2006      	movs	r0, #6
 8003ee6:	f7ff ff8f 	bl	8003e08 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7ff f9ec 	bl	80032c8 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 8003ef0:	200c      	movs	r0, #12
 8003ef2:	f7ff ff89 	bl	8003e08 <LCD_WriteCommand>

	for(uint8_t i=0; i< 8 ;i++)
 8003ef6:	2500      	movs	r5, #0
 8003ef8:	e00b      	b.n	8003f12 <LCD_Initalize+0xb2>
	{
		LCD_WriteCommand(0x40 + i*8);
		for(uint8_t j =0; j< 8; j++)
		{
			LCD_WriteData(custom_font_pattern[i][j]);
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <LCD_Initalize+0xd4>)
 8003efc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003f00:	5d18      	ldrb	r0, [r3, r4]
 8003f02:	f7ff ff95 	bl	8003e30 <LCD_WriteData>
		for(uint8_t j =0; j< 8; j++)
 8003f06:	3401      	adds	r4, #1
 8003f08:	b2e4      	uxtb	r4, r4
 8003f0a:	2c07      	cmp	r4, #7
 8003f0c:	d9f5      	bls.n	8003efa <LCD_Initalize+0x9a>
	for(uint8_t i=0; i< 8 ;i++)
 8003f0e:	3501      	adds	r5, #1
 8003f10:	b2ed      	uxtb	r5, r5
 8003f12:	2d07      	cmp	r5, #7
 8003f14:	d808      	bhi.n	8003f28 <LCD_Initalize+0xc8>
		LCD_WriteCommand(0x40 + i*8);
 8003f16:	f105 0008 	add.w	r0, r5, #8
 8003f1a:	00c0      	lsls	r0, r0, #3
 8003f1c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8003f20:	f7ff ff72 	bl	8003e08 <LCD_WriteCommand>
		for(uint8_t j =0; j< 8; j++)
 8003f24:	2400      	movs	r4, #0
 8003f26:	e7f0      	b.n	8003f0a <LCD_Initalize+0xaa>
		}
	}
}
 8003f28:	bd38      	pop	{r3, r4, r5, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40010800 	.word	0x40010800
 8003f30:	40010c00 	.word	0x40010c00
 8003f34:	08005a8c 	.word	0x08005a8c

08003f38 <lcd_buf_go_to>:


void lcd_buf_go_to(uint8_t buf_x, uint8_t buf_y )
{
	write_buf_x_pos = buf_x;
 8003f38:	4b02      	ldr	r3, [pc, #8]	; (8003f44 <lcd_buf_go_to+0xc>)
 8003f3a:	7018      	strb	r0, [r3, #0]
	write_buf_y_pos = buf_y;
 8003f3c:	4b02      	ldr	r3, [pc, #8]	; (8003f48 <lcd_buf_go_to+0x10>)
 8003f3e:	7019      	strb	r1, [r3, #0]
}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000540 	.word	0x20000540
 8003f48:	20000541 	.word	0x20000541

08003f4c <lcd_char>:


void lcd_char(char c)
{
 8003f4c:	b410      	push	{r4}
	lcd_buf[write_buf_y_pos][write_buf_x_pos++] = c;
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <lcd_char+0x20>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4907      	ldr	r1, [pc, #28]	; (8003f70 <lcd_char+0x24>)
 8003f54:	780a      	ldrb	r2, [r1, #0]
 8003f56:	1c54      	adds	r4, r2, #1
 8003f58:	700c      	strb	r4, [r1, #0]
 8003f5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f5e:	0099      	lsls	r1, r3, #2
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <lcd_char+0x28>)
 8003f62:	440b      	add	r3, r1
 8003f64:	5498      	strb	r0, [r3, r2]
}
 8003f66:	bc10      	pop	{r4}
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000541 	.word	0x20000541
 8003f70:	20000540 	.word	0x20000540
 8003f74:	20000578 	.word	0x20000578

08003f78 <lcd_buf_clear>:


void lcd_buf_clear(void)
{
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e00c      	b.n	8003f96 <lcd_buf_clear+0x1e>
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
		{
			lcd_buf[iy][ix] = ' ';
 8003f7c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003f80:	0091      	lsls	r1, r2, #2
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <lcd_buf_clear+0x28>)
 8003f84:	440a      	add	r2, r1
 8003f86:	2120      	movs	r1, #32
 8003f88:	54d1      	strb	r1, [r2, r3]
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b13      	cmp	r3, #19
 8003f90:	d9f4      	bls.n	8003f7c <lcd_buf_clear+0x4>
	for(uint8_t iy = 0 ; iy <LCD_ROWS ; iy++ ){
 8003f92:	3001      	adds	r0, #1
 8003f94:	b2c0      	uxtb	r0, r0
 8003f96:	2801      	cmp	r0, #1
 8003f98:	d801      	bhi.n	8003f9e <lcd_buf_clear+0x26>
		for(uint8_t ix = 0; ix < LCD_COLS; ix ++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e7f7      	b.n	8003f8e <lcd_buf_clear+0x16>
		}
	}
}
 8003f9e:	4770      	bx	lr
 8003fa0:	20000578 	.word	0x20000578

08003fa4 <lcd_buf_write_text>:


void lcd_buf_write_text(char * text)
{
	while(*text)
 8003fa4:	7803      	ldrb	r3, [r0, #0]
 8003fa6:	b19b      	cbz	r3, 8003fd0 <lcd_buf_write_text+0x2c>
{
 8003fa8:	b410      	push	{r4}
	{
		lcd_buf[write_buf_y_pos][write_buf_x_pos++] = *text++;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <lcd_buf_write_text+0x30>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <lcd_buf_write_text+0x34>)
 8003fb0:	780a      	ldrb	r2, [r1, #0]
 8003fb2:	1c54      	adds	r4, r2, #1
 8003fb4:	700c      	strb	r4, [r1, #0]
 8003fb6:	7804      	ldrb	r4, [r0, #0]
 8003fb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fbc:	0099      	lsls	r1, r3, #2
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <lcd_buf_write_text+0x38>)
 8003fc0:	440b      	add	r3, r1
 8003fc2:	549c      	strb	r4, [r3, r2]
 8003fc4:	3001      	adds	r0, #1
	while(*text)
 8003fc6:	7803      	ldrb	r3, [r0, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ee      	bne.n	8003faa <lcd_buf_write_text+0x6>
	}
}
 8003fcc:	bc10      	pop	{r4}
 8003fce:	4770      	bx	lr
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000541 	.word	0x20000541
 8003fd8:	20000540 	.word	0x20000540
 8003fdc:	20000578 	.word	0x20000578

08003fe0 <lcd_circle_bufer_refresh>:
		}
		x++;
	}
}
void lcd_circle_bufer_refresh()
{
 8003fe0:	b538      	push	{r3, r4, r5, lr}
	static uint8_t xc = 0, yc = 0;
	LCD_GoTo(xc,yc);
 8003fe2:	4d11      	ldr	r5, [pc, #68]	; (8004028 <lcd_circle_bufer_refresh+0x48>)
 8003fe4:	4c11      	ldr	r4, [pc, #68]	; (800402c <lcd_circle_bufer_refresh+0x4c>)
 8003fe6:	7829      	ldrb	r1, [r5, #0]
 8003fe8:	7820      	ldrb	r0, [r4, #0]
 8003fea:	f7ff ff2f 	bl	8003e4c <LCD_GoTo>
	LCD_WriteData(lcd_buf[yc][xc]);
 8003fee:	782b      	ldrb	r3, [r5, #0]
 8003ff0:	7821      	ldrb	r1, [r4, #0]
 8003ff2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <lcd_circle_bufer_refresh+0x50>)
 8003ffa:	4413      	add	r3, r2
 8003ffc:	5c58      	ldrb	r0, [r3, r1]
 8003ffe:	f7ff ff17 	bl	8003e30 <LCD_WriteData>
	if(++xc == 20)
 8004002:	7823      	ldrb	r3, [r4, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	7023      	strb	r3, [r4, #0]
 800400a:	2b14      	cmp	r3, #20
 800400c:	d000      	beq.n	8004010 <lcd_circle_bufer_refresh+0x30>
		if(++yc == 2)
		{
			 yc = 0;
		}
	}
}
 800400e:	bd38      	pop	{r3, r4, r5, pc}
		xc = 0;
 8004010:	2200      	movs	r2, #0
 8004012:	7022      	strb	r2, [r4, #0]
		if(++yc == 2)
 8004014:	782b      	ldrb	r3, [r5, #0]
 8004016:	3301      	adds	r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	702b      	strb	r3, [r5, #0]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d1f6      	bne.n	800400e <lcd_circle_bufer_refresh+0x2e>
			 yc = 0;
 8004020:	2200      	movs	r2, #0
 8004022:	702a      	strb	r2, [r5, #0]
}
 8004024:	e7f3      	b.n	800400e <lcd_circle_bufer_refresh+0x2e>
 8004026:	bf00      	nop
 8004028:	20000543 	.word	0x20000543
 800402c:	20000542 	.word	0x20000542
 8004030:	20000578 	.word	0x20000578

08004034 <search_temperature_from_pattern>:
	if(probe_counter++ > 5 ) probe_counter=0;
	ntc_analog_temp[probe_counter].TEMP_SENS_temperature = (((V25 * 1000.0 - (double)adc_value[3] * 0.8) / AVGSLOPE) + 25.0);
}

float search_temperature_from_pattern(float ntc_res_value)
{
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4606      	mov	r6, r0
	uint16_t i=0;
 8004038:	2500      	movs	r5, #0
	while(ntc_res_value < NTC_BEATA3984[i++]);
 800403a:	e000      	b.n	800403e <search_temperature_from_pattern+0xa>
 800403c:	4625      	mov	r5, r4
 800403e:	1c6b      	adds	r3, r5, #1
 8004040:	b29c      	uxth	r4, r3
 8004042:	4631      	mov	r1, r6
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <search_temperature_from_pattern+0x2c>)
 8004046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800404a:	f7fd f811 	bl	8001070 <__aeabi_fcmpgt>
 800404e:	2800      	cmp	r0, #0
 8004050:	d1f4      	bne.n	800403c <search_temperature_from_pattern+0x8>
	return ((float)--i)/10;
 8004052:	4628      	mov	r0, r5
 8004054:	f7fc fdf8 	bl	8000c48 <__aeabi_ui2f>
 8004058:	4902      	ldr	r1, [pc, #8]	; (8004064 <search_temperature_from_pattern+0x30>)
 800405a:	f7fc ff01 	bl	8000e60 <__aeabi_fdiv>
}
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	08005acc 	.word	0x08005acc
 8004064:	41200000 	.word	0x41200000

08004068 <ntc_analog_sensors_calc>:
 */
void ntc_analog_sensors_calc(uint8_t no_sensor)
{
	//for time measure //LED_RED_GPIO_Port->BSRR = LED_RED_Pin;
	static uint8_t asc_probe[3];
	if(no_sensor >= (ADC_CHANNELS-1)) return;
 8004068:	2802      	cmp	r0, #2
 800406a:	d844      	bhi.n	80040f6 <ntc_analog_sensors_calc+0x8e>
{
 800406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(asc_probe[no_sensor] > 5 ) asc_probe[no_sensor]=0;
 8004070:	4b29      	ldr	r3, [pc, #164]	; (8004118 <ntc_analog_sensors_calc+0xb0>)
 8004072:	5c1b      	ldrb	r3, [r3, r0]
 8004074:	2b05      	cmp	r3, #5
 8004076:	d902      	bls.n	800407e <ntc_analog_sensors_calc+0x16>
 8004078:	4b27      	ldr	r3, [pc, #156]	; (8004118 <ntc_analog_sensors_calc+0xb0>)
 800407a:	2200      	movs	r2, #0
 800407c:	541a      	strb	r2, [r3, r0]
 800407e:	4605      	mov	r5, r0
	ntc_analog_temp[asc_probe[no_sensor]].NTC_voltage[no_sensor] = (float)((adc_value[no_sensor] * NTC_VOLTAGE_SUPPLY )/ 4095.00f);
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <ntc_analog_sensors_calc+0xb4>)
 8004082:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8004086:	f7fc f9b5 	bl	80003f4 <__aeabi_i2d>
 800408a:	a31b      	add	r3, pc, #108	; (adr r3, 80040f8 <ntc_analog_sensors_calc+0x90>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc fa1a 	bl	80004c8 <__aeabi_dmul>
 8004094:	a31a      	add	r3, pc, #104	; (adr r3, 8004100 <ntc_analog_sensors_calc+0x98>)
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f7fc fb3f 	bl	800071c <__aeabi_ddiv>
 800409e:	4f1e      	ldr	r7, [pc, #120]	; (8004118 <ntc_analog_sensors_calc+0xb0>)
 80040a0:	5d7c      	ldrb	r4, [r7, r5]
 80040a2:	f7fc fccb 	bl	8000a3c <__aeabi_d2f>
 80040a6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8004120 <ntc_analog_sensors_calc+0xb8>
 80040aa:	00a6      	lsls	r6, r4, #2
 80040ac:	1933      	adds	r3, r6, r4
 80040ae:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80040b2:	44a9      	add	r9, r5
 80040b4:	f109 0302 	add.w	r3, r9, #2
 80040b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80040bc:	6058      	str	r0, [r3, #4]
	ntc_analog_temp[asc_probe[no_sensor]].NTC_resistance[no_sensor] = (NTC_VOLTAGE_SUPPLY * NTC_DIVIDER / ntc_analog_temp[asc_probe[no_sensor]].NTC_voltage[no_sensor]) - (float)NTC_DIVIDER;
 80040be:	f7fc f9ab 	bl	8000418 <__aeabi_f2d>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	a110      	add	r1, pc, #64	; (adr r1, 8004108 <ntc_analog_sensors_calc+0xa0>)
 80040c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040cc:	f7fc fb26 	bl	800071c <__aeabi_ddiv>
 80040d0:	a30f      	add	r3, pc, #60	; (adr r3, 8004110 <ntc_analog_sensors_calc+0xa8>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc f83f 	bl	8000158 <__aeabi_dsub>
 80040da:	f7fc fcaf 	bl	8000a3c <__aeabi_d2f>
 80040de:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
	ntc_analog_temp[asc_probe[no_sensor]].NTC_temperature[no_sensor] = search_temperature_from_pattern(ntc_analog_temp[asc_probe[no_sensor]].NTC_resistance[no_sensor]);
 80040e2:	f7ff ffa7 	bl	8004034 <search_temperature_from_pattern>
 80040e6:	464b      	mov	r3, r9
 80040e8:	3306      	adds	r3, #6
 80040ea:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	asc_probe[no_sensor]++;
 80040ee:	3401      	adds	r4, #1
 80040f0:	557c      	strb	r4, [r7, r5]
	//for time measure  //LED_RED_GPIO_Port->BRR = LED_RED_Pin;
}
 80040f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040f6:	4770      	bx	lr
 80040f8:	66666666 	.word	0x66666666
 80040fc:	400a6666 	.word	0x400a6666
 8004100:	00000000 	.word	0x00000000
 8004104:	40affe00 	.word	0x40affe00
 8004108:	00000000 	.word	0x00000000
 800410c:	40e01d00 	.word	0x40e01d00
 8004110:	00000000 	.word	0x00000000
 8004114:	40c38800 	.word	0x40c38800
 8004118:	20000544 	.word	0x20000544
 800411c:	20000858 	.word	0x20000858
 8004120:	20000f84 	.word	0x20000f84

08004124 <ntc_init>:
void ntc_init(void){
 8004124:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 8004126:	481e      	ldr	r0, [pc, #120]	; (80041a0 <ntc_init+0x7c>)
 8004128:	f7fd f998 	bl	800145c <HAL_ADC_Start>
	for(uint8_t i = 0; i <NUMBER_OF_PROBE ; i++ )
 800412c:	2500      	movs	r5, #0
 800412e:	e008      	b.n	8004142 <ntc_init+0x1e>
			ntc_analog_sensors_calc(j);
 8004130:	4620      	mov	r0, r4
 8004132:	f7ff ff99 	bl	8004068 <ntc_analog_sensors_calc>
		for(uint8_t j = 0; j <NTC_NUBMER_OF_SLOTS ; j++ )
 8004136:	3401      	adds	r4, #1
 8004138:	b2e4      	uxtb	r4, r4
 800413a:	2c02      	cmp	r4, #2
 800413c:	d9f8      	bls.n	8004130 <ntc_init+0xc>
	for(uint8_t i = 0; i <NUMBER_OF_PROBE ; i++ )
 800413e:	3501      	adds	r5, #1
 8004140:	b2ed      	uxtb	r5, r5
 8004142:	2d04      	cmp	r5, #4
 8004144:	d801      	bhi.n	800414a <ntc_init+0x26>
		for(uint8_t j = 0; j <NTC_NUBMER_OF_SLOTS ; j++ )
 8004146:	2400      	movs	r4, #0
 8004148:	e7f7      	b.n	800413a <ntc_init+0x16>
	for(uint8_t i = 0; i <NTC_NUBMER_OF_SLOTS ; i++ )
 800414a:	2400      	movs	r4, #0
 800414c:	e005      	b.n	800415a <ntc_init+0x36>
			if(i == 1) HC_status.ntc2_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 800414e:	2c01      	cmp	r4, #1
 8004150:	d018      	beq.n	8004184 <ntc_init+0x60>
			if(i == 2) HC_status.ntc3_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004152:	2c02      	cmp	r4, #2
 8004154:	d01c      	beq.n	8004190 <ntc_init+0x6c>
	for(uint8_t i = 0; i <NTC_NUBMER_OF_SLOTS ; i++ )
 8004156:	3401      	adds	r4, #1
 8004158:	b2e4      	uxtb	r4, r4
 800415a:	2c02      	cmp	r4, #2
 800415c:	d81e      	bhi.n	800419c <ntc_init+0x78>
		if(ntc_analog_temp[NUMBER_OF_PROBE-1].NTC_voltage[i] != 0)
 800415e:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <ntc_init+0x80>)
 8004164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004168:	2100      	movs	r1, #0
 800416a:	6858      	ldr	r0, [r3, #4]
 800416c:	f7fc ff58 	bl	8001020 <__aeabi_fcmpeq>
 8004170:	2800      	cmp	r0, #0
 8004172:	d1f0      	bne.n	8004156 <ntc_init+0x32>
			if(i == 0) HC_status.ntc_heating_mat_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004174:	2c00      	cmp	r4, #0
 8004176:	d1ea      	bne.n	800414e <ntc_init+0x2a>
 8004178:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <ntc_init+0x84>)
 800417a:	7813      	ldrb	r3, [r2, #0]
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	7013      	strb	r3, [r2, #0]
 8004182:	e7e4      	b.n	800414e <ntc_init+0x2a>
			if(i == 1) HC_status.ntc2_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004184:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <ntc_init+0x84>)
 8004186:	7813      	ldrb	r3, [r2, #0]
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	7013      	strb	r3, [r2, #0]
 800418e:	e7e0      	b.n	8004152 <ntc_init+0x2e>
			if(i == 2) HC_status.ntc3_additional_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK;
 8004190:	4a05      	ldr	r2, [pc, #20]	; (80041a8 <ntc_init+0x84>)
 8004192:	7813      	ldrb	r3, [r2, #0]
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	7013      	strb	r3, [r2, #0]
 800419a:	e7dc      	b.n	8004156 <ntc_init+0x32>
}
 800419c:	bd38      	pop	{r3, r4, r5, pc}
 800419e:	bf00      	nop
 80041a0:	20000890 	.word	0x20000890
 80041a4:	20000f84 	.word	0x20000f84
 80041a8:	200005a0 	.word	0x200005a0

080041ac <ntc_handler>:
	if(ntc_handler_flag == NTC_HANDLER_FLAG_BUSY) return ;
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <ntc_handler+0x68>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d004      	beq.n	80041c0 <ntc_handler+0x14>
	if(ms_time_counter != ms_counter) return;
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <ntc_handler+0x6c>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4283      	cmp	r3, r0
 80041be:	d000      	beq.n	80041c2 <ntc_handler+0x16>
 80041c0:	4770      	bx	lr
{
 80041c2:	b510      	push	{r4, lr}
	for(uint8_t i=0; i < NTC_NUBMER_OF_SLOTS ; i++ ) ntc_analog_sensors_calc(i); // read all of slots
 80041c4:	2400      	movs	r4, #0
 80041c6:	e004      	b.n	80041d2 <ntc_handler+0x26>
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7ff ff4d 	bl	8004068 <ntc_analog_sensors_calc>
 80041ce:	3401      	adds	r4, #1
 80041d0:	b2e4      	uxtb	r4, r4
 80041d2:	2c02      	cmp	r4, #2
 80041d4:	d9f8      	bls.n	80041c8 <ntc_handler+0x1c>
	for(uint8_t i=0; i < NUMBER_OF_PROBE ; i++)
 80041d6:	2400      	movs	r4, #0
 80041d8:	2c04      	cmp	r4, #4
 80041da:	d816      	bhi.n	800420a <ntc_handler+0x5e>
		if( ntc_analog_temp[i].NTC_voltage[NTC1_HEATING_MAT_SENSOR] == 0)
 80041dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80041e0:	00da      	lsls	r2, r3, #3
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <ntc_handler+0x70>)
 80041e4:	4413      	add	r3, r2
 80041e6:	2100      	movs	r1, #0
 80041e8:	68d8      	ldr	r0, [r3, #12]
 80041ea:	f7fc ff19 	bl	8001020 <__aeabi_fcmpeq>
 80041ee:	b938      	cbnz	r0, 8004200 <ntc_handler+0x54>
		else HC_status.ntc_heating_mat_sensor = STATUS_NTC_HEATING_MAT_SENSOR_OK; //  change status
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <ntc_handler+0x74>)
 80041f2:	7813      	ldrb	r3, [r2, #0]
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	7013      	strb	r3, [r2, #0]
	for(uint8_t i=0; i < NUMBER_OF_PROBE ; i++)
 80041fa:	3401      	adds	r4, #1
 80041fc:	b2e4      	uxtb	r4, r4
 80041fe:	e7eb      	b.n	80041d8 <ntc_handler+0x2c>
			HC_status.ntc_heating_mat_sensor = STATUS_NTC_HEATING_MAT_SENSOR_ERROR;
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <ntc_handler+0x74>)
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	f36f 0241 	bfc	r2, #1, #1
 8004208:	701a      	strb	r2, [r3, #0]
	ntc_handler_flag = NTC_HANDLER_FLAG_BUSY;
 800420a:	4b02      	ldr	r3, [pc, #8]	; (8004214 <ntc_handler+0x68>)
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
}
 8004210:	bd10      	pop	{r4, pc}
 8004212:	bf00      	nop
 8004214:	20000608 	.word	0x20000608
 8004218:	200007c0 	.word	0x200007c0
 800421c:	20000f84 	.word	0x20000f84
 8004220:	200005a0 	.word	0x200005a0

08004224 <ntc_convert_float_to_string>:
{
	return kelvin_temperature - 273.15;
}

uint8_t ntc_convert_float_to_string(uint8_t * string_table, double temperature_ntc)
{
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	4604      	mov	r4, r0
 8004228:	4616      	mov	r6, r2
 800422a:	461d      	mov	r5, r3
	uint8_t digit_counter = 0 ;
	uint16_t i=10000;
	uint16_t temperature_int_multiplied100;

	if(temperature_ntc < 0)
 800422c:	2200      	movs	r2, #0
 800422e:	2300      	movs	r3, #0
 8004230:	4630      	mov	r0, r6
 8004232:	4629      	mov	r1, r5
 8004234:	f7fc fbba 	bl	80009ac <__aeabi_dcmplt>
 8004238:	b968      	cbnz	r0, 8004256 <ntc_convert_float_to_string+0x32>
		*(string_table++) = '-';
		temperature_int_multiplied100 = (uint16_t) (-temperature_ntc * 100);
	}
	else
	{
		temperature_int_multiplied100 = (uint16_t) (temperature_ntc * 100);
 800423a:	2200      	movs	r2, #0
 800423c:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <ntc_convert_float_to_string+0xd4>)
 800423e:	4630      	mov	r0, r6
 8004240:	4629      	mov	r1, r5
 8004242:	f7fc f941 	bl	80004c8 <__aeabi_dmul>
 8004246:	f7fc fbd9 	bl	80009fc <__aeabi_d2uiz>
 800424a:	b280      	uxth	r0, r0
	}


	if(temperature_int_multiplied100 == 0)
 800424c:	b190      	cbz	r0, 8004274 <ntc_convert_float_to_string+0x50>
	uint16_t i=10000;
 800424e:	f242 7310 	movw	r3, #10000	; 0x2710
	uint8_t digit_counter = 0 ;
 8004252:	2200      	movs	r2, #0
 8004254:	e020      	b.n	8004298 <ntc_convert_float_to_string+0x74>
		*(string_table++) = '-';
 8004256:	1c67      	adds	r7, r4, #1
 8004258:	232d      	movs	r3, #45	; 0x2d
 800425a:	7023      	strb	r3, [r4, #0]
		temperature_int_multiplied100 = (uint16_t) (-temperature_ntc * 100);
 800425c:	2200      	movs	r2, #0
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <ntc_convert_float_to_string+0xd4>)
 8004260:	4630      	mov	r0, r6
 8004262:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8004266:	f7fc f92f 	bl	80004c8 <__aeabi_dmul>
 800426a:	f7fc fbc7 	bl	80009fc <__aeabi_d2uiz>
 800426e:	b280      	uxth	r0, r0
		*(string_table++) = '-';
 8004270:	463c      	mov	r4, r7
 8004272:	e7eb      	b.n	800424c <ntc_convert_float_to_string+0x28>
		{
			*(string_table++) = '0';
 8004274:	2330      	movs	r3, #48	; 0x30
 8004276:	7023      	strb	r3, [r4, #0]
			*(string_table++) = '.';
 8004278:	222e      	movs	r2, #46	; 0x2e
 800427a:	7062      	strb	r2, [r4, #1]
			*(string_table++) = '0';
 800427c:	70a3      	strb	r3, [r4, #2]
			*(string_table++) = '0';
 800427e:	70e3      	strb	r3, [r4, #3]
			*(string_table++) = ' ';
 8004280:	2320      	movs	r3, #32
 8004282:	7123      	strb	r3, [r4, #4]
			*(string_table++) = ' ';
 8004284:	7163      	strb	r3, [r4, #5]
			*(string_table++) = '\0';
 8004286:	2300      	movs	r3, #0
 8004288:	71a3      	strb	r3, [r4, #6]
			return 1;
 800428a:	e032      	b.n	80042f2 <ntc_convert_float_to_string+0xce>
		}
		while((temperature_int_multiplied100 / i) == 0)
		{
			i = i/10;
 800428c:	491b      	ldr	r1, [pc, #108]	; (80042fc <ntc_convert_float_to_string+0xd8>)
 800428e:	fba1 1303 	umull	r1, r3, r1, r3
 8004292:	08db      	lsrs	r3, r3, #3
			digit_counter++;
 8004294:	3201      	adds	r2, #1
 8004296:	b2d2      	uxtb	r2, r2
		while((temperature_int_multiplied100 / i) == 0)
 8004298:	fbb0 f1f3 	udiv	r1, r0, r3
 800429c:	2900      	cmp	r1, #0
 800429e:	d0f5      	beq.n	800428c <ntc_convert_float_to_string+0x68>
		}
		if(digit_counter >= 3) // ułamek zero przed kropką
 80042a0:	2a02      	cmp	r2, #2
 80042a2:	d90c      	bls.n	80042be <ntc_convert_float_to_string+0x9a>
		{
			*(string_table++) = '0';
 80042a4:	4621      	mov	r1, r4
 80042a6:	2530      	movs	r5, #48	; 0x30
 80042a8:	f801 5b02 	strb.w	r5, [r1], #2
			*(string_table++) = '.';
 80042ac:	252e      	movs	r5, #46	; 0x2e
 80042ae:	7065      	strb	r5, [r4, #1]
 80042b0:	460c      	mov	r4, r1
 80042b2:	e004      	b.n	80042be <ntc_convert_float_to_string+0x9a>
		while(i != 0 )
		{
			*(string_table++) = 0x30 + temperature_int_multiplied100/i;
			temperature_int_multiplied100 = (uint16_t)temperature_int_multiplied100 % i;
			if(i == 100) *(string_table++) = '.';
			i = i/10;
 80042b4:	4911      	ldr	r1, [pc, #68]	; (80042fc <ntc_convert_float_to_string+0xd8>)
 80042b6:	fba1 1303 	umull	r1, r3, r1, r3
 80042ba:	08db      	lsrs	r3, r3, #3
 80042bc:	462c      	mov	r4, r5
		while(i != 0 )
 80042be:	b193      	cbz	r3, 80042e6 <ntc_convert_float_to_string+0xc2>
			*(string_table++) = 0x30 + temperature_int_multiplied100/i;
 80042c0:	1c65      	adds	r5, r4, #1
 80042c2:	fbb0 f1f3 	udiv	r1, r0, r3
 80042c6:	f101 0630 	add.w	r6, r1, #48	; 0x30
 80042ca:	7026      	strb	r6, [r4, #0]
			temperature_int_multiplied100 = (uint16_t)temperature_int_multiplied100 % i;
 80042cc:	fb03 0111 	mls	r1, r3, r1, r0
 80042d0:	b288      	uxth	r0, r1
			if(i == 100) *(string_table++) = '.';
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d1ee      	bne.n	80042b4 <ntc_convert_float_to_string+0x90>
 80042d6:	1ca5      	adds	r5, r4, #2
 80042d8:	212e      	movs	r1, #46	; 0x2e
 80042da:	7061      	strb	r1, [r4, #1]
 80042dc:	e7ea      	b.n	80042b4 <ntc_convert_float_to_string+0x90>
		}
		while(digit_counter--)
		{
			*(string_table++) = ' ';
 80042de:	2220      	movs	r2, #32
 80042e0:	7022      	strb	r2, [r4, #0]
		while(digit_counter--)
 80042e2:	461a      	mov	r2, r3
			*(string_table++) = ' ';
 80042e4:	3401      	adds	r4, #1
		while(digit_counter--)
 80042e6:	1e53      	subs	r3, r2, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	d1f7      	bne.n	80042de <ntc_convert_float_to_string+0xba>
		}
		*(string_table++) = '\0';
 80042ee:	2300      	movs	r3, #0
 80042f0:	7023      	strb	r3, [r4, #0]

	return 1;
}
 80042f2:	2001      	movs	r0, #1
 80042f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40590000 	.word	0x40590000
 80042fc:	cccccccd 	.word	0xcccccccd

08004300 <infinite_heating_callback>:
	button_event_handler = menu_event;
	menu_refresh();
}

void infinite_heating_callback()
{
 8004300:	b508      	push	{r3, lr}
	button_event_handler = heating_event;
 8004302:	2003      	movs	r0, #3
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <infinite_heating_callback+0x10>)
 8004306:	7018      	strb	r0, [r3, #0]
	infinite_heater_handler(ih_event_button_ok);
 8004308:	f000 fedc 	bl	80050c4 <infinite_heater_handler>
}
 800430c:	bd08      	pop	{r3, pc}
 800430e:	bf00      	nop
 8004310:	20000547 	.word	0x20000547

08004314 <heat_event>:
		break;
	}
}

void heat_event(uint8_t button)
{
 8004314:	b508      	push	{r3, lr}
	switch(button)
 8004316:	2803      	cmp	r0, #3
 8004318:	d806      	bhi.n	8004328 <heat_event+0x14>
 800431a:	e8df f000 	tbb	[pc, r0]
 800431e:	0602      	.short	0x0602
 8004320:	0e0a      	.short	0x0e0a
	{
	case UI_BUTTON_UP:
		infinite_heater_handler(ih_event_button_up);
 8004322:	2000      	movs	r0, #0
 8004324:	f000 fece 	bl	80050c4 <infinite_heater_handler>
		break;
	case UI_BUTTON_BACK:
		infinite_heater_handler(ih_event_button_exit);
		break;
	}
}
 8004328:	bd08      	pop	{r3, pc}
		infinite_heater_handler(ih_event_button_down);
 800432a:	2001      	movs	r0, #1
 800432c:	f000 feca 	bl	80050c4 <infinite_heater_handler>
		break;
 8004330:	e7fa      	b.n	8004328 <heat_event+0x14>
		infinite_heater_handler(ih_event_button_ok);
 8004332:	2003      	movs	r0, #3
 8004334:	f000 fec6 	bl	80050c4 <infinite_heater_handler>
		break;
 8004338:	e7f6      	b.n	8004328 <heat_event+0x14>
		infinite_heater_handler(ih_event_button_exit);
 800433a:	2002      	movs	r0, #2
 800433c:	f000 fec2 	bl	80050c4 <infinite_heater_handler>
}
 8004340:	e7f2      	b.n	8004328 <heat_event+0x14>
	...

08004344 <ui_button_handler>:


void ui_button_handler(uint8_t button)
{
 8004344:	b508      	push	{r3, lr}
	(*button_event[(uint8_t)button_event_handler])(button);
 8004346:	4b03      	ldr	r3, [pc, #12]	; (8004354 <ui_button_handler+0x10>)
 8004348:	781a      	ldrb	r2, [r3, #0]
 800434a:	4b03      	ldr	r3, [pc, #12]	; (8004358 <ui_button_handler+0x14>)
 800434c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004350:	4798      	blx	r3
}
 8004352:	bd08      	pop	{r3, pc}
 8004354:	20000547 	.word	0x20000547
 8004358:	20000008 	.word	0x20000008

0800435c <convert_time_to_str>:

void convert_time_to_str(uint8_t time_h, uint8_t time_m)
{
 800435c:	b430      	push	{r4, r5}
	char zero_str = 48;
	time_string[0] = '[';
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <convert_time_to_str+0x4c>)
 8004360:	235b      	movs	r3, #91	; 0x5b
 8004362:	7013      	strb	r3, [r2, #0]
	time_string[1] = time_h/10 + zero_str;
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <convert_time_to_str+0x50>)
 8004366:	fba3 5400 	umull	r5, r4, r3, r0
 800436a:	08e4      	lsrs	r4, r4, #3
 800436c:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8004370:	7055      	strb	r5, [r2, #1]
	time_string[2] = time_h%10 + zero_str;
 8004372:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004376:	0065      	lsls	r5, r4, #1
 8004378:	1b40      	subs	r0, r0, r5
 800437a:	3030      	adds	r0, #48	; 0x30
 800437c:	7090      	strb	r0, [r2, #2]
	time_string[3] = ':';
 800437e:	203a      	movs	r0, #58	; 0x3a
 8004380:	70d0      	strb	r0, [r2, #3]
	time_string[4] = time_m/10 + zero_str;
 8004382:	fba3 0301 	umull	r0, r3, r3, r1
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800438c:	7110      	strb	r0, [r2, #4]
	time_string[5] = time_m%10 + zero_str;
 800438e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004392:	0058      	lsls	r0, r3, #1
 8004394:	1a09      	subs	r1, r1, r0
 8004396:	3130      	adds	r1, #48	; 0x30
 8004398:	7151      	strb	r1, [r2, #5]
	time_string[6] = ']';
 800439a:	235d      	movs	r3, #93	; 0x5d
 800439c:	7193      	strb	r3, [r2, #6]
	time_string[7] = '\0';
 800439e:	2300      	movs	r3, #0
 80043a0:	71d3      	strb	r3, [r2, #7]
}
 80043a2:	bc30      	pop	{r4, r5}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	2000104c 	.word	0x2000104c
 80043ac:	cccccccd 	.word	0xcccccccd

080043b0 <convert_temp_to_str>:
void convert_temp_to_str(double temp_double)
{
 80043b0:	b508      	push	{r3, lr}
	uint16_t temp_int = (uint16_t)(temp_double*10);
 80043b2:	2200      	movs	r2, #0
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <convert_temp_to_str+0x58>)
 80043b6:	f7fc f887 	bl	80004c8 <__aeabi_dmul>
 80043ba:	f7fc fb1f 	bl	80009fc <__aeabi_d2uiz>
 80043be:	b280      	uxth	r0, r0
	char zero_str = 48;
	temp_string[0] = '[';
 80043c0:	4a12      	ldr	r2, [pc, #72]	; (800440c <convert_temp_to_str+0x5c>)
 80043c2:	235b      	movs	r3, #91	; 0x5b
 80043c4:	7013      	strb	r3, [r2, #0]
	temp_string[1] = temp_int/100 + zero_str;
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <convert_temp_to_str+0x60>)
 80043c8:	fba3 1300 	umull	r1, r3, r3, r0
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043d2:	7051      	strb	r1, [r2, #1]
	temp_string[2] = (temp_int%100)/10 +zero_str;
 80043d4:	2164      	movs	r1, #100	; 0x64
 80043d6:	fb01 0013 	mls	r0, r1, r3, r0
 80043da:	b280      	uxth	r0, r0
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <convert_temp_to_str+0x64>)
 80043de:	fba3 1300 	umull	r1, r3, r3, r0
 80043e2:	08db      	lsrs	r3, r3, #3
 80043e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043e8:	7091      	strb	r1, [r2, #2]
	temp_string[3] = '.';
 80043ea:	212e      	movs	r1, #46	; 0x2e
 80043ec:	70d1      	strb	r1, [r2, #3]
	temp_string[4] = (temp_int%100)%10+zero_str;
 80043ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043f2:	0059      	lsls	r1, r3, #1
 80043f4:	1a40      	subs	r0, r0, r1
 80043f6:	3030      	adds	r0, #48	; 0x30
 80043f8:	7110      	strb	r0, [r2, #4]
	temp_string[5] = 0xdf;
 80043fa:	23df      	movs	r3, #223	; 0xdf
 80043fc:	7153      	strb	r3, [r2, #5]
	temp_string[6] = ']';
 80043fe:	235d      	movs	r3, #93	; 0x5d
 8004400:	7193      	strb	r3, [r2, #6]
	temp_string[7] = '\0';
 8004402:	2300      	movs	r3, #0
 8004404:	71d3      	strb	r3, [r2, #7]
}
 8004406:	bd08      	pop	{r3, pc}
 8004408:	40240000 	.word	0x40240000
 800440c:	20001054 	.word	0x20001054
 8004410:	51eb851f 	.word	0x51eb851f
 8004414:	cccccccd 	.word	0xcccccccd

08004418 <menu_refresh>:
{
	char *p = "Test";
	return p;
}

void menu_refresh(void) {
 8004418:	b538      	push	{r3, r4, r5, lr}

	menu_t *temp;
	uint8_t i;
	if (currentPointer->parent) temp = (currentPointer->parent)->child;
 800441a:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <menu_refresh+0xb8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	b113      	cbz	r3, 8004428 <menu_refresh+0x10>
 8004422:	68dc      	ldr	r4, [r3, #12]
	else temp = (menu_t *)&heat;
 8004424:	2300      	movs	r3, #0
 8004426:	e004      	b.n	8004432 <menu_refresh+0x1a>
 8004428:	4c2a      	ldr	r4, [pc, #168]	; (80044d4 <menu_refresh+0xbc>)
 800442a:	e7fb      	b.n	8004424 <menu_refresh+0xc>
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
		temp = temp->next;
 800442c:	6864      	ldr	r4, [r4, #4]
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
 800442e:	3301      	adds	r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <menu_refresh+0xc0>)
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	4929      	ldr	r1, [pc, #164]	; (80044dc <menu_refresh+0xc4>)
 8004438:	7809      	ldrb	r1, [r1, #0]
 800443a:	1a52      	subs	r2, r2, r1
 800443c:	4293      	cmp	r3, r2
 800443e:	d1f5      	bne.n	800442c <menu_refresh+0x14>
	}

	lcd_buf_clear();
 8004440:	f7ff fd9a 	bl	8003f78 <lcd_buf_clear>
	for (i = 0; i < LCD_ROWS; i++) {
 8004444:	2500      	movs	r5, #0
 8004446:	e015      	b.n	8004474 <menu_refresh+0x5c>

		lcd_buf_go_to(0,i);
		if (temp == currentPointer)
		{
			if(button_event_handler != menu_event)
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <menu_refresh+0xc8>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b303      	cbz	r3, 8004490 <menu_refresh+0x78>
			{
				lcd_char(0x01);
 800444e:	2001      	movs	r0, #1
 8004450:	f7ff fd7c 	bl	8003f4c <lcd_char>
				lcd_char(62);
			}
		}
		else lcd_char(' ');

		lcd_buf_go_to(2, i);
 8004454:	4629      	mov	r1, r5
 8004456:	2002      	movs	r0, #2
 8004458:	f7ff fd6e 	bl	8003f38 <lcd_buf_go_to>
		lcd_buf_write_text(temp->name);
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	f7ff fda1 	bl	8003fa4 <lcd_buf_write_text>

		if(temp->set_option == SET_OPTION_TIME)
 8004462:	7e23      	ldrb	r3, [r4, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d017      	beq.n	8004498 <menu_refresh+0x80>
			lcd_buf_go_to(12, i);
			convert_time_to_str(temp->hours, temp->minutes);
			lcd_buf_write_text(time_string);
			//lcd_buf_write_text(ui_convert_inttime_to_str(temp->hours, temp->minutes));
		}
		else if(temp->set_option == SET_OPTION_TEMP)
 8004468:	2b02      	cmp	r3, #2
 800446a:	d023      	beq.n	80044b4 <menu_refresh+0x9c>
			lcd_buf_go_to(12, i);
			convert_temp_to_str(temp->temp);
			lcd_buf_write_text(temp_string);
		}

		temp = temp->next;
 800446c:	6864      	ldr	r4, [r4, #4]
		if (!temp) break;
 800446e:	b36c      	cbz	r4, 80044cc <menu_refresh+0xb4>
	for (i = 0; i < LCD_ROWS; i++) {
 8004470:	3501      	adds	r5, #1
 8004472:	b2ed      	uxtb	r5, r5
 8004474:	2d01      	cmp	r5, #1
 8004476:	d829      	bhi.n	80044cc <menu_refresh+0xb4>
		lcd_buf_go_to(0,i);
 8004478:	4629      	mov	r1, r5
 800447a:	2000      	movs	r0, #0
 800447c:	f7ff fd5c 	bl	8003f38 <lcd_buf_go_to>
		if (temp == currentPointer)
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <menu_refresh+0xb8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	42a3      	cmp	r3, r4
 8004486:	d0df      	beq.n	8004448 <menu_refresh+0x30>
		else lcd_char(' ');
 8004488:	2020      	movs	r0, #32
 800448a:	f7ff fd5f 	bl	8003f4c <lcd_char>
 800448e:	e7e1      	b.n	8004454 <menu_refresh+0x3c>
				lcd_char(62);
 8004490:	203e      	movs	r0, #62	; 0x3e
 8004492:	f7ff fd5b 	bl	8003f4c <lcd_char>
 8004496:	e7dd      	b.n	8004454 <menu_refresh+0x3c>
			lcd_buf_go_to(12, i);
 8004498:	4629      	mov	r1, r5
 800449a:	200c      	movs	r0, #12
 800449c:	f7ff fd4c 	bl	8003f38 <lcd_buf_go_to>
			convert_time_to_str(temp->hours, temp->minutes);
 80044a0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 80044a4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80044a8:	f7ff ff58 	bl	800435c <convert_time_to_str>
			lcd_buf_write_text(time_string);
 80044ac:	480d      	ldr	r0, [pc, #52]	; (80044e4 <menu_refresh+0xcc>)
 80044ae:	f7ff fd79 	bl	8003fa4 <lcd_buf_write_text>
 80044b2:	e7db      	b.n	800446c <menu_refresh+0x54>
			lcd_buf_go_to(12, i);
 80044b4:	4629      	mov	r1, r5
 80044b6:	200c      	movs	r0, #12
 80044b8:	f7ff fd3e 	bl	8003f38 <lcd_buf_go_to>
			convert_temp_to_str(temp->temp);
 80044bc:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 80044c0:	f7ff ff76 	bl	80043b0 <convert_temp_to_str>
			lcd_buf_write_text(temp_string);
 80044c4:	4808      	ldr	r0, [pc, #32]	; (80044e8 <menu_refresh+0xd0>)
 80044c6:	f7ff fd6d 	bl	8003fa4 <lcd_buf_write_text>
 80044ca:	e7cf      	b.n	800446c <menu_refresh+0x54>

	}
}
 80044cc:	bd38      	pop	{r3, r4, r5, pc}
 80044ce:	bf00      	nop
 80044d0:	20000018 	.word	0x20000018
 80044d4:	20000c98 	.word	0x20000c98
 80044d8:	2000054d 	.word	0x2000054d
 80044dc:	2000054a 	.word	0x2000054a
 80044e0:	20000547 	.word	0x20000547
 80044e4:	2000104c 	.word	0x2000104c
 80044e8:	20001054 	.word	0x20001054

080044ec <ui_set_time_callback>:
void ui_set_time_callback(){
 80044ec:	b508      	push	{r3, lr}
	button_event_handler = set_time_event;
 80044ee:	4b03      	ldr	r3, [pc, #12]	; (80044fc <ui_set_time_callback+0x10>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 80044f4:	f7ff ff90 	bl	8004418 <menu_refresh>
}
 80044f8:	bd08      	pop	{r3, pc}
 80044fa:	bf00      	nop
 80044fc:	20000547 	.word	0x20000547

08004500 <ui_set_temp_callback>:
void ui_set_temp_callback(){
 8004500:	b508      	push	{r3, lr}
	button_event_handler = set_temp_event;
 8004502:	4b03      	ldr	r3, [pc, #12]	; (8004510 <ui_set_temp_callback+0x10>)
 8004504:	2202      	movs	r2, #2
 8004506:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004508:	f7ff ff86 	bl	8004418 <menu_refresh>
}
 800450c:	bd08      	pop	{r3, pc}
 800450e:	bf00      	nop
 8004510:	20000547 	.word	0x20000547

08004514 <ui_time_save_and_exit>:
{
 8004514:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 8004516:	4b03      	ldr	r3, [pc, #12]	; (8004524 <ui_time_save_and_exit+0x10>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 800451c:	f7ff ff7c 	bl	8004418 <menu_refresh>
}
 8004520:	bd08      	pop	{r3, pc}
 8004522:	bf00      	nop
 8004524:	20000547 	.word	0x20000547

08004528 <ui_time_exit_witout_save>:
{
 8004528:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 800452a:	4b03      	ldr	r3, [pc, #12]	; (8004538 <ui_time_exit_witout_save+0x10>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004530:	f7ff ff72 	bl	8004418 <menu_refresh>
}
 8004534:	bd08      	pop	{r3, pc}
 8004536:	bf00      	nop
 8004538:	20000547 	.word	0x20000547

0800453c <ui_temp_save_and_exit>:
{
 800453c:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 800453e:	4b03      	ldr	r3, [pc, #12]	; (800454c <ui_temp_save_and_exit+0x10>)
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004544:	f7ff ff68 	bl	8004418 <menu_refresh>
}
 8004548:	bd08      	pop	{r3, pc}
 800454a:	bf00      	nop
 800454c:	20000547 	.word	0x20000547

08004550 <ui_temp_exit_witout_save>:
{
 8004550:	b508      	push	{r3, lr}
	button_event_handler = menu_event;
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <ui_temp_exit_witout_save+0x10>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
	menu_refresh();
 8004558:	f7ff ff5e 	bl	8004418 <menu_refresh>
}
 800455c:	bd08      	pop	{r3, pc}
 800455e:	bf00      	nop
 8004560:	20000547 	.word	0x20000547

08004564 <ui_time_plus>:
{
 8004564:	b508      	push	{r3, lr}
	currentPointer->minutes++;
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <ui_time_plus+0x3c>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800456e:	3301      	adds	r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	if(currentPointer->minutes == 60)
 8004576:	2b3c      	cmp	r3, #60	; 0x3c
 8004578:	d002      	beq.n	8004580 <ui_time_plus+0x1c>
	menu_refresh();
 800457a:	f7ff ff4d 	bl	8004418 <menu_refresh>
}
 800457e:	bd08      	pop	{r3, pc}
		currentPointer->minutes = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		currentPointer->hours++;
 8004586:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800458a:	3301      	adds	r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		if(currentPointer->hours == 100)
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d1f1      	bne.n	800457a <ui_time_plus+0x16>
			currentPointer->hours = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800459c:	e7ed      	b.n	800457a <ui_time_plus+0x16>
 800459e:	bf00      	nop
 80045a0:	20000018 	.word	0x20000018

080045a4 <ui_time_minus>:
{
 80045a4:	b508      	push	{r3, lr}
	currentPointer->minutes--;
 80045a6:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <ui_time_minus+0x3c>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	if(currentPointer->minutes == 0xff)
 80045b6:	2bff      	cmp	r3, #255	; 0xff
 80045b8:	d002      	beq.n	80045c0 <ui_time_minus+0x1c>
	menu_refresh();
 80045ba:	f7ff ff2d 	bl	8004418 <menu_refresh>
}
 80045be:	bd08      	pop	{r3, pc}
		currentPointer->minutes = 59;
 80045c0:	233b      	movs	r3, #59	; 0x3b
 80045c2:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		currentPointer->hours--;
 80045c6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		if(currentPointer->hours == 0xff)
 80045d2:	2bff      	cmp	r3, #255	; 0xff
 80045d4:	d1f1      	bne.n	80045ba <ui_time_minus+0x16>
			currentPointer->hours = 99;
 80045d6:	2363      	movs	r3, #99	; 0x63
 80045d8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80045dc:	e7ed      	b.n	80045ba <ui_time_minus+0x16>
 80045de:	bf00      	nop
 80045e0:	20000018 	.word	0x20000018

080045e4 <set_time_button_event>:
{
 80045e4:	b508      	push	{r3, lr}
	switch(button)
 80045e6:	2803      	cmp	r0, #3
 80045e8:	d805      	bhi.n	80045f6 <set_time_button_event+0x12>
 80045ea:	e8df f000 	tbb	[pc, r0]
 80045ee:	0502      	.short	0x0502
 80045f0:	0b08      	.short	0x0b08
		ui_time_plus();
 80045f2:	f7ff ffb7 	bl	8004564 <ui_time_plus>
}
 80045f6:	bd08      	pop	{r3, pc}
		ui_time_minus();
 80045f8:	f7ff ffd4 	bl	80045a4 <ui_time_minus>
		break;
 80045fc:	e7fb      	b.n	80045f6 <set_time_button_event+0x12>
		ui_time_save_and_exit();
 80045fe:	f7ff ff89 	bl	8004514 <ui_time_save_and_exit>
		break;
 8004602:	e7f8      	b.n	80045f6 <set_time_button_event+0x12>
		ui_time_exit_witout_save();
 8004604:	f7ff ff90 	bl	8004528 <ui_time_exit_witout_save>
}
 8004608:	e7f5      	b.n	80045f6 <set_time_button_event+0x12>
 800460a:	0000      	movs	r0, r0
 800460c:	0000      	movs	r0, r0
	...

08004610 <ui_temp_plus>:
{
 8004610:	b510      	push	{r4, lr}
	currentPointer->temp = currentPointer->temp + 0.1;
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <ui_temp_plus+0x38>)
 8004614:	681c      	ldr	r4, [r3, #0]
 8004616:	a30a      	add	r3, pc, #40	; (adr r3, 8004640 <ui_temp_plus+0x30>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8004620:	f7fb fd9c 	bl	800015c <__adddf3>
 8004624:	e9c4 0108 	strd	r0, r1, [r4, #32]
	if(currentPointer->temp > 70)
 8004628:	2200      	movs	r2, #0
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <ui_temp_plus+0x3c>)
 800462c:	f7fc f9dc 	bl	80009e8 <__aeabi_dcmpgt>
 8004630:	b118      	cbz	r0, 800463a <ui_temp_plus+0x2a>
		currentPointer->temp = 70.0;
 8004632:	2200      	movs	r2, #0
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <ui_temp_plus+0x3c>)
 8004636:	e9c4 2308 	strd	r2, r3, [r4, #32]
	menu_refresh();
 800463a:	f7ff feed 	bl	8004418 <menu_refresh>
}
 800463e:	bd10      	pop	{r4, pc}
 8004640:	9999999a 	.word	0x9999999a
 8004644:	3fb99999 	.word	0x3fb99999
 8004648:	20000018 	.word	0x20000018
 800464c:	40518000 	.word	0x40518000

08004650 <ui_temp_minus>:
{
 8004650:	b510      	push	{r4, lr}
	currentPointer->temp = currentPointer->temp - 0.1;
 8004652:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <ui_temp_minus+0x40>)
 8004654:	681c      	ldr	r4, [r3, #0]
 8004656:	a30c      	add	r3, pc, #48	; (adr r3, 8004688 <ui_temp_minus+0x38>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8004660:	f7fb fd7a 	bl	8000158 <__aeabi_dsub>
 8004664:	e9c4 0108 	strd	r0, r1, [r4, #32]
	if(currentPointer->temp < 0 )
 8004668:	2200      	movs	r2, #0
 800466a:	2300      	movs	r3, #0
 800466c:	f7fc f99e 	bl	80009ac <__aeabi_dcmplt>
 8004670:	b910      	cbnz	r0, 8004678 <ui_temp_minus+0x28>
	menu_refresh();
 8004672:	f7ff fed1 	bl	8004418 <menu_refresh>
}
 8004676:	bd10      	pop	{r4, pc}
		currentPointer->temp = 0;
 8004678:	2200      	movs	r2, #0
 800467a:	2300      	movs	r3, #0
 800467c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8004680:	e7f7      	b.n	8004672 <ui_temp_minus+0x22>
 8004682:	bf00      	nop
 8004684:	f3af 8000 	nop.w
 8004688:	9999999a 	.word	0x9999999a
 800468c:	3fb99999 	.word	0x3fb99999
 8004690:	20000018 	.word	0x20000018

08004694 <set_temp_button_event>:
{
 8004694:	b508      	push	{r3, lr}
	switch(button)
 8004696:	2803      	cmp	r0, #3
 8004698:	d805      	bhi.n	80046a6 <set_temp_button_event+0x12>
 800469a:	e8df f000 	tbb	[pc, r0]
 800469e:	0502      	.short	0x0502
 80046a0:	0b08      	.short	0x0b08
		ui_temp_plus();
 80046a2:	f7ff ffb5 	bl	8004610 <ui_temp_plus>
}
 80046a6:	bd08      	pop	{r3, pc}
		ui_temp_minus();
 80046a8:	f7ff ffd2 	bl	8004650 <ui_temp_minus>
		break;
 80046ac:	e7fb      	b.n	80046a6 <set_temp_button_event+0x12>
		ui_temp_save_and_exit();
 80046ae:	f7ff ff45 	bl	800453c <ui_temp_save_and_exit>
		break;
 80046b2:	e7f8      	b.n	80046a6 <set_temp_button_event+0x12>
		ui_temp_exit_witout_save();
 80046b4:	f7ff ff4c 	bl	8004550 <ui_temp_exit_witout_save>
}
 80046b8:	e7f5      	b.n	80046a6 <set_temp_button_event+0x12>
	...

080046bc <menu_get_index>:
uint8_t menu_get_index(menu_t *q) {

	menu_t *temp;
	uint8_t i = 0;

	if (q->parent) temp = (q->parent)->child;
 80046bc:	6903      	ldr	r3, [r0, #16]
 80046be:	b113      	cbz	r3, 80046c6 <menu_get_index+0xa>
 80046c0:	68da      	ldr	r2, [r3, #12]
	else temp = (menu_t *)&heat;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e004      	b.n	80046d0 <menu_get_index+0x14>
 80046c6:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <menu_get_index+0x1c>)
 80046c8:	e7fb      	b.n	80046c2 <menu_get_index+0x6>

	while (temp != q) {
		temp = temp->next;
 80046ca:	6852      	ldr	r2, [r2, #4]
		i++;
 80046cc:	3301      	adds	r3, #1
 80046ce:	b2db      	uxtb	r3, r3
	while (temp != q) {
 80046d0:	4282      	cmp	r2, r0
 80046d2:	d1fa      	bne.n	80046ca <menu_get_index+0xe>
	}

	return i;
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	4770      	bx	lr
 80046d8:	20000c98 	.word	0x20000c98

080046dc <ui_menu_next>:

void ui_menu_next(void)
{
 80046dc:	b508      	push	{r3, lr}
	if (currentPointer->next)
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <ui_menu_next+0x30>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	b17b      	cbz	r3, 8004706 <ui_menu_next+0x2a>
	{
		currentPointer = currentPointer->next;
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <ui_menu_next+0x30>)
 80046e8:	6013      	str	r3, [r2, #0]
		menu_index++;
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <ui_menu_next+0x34>)
 80046ec:	7813      	ldrb	r3, [r2, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	7013      	strb	r3, [r2, #0]
		if (++lcd_row_pos > LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 80046f2:	4a08      	ldr	r2, [pc, #32]	; (8004714 <ui_menu_next+0x38>)
 80046f4:	7813      	ldrb	r3, [r2, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	7013      	strb	r3, [r2, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d902      	bls.n	8004706 <ui_menu_next+0x2a>
 8004700:	4613      	mov	r3, r2
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
		//lcd_row_pos = 0;

		//if (currentPointer->parent) currentPointer = (currentPointer->parent)->child;
		//else currentPointer = &new_settings;
	}
	menu_refresh();
 8004706:	f7ff fe87 	bl	8004418 <menu_refresh>
}
 800470a:	bd08      	pop	{r3, pc}
 800470c:	20000018 	.word	0x20000018
 8004710:	2000054d 	.word	0x2000054d
 8004714:	2000054a 	.word	0x2000054a

08004718 <ui_menu_prev>:

void ui_menu_prev(void) {
 8004718:	b508      	push	{r3, lr}


	if(currentPointer->prev)
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <ui_menu_prev+0x44>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6898      	ldr	r0, [r3, #8]
 8004720:	b168      	cbz	r0, 800473e <ui_menu_prev+0x26>
	{
		currentPointer = currentPointer->prev;
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <ui_menu_prev+0x44>)
 8004724:	6018      	str	r0, [r3, #0]
		if (menu_index)
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <ui_menu_prev+0x48>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b15b      	cbz	r3, 8004744 <ui_menu_prev+0x2c>
		{
			menu_index--;
 800472c:	3b01      	subs	r3, #1
 800472e:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <ui_menu_prev+0x48>)
 8004730:	7013      	strb	r3, [r2, #0]
			if (lcd_row_pos > 0) lcd_row_pos--;
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <ui_menu_prev+0x4c>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	b113      	cbz	r3, 800473e <ui_menu_prev+0x26>
 8004738:	3b01      	subs	r3, #1
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <ui_menu_prev+0x4c>)
 800473c:	7013      	strb	r3, [r2, #0]

			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
			else lcd_row_pos = menu_index;
		}
	}
	menu_refresh();
 800473e:	f7ff fe6b 	bl	8004418 <menu_refresh>
}
 8004742:	bd08      	pop	{r3, pc}
			menu_index = menu_get_index(currentPointer);
 8004744:	f7ff ffba 	bl	80046bc <menu_get_index>
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <ui_menu_prev+0x48>)
 800474a:	7018      	strb	r0, [r3, #0]
			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 800474c:	b910      	cbnz	r0, 8004754 <ui_menu_prev+0x3c>
			else lcd_row_pos = menu_index;
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <ui_menu_prev+0x4c>)
 8004750:	7018      	strb	r0, [r3, #0]
 8004752:	e7f4      	b.n	800473e <ui_menu_prev+0x26>
			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <ui_menu_prev+0x4c>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e7f0      	b.n	800473e <ui_menu_prev+0x26>
 800475c:	20000018 	.word	0x20000018
 8004760:	2000054d 	.word	0x2000054d
 8004764:	2000054a 	.word	0x2000054a

08004768 <menu_get_level>:
uint8_t menu_get_level(menu_t *q) {

	menu_t *temp = q;
	uint8_t i = 0;

	if (!q->parent) return 0;
 8004768:	6903      	ldr	r3, [r0, #16]
 800476a:	b143      	cbz	r3, 800477e <menu_get_level+0x16>
	uint8_t i = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	e001      	b.n	8004774 <menu_get_level+0xc>

	while (temp->parent != NULL) {
		temp = temp->parent;
		i++;
 8004770:	3301      	adds	r3, #1
 8004772:	b2db      	uxtb	r3, r3
	while (temp->parent != NULL) {
 8004774:	6900      	ldr	r0, [r0, #16]
 8004776:	2800      	cmp	r0, #0
 8004778:	d1fa      	bne.n	8004770 <menu_get_level+0x8>
	}

	return i;
}
 800477a:	4618      	mov	r0, r3
 800477c:	4770      	bx	lr
	if (!q->parent) return 0;
 800477e:	2300      	movs	r3, #0
 8004780:	e7fb      	b.n	800477a <menu_get_level+0x12>
	...

08004784 <ui_menu_enter>:


void ui_menu_enter(void) {
 8004784:	b510      	push	{r4, lr}

	if (currentPointer->menu_function) currentPointer->menu_function();
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <ui_menu_enter+0x48>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	b103      	cbz	r3, 8004790 <ui_menu_enter+0xc>
 800478e:	4798      	blx	r3

	if (currentPointer->child)
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <ui_menu_enter+0x48>)
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	68c4      	ldr	r4, [r0, #12]
 8004796:	b16c      	cbz	r4, 80047b4 <ui_menu_enter+0x30>
	{

		switch (menu_get_level(currentPointer)) {
 8004798:	f7ff ffe6 	bl	8004768 <menu_get_level>
 800479c:	b158      	cbz	r0, 80047b6 <ui_menu_enter+0x32>
 800479e:	2801      	cmp	r0, #1
 80047a0:	d00e      	beq.n	80047c0 <ui_menu_enter+0x3c>
		}

		// switch...case can be replaced by:
		// lcd_row_pos_level[ menu_get_level(currentPointer) ] = lcd_row_pos;

		menu_index = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <ui_menu_enter+0x4c>)
 80047a6:	7013      	strb	r3, [r2, #0]
		lcd_row_pos = 0;
 80047a8:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <ui_menu_enter+0x50>)
 80047aa:	7013      	strb	r3, [r2, #0]

		currentPointer = currentPointer->child;
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <ui_menu_enter+0x48>)
 80047ae:	601c      	str	r4, [r3, #0]

		menu_refresh();
 80047b0:	f7ff fe32 	bl	8004418 <menu_refresh>
	}
}
 80047b4:	bd10      	pop	{r4, pc}
				lcd_row_pos_level_1 = lcd_row_pos;
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <ui_menu_enter+0x50>)
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <ui_menu_enter+0x54>)
 80047bc:	701a      	strb	r2, [r3, #0]
				break;
 80047be:	e7f0      	b.n	80047a2 <ui_menu_enter+0x1e>
				lcd_row_pos_level_2 = lcd_row_pos;
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <ui_menu_enter+0x50>)
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <ui_menu_enter+0x58>)
 80047c6:	701a      	strb	r2, [r3, #0]
				break;
 80047c8:	e7eb      	b.n	80047a2 <ui_menu_enter+0x1e>
 80047ca:	bf00      	nop
 80047cc:	20000018 	.word	0x20000018
 80047d0:	2000054d 	.word	0x2000054d
 80047d4:	2000054a 	.word	0x2000054a
 80047d8:	2000054b 	.word	0x2000054b
 80047dc:	2000054c 	.word	0x2000054c

080047e0 <ui_menu_back>:



void ui_menu_back(void) {
 80047e0:	b510      	push	{r4, lr}

	if (currentPointer->parent) {
 80047e2:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <ui_menu_back+0x40>)
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	6904      	ldr	r4, [r0, #16]
 80047e8:	b174      	cbz	r4, 8004808 <ui_menu_back+0x28>

		switch (menu_get_level(currentPointer)) {
 80047ea:	f7ff ffbd 	bl	8004768 <menu_get_level>
 80047ee:	2801      	cmp	r0, #1
 80047f0:	d00b      	beq.n	800480a <ui_menu_back+0x2a>
 80047f2:	2802      	cmp	r0, #2
 80047f4:	d00e      	beq.n	8004814 <ui_menu_back+0x34>
			case 2:
				lcd_row_pos = lcd_row_pos_level_2;
				break;
			}

		currentPointer = currentPointer->parent;
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <ui_menu_back+0x40>)
 80047f8:	601c      	str	r4, [r3, #0]
		menu_index = menu_get_index(currentPointer);
 80047fa:	4620      	mov	r0, r4
 80047fc:	f7ff ff5e 	bl	80046bc <menu_get_index>
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <ui_menu_back+0x44>)
 8004802:	7018      	strb	r0, [r3, #0]

		menu_refresh();
 8004804:	f7ff fe08 	bl	8004418 <menu_refresh>

	}
}
 8004808:	bd10      	pop	{r4, pc}
				lcd_row_pos = lcd_row_pos_level_1;
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <ui_menu_back+0x48>)
 800480c:	781a      	ldrb	r2, [r3, #0]
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <ui_menu_back+0x4c>)
 8004810:	701a      	strb	r2, [r3, #0]
				break;
 8004812:	e7f0      	b.n	80047f6 <ui_menu_back+0x16>
				lcd_row_pos = lcd_row_pos_level_2;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <ui_menu_back+0x50>)
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <ui_menu_back+0x4c>)
 800481a:	701a      	strb	r2, [r3, #0]
				break;
 800481c:	e7eb      	b.n	80047f6 <ui_menu_back+0x16>
 800481e:	bf00      	nop
 8004820:	20000018 	.word	0x20000018
 8004824:	2000054d 	.word	0x2000054d
 8004828:	2000054b 	.word	0x2000054b
 800482c:	2000054a 	.word	0x2000054a
 8004830:	2000054c 	.word	0x2000054c

08004834 <menu_button_event>:
{
 8004834:	b508      	push	{r3, lr}
	switch(button)
 8004836:	2803      	cmp	r0, #3
 8004838:	d805      	bhi.n	8004846 <menu_button_event+0x12>
 800483a:	e8df f000 	tbb	[pc, r0]
 800483e:	0502      	.short	0x0502
 8004840:	0b08      	.short	0x0b08
		ui_menu_prev();
 8004842:	f7ff ff69 	bl	8004718 <ui_menu_prev>
}
 8004846:	bd08      	pop	{r3, pc}
		ui_menu_next();
 8004848:	f7ff ff48 	bl	80046dc <ui_menu_next>
		break;
 800484c:	e7fb      	b.n	8004846 <menu_button_event+0x12>
		ui_menu_enter();
 800484e:	f7ff ff99 	bl	8004784 <ui_menu_enter>
		break;
 8004852:	e7f8      	b.n	8004846 <menu_button_event+0x12>
		ui_menu_back();
 8004854:	f7ff ffc4 	bl	80047e0 <ui_menu_back>
}
 8004858:	e7f5      	b.n	8004846 <menu_button_event+0x12>
	...

0800485c <iu_button_hold_handler>:
/* ui_handler_flag its busy flag its prevent
 * entering to ui_handler() few times with this same ms_counter value */


void iu_button_hold_handler()
{
 800485c:	b508      	push	{r3, lr}
	static uint8_t button_hold_on_timer_divider;


	if((GPIOB->IDR & GPIO_PIN_12) == 0)
 800485e:	4b39      	ldr	r3, [pc, #228]	; (8004944 <iu_button_hold_handler+0xe8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004866:	d149      	bne.n	80048fc <iu_button_hold_handler+0xa0>
	{
		if(ms_counter % 999 == 0)
 8004868:	4b37      	ldr	r3, [pc, #220]	; (8004948 <iu_button_hold_handler+0xec>)
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29a      	uxth	r2, r3
 800486e:	4b37      	ldr	r3, [pc, #220]	; (800494c <iu_button_hold_handler+0xf0>)
 8004870:	fba3 1302 	umull	r1, r3, r3, r2
 8004874:	1ad1      	subs	r1, r2, r3
 8004876:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800487a:	0a5b      	lsrs	r3, r3, #9
 800487c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004880:	fb01 2313 	mls	r3, r1, r3, r2
 8004884:	b29b      	uxth	r3, r3
 8004886:	b91b      	cbnz	r3, 8004890 <iu_button_hold_handler+0x34>
		{
			button_hold_on_counter++;
 8004888:	4a31      	ldr	r2, [pc, #196]	; (8004950 <iu_button_hold_handler+0xf4>)
 800488a:	7813      	ldrb	r3, [r2, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	7013      	strb	r3, [r2, #0]
	else
	{
		button_hold_on_counter = 0;
		return ;
	}
	if(button_hold_on_counter < 3) return;
 8004890:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <iu_button_hold_handler+0xf4>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d94f      	bls.n	8004938 <iu_button_hold_handler+0xdc>
	else
	{
		button_hold_on_timer_divider = 2;
 8004898:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <iu_button_hold_handler+0xf8>)
 800489a:	2102      	movs	r1, #2
 800489c:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 4) button_hold_on_timer_divider = 3;
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d901      	bls.n	80048a6 <iu_button_hold_handler+0x4a>
 80048a2:	2103      	movs	r1, #3
 80048a4:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 6) button_hold_on_timer_divider = 8;
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d902      	bls.n	80048b0 <iu_button_hold_handler+0x54>
 80048aa:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <iu_button_hold_handler+0xf8>)
 80048ac:	2108      	movs	r1, #8
 80048ae:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 10) button_hold_on_timer_divider = 14;
 80048b0:	2b0a      	cmp	r3, #10
 80048b2:	d902      	bls.n	80048ba <iu_button_hold_handler+0x5e>
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <iu_button_hold_handler+0xf8>)
 80048b6:	210e      	movs	r1, #14
 80048b8:	7011      	strb	r1, [r2, #0]
		if(button_hold_on_counter  > 15) button_hold_on_timer_divider = 25;
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	d902      	bls.n	80048c4 <iu_button_hold_handler+0x68>
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <iu_button_hold_handler+0xf8>)
 80048c0:	2219      	movs	r2, #25
 80048c2:	701a      	strb	r2, [r3, #0]
		if(ms_counter %(1000/button_hold_on_timer_divider) == 0)
 80048c4:	4b20      	ldr	r3, [pc, #128]	; (8004948 <iu_button_hold_handler+0xec>)
 80048c6:	881a      	ldrh	r2, [r3, #0]
 80048c8:	b292      	uxth	r2, r2
 80048ca:	4b22      	ldr	r3, [pc, #136]	; (8004954 <iu_button_hold_handler+0xf8>)
 80048cc:	7819      	ldrb	r1, [r3, #0]
 80048ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d2:	fb93 f3f1 	sdiv	r3, r3, r1
 80048d6:	fb92 f1f3 	sdiv	r1, r2, r3
 80048da:	fb03 2311 	mls	r3, r3, r1, r2
 80048de:	bb5b      	cbnz	r3, 8004938 <iu_button_hold_handler+0xdc>
		{
			if((GPIOB->IDR & GPIO_PIN_12) == 0)
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <iu_button_hold_handler+0xe8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80048e8:	d027      	beq.n	800493a <iu_button_hold_handler+0xde>
			{
				ui_button_handler(UI_BUTTON_UP);
			}
			else if((GPIOC->IDR & GPIO_PIN_13) == 0)
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <iu_button_hold_handler+0xfc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80048f2:	d121      	bne.n	8004938 <iu_button_hold_handler+0xdc>
			{
				ui_button_handler(UI_BUTTON_DOWN);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7ff fd25 	bl	8004344 <ui_button_handler>
 80048fa:	e01d      	b.n	8004938 <iu_button_hold_handler+0xdc>
	else if((GPIOC->IDR & GPIO_PIN_13) == 0)
 80048fc:	4b16      	ldr	r3, [pc, #88]	; (8004958 <iu_button_hold_handler+0xfc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004904:	d115      	bne.n	8004932 <iu_button_hold_handler+0xd6>
		if(ms_counter % 999 == 0)
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <iu_button_hold_handler+0xec>)
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29a      	uxth	r2, r3
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <iu_button_hold_handler+0xf0>)
 800490e:	fba3 1302 	umull	r1, r3, r3, r2
 8004912:	1ad1      	subs	r1, r2, r3
 8004914:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004918:	0a5b      	lsrs	r3, r3, #9
 800491a:	f240 31e7 	movw	r1, #999	; 0x3e7
 800491e:	fb01 2313 	mls	r3, r1, r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1b3      	bne.n	8004890 <iu_button_hold_handler+0x34>
			button_hold_on_counter++;
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <iu_button_hold_handler+0xf4>)
 800492a:	7813      	ldrb	r3, [r2, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	7013      	strb	r3, [r2, #0]
 8004930:	e7ae      	b.n	8004890 <iu_button_hold_handler+0x34>
		button_hold_on_counter = 0;
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <iu_button_hold_handler+0xf4>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8004938:	bd08      	pop	{r3, pc}
				ui_button_handler(UI_BUTTON_UP);
 800493a:	2000      	movs	r0, #0
 800493c:	f7ff fd02 	bl	8004344 <ui_button_handler>
 8004940:	e7fa      	b.n	8004938 <iu_button_hold_handler+0xdc>
 8004942:	bf00      	nop
 8004944:	40010c00 	.word	0x40010c00
 8004948:	200007c0 	.word	0x200007c0
 800494c:	06680a41 	.word	0x06680a41
 8004950:	20000548 	.word	0x20000548
 8004954:	20000549 	.word	0x20000549
 8004958:	40011000 	.word	0x40011000

0800495c <ui_handler>:
*/



void ui_handler()
{
 800495c:	b508      	push	{r3, lr}

	if(ui_handler_flag == UI_HANDLER_FLAG_BUSY) return;
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <ui_handler+0x18>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d004      	beq.n	8004972 <ui_handler+0x16>

	iu_button_hold_handler();
 8004968:	f7ff ff78 	bl	800485c <iu_button_hold_handler>

	//if(button_event_handler == heating_event) iu_heating_process_handler();



	ui_handler_flag = UI_HANDLER_FLAG_BUSY;
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <ui_handler+0x18>)
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
}
 8004972:	bd08      	pop	{r3, pc}
 8004974:	20000d88 	.word	0x20000d88

08004978 <build_menu>:

void build_menu(menu_t *currentNode, char *name, struct menu_struct *next, struct menu_struct *prev, struct menu_struct *child,
				struct menu_struct *parent, void (*f)(void), uint8_t set_option, double temp, uint8_t hours, uint8_t minutes )
{
	currentNode->name = name;
 8004978:	6001      	str	r1, [r0, #0]
	currentNode->next = next;
 800497a:	6042      	str	r2, [r0, #4]
	currentNode->prev = prev;
 800497c:	6083      	str	r3, [r0, #8]
	currentNode->child = child;
 800497e:	9b00      	ldr	r3, [sp, #0]
 8004980:	60c3      	str	r3, [r0, #12]
	currentNode->parent = parent;
 8004982:	9b01      	ldr	r3, [sp, #4]
 8004984:	6103      	str	r3, [r0, #16]
	currentNode->menu_function = f;
 8004986:	9b02      	ldr	r3, [sp, #8]
 8004988:	6143      	str	r3, [r0, #20]
	currentNode->set_option = set_option;
 800498a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800498e:	7603      	strb	r3, [r0, #24]
	currentNode->temp = temp;
 8004990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004994:	e9c0 2308 	strd	r2, r3, [r0, #32]
	currentNode->hours = hours;
 8004998:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800499c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	currentNode->minutes = minutes;
 80049a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80049a4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

}
 80049a8:	4770      	bx	lr
	...

080049ac <ui_populate_with_rom_data>:


void ui_populate_with_rom_data(void)
{
 80049ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b0:	b089      	sub	sp, #36	; 0x24
	build_menu(&heat,"HEATING",				&prog,	NULL,	&htemp,		NULL,	NULL,0,0.0,0,0);
 80049b2:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8004ce4 <ui_populate_with_rom_data+0x338>
 80049b6:	f8df a330 	ldr.w	sl, [pc, #816]	; 8004ce8 <ui_populate_with_rom_data+0x33c>
 80049ba:	2400      	movs	r4, #0
 80049bc:	9407      	str	r4, [sp, #28]
 80049be:	9406      	str	r4, [sp, #24]
 80049c0:	2600      	movs	r6, #0
 80049c2:	2700      	movs	r7, #0
 80049c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049c8:	9403      	str	r4, [sp, #12]
 80049ca:	9402      	str	r4, [sp, #8]
 80049cc:	9401      	str	r4, [sp, #4]
 80049ce:	4da3      	ldr	r5, [pc, #652]	; (8004c5c <ui_populate_with_rom_data+0x2b0>)
 80049d0:	9500      	str	r5, [sp, #0]
 80049d2:	4623      	mov	r3, r4
 80049d4:	4642      	mov	r2, r8
 80049d6:	49a2      	ldr	r1, [pc, #648]	; (8004c60 <ui_populate_with_rom_data+0x2b4>)
 80049d8:	4650      	mov	r0, sl
 80049da:	f7ff ffcd 	bl	8004978 <build_menu>
		build_menu(&htemp,"SET TEMP",			&hstart,NULL,	NULL,	&heat,	ui_set_temp_callback,SET_OPTION_TEMP,0.0,0,0);
 80049de:	9407      	str	r4, [sp, #28]
 80049e0:	9406      	str	r4, [sp, #24]
 80049e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049e6:	f04f 0b02 	mov.w	fp, #2
 80049ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80049ee:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 8004cec <ui_populate_with_rom_data+0x340>
 80049f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80049f6:	f8cd a004 	str.w	sl, [sp, #4]
 80049fa:	9400      	str	r4, [sp, #0]
 80049fc:	4623      	mov	r3, r4
 80049fe:	4a99      	ldr	r2, [pc, #612]	; (8004c64 <ui_populate_with_rom_data+0x2b8>)
 8004a00:	4999      	ldr	r1, [pc, #612]	; (8004c68 <ui_populate_with_rom_data+0x2bc>)
 8004a02:	4628      	mov	r0, r5
 8004a04:	f7ff ffb8 	bl	8004978 <build_menu>
		build_menu(&hstart,"START HEAT",		NULL,	&htemp,	NULL,	&heat,	&infinite_heating_callback,0,0.0,0,0);
 8004a08:	9407      	str	r4, [sp, #28]
 8004a0a:	9406      	str	r4, [sp, #24]
 8004a0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a10:	9403      	str	r4, [sp, #12]
 8004a12:	4b96      	ldr	r3, [pc, #600]	; (8004c6c <ui_populate_with_rom_data+0x2c0>)
 8004a14:	9302      	str	r3, [sp, #8]
 8004a16:	f8cd a004 	str.w	sl, [sp, #4]
 8004a1a:	9400      	str	r4, [sp, #0]
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	4622      	mov	r2, r4
 8004a20:	4993      	ldr	r1, [pc, #588]	; (8004c70 <ui_populate_with_rom_data+0x2c4>)
 8004a22:	4890      	ldr	r0, [pc, #576]	; (8004c64 <ui_populate_with_rom_data+0x2b8>)
 8004a24:	f7ff ffa8 	bl	8004978 <build_menu>
	build_menu(&prog,"SET PROGRAM",    &seq,	&heat,	&progTime,	NULL,	NULL,0,0.0,0,0);
 8004a28:	4d92      	ldr	r5, [pc, #584]	; (8004c74 <ui_populate_with_rom_data+0x2c8>)
 8004a2a:	9407      	str	r4, [sp, #28]
 8004a2c:	9406      	str	r4, [sp, #24]
 8004a2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a32:	9403      	str	r4, [sp, #12]
 8004a34:	9402      	str	r4, [sp, #8]
 8004a36:	9401      	str	r4, [sp, #4]
 8004a38:	4b8f      	ldr	r3, [pc, #572]	; (8004c78 <ui_populate_with_rom_data+0x2cc>)
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4653      	mov	r3, sl
 8004a3e:	462a      	mov	r2, r5
 8004a40:	498e      	ldr	r1, [pc, #568]	; (8004c7c <ui_populate_with_rom_data+0x2d0>)
 8004a42:	4640      	mov	r0, r8
 8004a44:	f7ff ff98 	bl	8004978 <build_menu>
		build_menu(&progTime,"SET TIME",			&progTemp,	NULL,			NULL,	&prog,	ui_set_time_callback,SET_OPTION_TIME,0.0,0,0);
 8004a48:	9407      	str	r4, [sp, #28]
 8004a4a:	9406      	str	r4, [sp, #24]
 8004a4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a50:	2301      	movs	r3, #1
 8004a52:	9303      	str	r3, [sp, #12]
 8004a54:	f8df a298 	ldr.w	sl, [pc, #664]	; 8004cf0 <ui_populate_with_rom_data+0x344>
 8004a58:	f8cd a008 	str.w	sl, [sp, #8]
 8004a5c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004a60:	9400      	str	r4, [sp, #0]
 8004a62:	4623      	mov	r3, r4
 8004a64:	4a86      	ldr	r2, [pc, #536]	; (8004c80 <ui_populate_with_rom_data+0x2d4>)
 8004a66:	4987      	ldr	r1, [pc, #540]	; (8004c84 <ui_populate_with_rom_data+0x2d8>)
 8004a68:	4883      	ldr	r0, [pc, #524]	; (8004c78 <ui_populate_with_rom_data+0x2cc>)
 8004a6a:	f7ff ff85 	bl	8004978 <build_menu>
		build_menu(&progTemp,"SET TEMP",			&progStart,	&progTime,NULL,	&prog,	ui_set_temp_callback,SET_OPTION_TEMP,0.0,0,0);
 8004a6e:	9407      	str	r4, [sp, #28]
 8004a70:	9406      	str	r4, [sp, #24]
 8004a72:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a76:	f8cd b00c 	str.w	fp, [sp, #12]
 8004a7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a7e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004a82:	9400      	str	r4, [sp, #0]
 8004a84:	4b7c      	ldr	r3, [pc, #496]	; (8004c78 <ui_populate_with_rom_data+0x2cc>)
 8004a86:	4a80      	ldr	r2, [pc, #512]	; (8004c88 <ui_populate_with_rom_data+0x2dc>)
 8004a88:	4977      	ldr	r1, [pc, #476]	; (8004c68 <ui_populate_with_rom_data+0x2bc>)
 8004a8a:	487d      	ldr	r0, [pc, #500]	; (8004c80 <ui_populate_with_rom_data+0x2d4>)
 8004a8c:	f7ff ff74 	bl	8004978 <build_menu>
		build_menu(&progStart,"START PROGRAM",NULL,				&progTemp,NULL,	&prog,	NULL,0,0.0,0,0);
 8004a90:	9407      	str	r4, [sp, #28]
 8004a92:	9406      	str	r4, [sp, #24]
 8004a94:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a98:	9403      	str	r4, [sp, #12]
 8004a9a:	9402      	str	r4, [sp, #8]
 8004a9c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004aa0:	9400      	str	r4, [sp, #0]
 8004aa2:	4b77      	ldr	r3, [pc, #476]	; (8004c80 <ui_populate_with_rom_data+0x2d4>)
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	4979      	ldr	r1, [pc, #484]	; (8004c8c <ui_populate_with_rom_data+0x2e0>)
 8004aa8:	4877      	ldr	r0, [pc, #476]	; (8004c88 <ui_populate_with_rom_data+0x2dc>)
 8004aaa:	f7ff ff65 	bl	8004978 <build_menu>
	build_menu(&seq,"SET SEQUANCE",			&mem,&prog,&seqTime1,NULL,NULL,0,0.0,0,0);
 8004aae:	9407      	str	r4, [sp, #28]
 8004ab0:	9406      	str	r4, [sp, #24]
 8004ab2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ab6:	9403      	str	r4, [sp, #12]
 8004ab8:	9402      	str	r4, [sp, #8]
 8004aba:	9401      	str	r4, [sp, #4]
 8004abc:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <ui_populate_with_rom_data+0x2e4>)
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	4a74      	ldr	r2, [pc, #464]	; (8004c94 <ui_populate_with_rom_data+0x2e8>)
 8004ac4:	4974      	ldr	r1, [pc, #464]	; (8004c98 <ui_populate_with_rom_data+0x2ec>)
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7ff ff56 	bl	8004978 <build_menu>
		build_menu(&seqTime1,"SET TIME1",&seqTemp1,NULL,		NULL,&seq,ui_set_time_callback,SET_OPTION_TIME,0.0,0,0);
 8004acc:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8004cf4 <ui_populate_with_rom_data+0x348>
 8004ad0:	9407      	str	r4, [sp, #28]
 8004ad2:	9406      	str	r4, [sp, #24]
 8004ad4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ad8:	2301      	movs	r3, #1
 8004ada:	9303      	str	r3, [sp, #12]
 8004adc:	f8cd a008 	str.w	sl, [sp, #8]
 8004ae0:	9501      	str	r5, [sp, #4]
 8004ae2:	9400      	str	r4, [sp, #0]
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	496c      	ldr	r1, [pc, #432]	; (8004c9c <ui_populate_with_rom_data+0x2f0>)
 8004aea:	4869      	ldr	r0, [pc, #420]	; (8004c90 <ui_populate_with_rom_data+0x2e4>)
 8004aec:	f7ff ff44 	bl	8004978 <build_menu>
		build_menu(&seqTemp1,"SET TEMP1",&seqTime2,&seqTime1,	NULL,&seq,ui_set_temp_callback,SET_OPTION_TEMP,0.0,0,0);
 8004af0:	9407      	str	r4, [sp, #28]
 8004af2:	9406      	str	r4, [sp, #24]
 8004af4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004af8:	f8cd b00c 	str.w	fp, [sp, #12]
 8004afc:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b00:	9501      	str	r5, [sp, #4]
 8004b02:	9400      	str	r4, [sp, #0]
 8004b04:	4b62      	ldr	r3, [pc, #392]	; (8004c90 <ui_populate_with_rom_data+0x2e4>)
 8004b06:	4a66      	ldr	r2, [pc, #408]	; (8004ca0 <ui_populate_with_rom_data+0x2f4>)
 8004b08:	4966      	ldr	r1, [pc, #408]	; (8004ca4 <ui_populate_with_rom_data+0x2f8>)
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f7ff ff34 	bl	8004978 <build_menu>
		build_menu(&seqTime2,"SET TIME2",&seqTemp2,&seqTemp1,	NULL,&seq,ui_set_time_callback,SET_OPTION_TIME,0.0,0,0);
 8004b10:	9407      	str	r4, [sp, #28]
 8004b12:	9406      	str	r4, [sp, #24]
 8004b14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	9303      	str	r3, [sp, #12]
 8004b1c:	f8cd a008 	str.w	sl, [sp, #8]
 8004b20:	9501      	str	r5, [sp, #4]
 8004b22:	9400      	str	r4, [sp, #0]
 8004b24:	4643      	mov	r3, r8
 8004b26:	4a60      	ldr	r2, [pc, #384]	; (8004ca8 <ui_populate_with_rom_data+0x2fc>)
 8004b28:	4960      	ldr	r1, [pc, #384]	; (8004cac <ui_populate_with_rom_data+0x300>)
 8004b2a:	485d      	ldr	r0, [pc, #372]	; (8004ca0 <ui_populate_with_rom_data+0x2f4>)
 8004b2c:	f7ff ff24 	bl	8004978 <build_menu>
		build_menu(&seqTemp2,"SET TEMP2",&seqTime3,&seqTime2,	NULL,&seq,ui_set_temp_callback,SET_OPTION_TEMP,0.0,0,0);
 8004b30:	9407      	str	r4, [sp, #28]
 8004b32:	9406      	str	r4, [sp, #24]
 8004b34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b38:	f8cd b00c 	str.w	fp, [sp, #12]
 8004b3c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b40:	9501      	str	r5, [sp, #4]
 8004b42:	9400      	str	r4, [sp, #0]
 8004b44:	4b56      	ldr	r3, [pc, #344]	; (8004ca0 <ui_populate_with_rom_data+0x2f4>)
 8004b46:	4a5a      	ldr	r2, [pc, #360]	; (8004cb0 <ui_populate_with_rom_data+0x304>)
 8004b48:	495a      	ldr	r1, [pc, #360]	; (8004cb4 <ui_populate_with_rom_data+0x308>)
 8004b4a:	4857      	ldr	r0, [pc, #348]	; (8004ca8 <ui_populate_with_rom_data+0x2fc>)
 8004b4c:	f7ff ff14 	bl	8004978 <build_menu>
		build_menu(&seqTime3,"SET TIME3",&seqTemp3,&seqTemp2,	NULL,&seq,ui_set_time_callback,SET_OPTION_TIME,0.0,0,0);
 8004b50:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004cf8 <ui_populate_with_rom_data+0x34c>
 8004b54:	9407      	str	r4, [sp, #28]
 8004b56:	9406      	str	r4, [sp, #24]
 8004b58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	9303      	str	r3, [sp, #12]
 8004b60:	f8cd a008 	str.w	sl, [sp, #8]
 8004b64:	9501      	str	r5, [sp, #4]
 8004b66:	9400      	str	r4, [sp, #0]
 8004b68:	4b4f      	ldr	r3, [pc, #316]	; (8004ca8 <ui_populate_with_rom_data+0x2fc>)
 8004b6a:	4642      	mov	r2, r8
 8004b6c:	4952      	ldr	r1, [pc, #328]	; (8004cb8 <ui_populate_with_rom_data+0x30c>)
 8004b6e:	4850      	ldr	r0, [pc, #320]	; (8004cb0 <ui_populate_with_rom_data+0x304>)
 8004b70:	f7ff ff02 	bl	8004978 <build_menu>
		build_menu(&seqTemp3,"SET TEMP3",&seqStart,&seqTime3,	NULL,&seq,ui_set_temp_callback,SET_OPTION_TEMP,0.0,0,0);
 8004b74:	f8df a184 	ldr.w	sl, [pc, #388]	; 8004cfc <ui_populate_with_rom_data+0x350>
 8004b78:	9407      	str	r4, [sp, #28]
 8004b7a:	9406      	str	r4, [sp, #24]
 8004b7c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b80:	f8cd b00c 	str.w	fp, [sp, #12]
 8004b84:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b88:	9501      	str	r5, [sp, #4]
 8004b8a:	9400      	str	r4, [sp, #0]
 8004b8c:	4b48      	ldr	r3, [pc, #288]	; (8004cb0 <ui_populate_with_rom_data+0x304>)
 8004b8e:	4652      	mov	r2, sl
 8004b90:	494a      	ldr	r1, [pc, #296]	; (8004cbc <ui_populate_with_rom_data+0x310>)
 8004b92:	4640      	mov	r0, r8
 8004b94:	f7ff fef0 	bl	8004978 <build_menu>
		build_menu(&seqStart,"START SEQUANCE",NULL,&seqTemp3,	NULL,&seq,NULL,0,0.0,0,0);
 8004b98:	9407      	str	r4, [sp, #28]
 8004b9a:	9406      	str	r4, [sp, #24]
 8004b9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ba0:	9403      	str	r4, [sp, #12]
 8004ba2:	9402      	str	r4, [sp, #8]
 8004ba4:	9501      	str	r5, [sp, #4]
 8004ba6:	9400      	str	r4, [sp, #0]
 8004ba8:	4643      	mov	r3, r8
 8004baa:	4622      	mov	r2, r4
 8004bac:	4944      	ldr	r1, [pc, #272]	; (8004cc0 <ui_populate_with_rom_data+0x314>)
 8004bae:	4650      	mov	r0, sl
 8004bb0:	f7ff fee2 	bl	8004978 <build_menu>
	build_menu(&mem,"PROGRAM MEM",	&params,&seq,&mem1,NULL,	NULL,0,0.0,0,0);
 8004bb4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8004d00 <ui_populate_with_rom_data+0x354>
 8004bb8:	9407      	str	r4, [sp, #28]
 8004bba:	9406      	str	r4, [sp, #24]
 8004bbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bc0:	9403      	str	r4, [sp, #12]
 8004bc2:	9402      	str	r4, [sp, #8]
 8004bc4:	9401      	str	r4, [sp, #4]
 8004bc6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8004d04 <ui_populate_with_rom_data+0x358>
 8004bca:	f8cd 9000 	str.w	r9, [sp]
 8004bce:	462b      	mov	r3, r5
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	493c      	ldr	r1, [pc, #240]	; (8004cc4 <ui_populate_with_rom_data+0x318>)
 8004bd4:	482f      	ldr	r0, [pc, #188]	; (8004c94 <ui_populate_with_rom_data+0x2e8>)
 8004bd6:	f7ff fecf 	bl	8004978 <build_menu>
		build_menu(&mem1,"PROGRAM MEM1",&mem2,NULL,&mem1Time,	&mem,NULL,0,0.0,0,0);
 8004bda:	4d3b      	ldr	r5, [pc, #236]	; (8004cc8 <ui_populate_with_rom_data+0x31c>)
 8004bdc:	9407      	str	r4, [sp, #28]
 8004bde:	9406      	str	r4, [sp, #24]
 8004be0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004be4:	9403      	str	r4, [sp, #12]
 8004be6:	9402      	str	r4, [sp, #8]
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <ui_populate_with_rom_data+0x2e8>)
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	f8df a118 	ldr.w	sl, [pc, #280]	; 8004d08 <ui_populate_with_rom_data+0x35c>
 8004bf0:	f8cd a000 	str.w	sl, [sp]
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	462a      	mov	r2, r5
 8004bf8:	4934      	ldr	r1, [pc, #208]	; (8004ccc <ui_populate_with_rom_data+0x320>)
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	f7ff febc 	bl	8004978 <build_menu>
			build_menu(&mem1Time,"TIME MEM1",		&mem1Temp, NULL,		 NULL,&mem1,NULL,SET_OPTION_TIME,0.0,0,0);
 8004c00:	9407      	str	r4, [sp, #28]
 8004c02:	9406      	str	r4, [sp, #24]
 8004c04:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	9203      	str	r2, [sp, #12]
 8004c0c:	9402      	str	r4, [sp, #8]
 8004c0e:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c12:	9400      	str	r4, [sp, #0]
 8004c14:	4623      	mov	r3, r4
 8004c16:	4a2e      	ldr	r2, [pc, #184]	; (8004cd0 <ui_populate_with_rom_data+0x324>)
 8004c18:	492e      	ldr	r1, [pc, #184]	; (8004cd4 <ui_populate_with_rom_data+0x328>)
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f7ff feac 	bl	8004978 <build_menu>
			build_menu(&mem1Temp,"TEMP MEM1",		&mem1Start,&mem1Time,NULL,&mem1,NULL,SET_OPTION_TEMP,0.0,0,0);
 8004c20:	9407      	str	r4, [sp, #28]
 8004c22:	9406      	str	r4, [sp, #24]
 8004c24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c28:	f8cd b00c 	str.w	fp, [sp, #12]
 8004c2c:	9402      	str	r4, [sp, #8]
 8004c2e:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c32:	9400      	str	r4, [sp, #0]
 8004c34:	4653      	mov	r3, sl
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <ui_populate_with_rom_data+0x32c>)
 8004c38:	4928      	ldr	r1, [pc, #160]	; (8004cdc <ui_populate_with_rom_data+0x330>)
 8004c3a:	4825      	ldr	r0, [pc, #148]	; (8004cd0 <ui_populate_with_rom_data+0x324>)
 8004c3c:	f7ff fe9c 	bl	8004978 <build_menu>
			build_menu(&mem1Start,"START MEM1",	NULL,			 &mem1Temp,NULL,&mem1,NULL,0,0.0,0,0);
 8004c40:	9407      	str	r4, [sp, #28]
 8004c42:	9406      	str	r4, [sp, #24]
 8004c44:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c48:	9403      	str	r4, [sp, #12]
 8004c4a:	9402      	str	r4, [sp, #8]
 8004c4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c50:	9400      	str	r4, [sp, #0]
 8004c52:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <ui_populate_with_rom_data+0x324>)
 8004c54:	4622      	mov	r2, r4
 8004c56:	4922      	ldr	r1, [pc, #136]	; (8004ce0 <ui_populate_with_rom_data+0x334>)
 8004c58:	e058      	b.n	8004d0c <ui_populate_with_rom_data+0x360>
 8004c5a:	bf00      	nop
 8004c5c:	200007f8 	.word	0x200007f8
 8004c60:	0800674c 	.word	0x0800674c
 8004c64:	20000860 	.word	0x20000860
 8004c68:	08006754 	.word	0x08006754
 8004c6c:	08004301 	.word	0x08004301
 8004c70:	08006760 	.word	0x08006760
 8004c74:	20000b78 	.word	0x20000b78
 8004c78:	20000920 	.word	0x20000920
 8004c7c:	0800676c 	.word	0x0800676c
 8004c80:	20000828 	.word	0x20000828
 8004c84:	08006778 	.word	0x08006778
 8004c88:	200009b0 	.word	0x200009b0
 8004c8c:	08006784 	.word	0x08006784
 8004c90:	20000bd8 	.word	0x20000bd8
 8004c94:	20000a70 	.word	0x20000a70
 8004c98:	08006794 	.word	0x08006794
 8004c9c:	080067a4 	.word	0x080067a4
 8004ca0:	20000c38 	.word	0x20000c38
 8004ca4:	080067b0 	.word	0x080067b0
 8004ca8:	200009e0 	.word	0x200009e0
 8004cac:	080067bc 	.word	0x080067bc
 8004cb0:	200007c8 	.word	0x200007c8
 8004cb4:	080067c8 	.word	0x080067c8
 8004cb8:	080067d4 	.word	0x080067d4
 8004cbc:	080067e0 	.word	0x080067e0
 8004cc0:	080067ec 	.word	0x080067ec
 8004cc4:	080067fc 	.word	0x080067fc
 8004cc8:	20000980 	.word	0x20000980
 8004ccc:	08006808 	.word	0x08006808
 8004cd0:	20000a10 	.word	0x20000a10
 8004cd4:	08006818 	.word	0x08006818
 8004cd8:	20000dc0 	.word	0x20000dc0
 8004cdc:	08006824 	.word	0x08006824
 8004ce0:	08006830 	.word	0x08006830
 8004ce4:	20000790 	.word	0x20000790
 8004ce8:	20000c98 	.word	0x20000c98
 8004cec:	08004501 	.word	0x08004501
 8004cf0:	080044ed 	.word	0x080044ed
 8004cf4:	20000650 	.word	0x20000650
 8004cf8:	20000d90 	.word	0x20000d90
 8004cfc:	20000b08 	.word	0x20000b08
 8004d00:	200005d8 	.word	0x200005d8
 8004d04:	20000aa8 	.word	0x20000aa8
 8004d08:	200008c0 	.word	0x200008c0
 8004d0c:	4885      	ldr	r0, [pc, #532]	; (8004f24 <ui_populate_with_rom_data+0x578>)
 8004d0e:	f7ff fe33 	bl	8004978 <build_menu>
		build_menu(&mem2,"PROGRAM MEM2",&mem3,&mem1,&mem2Time,&mem,NULL,0,0.0,0,0);
 8004d12:	f8df a270 	ldr.w	sl, [pc, #624]	; 8004f84 <ui_populate_with_rom_data+0x5d8>
 8004d16:	9407      	str	r4, [sp, #28]
 8004d18:	9406      	str	r4, [sp, #24]
 8004d1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d1e:	9403      	str	r4, [sp, #12]
 8004d20:	9402      	str	r4, [sp, #8]
 8004d22:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <ui_populate_with_rom_data+0x57c>)
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	4a81      	ldr	r2, [pc, #516]	; (8004f2c <ui_populate_with_rom_data+0x580>)
 8004d28:	9200      	str	r2, [sp, #0]
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	4980      	ldr	r1, [pc, #512]	; (8004f30 <ui_populate_with_rom_data+0x584>)
 8004d30:	4628      	mov	r0, r5
 8004d32:	f7ff fe21 	bl	8004978 <build_menu>
			build_menu(&mem2Time,"TIME MEM2",  &mem2Temp, NULL,			NULL,&mem2,NULL,SET_OPTION_TIME,0.0,0,0);
 8004d36:	f8df 9250 	ldr.w	r9, [pc, #592]	; 8004f88 <ui_populate_with_rom_data+0x5dc>
 8004d3a:	9407      	str	r4, [sp, #28]
 8004d3c:	9406      	str	r4, [sp, #24]
 8004d3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d42:	2201      	movs	r2, #1
 8004d44:	9203      	str	r2, [sp, #12]
 8004d46:	9402      	str	r4, [sp, #8]
 8004d48:	9501      	str	r5, [sp, #4]
 8004d4a:	9400      	str	r4, [sp, #0]
 8004d4c:	4623      	mov	r3, r4
 8004d4e:	464a      	mov	r2, r9
 8004d50:	4978      	ldr	r1, [pc, #480]	; (8004f34 <ui_populate_with_rom_data+0x588>)
 8004d52:	4876      	ldr	r0, [pc, #472]	; (8004f2c <ui_populate_with_rom_data+0x580>)
 8004d54:	f7ff fe10 	bl	8004978 <build_menu>
			build_menu(&mem2Temp,"TEMP MEM2",	 &mem2Start,&mem2Time,NULL,&mem2,NULL,SET_OPTION_TEMP,0.0,0,0);
 8004d58:	9407      	str	r4, [sp, #28]
 8004d5a:	9406      	str	r4, [sp, #24]
 8004d5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d60:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d64:	9402      	str	r4, [sp, #8]
 8004d66:	9501      	str	r5, [sp, #4]
 8004d68:	9400      	str	r4, [sp, #0]
 8004d6a:	4b70      	ldr	r3, [pc, #448]	; (8004f2c <ui_populate_with_rom_data+0x580>)
 8004d6c:	4a72      	ldr	r2, [pc, #456]	; (8004f38 <ui_populate_with_rom_data+0x58c>)
 8004d6e:	4973      	ldr	r1, [pc, #460]	; (8004f3c <ui_populate_with_rom_data+0x590>)
 8004d70:	4648      	mov	r0, r9
 8004d72:	f7ff fe01 	bl	8004978 <build_menu>
			build_menu(&mem2Start,"START MEM2",NULL,			&mem2Temp,NULL,&mem2,NULL,0,0.0,0,0);
 8004d76:	9407      	str	r4, [sp, #28]
 8004d78:	9406      	str	r4, [sp, #24]
 8004d7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d7e:	9403      	str	r4, [sp, #12]
 8004d80:	9402      	str	r4, [sp, #8]
 8004d82:	9501      	str	r5, [sp, #4]
 8004d84:	9400      	str	r4, [sp, #0]
 8004d86:	464b      	mov	r3, r9
 8004d88:	4622      	mov	r2, r4
 8004d8a:	496d      	ldr	r1, [pc, #436]	; (8004f40 <ui_populate_with_rom_data+0x594>)
 8004d8c:	486a      	ldr	r0, [pc, #424]	; (8004f38 <ui_populate_with_rom_data+0x58c>)
 8004d8e:	f7ff fdf3 	bl	8004978 <build_menu>
		build_menu(&mem3,"PROGRAM MEM3",NULL,&mem2,&mem3Time,&mem,NULL,0,0.0,0,0);
 8004d92:	9407      	str	r4, [sp, #28]
 8004d94:	9406      	str	r4, [sp, #24]
 8004d96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d9a:	9403      	str	r4, [sp, #12]
 8004d9c:	9402      	str	r4, [sp, #8]
 8004d9e:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <ui_populate_with_rom_data+0x57c>)
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8004f8c <ui_populate_with_rom_data+0x5e0>
 8004da6:	f8cd 9000 	str.w	r9, [sp]
 8004daa:	462b      	mov	r3, r5
 8004dac:	4622      	mov	r2, r4
 8004dae:	4965      	ldr	r1, [pc, #404]	; (8004f44 <ui_populate_with_rom_data+0x598>)
 8004db0:	4650      	mov	r0, sl
 8004db2:	f7ff fde1 	bl	8004978 <build_menu>
			build_menu(&mem3Time,"TIME MEM3",		&mem3Temp,	NULL,			NULL,	&mem3,NULL,SET_OPTION_TIME,0.0,0,0);
 8004db6:	4d64      	ldr	r5, [pc, #400]	; (8004f48 <ui_populate_with_rom_data+0x59c>)
 8004db8:	9407      	str	r4, [sp, #28]
 8004dba:	9406      	str	r4, [sp, #24]
 8004dbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	9402      	str	r4, [sp, #8]
 8004dc6:	f8cd a004 	str.w	sl, [sp, #4]
 8004dca:	9400      	str	r4, [sp, #0]
 8004dcc:	4623      	mov	r3, r4
 8004dce:	462a      	mov	r2, r5
 8004dd0:	495e      	ldr	r1, [pc, #376]	; (8004f4c <ui_populate_with_rom_data+0x5a0>)
 8004dd2:	4648      	mov	r0, r9
 8004dd4:	f7ff fdd0 	bl	8004978 <build_menu>
			build_menu(&mem3Temp,"TEMP MEM3",		&mem3Start,	&mem3Time,NULL,	&mem3,NULL,SET_OPTION_TEMP,0.0,0,0);
 8004dd8:	9407      	str	r4, [sp, #28]
 8004dda:	9406      	str	r4, [sp, #24]
 8004ddc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004de0:	f8cd b00c 	str.w	fp, [sp, #12]
 8004de4:	9402      	str	r4, [sp, #8]
 8004de6:	f8cd a004 	str.w	sl, [sp, #4]
 8004dea:	9400      	str	r4, [sp, #0]
 8004dec:	464b      	mov	r3, r9
 8004dee:	4a58      	ldr	r2, [pc, #352]	; (8004f50 <ui_populate_with_rom_data+0x5a4>)
 8004df0:	4958      	ldr	r1, [pc, #352]	; (8004f54 <ui_populate_with_rom_data+0x5a8>)
 8004df2:	4628      	mov	r0, r5
 8004df4:	f7ff fdc0 	bl	8004978 <build_menu>
			build_menu(&mem3Start,"START MEM3",	NULL,				&mem3Temp,NULL,	&mem3,NULL,0,0.0,0,0);
 8004df8:	9407      	str	r4, [sp, #28]
 8004dfa:	9406      	str	r4, [sp, #24]
 8004dfc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e00:	9403      	str	r4, [sp, #12]
 8004e02:	9402      	str	r4, [sp, #8]
 8004e04:	f8cd a004 	str.w	sl, [sp, #4]
 8004e08:	9400      	str	r4, [sp, #0]
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	4952      	ldr	r1, [pc, #328]	; (8004f58 <ui_populate_with_rom_data+0x5ac>)
 8004e10:	484f      	ldr	r0, [pc, #316]	; (8004f50 <ui_populate_with_rom_data+0x5a4>)
 8004e12:	f7ff fdb1 	bl	8004978 <build_menu>
	build_menu(&params,"PARAMETERS",	NULL,&mem,&paramsAnalog,NULL,NULL,0,0.0,0,0);
 8004e16:	9407      	str	r4, [sp, #28]
 8004e18:	9406      	str	r4, [sp, #24]
 8004e1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e1e:	9403      	str	r4, [sp, #12]
 8004e20:	9402      	str	r4, [sp, #8]
 8004e22:	9401      	str	r4, [sp, #4]
 8004e24:	f8df a168 	ldr.w	sl, [pc, #360]	; 8004f90 <ui_populate_with_rom_data+0x5e4>
 8004e28:	f8cd a000 	str.w	sl, [sp]
 8004e2c:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <ui_populate_with_rom_data+0x57c>)
 8004e2e:	4622      	mov	r2, r4
 8004e30:	494a      	ldr	r1, [pc, #296]	; (8004f5c <ui_populate_with_rom_data+0x5b0>)
 8004e32:	4640      	mov	r0, r8
 8004e34:	f7ff fda0 	bl	8004978 <build_menu>
		build_menu(&paramsAnalog,"ANALOG SENSOR",			&paramsDigital,	NULL,						NULL,	&params,NULL,0,0.0,0,0);
 8004e38:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8004f94 <ui_populate_with_rom_data+0x5e8>
 8004e3c:	9407      	str	r4, [sp, #28]
 8004e3e:	9406      	str	r4, [sp, #24]
 8004e40:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e44:	9403      	str	r4, [sp, #12]
 8004e46:	9402      	str	r4, [sp, #8]
 8004e48:	f8cd 8004 	str.w	r8, [sp, #4]
 8004e4c:	9400      	str	r4, [sp, #0]
 8004e4e:	4623      	mov	r3, r4
 8004e50:	464a      	mov	r2, r9
 8004e52:	4943      	ldr	r1, [pc, #268]	; (8004f60 <ui_populate_with_rom_data+0x5b4>)
 8004e54:	4650      	mov	r0, sl
 8004e56:	f7ff fd8f 	bl	8004978 <build_menu>
		build_menu(&paramsDigital,"DIGITAL SENSOR",		&paramsPS,			&paramsAnalog,	NULL,	&params,NULL,0,0.0,0,0);
 8004e5a:	4d42      	ldr	r5, [pc, #264]	; (8004f64 <ui_populate_with_rom_data+0x5b8>)
 8004e5c:	9407      	str	r4, [sp, #28]
 8004e5e:	9406      	str	r4, [sp, #24]
 8004e60:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e64:	9403      	str	r4, [sp, #12]
 8004e66:	9402      	str	r4, [sp, #8]
 8004e68:	f8cd 8004 	str.w	r8, [sp, #4]
 8004e6c:	9400      	str	r4, [sp, #0]
 8004e6e:	4653      	mov	r3, sl
 8004e70:	462a      	mov	r2, r5
 8004e72:	493d      	ldr	r1, [pc, #244]	; (8004f68 <ui_populate_with_rom_data+0x5bc>)
 8004e74:	4648      	mov	r0, r9
 8004e76:	f7ff fd7f 	bl	8004978 <build_menu>
		build_menu(&paramsPS,"PRIMARY SENSOR",				&paramsHumidity,&paramsDigital,	NULL,	&params,NULL,0,0.0,0,0);
 8004e7a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8004f98 <ui_populate_with_rom_data+0x5ec>
 8004e7e:	9407      	str	r4, [sp, #28]
 8004e80:	9406      	str	r4, [sp, #24]
 8004e82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e86:	9403      	str	r4, [sp, #12]
 8004e88:	9402      	str	r4, [sp, #8]
 8004e8a:	f8cd 8004 	str.w	r8, [sp, #4]
 8004e8e:	9400      	str	r4, [sp, #0]
 8004e90:	464b      	mov	r3, r9
 8004e92:	4652      	mov	r2, sl
 8004e94:	4935      	ldr	r1, [pc, #212]	; (8004f6c <ui_populate_with_rom_data+0x5c0>)
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7ff fd6e 	bl	8004978 <build_menu>
		build_menu(&paramsHumidity,"HUMIDITY SENSOR",	&paramsPressure,&paramsPS,			NULL,	&params,NULL,0,0.0,0,0);
 8004e9c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8004f9c <ui_populate_with_rom_data+0x5f0>
 8004ea0:	9407      	str	r4, [sp, #28]
 8004ea2:	9406      	str	r4, [sp, #24]
 8004ea4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ea8:	9403      	str	r4, [sp, #12]
 8004eaa:	9402      	str	r4, [sp, #8]
 8004eac:	f8cd 8004 	str.w	r8, [sp, #4]
 8004eb0:	9400      	str	r4, [sp, #0]
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	492e      	ldr	r1, [pc, #184]	; (8004f70 <ui_populate_with_rom_data+0x5c4>)
 8004eb8:	4650      	mov	r0, sl
 8004eba:	f7ff fd5d 	bl	8004978 <build_menu>
		build_menu(&paramsPressure,"PRESSURE SENSOR",	&paramsMat,			&paramsHumidity,NULL,	&params,NULL,0,0.0,0,0);
 8004ebe:	4d2d      	ldr	r5, [pc, #180]	; (8004f74 <ui_populate_with_rom_data+0x5c8>)
 8004ec0:	9407      	str	r4, [sp, #28]
 8004ec2:	9406      	str	r4, [sp, #24]
 8004ec4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ec8:	9403      	str	r4, [sp, #12]
 8004eca:	9402      	str	r4, [sp, #8]
 8004ecc:	f8cd 8004 	str.w	r8, [sp, #4]
 8004ed0:	9400      	str	r4, [sp, #0]
 8004ed2:	4653      	mov	r3, sl
 8004ed4:	462a      	mov	r2, r5
 8004ed6:	4928      	ldr	r1, [pc, #160]	; (8004f78 <ui_populate_with_rom_data+0x5cc>)
 8004ed8:	4648      	mov	r0, r9
 8004eda:	f7ff fd4d 	bl	8004978 <build_menu>
		build_menu(&paramsMat,"MAT POWER",						&paramsFan,			&paramsPressure,NULL,	&params,NULL,0,0.0,0,0);
 8004ede:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004fa0 <ui_populate_with_rom_data+0x5f4>
 8004ee2:	9407      	str	r4, [sp, #28]
 8004ee4:	9406      	str	r4, [sp, #24]
 8004ee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004eea:	9403      	str	r4, [sp, #12]
 8004eec:	9402      	str	r4, [sp, #8]
 8004eee:	f8cd 8004 	str.w	r8, [sp, #4]
 8004ef2:	9400      	str	r4, [sp, #0]
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	4652      	mov	r2, sl
 8004ef8:	4920      	ldr	r1, [pc, #128]	; (8004f7c <ui_populate_with_rom_data+0x5d0>)
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7ff fd3c 	bl	8004978 <build_menu>
		build_menu(&paramsFan,"FAN",									NULL,						&paramsMat,			NULL,	&params,NULL,0,0.0,0,0);
 8004f00:	9407      	str	r4, [sp, #28]
 8004f02:	9406      	str	r4, [sp, #24]
 8004f04:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f08:	9403      	str	r4, [sp, #12]
 8004f0a:	9402      	str	r4, [sp, #8]
 8004f0c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f10:	9400      	str	r4, [sp, #0]
 8004f12:	462b      	mov	r3, r5
 8004f14:	4622      	mov	r2, r4
 8004f16:	491a      	ldr	r1, [pc, #104]	; (8004f80 <ui_populate_with_rom_data+0x5d4>)
 8004f18:	4650      	mov	r0, sl
 8004f1a:	f7ff fd2d 	bl	8004978 <build_menu>
	mem2_temp.temp = rom_get_temp(2);
	mem3_temp.temp = rom_get_temp(3);

*/

}
 8004f1e:	b009      	add	sp, #36	; 0x24
 8004f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f24:	20000dc0 	.word	0x20000dc0
 8004f28:	20000a70 	.word	0x20000a70
 8004f2c:	20000950 	.word	0x20000950
 8004f30:	0800683c 	.word	0x0800683c
 8004f34:	0800684c 	.word	0x0800684c
 8004f38:	20000d28 	.word	0x20000d28
 8004f3c:	08006858 	.word	0x08006858
 8004f40:	08006864 	.word	0x08006864
 8004f44:	08006870 	.word	0x08006870
 8004f48:	20000ad8 	.word	0x20000ad8
 8004f4c:	08006880 	.word	0x08006880
 8004f50:	200005a8 	.word	0x200005a8
 8004f54:	0800688c 	.word	0x0800688c
 8004f58:	08006898 	.word	0x08006898
 8004f5c:	080068a4 	.word	0x080068a4
 8004f60:	080068b0 	.word	0x080068b0
 8004f64:	20000cf8 	.word	0x20000cf8
 8004f68:	080068c0 	.word	0x080068c0
 8004f6c:	080068d0 	.word	0x080068d0
 8004f70:	080068e0 	.word	0x080068e0
 8004f74:	20000c08 	.word	0x20000c08
 8004f78:	080068f0 	.word	0x080068f0
 8004f7c:	08006900 	.word	0x08006900
 8004f80:	0800690c 	.word	0x0800690c
 8004f84:	20000d58 	.word	0x20000d58
 8004f88:	20000a40 	.word	0x20000a40
 8004f8c:	20000df0 	.word	0x20000df0
 8004f90:	200008f0 	.word	0x200008f0
 8004f94:	20000730 	.word	0x20000730
 8004f98:	20000cc8 	.word	0x20000cc8
 8004f9c:	20000c68 	.word	0x20000c68
 8004fa0:	20000ba8 	.word	0x20000ba8

08004fa4 <ui_get_primary_temperature>:

float ui_get_primary_temperature(void)
{
 8004fa4:	b508      	push	{r3, lr}
	return (float)(ds18b20_get_scratchpad_temperature(0,0)*0.0625f);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	f7fe fc47 	bl	800383c <ds18b20_get_scratchpad_temperature>
 8004fae:	f7fb fe4f 	bl	8000c50 <__aeabi_i2f>
 8004fb2:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8004fb6:	f7fb fe9f 	bl	8000cf8 <__aeabi_fmul>
}
 8004fba:	bd08      	pop	{r3, pc}

08004fbc <ui_get_set_point_temperature>:


float ui_get_set_point_temperature(void)
{
 8004fbc:	b508      	push	{r3, lr}
	return (float)(currentPointer->temp);
 8004fbe:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <ui_get_set_point_temperature+0x10>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004fc6:	f7fb fd39 	bl	8000a3c <__aeabi_d2f>
}
 8004fca:	bd08      	pop	{r3, pc}
 8004fcc:	20000018 	.word	0x20000018

08004fd0 <set_point_display>:
 */
e_ih_state set_point_display()
{

	return ih_state_heating_setpoit_display;
}
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	4770      	bx	lr

08004fd4 <exit_confirmation_display>:
 * [R][T][[][2][5][.][6][o][C][]][ ][W][W][W][W][W][W][W][W][ ]
 */
e_ih_state exit_confirmation_display()
{
	return ih_state_exit_confirmation_display;
}
 8004fd4:	2002      	movs	r0, #2
 8004fd6:	4770      	bx	lr

08004fd8 <exit_ih_display>:

e_ih_state exit_ih_display()
{
	return ih_state_exit;
}
 8004fd8:	2003      	movs	r0, #3
 8004fda:	4770      	bx	lr

08004fdc <near_temp_display>:
 * [d][T][[][+][1][.][0][5][o][C][]][ ][|][|][|][|][|][|][|][ ]
 */
e_ih_state near_temp_display()
{
	return ih_state_near_temp_display;
}
 8004fdc:	2004      	movs	r0, #4
 8004fde:	4770      	bx	lr

08004fe0 <progress_bar_display>:
{
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	b086      	sub	sp, #24
  float current_temp = ui_get_primary_temperature();
 8004fe4:	f7ff ffde 	bl	8004fa4 <ui_get_primary_temperature>
 8004fe8:	4605      	mov	r5, r0
  float setpoint = ui_get_set_point_temperature();
 8004fea:	f7ff ffe7 	bl	8004fbc <ui_get_set_point_temperature>
  float differance = setpoint - current_temp;
 8004fee:	4629      	mov	r1, r5
 8004ff0:	f7fb fd78 	bl	8000ae4 <__aeabi_fsub>
  float accuracy = differance/PROGRES_BAR_RESOLUTION ;
 8004ff4:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8004ff8:	f7fb fe7e 	bl	8000cf8 <__aeabi_fmul>
 8004ffc:	4606      	mov	r6, r0
  lcd_buf_go_to(0,1);
 8004ffe:	2101      	movs	r1, #1
 8005000:	2000      	movs	r0, #0
 8005002:	f7fe ff99 	bl	8003f38 <lcd_buf_go_to>
  lcd_buf_write_text(&ACTUAL_TEMP[0]);
 8005006:	4819      	ldr	r0, [pc, #100]	; (800506c <progress_bar_display+0x8c>)
 8005008:	f7fe ffcc 	bl	8003fa4 <lcd_buf_write_text>
  ntc_convert_float_to_string(&str_table[0], (double)current_temp ); // TODO zmienić na primary sensor flaot
 800500c:	4628      	mov	r0, r5
 800500e:	f7fb fa03 	bl	8000418 <__aeabi_f2d>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	a801      	add	r0, sp, #4
 8005018:	f7ff f904 	bl	8004224 <ntc_convert_float_to_string>
  lcd_buf_write_text((char*)&str_table[0]);
 800501c:	a801      	add	r0, sp, #4
 800501e:	f7fe ffc1 	bl	8003fa4 <lcd_buf_write_text>
  lcd_char(CELCIUS_CHAR);
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <progress_bar_display+0x90>)
 8005024:	7818      	ldrb	r0, [r3, #0]
 8005026:	f7fe ff91 	bl	8003f4c <lcd_char>
  lcd_buf_write_text(&END_OF_TEMP[0]);
 800502a:	4812      	ldr	r0, [pc, #72]	; (8005074 <progress_bar_display+0x94>)
 800502c:	f7fe ffba 	bl	8003fa4 <lcd_buf_write_text>
  for(uint8_t i =0 ; i < PROGRES_BAR_RESOLUTION ; i++)
 8005030:	2400      	movs	r4, #0
 8005032:	e004      	b.n	800503e <progress_bar_display+0x5e>
      lcd_char(0x00);
 8005034:	2000      	movs	r0, #0
 8005036:	f7fe ff89 	bl	8003f4c <lcd_char>
  for(uint8_t i =0 ; i < PROGRES_BAR_RESOLUTION ; i++)
 800503a:	3401      	adds	r4, #1
 800503c:	b2e4      	uxtb	r4, r4
 800503e:	2c07      	cmp	r4, #7
 8005040:	d80e      	bhi.n	8005060 <progress_bar_display+0x80>
    if((accuracy * i) >= current_temp)
 8005042:	4620      	mov	r0, r4
 8005044:	f7fb fe04 	bl	8000c50 <__aeabi_i2f>
 8005048:	4631      	mov	r1, r6
 800504a:	f7fb fe55 	bl	8000cf8 <__aeabi_fmul>
 800504e:	4629      	mov	r1, r5
 8005050:	f7fc f804 	bl	800105c <__aeabi_fcmpge>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0ed      	beq.n	8005034 <progress_bar_display+0x54>
      lcd_char(0xff);
 8005058:	20ff      	movs	r0, #255	; 0xff
 800505a:	f7fe ff77 	bl	8003f4c <lcd_char>
 800505e:	e7ec      	b.n	800503a <progress_bar_display+0x5a>
  lcd_char(' ');
 8005060:	2020      	movs	r0, #32
 8005062:	f7fe ff73 	bl	8003f4c <lcd_char>
}
 8005066:	b006      	add	sp, #24
 8005068:	bd70      	pop	{r4, r5, r6, pc}
 800506a:	bf00      	nop
 800506c:	2000001c 	.word	0x2000001c
 8005070:	20000020 	.word	0x20000020
 8005074:	20000024 	.word	0x20000024

08005078 <heating_display>:
{
 8005078:	b510      	push	{r4, lr}
  lcd_buf_clear();
 800507a:	f7fe ff7d 	bl	8003f78 <lcd_buf_clear>
  lcd_buf_go_to(0,0);
 800507e:	2100      	movs	r1, #0
 8005080:	4608      	mov	r0, r1
 8005082:	f7fe ff59 	bl	8003f38 <lcd_buf_go_to>
  lcd_buf_write_text(&HEATING[0]);
 8005086:	480d      	ldr	r0, [pc, #52]	; (80050bc <heating_display+0x44>)
 8005088:	f7fe ff8c 	bl	8003fa4 <lcd_buf_write_text>
  for(uint8_t i=0;i<callback_counter_mod4;i++)
 800508c:	2400      	movs	r4, #0
 800508e:	e004      	b.n	800509a <heating_display+0x22>
	lcd_char('.');
 8005090:	202e      	movs	r0, #46	; 0x2e
 8005092:	f7fe ff5b 	bl	8003f4c <lcd_char>
  for(uint8_t i=0;i<callback_counter_mod4;i++)
 8005096:	3401      	adds	r4, #1
 8005098:	b2e4      	uxtb	r4, r4
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <heating_display+0x48>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	42a3      	cmp	r3, r4
 80050a0:	d8f6      	bhi.n	8005090 <heating_display+0x18>
  if(callback_counter_mod4++ >= 3) callback_counter_mod4 =0;
 80050a2:	1c59      	adds	r1, r3, #1
 80050a4:	4a06      	ldr	r2, [pc, #24]	; (80050c0 <heating_display+0x48>)
 80050a6:	7011      	strb	r1, [r2, #0]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d902      	bls.n	80050b2 <heating_display+0x3a>
 80050ac:	4613      	mov	r3, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
  progress_bar_display();
 80050b2:	f7ff ff95 	bl	8004fe0 <progress_bar_display>
}
 80050b6:	2000      	movs	r0, #0
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	bf00      	nop
 80050bc:	20000028 	.word	0x20000028
 80050c0:	2000054f 	.word	0x2000054f

080050c4 <infinite_heater_handler>:
		{ih_state_near_temp_display,ih_event_temp_far,heating_display},
};


void infinite_heater_handler(e_ih_event event)
{
 80050c4:	b508      	push	{r3, lr}
	static e_ih_state actual_state = ih_state_heating_display;
	if( (actual_state < ih_state_last) && (event < ih_event_last) && (as_ih_state_machine[actual_state].state_machine_event == event) && (as_ih_state_machine[actual_state].state_machine_event_handler != NULL))
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <infinite_heater_handler+0x30>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d807      	bhi.n	80050de <infinite_heater_handler+0x1a>
 80050ce:	2808      	cmp	r0, #8
 80050d0:	d805      	bhi.n	80050de <infinite_heater_handler+0x1a>
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <infinite_heater_handler+0x34>)
 80050d4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80050d8:	7852      	ldrb	r2, [r2, #1]
 80050da:	4282      	cmp	r2, r0
 80050dc:	d000      	beq.n	80050e0 <infinite_heater_handler+0x1c>
	{
		actual_state = (*as_ih_state_machine[actual_state].state_machine_event_handler)();
	}
}
 80050de:	bd08      	pop	{r3, pc}
	if( (actual_state < ih_state_last) && (event < ih_event_last) && (as_ih_state_machine[actual_state].state_machine_event == event) && (as_ih_state_machine[actual_state].state_machine_event_handler != NULL))
 80050e0:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <infinite_heater_handler+0x34>)
 80050e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f8      	beq.n	80050de <infinite_heater_handler+0x1a>
		actual_state = (*as_ih_state_machine[actual_state].state_machine_event_handler)();
 80050ec:	4798      	blx	r3
 80050ee:	4b01      	ldr	r3, [pc, #4]	; (80050f4 <infinite_heater_handler+0x30>)
 80050f0:	7018      	strb	r0, [r3, #0]
}
 80050f2:	e7f4      	b.n	80050de <infinite_heater_handler+0x1a>
 80050f4:	2000054e 	.word	0x2000054e
 80050f8:	20000030 	.word	0x20000030

080050fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005100:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005102:	2400      	movs	r4, #0
 8005104:	9404      	str	r4, [sp, #16]
 8005106:	9405      	str	r4, [sp, #20]
 8005108:	9406      	str	r4, [sp, #24]
 800510a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800510c:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <MX_GPIO_Init+0x10c>)
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	f042 0210 	orr.w	r2, r2, #16
 8005114:	619a      	str	r2, [r3, #24]
 8005116:	699a      	ldr	r2, [r3, #24]
 8005118:	f002 0210 	and.w	r2, r2, #16
 800511c:	9200      	str	r2, [sp, #0]
 800511e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	f042 0220 	orr.w	r2, r2, #32
 8005126:	619a      	str	r2, [r3, #24]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	f002 0220 	and.w	r2, r2, #32
 800512e:	9201      	str	r2, [sp, #4]
 8005130:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	f042 0204 	orr.w	r2, r2, #4
 8005138:	619a      	str	r2, [r3, #24]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	f002 0204 	and.w	r2, r2, #4
 8005140:	9202      	str	r2, [sp, #8]
 8005142:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	f042 0208 	orr.w	r2, r2, #8
 800514a:	619a      	str	r2, [r3, #24]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 8005156:	4e2d      	ldr	r6, [pc, #180]	; (800520c <MX_GPIO_Init+0x110>)
 8005158:	4622      	mov	r2, r4
 800515a:	f248 7178 	movw	r1, #34680	; 0x8778
 800515e:	4630      	mov	r0, r6
 8005160:	f7fc ff1a 	bl	8001f98 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|VBUS_Pin|HEATER_CTRL_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
 8005164:	4d2a      	ldr	r5, [pc, #168]	; (8005210 <MX_GPIO_Init+0x114>)
 8005166:	4622      	mov	r2, r4
 8005168:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800516c:	4628      	mov	r0, r5
 800516e:	f7fc ff13 	bl	8001f98 <HAL_GPIO_WritePin>
                          |FAN_CTRL_Pin|D_PULL_Pin|MPL_CS_Pin|BME_CS_Pin 
                          |LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_EXIT_Pin BUTTON_OK_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_EXIT_Pin|BUTTON_OK_Pin;
 8005172:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005176:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005178:	4f26      	ldr	r7, [pc, #152]	; (8005214 <MX_GPIO_Init+0x118>)
 800517a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800517e:	a904      	add	r1, sp, #16
 8005180:	4825      	ldr	r0, [pc, #148]	; (8005218 <MX_GPIO_Init+0x11c>)
 8005182:	f7fc fe1d 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONE_WIRE_DATA1_Pin ONE_WIRE_DATA2_Pin LED_RED_Pin LED_GREEN_Pin 
                           BUZZER_Pin VBUS_Pin HEATER_CTRL_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 8005186:	f248 7378 	movw	r3, #34680	; 0x8778
 800518a:	9304      	str	r3, [sp, #16]
                          |BUZZER_Pin|VBUS_Pin|HEATER_CTRL_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800518c:	f04f 0901 	mov.w	r9, #1
 8005190:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	f04f 0802 	mov.w	r8, #2
 800519a:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519e:	a904      	add	r1, sp, #16
 80051a0:	4630      	mov	r0, r6
 80051a2:	f7fc fe0d 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051aa:	4b1c      	ldr	r3, [pc, #112]	; (800521c <MX_GPIO_Init+0x120>)
 80051ac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 80051b0:	a904      	add	r1, sp, #16
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7fc fe04 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin 
                           FAN_CTRL_Pin D_PULL_Pin MPL_CS_Pin BME_CS_Pin 
                           LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
 80051b8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80051bc:	9304      	str	r3, [sp, #16]
                          |FAN_CTRL_Pin|D_PULL_Pin|MPL_CS_Pin|BME_CS_Pin 
                          |LCD_E_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051be:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c4:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	a904      	add	r1, sp, #16
 80051ca:	4628      	mov	r0, r5
 80051cc:	f7fc fdf8 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 80051d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80051d6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 80051da:	a904      	add	r1, sp, #16
 80051dc:	4628      	mov	r0, r5
 80051de:	f7fc fdef 	bl	8001dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80051e2:	4622      	mov	r2, r4
 80051e4:	4621      	mov	r1, r4
 80051e6:	2017      	movs	r0, #23
 80051e8:	f7fc fb7e 	bl	80018e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80051ec:	2017      	movs	r0, #23
 80051ee:	f7fc fbaf 	bl	8001950 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80051f2:	4622      	mov	r2, r4
 80051f4:	4621      	mov	r1, r4
 80051f6:	2028      	movs	r0, #40	; 0x28
 80051f8:	f7fc fb76 	bl	80018e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80051fc:	2028      	movs	r0, #40	; 0x28
 80051fe:	f7fc fba7 	bl	8001950 <HAL_NVIC_EnableIRQ>

}
 8005202:	b009      	add	sp, #36	; 0x24
 8005204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	40010800 	.word	0x40010800
 8005210:	40010c00 	.word	0x40010c00
 8005214:	10210000 	.word	0x10210000
 8005218:	40011000 	.word	0x40011000
 800521c:	10310000 	.word	0x10310000

08005220 <MX_ADC1_Init>:
{
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005224:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8005226:	2600      	movs	r6, #0
 8005228:	9601      	str	r6, [sp, #4]
 800522a:	9602      	str	r6, [sp, #8]
 800522c:	9603      	str	r6, [sp, #12]
  hadc1.Instance = ADC1;
 800522e:	4c2f      	ldr	r4, [pc, #188]	; (80052ec <MX_ADC1_Init+0xcc>)
 8005230:	4b2f      	ldr	r3, [pc, #188]	; (80052f0 <MX_ADC1_Init+0xd0>)
 8005232:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005234:	f44f 7880 	mov.w	r8, #256	; 0x100
 8005238:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800523c:	2501      	movs	r5, #1
 800523e:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005240:	7526      	strb	r6, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005242:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8005246:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005248:	6066      	str	r6, [r4, #4]
  hadc1.Init.NbrOfConversion = 4;
 800524a:	2704      	movs	r7, #4
 800524c:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800524e:	4620      	mov	r0, r4
 8005250:	f7fc fa38 	bl	80016c4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8005254:	9601      	str	r6, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005256:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005258:	2307      	movs	r3, #7
 800525a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800525c:	eb0d 0107 	add.w	r1, sp, r7
 8005260:	4620      	mov	r0, r4
 8005262:	f7fc f81f 	bl	80012a4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8005266:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005268:	2502      	movs	r5, #2
 800526a:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800526c:	eb0d 0107 	add.w	r1, sp, r7
 8005270:	4620      	mov	r0, r4
 8005272:	f7fc f817 	bl	80012a4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8005276:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005278:	2303      	movs	r3, #3
 800527a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800527c:	eb0d 0107 	add.w	r1, sp, r7
 8005280:	4620      	mov	r0, r4
 8005282:	f7fc f80f 	bl	80012a4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005286:	2310      	movs	r3, #16
 8005288:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800528a:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800528c:	eb0d 0107 	add.w	r1, sp, r7
 8005290:	4620      	mov	r0, r4
 8005292:	f7fc f807 	bl	80012a4 <HAL_ADC_ConfigChannel>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005296:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <MX_ADC1_Init+0xd4>)
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	615a      	str	r2, [r3, #20]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	9b00      	ldr	r3, [sp, #0]
  hdma1.Instance = DMA1_Channel1;
 80052aa:	4d13      	ldr	r5, [pc, #76]	; (80052f8 <MX_ADC1_Init+0xd8>)
 80052ac:	4b13      	ldr	r3, [pc, #76]	; (80052fc <MX_ADC1_Init+0xdc>)
 80052ae:	602b      	str	r3, [r5, #0]
  hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052b0:	606e      	str	r6, [r5, #4]
  hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80052b2:	60ae      	str	r6, [r5, #8]
  hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	60eb      	str	r3, [r5, #12]
  hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052b8:	f8c5 8010 	str.w	r8, [r5, #16]
  hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80052bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c0:	616b      	str	r3, [r5, #20]
  hdma1.Init.Mode = DMA_CIRCULAR;
 80052c2:	2320      	movs	r3, #32
 80052c4:	61ab      	str	r3, [r5, #24]
  hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80052c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052ca:	61eb      	str	r3, [r5, #28]
  HAL_ADCEx_Calibration_Start(&hadc1);
 80052cc:	4620      	mov	r0, r4
 80052ce:	f7fc fa81 	bl	80017d4 <HAL_ADCEx_Calibration_Start>
  HAL_DMA_Init(&hdma1);
 80052d2:	4628      	mov	r0, r5
 80052d4:	f7fc fb76 	bl	80019c4 <HAL_DMA_Init>
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80052d8:	6225      	str	r5, [r4, #32]
 80052da:	626c      	str	r4, [r5, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, ADC_CHANNELS);
 80052dc:	463a      	mov	r2, r7
 80052de:	4908      	ldr	r1, [pc, #32]	; (8005300 <MX_ADC1_Init+0xe0>)
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7fc f931 	bl	8001548 <HAL_ADC_Start_DMA>
}
 80052e6:	b004      	add	sp, #16
 80052e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ec:	20000890 	.word	0x20000890
 80052f0:	40012400 	.word	0x40012400
 80052f4:	40021000 	.word	0x40021000
 80052f8:	200006e8 	.word	0x200006e8
 80052fc:	40020008 	.word	0x40020008
 8005300:	20000858 	.word	0x20000858

08005304 <MX_SPI2_Init>:
{
 8005304:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8005306:	480b      	ldr	r0, [pc, #44]	; (8005334 <MX_SPI2_Init+0x30>)
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <MX_SPI2_Init+0x34>)
 800530a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800530c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005310:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005312:	2300      	movs	r3, #0
 8005314:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005316:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005318:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800531a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005322:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005324:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005326:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005328:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800532a:	230a      	movs	r3, #10
 800532c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800532e:	f7fd fa81 	bl	8002834 <HAL_SPI_Init>
}
 8005332:	bd08      	pop	{r3, pc}
 8005334:	2000105c 	.word	0x2000105c
 8005338:	40003800 	.word	0x40003800

0800533c <MX_TIM1_Init>:
{
 800533c:	b530      	push	{r4, r5, lr}
 800533e:	b097      	sub	sp, #92	; 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005340:	2400      	movs	r4, #0
 8005342:	9412      	str	r4, [sp, #72]	; 0x48
 8005344:	9413      	str	r4, [sp, #76]	; 0x4c
 8005346:	9414      	str	r4, [sp, #80]	; 0x50
 8005348:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800534a:	9410      	str	r4, [sp, #64]	; 0x40
 800534c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800534e:	9409      	str	r4, [sp, #36]	; 0x24
 8005350:	940a      	str	r4, [sp, #40]	; 0x28
 8005352:	940b      	str	r4, [sp, #44]	; 0x2c
 8005354:	940c      	str	r4, [sp, #48]	; 0x30
 8005356:	940d      	str	r4, [sp, #52]	; 0x34
 8005358:	940e      	str	r4, [sp, #56]	; 0x38
 800535a:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800535c:	2220      	movs	r2, #32
 800535e:	4621      	mov	r1, r4
 8005360:	a801      	add	r0, sp, #4
 8005362:	f000 faef 	bl	8005944 <memset>
  htim1.Instance = TIM1;
 8005366:	4d21      	ldr	r5, [pc, #132]	; (80053ec <MX_TIM1_Init+0xb0>)
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <MX_TIM1_Init+0xb4>)
 800536a:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 71;
 800536c:	2347      	movs	r3, #71	; 0x47
 800536e:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005370:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 9800;
 8005372:	f242 6348 	movw	r3, #9800	; 0x2648
 8005376:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005378:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800537a:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800537c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800537e:	4628      	mov	r0, r5
 8005380:	f7fd fc56 	bl	8002c30 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005388:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800538a:	a912      	add	r1, sp, #72	; 0x48
 800538c:	4628      	mov	r0, r5
 800538e:	f7fd fd11 	bl	8002db4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005392:	4628      	mov	r0, r5
 8005394:	f7fd fc65 	bl	8002c62 <HAL_TIM_OC_Init>
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8005398:	2108      	movs	r1, #8
 800539a:	4628      	mov	r0, r5
 800539c:	f7fd fc7a 	bl	8002c94 <HAL_TIM_OnePulse_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053a0:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053a2:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053a4:	a910      	add	r1, sp, #64	; 0x40
 80053a6:	4628      	mov	r0, r5
 80053a8:	f7fd fd71 	bl	8002e8e <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80053ac:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80053ae:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053b0:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80053b2:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053b4:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80053b6:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80053b8:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ba:	4622      	mov	r2, r4
 80053bc:	a909      	add	r1, sp, #36	; 0x24
 80053be:	4628      	mov	r0, r5
 80053c0:	f7fd fcbe 	bl	8002d40 <HAL_TIM_OC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80053c4:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80053c6:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80053c8:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80053ca:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80053cc:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053d2:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053d4:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80053d6:	a901      	add	r1, sp, #4
 80053d8:	4628      	mov	r0, r5
 80053da:	f7fd fd7b 	bl	8002ed4 <HAL_TIMEx_ConfigBreakDeadTime>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053de:	2204      	movs	r2, #4
 80053e0:	a909      	add	r1, sp, #36	; 0x24
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fd fcac 	bl	8002d40 <HAL_TIM_OC_ConfigChannel>
}
 80053e8:	b017      	add	sp, #92	; 0x5c
 80053ea:	bd30      	pop	{r4, r5, pc}
 80053ec:	20000b38 	.word	0x20000b38
 80053f0:	40012c00 	.word	0x40012c00

080053f4 <MX_USART3_UART_Init>:
{
 80053f4:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80053f6:	4808      	ldr	r0, [pc, #32]	; (8005418 <MX_USART3_UART_Init+0x24>)
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <MX_USART3_UART_Init+0x28>)
 80053fa:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80053fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005400:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005402:	2300      	movs	r3, #0
 8005404:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005406:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005408:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800540a:	220c      	movs	r2, #12
 800540c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800540e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005410:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005412:	f7fd fe33 	bl	800307c <HAL_UART_Init>
}
 8005416:	bd08      	pop	{r3, pc}
 8005418:	2000060c 	.word	0x2000060c
 800541c:	40004800 	.word	0x40004800

08005420 <SystemClock_Config>:
{
 8005420:	b530      	push	{r4, r5, lr}
 8005422:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005424:	2400      	movs	r4, #0
 8005426:	940c      	str	r4, [sp, #48]	; 0x30
 8005428:	940d      	str	r4, [sp, #52]	; 0x34
 800542a:	940f      	str	r4, [sp, #60]	; 0x3c
 800542c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800542e:	9405      	str	r4, [sp, #20]
 8005430:	9406      	str	r4, [sp, #24]
 8005432:	9407      	str	r4, [sp, #28]
 8005434:	9408      	str	r4, [sp, #32]
 8005436:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005438:	9401      	str	r4, [sp, #4]
 800543a:	9402      	str	r4, [sp, #8]
 800543c:	9403      	str	r4, [sp, #12]
 800543e:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005440:	2201      	movs	r2, #1
 8005442:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005448:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800544a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800544c:	2502      	movs	r5, #2
 800544e:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005450:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005452:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005456:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005458:	a80a      	add	r0, sp, #40	; 0x28
 800545a:	f7fc fdc9 	bl	8001ff0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800545e:	230f      	movs	r3, #15
 8005460:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005462:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005464:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800546c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800546e:	4629      	mov	r1, r5
 8005470:	a805      	add	r0, sp, #20
 8005472:	f7fc fffd 	bl	8002470 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005476:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800547e:	a801      	add	r0, sp, #4
 8005480:	f7fd f8d0 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
}
 8005484:	b015      	add	sp, #84	; 0x54
 8005486:	bd30      	pop	{r4, r5, pc}

08005488 <main>:
{
 8005488:	b508      	push	{r3, lr}
  HAL_Init();
 800548a:	f7fb fe21 	bl	80010d0 <HAL_Init>
  SystemClock_Config();
 800548e:	f7ff ffc7 	bl	8005420 <SystemClock_Config>
  MX_GPIO_Init();
 8005492:	f7ff fe33 	bl	80050fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8005496:	f7ff fec3 	bl	8005220 <MX_ADC1_Init>
  MX_SPI2_Init();
 800549a:	f7ff ff33 	bl	8005304 <MX_SPI2_Init>
  MX_TIM1_Init();
 800549e:	f7ff ff4d 	bl	800533c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80054a2:	f7ff ffa7 	bl	80053f4 <MX_USART3_UART_Init>
  LCD_Initalize();
 80054a6:	f7fe fcdb 	bl	8003e60 <LCD_Initalize>
  ds18b20_initalize(0);
 80054aa:	2000      	movs	r0, #0
 80054ac:	f7fe f9e4 	bl	8003878 <ds18b20_initalize>
  ntc_init();
 80054b0:	f7fe fe38 	bl	8004124 <ntc_init>
  rom_value_init();
 80054b4:	f7fe fbc4 	bl	8003c40 <rom_value_init>
  ui_populate_with_rom_data();
 80054b8:	f7ff fa78 	bl	80049ac <ui_populate_with_rom_data>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1| TIM_IT_CC2);
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <main+0x64>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68d3      	ldr	r3, [r2, #12]
 80054c2:	f043 0306 	orr.w	r3, r3, #6
 80054c6:	60d3      	str	r3, [r2, #12]
  LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <main+0x68>)
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	611a      	str	r2, [r3, #16]
	  lcd_circle_bufer_refresh();
 80054ce:	f7fe fd87 	bl	8003fe0 <lcd_circle_bufer_refresh>
	  ui_handler();
 80054d2:	f7ff fa43 	bl	800495c <ui_handler>
	  ds18b20_convert_temperature(10);  //duration 5ms [10 - 15]ms read in  10 + 750 ms  = 95ms
 80054d6:	200a      	movs	r0, #10
 80054d8:	f7fe f9de 	bl	8003898 <ds18b20_convert_temperature>
	  ds18b20_read_primary_sensor(770); //duration 5ms [835 - 940]ms read in  10 + 750ms  = 95ms
 80054dc:	f240 3002 	movw	r0, #770	; 0x302
 80054e0:	f7fe fa0e 	bl	8003900 <ds18b20_read_primary_sensor>
	  ntc_handler(100);
 80054e4:	2064      	movs	r0, #100	; 0x64
 80054e6:	f7fe fe61 	bl	80041ac <ntc_handler>
 80054ea:	e7f0      	b.n	80054ce <main+0x46>
 80054ec:	20000b38 	.word	0x20000b38
 80054f0:	40010800 	.word	0x40010800

080054f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054f4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054f6:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <HAL_MspInit+0x3c>)
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	619a      	str	r2, [r3, #24]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	f002 0201 	and.w	r2, r2, #1
 8005506:	9200      	str	r2, [sp, #0]
 8005508:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005510:	61da      	str	r2, [r3, #28]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800551c:	4a05      	ldr	r2, [pc, #20]	; (8005534 <HAL_MspInit+0x40>)
 800551e:	6853      	ldr	r3, [r2, #4]
 8005520:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005524:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800552a:	b002      	add	sp, #8
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	40010000 	.word	0x40010000

08005538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005538:	b500      	push	{lr}
 800553a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553c:	2300      	movs	r3, #0
 800553e:	9302      	str	r3, [sp, #8]
 8005540:	9303      	str	r3, [sp, #12]
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8005546:	6802      	ldr	r2, [r0, #0]
 8005548:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <HAL_ADC_MspInit+0x68>)
 800554a:	429a      	cmp	r2, r3
 800554c:	d002      	beq.n	8005554 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800554e:	b007      	add	sp, #28
 8005550:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005554:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555e:	619a      	str	r2, [r3, #24]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005566:	9200      	str	r2, [sp, #0]
 8005568:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	f042 0204 	orr.w	r2, r2, #4
 8005570:	619a      	str	r2, [r3, #24]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800557c:	2307      	movs	r3, #7
 800557e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005580:	2303      	movs	r3, #3
 8005582:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005584:	a902      	add	r1, sp, #8
 8005586:	4807      	ldr	r0, [pc, #28]	; (80055a4 <HAL_ADC_MspInit+0x6c>)
 8005588:	f7fc fc1a 	bl	8001dc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800558c:	2200      	movs	r2, #0
 800558e:	4611      	mov	r1, r2
 8005590:	2012      	movs	r0, #18
 8005592:	f7fc f9a9 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005596:	2012      	movs	r0, #18
 8005598:	f7fc f9da 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 800559c:	e7d7      	b.n	800554e <HAL_ADC_MspInit+0x16>
 800559e:	bf00      	nop
 80055a0:	40012400 	.word	0x40012400
 80055a4:	40010800 	.word	0x40010800

080055a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055a8:	b510      	push	{r4, lr}
 80055aa:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	2300      	movs	r3, #0
 80055ae:	9302      	str	r3, [sp, #8]
 80055b0:	9303      	str	r3, [sp, #12]
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI2)
 80055b6:	6802      	ldr	r2, [r0, #0]
 80055b8:	4b17      	ldr	r3, [pc, #92]	; (8005618 <HAL_SPI_MspInit+0x70>)
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d001      	beq.n	80055c2 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80055be:	b006      	add	sp, #24
 80055c0:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055c2:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055cc:	61da      	str	r2, [r3, #28]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80055d4:	9200      	str	r2, [sp, #0]
 80055d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	619a      	str	r2, [r3, #24]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80055ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80055ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f0:	2302      	movs	r3, #2
 80055f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055f4:	2303      	movs	r3, #3
 80055f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f8:	4c08      	ldr	r4, [pc, #32]	; (800561c <HAL_SPI_MspInit+0x74>)
 80055fa:	a902      	add	r1, sp, #8
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7fc fbdf 	bl	8001dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005608:	2300      	movs	r3, #0
 800560a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800560e:	a902      	add	r1, sp, #8
 8005610:	4620      	mov	r0, r4
 8005612:	f7fc fbd5 	bl	8001dc0 <HAL_GPIO_Init>
}
 8005616:	e7d2      	b.n	80055be <HAL_SPI_MspInit+0x16>
 8005618:	40003800 	.word	0x40003800
 800561c:	40010c00 	.word	0x40010c00

08005620 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8005620:	6802      	ldr	r2, [r0, #0]
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <HAL_TIM_Base_MspInit+0x4c>)
 8005624:	429a      	cmp	r2, r3
 8005626:	d000      	beq.n	800562a <HAL_TIM_Base_MspInit+0xa>
 8005628:	4770      	bx	lr
{
 800562a:	b500      	push	{lr}
 800562c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800562e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005638:	619a      	str	r2, [r3, #24]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005644:	2200      	movs	r2, #0
 8005646:	4611      	mov	r1, r2
 8005648:	2019      	movs	r0, #25
 800564a:	f7fc f94d 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800564e:	2019      	movs	r0, #25
 8005650:	f7fc f97e 	bl	8001950 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005654:	2200      	movs	r2, #0
 8005656:	4611      	mov	r1, r2
 8005658:	201b      	movs	r0, #27
 800565a:	f7fc f945 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800565e:	201b      	movs	r0, #27
 8005660:	f7fc f976 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005664:	b003      	add	sp, #12
 8005666:	f85d fb04 	ldr.w	pc, [sp], #4
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00

08005670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005670:	b530      	push	{r4, r5, lr}
 8005672:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005674:	2300      	movs	r3, #0
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	9303      	str	r3, [sp, #12]
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 800567e:	6802      	ldr	r2, [r0, #0]
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_UART_MspInit+0x80>)
 8005682:	429a      	cmp	r2, r3
 8005684:	d001      	beq.n	800568a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005686:	b007      	add	sp, #28
 8005688:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 800568a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005694:	61da      	str	r2, [r3, #28]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800569c:	9200      	str	r2, [sp, #0]
 800569e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	619a      	str	r2, [r3, #24]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b8:	2302      	movs	r3, #2
 80056ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056bc:	2303      	movs	r3, #3
 80056be:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056c0:	4d0c      	ldr	r5, [pc, #48]	; (80056f4 <HAL_UART_MspInit+0x84>)
 80056c2:	a902      	add	r1, sp, #8
 80056c4:	4628      	mov	r0, r5
 80056c6:	f7fc fb7b 	bl	8001dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056d0:	2400      	movs	r4, #0
 80056d2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d6:	a902      	add	r1, sp, #8
 80056d8:	4628      	mov	r0, r5
 80056da:	f7fc fb71 	bl	8001dc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80056de:	4622      	mov	r2, r4
 80056e0:	4621      	mov	r1, r4
 80056e2:	2027      	movs	r0, #39	; 0x27
 80056e4:	f7fc f900 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80056e8:	2027      	movs	r0, #39	; 0x27
 80056ea:	f7fc f931 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 80056ee:	e7ca      	b.n	8005686 <HAL_UART_MspInit+0x16>
 80056f0:	40004800 	.word	0x40004800
 80056f4:	40010c00 	.word	0x40010c00

080056f8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056f8:	4770      	bx	lr

080056fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056fa:	e7fe      	b.n	80056fa <HardFault_Handler>

080056fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056fc:	e7fe      	b.n	80056fc <MemManage_Handler>

080056fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056fe:	e7fe      	b.n	80056fe <BusFault_Handler>

08005700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005700:	e7fe      	b.n	8005700 <UsageFault_Handler>

08005702 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005702:	4770      	bx	lr

08005704 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005704:	4770      	bx	lr

08005706 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005706:	4770      	bx	lr

08005708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//HAL_IncTick();

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800570a:	f7fb fcf3 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  ui_handler_flag = UI_HANDLER_FLAG_FREE;
 800570e:	2300      	movs	r3, #0
 8005710:	4a08      	ldr	r2, [pc, #32]	; (8005734 <SysTick_Handler+0x2c>)
 8005712:	7013      	strb	r3, [r2, #0]
  ntc_handler_flag = NTC_HANDLER_FLAG_FREE;
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <SysTick_Handler+0x30>)
 8005716:	7013      	strb	r3, [r2, #0]
  ds_handler_flag = DS_HANDLER_FLAG_FREE;
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <SysTick_Handler+0x34>)
 800571a:	7013      	strb	r3, [r2, #0]
  if(++ms_counter >= 1000)
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <SysTick_Handler+0x38>)
 800571e:	8813      	ldrh	r3, [r2, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	8013      	strh	r3, [r2, #0]
 8005726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800572a:	d302      	bcc.n	8005732 <SysTick_Handler+0x2a>
  {
  	ms_counter = 0;
 800572c:	4613      	mov	r3, r2
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8005732:	bd08      	pop	{r3, pc}
 8005734:	20000d88 	.word	0x20000d88
 8005738:	20000608 	.word	0x20000608
 800573c:	20000aa0 	.word	0x20000aa0
 8005740:	200007c0 	.word	0x200007c0

08005744 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005744:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005746:	4802      	ldr	r0, [pc, #8]	; (8005750 <ADC1_2_IRQHandler+0xc>)
 8005748:	f7fb fd17 	bl	800117a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800574c:	bd08      	pop	{r3, pc}
 800574e:	bf00      	nop
 8005750:	20000890 	.word	0x20000890

08005754 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ZCD_Pin))
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <EXTI9_5_IRQHandler+0x2c>)
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800575e:	d103      	bne.n	8005768 <EXTI9_5_IRQHandler+0x14>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
		FAN_CTRL_GPIO_Port->BRR = FAN_CTRL_Pin;
		//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005760:	2080      	movs	r0, #128	; 0x80
 8005762:	f7fc fc21 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005766:	bd08      	pop	{r3, pc}
		HAL_TIM_Base_Start_IT(&htim1);
 8005768:	4806      	ldr	r0, [pc, #24]	; (8005784 <EXTI9_5_IRQHandler+0x30>)
 800576a:	f7fd f952 	bl	8002a12 <HAL_TIM_Base_Start_IT>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <EXTI9_5_IRQHandler+0x34>)
 8005770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005774:	615a      	str	r2, [r3, #20]
		FAN_CTRL_GPIO_Port->BRR = FAN_CTRL_Pin;
 8005776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577a:	2210      	movs	r2, #16
 800577c:	615a      	str	r2, [r3, #20]
 800577e:	e7ef      	b.n	8005760 <EXTI9_5_IRQHandler+0xc>
 8005780:	40010400 	.word	0x40010400
 8005784:	20000b38 	.word	0x20000b38
 8005788:	40010800 	.word	0x40010800

0800578c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800578c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;

	// for a test
	//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <TIM1_UP_IRQHandler+0x14>)
 8005790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005794:	615a      	str	r2, [r3, #20]


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005796:	4803      	ldr	r0, [pc, #12]	; (80057a4 <TIM1_UP_IRQHandler+0x18>)
 8005798:	f7fd f953 	bl	8002a42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800579c:	bd08      	pop	{r3, pc}
 800579e:	bf00      	nop
 80057a0:	40010800 	.word	0x40010800
 80057a4:	20000b38 	.word	0x20000b38

080057a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80057a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
	// for a test	//LED_RED_GPIO_Port->BSRR = LED_RED_Pin;
	if(TIM1->SR & TIM_IT_CC1)
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <TIM1_CC_IRQHandler+0x2c>)
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f013 0f02 	tst.w	r3, #2
 80057b2:	d003      	beq.n	80057bc <TIM1_CC_IRQHandler+0x14>
	{
		HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
 80057b4:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <TIM1_CC_IRQHandler+0x30>)
 80057b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ba:	611a      	str	r2, [r3, #16]
	}

	if(TIM1->SR & TIM_IT_CC2)
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <TIM1_CC_IRQHandler+0x2c>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f013 0f04 	tst.w	r3, #4
 80057c4:	d002      	beq.n	80057cc <TIM1_CC_IRQHandler+0x24>
	{
		FAN_CTRL_GPIO_Port->BSRR = FAN_CTRL_Pin;
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <TIM1_CC_IRQHandler+0x34>)
 80057c8:	2210      	movs	r2, #16
 80057ca:	611a      	str	r2, [r3, #16]
	}



  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80057cc:	4804      	ldr	r0, [pc, #16]	; (80057e0 <TIM1_CC_IRQHandler+0x38>)
 80057ce:	f7fd f938 	bl	8002a42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80057d2:	bd08      	pop	{r3, pc}
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40010800 	.word	0x40010800
 80057dc:	40010c00 	.word	0x40010c00
 80057e0:	20000b38 	.word	0x20000b38

080057e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80057e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80057e6:	4802      	ldr	r0, [pc, #8]	; (80057f0 <USART3_IRQHandler+0xc>)
 80057e8:	f7fd fcd6 	bl	8003198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057ec:	bd08      	pop	{r3, pc}
 80057ee:	bf00      	nop
 80057f0:	2000060c 	.word	0x2000060c

080057f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80057f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if((EXTI->PR & BUTTON_EXIT_Pin) != 0x00u)
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <EXTI15_10_IRQHandler+0x6c>)
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80057fe:	d112      	bne.n	8005826 <EXTI15_10_IRQHandler+0x32>
	{
		ui_button_handler(UI_BUTTON_BACK); // ui_menu_back();
	}
	else if((EXTI->PR & BUTTON_OK_Pin) != 0x00u)
 8005800:	4b17      	ldr	r3, [pc, #92]	; (8005860 <EXTI15_10_IRQHandler+0x6c>)
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005808:	d121      	bne.n	800584e <EXTI15_10_IRQHandler+0x5a>
	{
		ui_button_handler(UI_BUTTON_OK);
	}
	else if((EXTI->PR & BUTTON_DOWN_Pin) != 0x00u)
 800580a:	4b15      	ldr	r3, [pc, #84]	; (8005860 <EXTI15_10_IRQHandler+0x6c>)
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005812:	d120      	bne.n	8005856 <EXTI15_10_IRQHandler+0x62>
	{
		ui_button_handler(UI_BUTTON_DOWN);
	}
	else if((EXTI->PR & BUTTON_UP_Pin) != 0x00u)
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <EXTI15_10_IRQHandler+0x6c>)
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800581c:	d006      	beq.n	800582c <EXTI15_10_IRQHandler+0x38>
	{
		ui_button_handler(UI_BUTTON_UP);
 800581e:	2000      	movs	r0, #0
 8005820:	f7fe fd90 	bl	8004344 <ui_button_handler>
 8005824:	e002      	b.n	800582c <EXTI15_10_IRQHandler+0x38>
		ui_button_handler(UI_BUTTON_BACK); // ui_menu_back();
 8005826:	2003      	movs	r0, #3
 8005828:	f7fe fd8c 	bl	8004344 <ui_button_handler>
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800582c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005830:	f7fc fbba 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005834:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005838:	f7fc fbb6 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800583c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005840:	f7fc fbb2 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005844:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005848:	f7fc fbae 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800584c:	bd08      	pop	{r3, pc}
		ui_button_handler(UI_BUTTON_OK);
 800584e:	2002      	movs	r0, #2
 8005850:	f7fe fd78 	bl	8004344 <ui_button_handler>
 8005854:	e7ea      	b.n	800582c <EXTI15_10_IRQHandler+0x38>
		ui_button_handler(UI_BUTTON_DOWN);
 8005856:	2001      	movs	r0, #1
 8005858:	f7fe fd74 	bl	8004344 <ui_button_handler>
 800585c:	e7e6      	b.n	800582c <EXTI15_10_IRQHandler+0x38>
 800585e:	bf00      	nop
 8005860:	40010400 	.word	0x40010400

08005864 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <SystemInit+0x40>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800586e:	6859      	ldr	r1, [r3, #4]
 8005870:	4a0d      	ldr	r2, [pc, #52]	; (80058a8 <SystemInit+0x44>)
 8005872:	400a      	ands	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800587c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005880:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005888:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005890:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005892:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005896:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <SystemInit+0x48>)
 800589a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800589e:	609a      	str	r2, [r3, #8]
#endif 
}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000
 80058a8:	f8ff0000 	.word	0xf8ff0000
 80058ac:	e000ed00 	.word	0xe000ed00

080058b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80058b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80058b2:	e003      	b.n	80058bc <LoopCopyDataInit>

080058b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80058b4:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80058b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80058b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80058ba:	3104      	adds	r1, #4

080058bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80058bc:	480a      	ldr	r0, [pc, #40]	; (80058e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80058c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80058c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80058c4:	d3f6      	bcc.n	80058b4 <CopyDataInit>
  ldr r2, =_sbss
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80058c8:	e002      	b.n	80058d0 <LoopFillZerobss>

080058ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80058ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80058cc:	f842 3b04 	str.w	r3, [r2], #4

080058d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80058d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80058d4:	d3f9      	bcc.n	80058ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058d6:	f7ff ffc5 	bl	8005864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058da:	f000 f80f 	bl	80058fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058de:	f7ff fdd3 	bl	8005488 <main>
  bx lr
 80058e2:	4770      	bx	lr
  ldr r3, =_sidata
 80058e4:	08006938 	.word	0x08006938
  ldr r0, =_sdata
 80058e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80058ec:	2000051c 	.word	0x2000051c
  ldr r2, =_sbss
 80058f0:	20000520 	.word	0x20000520
  ldr r3, = _ebss
 80058f4:	200010c0 	.word	0x200010c0

080058f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058f8:	e7fe      	b.n	80058f8 <CAN1_RX1_IRQHandler>
	...

080058fc <__libc_init_array>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	2500      	movs	r5, #0
 8005900:	4e0c      	ldr	r6, [pc, #48]	; (8005934 <__libc_init_array+0x38>)
 8005902:	4c0d      	ldr	r4, [pc, #52]	; (8005938 <__libc_init_array+0x3c>)
 8005904:	1ba4      	subs	r4, r4, r6
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	42a5      	cmp	r5, r4
 800590a:	d109      	bne.n	8005920 <__libc_init_array+0x24>
 800590c:	f000 f89e 	bl	8005a4c <_init>
 8005910:	2500      	movs	r5, #0
 8005912:	4e0a      	ldr	r6, [pc, #40]	; (800593c <__libc_init_array+0x40>)
 8005914:	4c0a      	ldr	r4, [pc, #40]	; (8005940 <__libc_init_array+0x44>)
 8005916:	1ba4      	subs	r4, r4, r6
 8005918:	10a4      	asrs	r4, r4, #2
 800591a:	42a5      	cmp	r5, r4
 800591c:	d105      	bne.n	800592a <__libc_init_array+0x2e>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005924:	4798      	blx	r3
 8005926:	3501      	adds	r5, #1
 8005928:	e7ee      	b.n	8005908 <__libc_init_array+0xc>
 800592a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800592e:	4798      	blx	r3
 8005930:	3501      	adds	r5, #1
 8005932:	e7f2      	b.n	800591a <__libc_init_array+0x1e>
 8005934:	0800692c 	.word	0x0800692c
 8005938:	0800692c 	.word	0x0800692c
 800593c:	0800692c 	.word	0x0800692c
 8005940:	08006934 	.word	0x08006934

08005944 <memset>:
 8005944:	4603      	mov	r3, r0
 8005946:	4402      	add	r2, r0
 8005948:	4293      	cmp	r3, r2
 800594a:	d100      	bne.n	800594e <memset+0xa>
 800594c:	4770      	bx	lr
 800594e:	f803 1b01 	strb.w	r1, [r3], #1
 8005952:	e7f9      	b.n	8005948 <memset+0x4>

08005954 <register_fini>:
 8005954:	4b02      	ldr	r3, [pc, #8]	; (8005960 <register_fini+0xc>)
 8005956:	b113      	cbz	r3, 800595e <register_fini+0xa>
 8005958:	4802      	ldr	r0, [pc, #8]	; (8005964 <register_fini+0x10>)
 800595a:	f000 b805 	b.w	8005968 <atexit>
 800595e:	4770      	bx	lr
 8005960:	00000000 	.word	0x00000000
 8005964:	08005975 	.word	0x08005975

08005968 <atexit>:
 8005968:	2300      	movs	r3, #0
 800596a:	4601      	mov	r1, r0
 800596c:	461a      	mov	r2, r3
 800596e:	4618      	mov	r0, r3
 8005970:	f000 b816 	b.w	80059a0 <__register_exitproc>

08005974 <__libc_fini_array>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	; (8005994 <__libc_fini_array+0x20>)
 8005978:	4c07      	ldr	r4, [pc, #28]	; (8005998 <__libc_fini_array+0x24>)
 800597a:	1b64      	subs	r4, r4, r5
 800597c:	10a4      	asrs	r4, r4, #2
 800597e:	b91c      	cbnz	r4, 8005988 <__libc_fini_array+0x14>
 8005980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005984:	f000 b868 	b.w	8005a58 <_fini>
 8005988:	3c01      	subs	r4, #1
 800598a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800598e:	4798      	blx	r3
 8005990:	e7f5      	b.n	800597e <__libc_fini_array+0xa>
 8005992:	bf00      	nop
 8005994:	08006934 	.word	0x08006934
 8005998:	08006938 	.word	0x08006938

0800599c <__retarget_lock_acquire_recursive>:
 800599c:	4770      	bx	lr

0800599e <__retarget_lock_release_recursive>:
 800599e:	4770      	bx	lr

080059a0 <__register_exitproc>:
 80059a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a4:	4c26      	ldr	r4, [pc, #152]	; (8005a40 <__register_exitproc+0xa0>)
 80059a6:	4606      	mov	r6, r0
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	4698      	mov	r8, r3
 80059ac:	460f      	mov	r7, r1
 80059ae:	4691      	mov	r9, r2
 80059b0:	f7ff fff4 	bl	800599c <__retarget_lock_acquire_recursive>
 80059b4:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <__register_exitproc+0xa4>)
 80059b6:	681d      	ldr	r5, [r3, #0]
 80059b8:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80059bc:	b918      	cbnz	r0, 80059c6 <__register_exitproc+0x26>
 80059be:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 80059c2:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80059c6:	6843      	ldr	r3, [r0, #4]
 80059c8:	2b1f      	cmp	r3, #31
 80059ca:	dd19      	ble.n	8005a00 <__register_exitproc+0x60>
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <__register_exitproc+0xa8>)
 80059ce:	b933      	cbnz	r3, 80059de <__register_exitproc+0x3e>
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	f7ff ffe4 	bl	800599e <__retarget_lock_release_recursive>
 80059d6:	f04f 30ff 	mov.w	r0, #4294967295
 80059da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80059e2:	f3af 8000 	nop.w
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0f2      	beq.n	80059d0 <__register_exitproc+0x30>
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80059f0:	6042      	str	r2, [r0, #4]
 80059f2:	6003      	str	r3, [r0, #0]
 80059f4:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80059f8:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80059fc:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8005a00:	6843      	ldr	r3, [r0, #4]
 8005a02:	b19e      	cbz	r6, 8005a2c <__register_exitproc+0x8c>
 8005a04:	2201      	movs	r2, #1
 8005a06:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8005a0a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8005a0e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8005a12:	409a      	lsls	r2, r3
 8005a14:	4311      	orrs	r1, r2
 8005a16:	2e02      	cmp	r6, #2
 8005a18:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8005a1c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8005a20:	bf02      	ittt	eq
 8005a22:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8005a26:	430a      	orreq	r2, r1
 8005a28:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	3302      	adds	r3, #2
 8005a30:	6042      	str	r2, [r0, #4]
 8005a32:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8005a36:	6820      	ldr	r0, [r4, #0]
 8005a38:	f7ff ffb1 	bl	800599e <__retarget_lock_release_recursive>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e7cc      	b.n	80059da <__register_exitproc+0x3a>
 8005a40:	20000518 	.word	0x20000518
 8005a44:	08006928 	.word	0x08006928
 8005a48:	00000000 	.word	0x00000000

08005a4c <_init>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr

08005a58 <_fini>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr
