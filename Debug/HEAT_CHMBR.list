
HEAT_CHMBR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004370  08004370  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004370  08004370  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004370  08004370  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08004384  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000220  08004384  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011270  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029dd  00000000  00000000  000312a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  00033c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015520  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ded5  00000000  00000000  0004b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007596f  00000000  00000000  000591b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ceb24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e8  00000000  00000000  000ceba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004310 	.word	0x08004310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004310 	.word	0x08004310

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe51 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fece 	bl	8003f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fe69 	bl	8000e6e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fe31 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f003 fe8c 	bl	8003f6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fbc3 	bl	80009e0 <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b1b      	ldrb	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7d1b      	ldrb	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b1b      	ldrb	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 8000318:	4013      	ands	r3, r2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003cc:	2300      	movs	r3, #0
 80003ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a64      	ldr	r2, [pc, #400]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d004      	beq.n	80003e4 <HAL_ADC_Start_DMA+0x24>
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a63      	ldr	r2, [pc, #396]	; (800056c <HAL_ADC_Start_DMA+0x1ac>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <HAL_ADC_Start_DMA+0x32>
 80003e4:	4b60      	ldr	r3, [pc, #384]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	f040 80b3 	bne.w	8000558 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d101      	bne.n	8000400 <HAL_ADC_Start_DMA+0x40>
 80003fc:	2302      	movs	r3, #2
 80003fe:	e0ae      	b.n	800055e <HAL_ADC_Start_DMA+0x19e>
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2201      	movs	r2, #1
 8000404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f000 fa97 	bl	800093c <ADC_Enable>
 800040e:	4603      	mov	r3, r0
 8000410:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000412:	7dfb      	ldrb	r3, [r7, #23]
 8000414:	2b00      	cmp	r3, #0
 8000416:	f040 809a 	bne.w	800054e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800041e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a4e      	ldr	r2, [pc, #312]	; (800056c <HAL_ADC_Start_DMA+0x1ac>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d105      	bne.n	8000444 <HAL_ADC_Start_DMA+0x84>
 8000438:	4b4b      	ldr	r3, [pc, #300]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000440:	2b00      	cmp	r3, #0
 8000442:	d115      	bne.n	8000470 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800045a:	2b00      	cmp	r3, #0
 800045c:	d026      	beq.n	80004ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800046e:	e01d      	b.n	80004ac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000474:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a39      	ldr	r2, [pc, #228]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d004      	beq.n	8000490 <HAL_ADC_Start_DMA+0xd0>
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a38      	ldr	r2, [pc, #224]	; (800056c <HAL_ADC_Start_DMA+0x1ac>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d10d      	bne.n	80004ac <HAL_ADC_Start_DMA+0xec>
 8000490:	4b35      	ldr	r3, [pc, #212]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000498:	2b00      	cmp	r3, #0
 800049a:	d007      	beq.n	80004ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d006      	beq.n	80004c6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	f023 0206 	bic.w	r2, r3, #6
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c4:	e002      	b.n	80004cc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	2200      	movs	r2, #0
 80004ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	6a1b      	ldr	r3, [r3, #32]
 80004d8:	4a25      	ldr	r2, [pc, #148]	; (8000570 <HAL_ADC_Start_DMA+0x1b0>)
 80004da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a24      	ldr	r2, [pc, #144]	; (8000574 <HAL_ADC_Start_DMA+0x1b4>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a23      	ldr	r2, [pc, #140]	; (8000578 <HAL_ADC_Start_DMA+0x1b8>)
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f06f 0202 	mvn.w	r2, #2
 80004f4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	689a      	ldr	r2, [r3, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000504:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6a18      	ldr	r0, [r3, #32]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	334c      	adds	r3, #76	; 0x4c
 8000510:	4619      	mov	r1, r3
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f000 fd11 	bl	8000f3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000524:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000528:	d108      	bne.n	800053c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000538:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800053a:	e00f      	b.n	800055c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800054a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800054c:	e006      	b.n	800055c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000556:	e001      	b.n	800055c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000558:	2301      	movs	r3, #1
 800055a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800055c:	7dfb      	ldrb	r3, [r7, #23]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40012400 	.word	0x40012400
 800056c:	40012800 	.word	0x40012800
 8000570:	08000a55 	.word	0x08000a55
 8000574:	08000ad1 	.word	0x08000ad1
 8000578:	08000aed 	.word	0x08000aed

0800057c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f003 0320 	and.w	r3, r3, #32
 800058e:	2b20      	cmp	r3, #32
 8000590:	d140      	bne.n	8000614 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	2b02      	cmp	r3, #2
 800059e:	d139      	bne.n	8000614 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d105      	bne.n	80005b8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80005c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005c6:	d11d      	bne.n	8000604 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d119      	bne.n	8000604 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	685a      	ldr	r2, [r3, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f022 0220 	bic.w	r2, r2, #32
 80005de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d105      	bne.n	8000604 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005fc:	f043 0201 	orr.w	r2, r3, #1
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f87c 	bl	8000702 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f06f 0212 	mvn.w	r2, #18
 8000612:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	2b80      	cmp	r3, #128	; 0x80
 8000620:	d14f      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	2b04      	cmp	r3, #4
 800062e:	d148      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000634:	f003 0310 	and.w	r3, r3, #16
 8000638:	2b00      	cmp	r3, #0
 800063a:	d105      	bne.n	8000648 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000640:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000652:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000656:	d012      	beq.n	800067e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000662:	2b00      	cmp	r3, #0
 8000664:	d125      	bne.n	80006b2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000670:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000674:	d11d      	bne.n	80006b2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800067a:	2b00      	cmp	r3, #0
 800067c:	d119      	bne.n	80006b2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800068c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d105      	bne.n	80006b2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006aa:	f043 0201 	orr.w	r2, r3, #1
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 fad0 	bl	8000c58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f06f 020c 	mvn.w	r2, #12
 80006c0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006cc:	2b40      	cmp	r3, #64	; 0x40
 80006ce:	d114      	bne.n	80006fa <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d10d      	bne.n	80006fa <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f81b 	bl	8000726 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f06f 0201 	mvn.w	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
	...

0800074c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000764:	2b01      	cmp	r3, #1
 8000766:	d101      	bne.n	800076c <HAL_ADC_ConfigChannel+0x20>
 8000768:	2302      	movs	r3, #2
 800076a:	e0dc      	b.n	8000926 <HAL_ADC_ConfigChannel+0x1da>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2201      	movs	r2, #1
 8000770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b06      	cmp	r3, #6
 800077a:	d81c      	bhi.n	80007b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685a      	ldr	r2, [r3, #4]
 8000786:	4613      	mov	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	3b05      	subs	r3, #5
 800078e:	221f      	movs	r2, #31
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	43db      	mvns	r3, r3
 8000796:	4019      	ands	r1, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	3b05      	subs	r3, #5
 80007a8:	fa00 f203 	lsl.w	r2, r0, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	430a      	orrs	r2, r1
 80007b2:	635a      	str	r2, [r3, #52]	; 0x34
 80007b4:	e03c      	b.n	8000830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b0c      	cmp	r3, #12
 80007bc:	d81c      	bhi.n	80007f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685a      	ldr	r2, [r3, #4]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	3b23      	subs	r3, #35	; 0x23
 80007d0:	221f      	movs	r2, #31
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	4019      	ands	r1, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	3b23      	subs	r3, #35	; 0x23
 80007ea:	fa00 f203 	lsl.w	r2, r0, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
 80007f6:	e01b      	b.n	8000830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	3b41      	subs	r3, #65	; 0x41
 800080a:	221f      	movs	r2, #31
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	4019      	ands	r1, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	3b41      	subs	r3, #65	; 0x41
 8000824:	fa00 f203 	lsl.w	r2, r0, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	430a      	orrs	r2, r1
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b09      	cmp	r3, #9
 8000836:	d91c      	bls.n	8000872 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68d9      	ldr	r1, [r3, #12]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	3b1e      	subs	r3, #30
 800084a:	2207      	movs	r2, #7
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	4019      	ands	r1, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	6898      	ldr	r0, [r3, #8]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	3b1e      	subs	r3, #30
 8000864:	fa00 f203 	lsl.w	r2, r0, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	430a      	orrs	r2, r1
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	e019      	b.n	80008a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6919      	ldr	r1, [r3, #16]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	2207      	movs	r2, #7
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	4019      	ands	r1, r3
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	6898      	ldr	r0, [r3, #8]
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4613      	mov	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	fa00 f203 	lsl.w	r2, r0, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b10      	cmp	r3, #16
 80008ac:	d003      	beq.n	80008b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008b2:	2b11      	cmp	r3, #17
 80008b4:	d132      	bne.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_ADC_ConfigChannel+0x1e4>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d125      	bne.n	800090c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d126      	bne.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b10      	cmp	r3, #16
 80008e4:	d11a      	bne.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <HAL_ADC_ConfigChannel+0x1e8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <HAL_ADC_ConfigChannel+0x1ec>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	0c9a      	lsrs	r2, r3, #18
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008fc:	e002      	b.n	8000904 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3b01      	subs	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1f9      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x1b2>
 800090a:	e007      	b.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000910:	f043 0220 	orr.w	r2, r3, #32
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40012400 	.word	0x40012400
 8000934:	20000008 	.word	0x20000008
 8000938:	431bde83 	.word	0x431bde83

0800093c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	2b01      	cmp	r3, #1
 8000958:	d039      	beq.n	80009ce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <ADC_Enable+0x9c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <ADC_Enable+0xa0>)
 8000970:	fba2 2303 	umull	r2, r3, r2, r3
 8000974:	0c9b      	lsrs	r3, r3, #18
 8000976:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000978:	e002      	b.n	8000980 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3b01      	subs	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f9      	bne.n	800097a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000986:	f7ff fc39 	bl	80001fc <HAL_GetTick>
 800098a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800098c:	e018      	b.n	80009c0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800098e:	f7ff fc35 	bl	80001fc <HAL_GetTick>
 8000992:	4602      	mov	r2, r0
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d911      	bls.n	80009c0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a0:	f043 0210 	orr.w	r2, r3, #16
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ac:	f043 0201 	orr.w	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e007      	b.n	80009d0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d1df      	bne.n	800098e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000008 	.word	0x20000008
 80009dc:	431bde83 	.word	0x431bde83

080009e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d127      	bne.n	8000a4a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 0201 	bic.w	r2, r2, #1
 8000a08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a0a:	f7ff fbf7 	bl	80001fc <HAL_GetTick>
 8000a0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a10:	e014      	b.n	8000a3c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a12:	f7ff fbf3 	bl	80001fc <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d90d      	bls.n	8000a3c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f043 0210 	orr.w	r2, r3, #16
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	f043 0201 	orr.w	r2, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e007      	b.n	8000a4c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d0e3      	beq.n	8000a12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d127      	bne.n	8000abe <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a88:	d115      	bne.n	8000ab6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d111      	bne.n	8000ab6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f043 0201 	orr.w	r2, r3, #1
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fe23 	bl	8000702 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000abc:	e004      	b.n	8000ac8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	4798      	blx	r3
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fe18 	bl	8000714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	f043 0204 	orr.w	r2, r3, #4
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff fe10 	bl	8000738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d101      	bne.n	8000b3e <HAL_ADCEx_Calibration_Start+0x1e>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e086      	b.n	8000c4c <HAL_ADCEx_Calibration_Start+0x12c>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff4a 	bl	80009e0 <ADC_ConversionStop_Disable>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d175      	bne.n	8000c42 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b5e:	f023 0302 	bic.w	r3, r3, #2
 8000b62:	f043 0202 	orr.w	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <HAL_ADCEx_Calibration_Start+0x134>)
 8000b6c:	681c      	ldr	r4, [r3, #0]
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f001 f93a 	bl	8001de8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b74:	4603      	mov	r3, r0
 8000b76:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000b7a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000b7c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000b7e:	e002      	b.n	8000b86 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f9      	bne.n	8000b80 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fed5 	bl	800093c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f042 0208 	orr.w	r2, r2, #8
 8000ba0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000ba2:	f7ff fb2b 	bl	80001fc <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000ba8:	e014      	b.n	8000bd4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000baa:	f7ff fb27 	bl	80001fc <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b0a      	cmp	r3, #10
 8000bb6:	d90d      	bls.n	8000bd4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	f023 0312 	bic.w	r3, r3, #18
 8000bc0:	f043 0210 	orr.w	r2, r3, #16
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e03b      	b.n	8000c4c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1e3      	bne.n	8000baa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f042 0204 	orr.w	r2, r2, #4
 8000bf0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000bf2:	f7ff fb03 	bl	80001fc <HAL_GetTick>
 8000bf6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000bf8:	e014      	b.n	8000c24 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000bfa:	f7ff faff 	bl	80001fc <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b0a      	cmp	r3, #10
 8000c06:	d90d      	bls.n	8000c24 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f023 0312 	bic.w	r3, r3, #18
 8000c10:	f043 0210 	orr.w	r2, r3, #16
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e013      	b.n	8000c4c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1e3      	bne.n	8000bfa <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	20000008 	.word	0x20000008

08000c58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
	...

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff90 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff2d 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff42 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff35 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e043      	b.n	8000f26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_DMA_Init+0xa8>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <HAL_DMA_Init+0xac>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	009a      	lsls	r2, r3, #2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_DMA_Init+0xb0>)
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ed2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ed6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	bffdfff8 	.word	0xbffdfff8
 8000f34:	cccccccd 	.word	0xcccccccd
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_DMA_Start_IT+0x20>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e04a      	b.n	8000ff2 <HAL_DMA_Start_IT+0xb6>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d13a      	bne.n	8000fe4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2202      	movs	r2, #2
 8000f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 f8a8 	bl	80010e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 020e 	orr.w	r2, r2, #14
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e00f      	b.n	8000fd2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0204 	bic.w	r2, r2, #4
 8000fc0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 020a 	orr.w	r2, r2, #10
 8000fd0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0201 	orr.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e005      	b.n	8000ff0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fec:	2302      	movs	r3, #2
 8000fee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800100e:	2b02      	cmp	r3, #2
 8001010:	d005      	beq.n	800101e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2204      	movs	r2, #4
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e051      	b.n	80010c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 020e 	bic.w	r2, r2, #14
 800102c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <HAL_DMA_Abort_IT+0xd0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d029      	beq.n	800109c <HAL_DMA_Abort_IT+0xa0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <HAL_DMA_Abort_IT+0xd4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d022      	beq.n	8001098 <HAL_DMA_Abort_IT+0x9c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <HAL_DMA_Abort_IT+0xd8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01a      	beq.n	8001092 <HAL_DMA_Abort_IT+0x96>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_DMA_Abort_IT+0xdc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d012      	beq.n	800108c <HAL_DMA_Abort_IT+0x90>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_DMA_Abort_IT+0xe0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00a      	beq.n	8001086 <HAL_DMA_Abort_IT+0x8a>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_DMA_Abort_IT+0xe4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d102      	bne.n	8001080 <HAL_DMA_Abort_IT+0x84>
 800107a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800107e:	e00e      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001084:	e00b      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108a:	e008      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	e005      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001096:	e002      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001098:	2310      	movs	r3, #16
 800109a:	e000      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 800109c:	2301      	movs	r3, #1
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_DMA_Abort_IT+0xe8>)
 80010a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
    } 
  }
  return status;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020008 	.word	0x40020008
 80010d0:	4002001c 	.word	0x4002001c
 80010d4:	40020030 	.word	0x40020030
 80010d8:	40020044 	.word	0x40020044
 80010dc:	40020058 	.word	0x40020058
 80010e0:	4002006c 	.word	0x4002006c
 80010e4:	40020000 	.word	0x40020000

080010e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b10      	cmp	r3, #16
 8001114:	d108      	bne.n	8001128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001126:	e007      	b.n	8001138 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	60da      	str	r2, [r3, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e127      	b.n	80013a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001158:	2201      	movs	r2, #1
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8116 	bne.w	80013a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b12      	cmp	r3, #18
 800117c:	d034      	beq.n	80011e8 <HAL_GPIO_Init+0xa4>
 800117e:	2b12      	cmp	r3, #18
 8001180:	d80d      	bhi.n	800119e <HAL_GPIO_Init+0x5a>
 8001182:	2b02      	cmp	r3, #2
 8001184:	d02b      	beq.n	80011de <HAL_GPIO_Init+0x9a>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d804      	bhi.n	8001194 <HAL_GPIO_Init+0x50>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d031      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 800118e:	2b01      	cmp	r3, #1
 8001190:	d01c      	beq.n	80011cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001192:	e048      	b.n	8001226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001194:	2b03      	cmp	r3, #3
 8001196:	d043      	beq.n	8001220 <HAL_GPIO_Init+0xdc>
 8001198:	2b11      	cmp	r3, #17
 800119a:	d01b      	beq.n	80011d4 <HAL_GPIO_Init+0x90>
          break;
 800119c:	e043      	b.n	8001226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800119e:	4a89      	ldr	r2, [pc, #548]	; (80013c4 <HAL_GPIO_Init+0x280>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d026      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011a4:	4a87      	ldr	r2, [pc, #540]	; (80013c4 <HAL_GPIO_Init+0x280>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d806      	bhi.n	80011b8 <HAL_GPIO_Init+0x74>
 80011aa:	4a87      	ldr	r2, [pc, #540]	; (80013c8 <HAL_GPIO_Init+0x284>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d020      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011b0:	4a86      	ldr	r2, [pc, #536]	; (80013cc <HAL_GPIO_Init+0x288>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01d      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
          break;
 80011b6:	e036      	b.n	8001226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011b8:	4a85      	ldr	r2, [pc, #532]	; (80013d0 <HAL_GPIO_Init+0x28c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011be:	4a85      	ldr	r2, [pc, #532]	; (80013d4 <HAL_GPIO_Init+0x290>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d016      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011c4:	4a84      	ldr	r2, [pc, #528]	; (80013d8 <HAL_GPIO_Init+0x294>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e028      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e023      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01e      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e019      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e012      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e008      	b.n	8001226 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2bff      	cmp	r3, #255	; 0xff
 800122a:	d801      	bhi.n	8001230 <HAL_GPIO_Init+0xec>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	e001      	b.n	8001234 <HAL_GPIO_Init+0xf0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3304      	adds	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2bff      	cmp	r3, #255	; 0xff
 800123a:	d802      	bhi.n	8001242 <HAL_GPIO_Init+0xfe>
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x104>
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	3b08      	subs	r3, #8
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	210f      	movs	r1, #15
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	6a39      	ldr	r1, [r7, #32]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	431a      	orrs	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 8096 	beq.w	80013a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_GPIO_Init+0x298>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_GPIO_Init+0x298>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b56      	ldr	r3, [pc, #344]	; (80013dc <HAL_GPIO_Init+0x298>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800128e:	4a54      	ldr	r2, [pc, #336]	; (80013e0 <HAL_GPIO_Init+0x29c>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <HAL_GPIO_Init+0x2a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x19e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <HAL_GPIO_Init+0x2a4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x19a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_GPIO_Init+0x2a8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x196>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2ac>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x192>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012e2:	2300      	movs	r3, #0
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	f002 0203 	and.w	r2, r2, #3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f4:	493a      	ldr	r1, [pc, #232]	; (80013e0 <HAL_GPIO_Init+0x29c>)
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4938      	ldr	r1, [pc, #224]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4933      	ldr	r1, [pc, #204]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	492e      	ldr	r1, [pc, #184]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4929      	ldr	r1, [pc, #164]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800134e:	4013      	ands	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	4924      	ldr	r1, [pc, #144]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	43db      	mvns	r3, r3
 8001374:	491f      	ldr	r1, [pc, #124]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001376:	4013      	ands	r3, r2
 8001378:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	491a      	ldr	r1, [pc, #104]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	60cb      	str	r3, [r1, #12]
 8001392:	e006      	b.n	80013a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43db      	mvns	r3, r3
 800139c:	4915      	ldr	r1, [pc, #84]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800139e:	4013      	ands	r3, r2
 80013a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	3301      	adds	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f aed0 	bne.w	8001158 <HAL_GPIO_Init+0x14>
  }
}
 80013b8:	bf00      	nop
 80013ba:	372c      	adds	r7, #44	; 0x2c
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	10210000 	.word	0x10210000
 80013c8:	10110000 	.word	0x10110000
 80013cc:	10120000 	.word	0x10120000
 80013d0:	10310000 	.word	0x10310000
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10220000 	.word	0x10220000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40011400 	.word	0x40011400
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	611a      	str	r2, [r3, #16]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f806 	bl	8001458 <HAL_GPIO_EXTI_Callback>
  }
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e26c      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8087 	beq.w	800159a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b04      	cmp	r3, #4
 8001496:	d00c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d112      	bne.n	80014ca <HAL_RCC_OscConfig+0x5e>
 80014a4:	4b8c      	ldr	r3, [pc, #560]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d10b      	bne.n	80014ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	4b89      	ldr	r3, [pc, #548]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d06c      	beq.n	8001598 <HAL_RCC_OscConfig+0x12c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d168      	bne.n	8001598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e246      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x76>
 80014d4:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a7f      	ldr	r2, [pc, #508]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e02e      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x98>
 80014ea:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a77      	ldr	r2, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e01d      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0xbc>
 800150e:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a71      	ldr	r2, [pc, #452]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a6a      	ldr	r2, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a67      	ldr	r2, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7fe fe58 	bl	80001fc <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7fe fe54 	bl	80001fc <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1fa      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0xe4>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7fe fe44 	bl	80001fc <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7fe fe40 	bl	80001fc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1e6      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x10c>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d063      	beq.n	800166e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x18c>
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x176>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1ba      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4939      	ldr	r1, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	e03a      	b.n	800166e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <HAL_RCC_OscConfig+0x270>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7fe fdf9 	bl	80001fc <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7fe fdf5 	bl	80001fc <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e19b      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4927      	ldr	r1, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x270>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7fe fdd8 	bl	80001fc <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001650:	f7fe fdd4 	bl	80001fc <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e17a      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d03a      	beq.n	80016f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d019      	beq.n	80016b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_RCC_OscConfig+0x274>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7fe fdb8 	bl	80001fc <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7fe fdb4 	bl	80001fc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e15a      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 fac6 	bl	8001c40 <RCC_Delay>
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_OscConfig+0x274>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7fe fd9e 	bl	80001fc <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c2:	e00f      	b.n	80016e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7fe fd9a 	bl	80001fc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d908      	bls.n	80016e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e140      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	42420000 	.word	0x42420000
 80016e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b9e      	ldr	r3, [pc, #632]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e9      	bne.n	80016c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a6 	beq.w	800184a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b97      	ldr	r3, [pc, #604]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b94      	ldr	r3, [pc, #592]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a93      	ldr	r2, [pc, #588]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b91      	ldr	r3, [pc, #580]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b8e      	ldr	r3, [pc, #568]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001736:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7fe fd5b 	bl	80001fc <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7fe fd57 	bl	80001fc <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0fd      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	4b81      	ldr	r3, [pc, #516]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x312>
 8001770:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e02d      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x334>
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a75      	ldr	r2, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	e01c      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d10c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x356>
 80017a8:	4b6d      	ldr	r3, [pc, #436]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a6c      	ldr	r2, [pc, #432]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	4b6a      	ldr	r3, [pc, #424]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a69      	ldr	r2, [pc, #420]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e00b      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 80017c2:	4b67      	ldr	r3, [pc, #412]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a66      	ldr	r2, [pc, #408]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	4b64      	ldr	r3, [pc, #400]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a63      	ldr	r2, [pc, #396]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d015      	beq.n	800180e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7fe fd0b 	bl	80001fc <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7fe fd07 	bl	80001fc <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e0ab      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	4b57      	ldr	r3, [pc, #348]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ee      	beq.n	80017ea <HAL_RCC_OscConfig+0x37e>
 800180c:	e014      	b.n	8001838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7fe fcf5 	bl	80001fc <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7fe fcf1 	bl	80001fc <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e095      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ee      	bne.n	8001816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183e:	4b48      	ldr	r3, [pc, #288]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a47      	ldr	r2, [pc, #284]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8081 	beq.w	8001956 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d061      	beq.n	8001924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d146      	bne.n	80018f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x4fc>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7fe fcc5 	bl	80001fc <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7fe fcc1 	bl	80001fc <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e067      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	492d      	ldr	r1, [pc, #180]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a19      	ldr	r1, [r3, #32]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	430b      	orrs	r3, r1
 80018c2:	4927      	ldr	r1, [pc, #156]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x4fc>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7fe fc95 	bl	80001fc <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d6:	f7fe fc91 	bl	80001fc <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e037      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46a>
 80018f4:	e02f      	b.n	8001956 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_RCC_OscConfig+0x4fc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7fe fc7e 	bl	80001fc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7fe fc7a 	bl	80001fc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e020      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x498>
 8001922:	e018      	b.n	8001956 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e013      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	429a      	cmp	r2, r3
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	40007000 	.word	0x40007000
 8001968:	42420060 	.word	0x42420060

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0d0      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4965      	ldr	r1, [pc, #404]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d040      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e073      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4936      	ldr	r1, [pc, #216]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7fe fbce 	bl	80001fc <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7fe fbca 	bl	80001fc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e053      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d210      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4922      	ldr	r1, [pc, #136]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4601      	mov	r1, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1cc>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb2c 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08004358 	.word	0x08004358
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000000 	.word	0x20000000

08001b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b490      	push	{r4, r7}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b48:	1d3c      	adds	r4, r7, #4
 8001b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x46>
 8001b7e:	e02d      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b82:	623b      	str	r3, [r7, #32]
      break;
 8001b84:	e02d      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	0c9b      	lsrs	r3, r3, #18
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b92:	4413      	add	r3, r2
 8001b94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c5b      	lsrs	r3, r3, #17
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bbe:	fb02 f203 	mul.w	r2, r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	e004      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	623b      	str	r3, [r7, #32]
      break;
 8001bda:	e002      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bde:	623b      	str	r3, [r7, #32]
      break;
 8001be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be2:	6a3b      	ldr	r3, [r7, #32]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc90      	pop	{r4, r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	08004328 	.word	0x08004328
 8001bf4:	08004338 	.word	0x08004338
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	007a1200 	.word	0x007a1200
 8001c00:	003d0900 	.word	0x003d0900

08001c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c1c:	f7ff fff2 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c20:	4601      	mov	r1, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	0adb      	lsrs	r3, r3, #11
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	08004368 	.word	0x08004368

08001c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <RCC_Delay+0x34>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <RCC_Delay+0x38>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c5c:	bf00      	nop
  }
  while (Delay --);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	60fa      	str	r2, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <RCC_Delay+0x1c>
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008
 8001c78:	10624dd3 	.word	0x10624dd3

08001c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d07d      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	61d3      	str	r3, [r2, #28]
 8001cb4:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d118      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd0:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cdc:	f7fe fa8e 	bl	80001fc <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce4:	f7fe fa8a 	bl	80001fc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e06d      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d02e      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d027      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d30:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d014      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe fa59 	bl	80001fc <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe fa55 	bl	80001fc <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e036      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ee      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4917      	ldr	r1, [pc, #92]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	490b      	ldr	r1, [pc, #44]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4904      	ldr	r1, [pc, #16]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42420440 	.word	0x42420440

08001de8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b08d      	sub	sp, #52	; 0x34
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001df0:	4b55      	ldr	r3, [pc, #340]	; (8001f48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001df2:	f107 040c 	add.w	r4, r7, #12
 8001df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d07f      	beq.n	8001f1c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001e1c:	2b10      	cmp	r3, #16
 8001e1e:	d002      	beq.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d048      	beq.n	8001eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e24:	e08b      	b.n	8001f3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e2c:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d07f      	beq.n	8001f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e44:	4413      	add	r3, r2
 8001e46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e4a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d018      	beq.n	8001e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0c5b      	lsrs	r3, r3, #17
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e64:	4413      	add	r3, r2
 8001e66:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00d      	beq.n	8001e92 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001e76:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e86:	e004      	b.n	8001e92 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	4a33      	ldr	r2, [pc, #204]	; (8001f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e9e:	d102      	bne.n	8001ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ea4:	e048      	b.n	8001f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4a2c      	ldr	r2, [pc, #176]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001eb4:	e040      	b.n	8001f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec6:	d108      	bne.n	8001eda <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed8:	e01f      	b.n	8001f1a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee4:	d109      	bne.n	8001efa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001ef2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef8:	e00f      	b.n	8001f1a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f04:	d11a      	bne.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d014      	beq.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001f12:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f18:	e010      	b.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001f1a:	e00f      	b.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f1c:	f7ff fe7c 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	0b9b      	lsrs	r3, r3, #14
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f36:	e002      	b.n	8001f3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001f38:	bf00      	nop
 8001f3a:	e000      	b.n	8001f3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001f3c:	bf00      	nop
    }
  }
  return (frequency);
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3734      	adds	r7, #52	; 0x34
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}
 8001f48:	0800433c 	.word	0x0800433c
 8001f4c:	0800434c 	.word	0x0800434c
 8001f50:	40021000 	.word	0x40021000
 8001f54:	007a1200 	.word	0x007a1200
 8001f58:	003d0900 	.word	0x003d0900
 8001f5c:	aaaaaaab 	.word	0xaaaaaaab

08001f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e053      	b.n	800201a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f002 f831 	bl	8003ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	ea42 0103 	orr.w	r1, r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	0c1a      	lsrs	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f002 0204 	and.w	r2, r2, #4
 8001ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e01d      	b.n	8002070 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f002 f81f 	bl	800408c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 faf1 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d007      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e01d      	b.n	800210c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f815 	bl	8002114 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f000 faa3 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e02d      	b.n	8002196 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f825 	bl	800219e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f000 fa6e 	bl	8002648 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0208 	bic.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0202 	mvn.w	r2, #2
 80021dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa0d 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fa00 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fa0f 	bl	8002624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b04      	cmp	r3, #4
 8002218:	d122      	bne.n	8002260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b04      	cmp	r3, #4
 8002226:	d11b      	bne.n	8002260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0204 	mvn.w	r2, #4
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9e3 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f9d6 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f9e5 	bl	8002624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b08      	cmp	r3, #8
 800226c:	d122      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b08      	cmp	r3, #8
 800227a:	d11b      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0208 	mvn.w	r2, #8
 8002284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2204      	movs	r2, #4
 800228a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f9b9 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 80022a0:	e005      	b.n	80022ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f9ac 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f9bb 	bl	8002624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d122      	bne.n	8002308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d11b      	bne.n	8002308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0210 	mvn.w	r2, #16
 80022d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2208      	movs	r2, #8
 80022de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f98f 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 80022f4:	e005      	b.n	8002302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f982 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f991 	bl	8002624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d10e      	bne.n	8002334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0201 	mvn.w	r2, #1
 800232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f95d 	bl	80025ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233e:	2b80      	cmp	r3, #128	; 0x80
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234c:	2b80      	cmp	r3, #128	; 0x80
 800234e:	d107      	bne.n	8002360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fc92 	bl	8002c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b40      	cmp	r3, #64	; 0x40
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f955 	bl	8002636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b20      	cmp	r3, #32
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d107      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0220 	mvn.w	r2, #32
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fc5d 	bl	8002c72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_TIM_OC_ConfigChannel+0x1a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e04e      	b.n	8002478 <HAL_TIM_OC_ConfigChannel+0xb8>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d839      	bhi.n	8002464 <HAL_TIM_OC_ConfigChannel+0xa4>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	0800242d 	.word	0x0800242d
 80023fc:	08002465 	.word	0x08002465
 8002400:	08002465 	.word	0x08002465
 8002404:	08002465 	.word	0x08002465
 8002408:	0800243b 	.word	0x0800243b
 800240c:	08002465 	.word	0x08002465
 8002410:	08002465 	.word	0x08002465
 8002414:	08002465 	.word	0x08002465
 8002418:	08002449 	.word	0x08002449
 800241c:	08002465 	.word	0x08002465
 8002420:	08002465 	.word	0x08002465
 8002424:	08002465 	.word	0x08002465
 8002428:	08002457 	.word	0x08002457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f96a 	bl	800270c <TIM_OC1_SetConfig>
      break;
 8002438:	e015      	b.n	8002466 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f9c9 	bl	80027d8 <TIM_OC2_SetConfig>
      break;
 8002446:	e00e      	b.n	8002466 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fa2c 	bl	80028ac <TIM_OC3_SetConfig>
      break;
 8002454:	e007      	b.n	8002466 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fa8f 	bl	8002980 <TIM_OC4_SetConfig>
      break;
 8002462:	e000      	b.n	8002466 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002464:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIM_ConfigClockSource+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e0a6      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x166>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d067      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0x120>
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d80b      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x6c>
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d073      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x140>
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d802      	bhi.n	80024e2 <HAL_TIM_ConfigClockSource+0x62>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06f      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024e0:	e078      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d06c      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x140>
 80024e6:	2b30      	cmp	r3, #48	; 0x30
 80024e8:	d06a      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024ea:	e073      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024ec:	2b70      	cmp	r3, #112	; 0x70
 80024ee:	d00d      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x8c>
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d804      	bhi.n	80024fe <HAL_TIM_ConfigClockSource+0x7e>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d033      	beq.n	8002560 <HAL_TIM_ConfigClockSource+0xe0>
 80024f8:	2b60      	cmp	r3, #96	; 0x60
 80024fa:	d041      	beq.n	8002580 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024fc:	e06a      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d066      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x152>
 8002504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002508:	d017      	beq.n	800253a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800250a:	e063      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f000 faf5 	bl	8002b0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800252e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	609a      	str	r2, [r3, #8]
      break;
 8002538:	e04c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f000 fade 	bl	8002b0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255c:	609a      	str	r2, [r3, #8]
      break;
 800255e:	e039      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	461a      	mov	r2, r3
 800256e:	f000 fa55 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2150      	movs	r1, #80	; 0x50
 8002578:	4618      	mov	r0, r3
 800257a:	f000 faac 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 800257e:	e029      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	461a      	mov	r2, r3
 800258e:	f000 fa73 	bl	8002a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2160      	movs	r1, #96	; 0x60
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa9c 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 800259e:	e019      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f000 fa35 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fa8c 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80025be:	e009      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f000 fa83 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80025d0:	e000      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a29      	ldr	r2, [pc, #164]	; (8002700 <TIM_Base_SetConfig+0xb8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0x30>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0x30>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <TIM_Base_SetConfig+0xbc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0x30>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a25      	ldr	r2, [pc, #148]	; (8002708 <TIM_Base_SetConfig+0xc0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <TIM_Base_SetConfig+0xb8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_Base_SetConfig+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d007      	beq.n	80026aa <TIM_Base_SetConfig+0x62>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a19      	ldr	r2, [pc, #100]	; (8002704 <TIM_Base_SetConfig+0xbc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_Base_SetConfig+0x62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <TIM_Base_SetConfig+0xc0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <TIM_Base_SetConfig+0xb8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	615a      	str	r2, [r3, #20]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800

0800270c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f023 0302 	bic.w	r3, r3, #2
 8002754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <TIM_OC1_SetConfig+0xc8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10c      	bne.n	8002782 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 0308 	bic.w	r3, r3, #8
 800276e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 0304 	bic.w	r3, r3, #4
 8002780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <TIM_OC1_SetConfig+0xc8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	621a      	str	r2, [r3, #32]
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00

080027d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f023 0210 	bic.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 0320 	bic.w	r3, r3, #32
 8002822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <TIM_OC2_SetConfig+0xd0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10d      	bne.n	8002854 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800283e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <TIM_OC2_SetConfig+0xd0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d113      	bne.n	8002884 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800286a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40012c00 	.word	0x40012c00

080028ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1d      	ldr	r2, [pc, #116]	; (800297c <TIM_OC3_SetConfig+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10d      	bne.n	8002926 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <TIM_OC3_SetConfig+0xd0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d113      	bne.n	8002956 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	621a      	str	r2, [r3, #32]
}
 8002970:	bf00      	nop
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00

08002980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	031b      	lsls	r3, r3, #12
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <TIM_OC4_SetConfig+0x98>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d109      	bne.n	80029f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00

08002a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 030a 	bic.w	r3, r3, #10
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f023 0210 	bic.w	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	031b      	lsls	r3, r3, #12
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	621a      	str	r2, [r3, #32]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f043 0307 	orr.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	021a      	lsls	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e032      	b.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b98:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e03d      	b.n	8002c68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x52>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f98d 	bl	8003002 <UART_Receive_IT>
      return;
 8002ce8:	e0cc      	b.n	8002e84 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80ab 	beq.w	8002e48 <HAL_UART_IRQHandler+0x1b0>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_UART_IRQHandler+0x70>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80a0 	beq.w	8002e48 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_UART_IRQHandler+0x90>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_UART_IRQHandler+0xb0>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	f043 0202 	orr.w	r2, r3, #2
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_UART_IRQHandler+0xd0>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_UART_IRQHandler+0xf0>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	f043 0208 	orr.w	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d078      	beq.n	8002e82 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_UART_IRQHandler+0x112>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f92c 	bl	8003002 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x13a>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d031      	beq.n	8002e36 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f877 	bl	8002ec6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d023      	beq.n	8002e2e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <HAL_UART_IRQHandler+0x1f4>)
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe f8f6 	bl	8000ffc <HAL_DMA_Abort_IT>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e20:	4610      	mov	r0, r2
 8002e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	e00e      	b.n	8002e44 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f844 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00a      	b.n	8002e44 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f840 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e006      	b.n	8002e44 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f83c 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e42:	e01e      	b.n	8002e82 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	bf00      	nop
    return;
 8002e46:	e01c      	b.n	8002e82 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_UART_IRQHandler+0x1cc>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f863 	bl	8002f28 <UART_Transmit_IT>
    return;
 8002e62:	e00f      	b.n	8002e84 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_UART_IRQHandler+0x1ec>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8aa 	bl	8002fd2 <UART_EndTransmit_IT>
    return;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002e82:	bf00      	nop
  }
}
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	08002f01 	.word	0x08002f01

08002e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002edc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff ffca 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b21      	cmp	r3, #33	; 0x21
 8002f3a:	d144      	bne.n	8002fc6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	d11a      	bne.n	8002f7c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f5a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]
 8002f6e:	e00e      	b.n	8002f8e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	621a      	str	r2, [r3, #32]
 8002f7a:	e008      	b.n	8002f8e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	1c59      	adds	r1, r3, #1
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6211      	str	r1, [r2, #32]
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ff4c 	bl	8002e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b22      	cmp	r3, #34	; 0x22
 8003014:	d171      	bne.n	80030fa <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d123      	bne.n	8003068 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10e      	bne.n	800304c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
 800304a:	e029      	b.n	80030a0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	b29b      	uxth	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
 8003066:	e01b      	b.n	80030a0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6858      	ldr	r0, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6291      	str	r1, [r2, #40]	; 0x28
 8003080:	b2c2      	uxtb	r2, r0
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e00c      	b.n	80030a0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	1c58      	adds	r0, r3, #1
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	6288      	str	r0, [r1, #40]	; 0x28
 8003098:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4619      	mov	r1, r3
 80030ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d120      	bne.n	80030f6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0220 	bic.w	r2, r2, #32
 80030c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fed8 	bl	8002ea2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e002      	b.n	80030fc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <simple_delay_ms>:




void simple_delay_ms(const uint16_t ms)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	80fb      	strh	r3, [r7, #6]
  uint32_t i = ms * 7200;
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	60fb      	str	r3, [r7, #12]
  while (i-- > 0) {
 800311a:	e000      	b.n	800311e <simple_delay_ms+0x1a>
    asm("nop");
 800311c:	bf00      	nop
  while (i-- > 0) {
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	60fa      	str	r2, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f9      	bne.n	800311c <simple_delay_ms+0x18>
  }
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <simple_delay_us>:

void simple_delay_us(const uint16_t us)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	80fb      	strh	r3, [r7, #6]
  uint16_t i = us * 7;
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	461a      	mov	r2, r3
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	81fb      	strh	r3, [r7, #14]
  while (i-- > 0) {
 8003146:	e000      	b.n	800314a <simple_delay_us+0x18>
    asm("nop");
 8003148:	bf00      	nop
  while (i-- > 0) {
 800314a:	89fb      	ldrh	r3, [r7, #14]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	81fa      	strh	r2, [r7, #14]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f9      	bne.n	8003148 <simple_delay_us+0x16>
  }
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <crc8>:
 *      Author: kowma
 */
#include "main.h"
#include "ds18b20.h"

unsigned char crc8(void const *mem, size_t len) {
 800315e:	b480      	push	{r7}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]
	unsigned char const *data = mem;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	613b      	str	r3, [r7, #16]

		while (len--) {
 8003170:	e022      	b.n	80031b8 <crc8+0x5a>
			uint8_t inbyte = *data++;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	613a      	str	r2, [r7, #16]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 8; i; i--) {
 800317c:	2308      	movs	r3, #8
 800317e:	73bb      	strb	r3, [r7, #14]
 8003180:	e017      	b.n	80031b2 <crc8+0x54>
				uint8_t mix = (crc ^ inbyte) & 0x01;
 8003182:	7dfa      	ldrb	r2, [r7, #23]
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	4053      	eors	r3, r2
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	737b      	strb	r3, [r7, #13]
				crc >>= 1;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
				if (mix) crc ^= 0x8C;
 8003196:	7b7b      	ldrb	r3, [r7, #13]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d004      	beq.n	80031a6 <crc8+0x48>
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80031a2:	43db      	mvns	r3, r3
 80031a4:	75fb      	strb	r3, [r7, #23]
				inbyte >>= 1;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 8; i; i--) {
 80031ac:	7bbb      	ldrb	r3, [r7, #14]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	73bb      	strb	r3, [r7, #14]
 80031b2:	7bbb      	ldrb	r3, [r7, #14]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e4      	bne.n	8003182 <crc8+0x24>
		while (len--) {
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	1e5a      	subs	r2, r3, #1
 80031bc:	603a      	str	r2, [r7, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1d7      	bne.n	8003172 <crc8+0x14>
			}
		}
		return crc;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
	...

080031d0 <oneWire_direction_set>:
}scratchpad[MAX_DS18B20_SENSORS_AMOUNT];



void oneWire_direction_set(uint8_t direction)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef	GPIO_InitStruct;
	if(direction == ONE_WIRE_BUS_INPUT)
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10e      	bne.n	80031fe <oneWire_direction_set+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin ;// Pin for 1-Wire bus
 80031ec:	2308      	movs	r3, #8
 80031ee:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	4619      	mov	r1, r3
 80031f6:	480c      	ldr	r0, [pc, #48]	; (8003228 <oneWire_direction_set+0x58>)
 80031f8:	f7fd ffa4 	bl	8001144 <HAL_GPIO_Init>
	else
	{
		// error
	}

}
 80031fc:	e010      	b.n	8003220 <oneWire_direction_set+0x50>
	else if(direction ==  ONE_WIRE_BUS_OUTPUT)
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d10d      	bne.n	8003220 <oneWire_direction_set+0x50>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8003204:	2311      	movs	r3, #17
 8003206:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin; // Pin for 1-Wire bus
 8003210:	2308      	movs	r3, #8
 8003212:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ONE_WIRE_DATA1_GPIO_Port, &GPIO_InitStruct); // Reinitialize
 8003214:	f107 0308 	add.w	r3, r7, #8
 8003218:	4619      	mov	r1, r3
 800321a:	4803      	ldr	r0, [pc, #12]	; (8003228 <oneWire_direction_set+0x58>)
 800321c:	f7fd ff92 	bl	8001144 <HAL_GPIO_Init>
}
 8003220:	bf00      	nop
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40010800 	.word	0x40010800

0800322c <oneWire_init>:

uint8_t oneWire_init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
	uint8_t i;
	//TIM2->CR1 |= (1<<3); //OPM
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8003232:	2002      	movs	r0, #2
 8003234:	f7ff ffcc 	bl	80031d0 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <oneWire_init+0x54>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <oneWire_init+0x54>)
 800323e:	f023 0308 	bic.w	r3, r3, #8
 8003242:	60d3      	str	r3, [r2, #12]
	simple_delay_us(500);
 8003244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003248:	f7ff ff73 	bl	8003132 <simple_delay_us>

	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 800324c:	2001      	movs	r0, #1
 800324e:	f7ff ffbf 	bl	80031d0 <oneWire_direction_set>
	simple_delay_us(70);
 8003252:	2046      	movs	r0, #70	; 0x46
 8003254:	f7ff ff6d 	bl	8003132 <simple_delay_us>

	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin) // if 0 - then there is devices on bus
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <oneWire_init+0x54>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <oneWire_init+0x3e>
	{
		i = ONE_WIRE_PRESENCE_FAIL;
 8003264:	2300      	movs	r3, #0
 8003266:	71fb      	strb	r3, [r7, #7]
 8003268:	e001      	b.n	800326e <oneWire_init+0x42>
	}
	else i = ONE_WIRE_PRESENCE_SUCCESS;
 800326a:	2301      	movs	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]
	simple_delay_us(410);
 800326e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003272:	f7ff ff5e 	bl	8003132 <simple_delay_us>
	return i;
 8003276:	79fb      	ldrb	r3, [r7, #7]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40010800 	.word	0x40010800

08003284 <oneWire_writeBit>:

void oneWire_writeBit(uint8_t value)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin; // todo check
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <oneWire_writeBit+0x50>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <oneWire_writeBit+0x50>)
 8003294:	f023 0308 	bic.w	r3, r3, #8
 8003298:	60d3      	str	r3, [r2, #12]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 800329a:	2002      	movs	r0, #2
 800329c:	f7ff ff98 	bl	80031d0 <oneWire_direction_set>
	if(value)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <oneWire_writeBit+0x36>
	{
		simple_delay_us(6);
 80032a6:	2006      	movs	r0, #6
 80032a8:	f7ff ff43 	bl	8003132 <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7ff ff8f 	bl	80031d0 <oneWire_direction_set>
		simple_delay_us(64);
 80032b2:	2040      	movs	r0, #64	; 0x40
 80032b4:	f7ff ff3d 	bl	8003132 <simple_delay_us>
	{
		simple_delay_us(60);
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
		simple_delay_us(10);
	}
}
 80032b8:	e008      	b.n	80032cc <oneWire_writeBit+0x48>
		simple_delay_us(60);
 80032ba:	203c      	movs	r0, #60	; 0x3c
 80032bc:	f7ff ff39 	bl	8003132 <simple_delay_us>
		oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7ff ff85 	bl	80031d0 <oneWire_direction_set>
		simple_delay_us(10);
 80032c6:	200a      	movs	r0, #10
 80032c8:	f7ff ff33 	bl	8003132 <simple_delay_us>
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40010800 	.word	0x40010800

080032d8 <oneWire_writeByte>:
void oneWire_writeByte(uint8_t byte)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 80032e2:	2002      	movs	r0, #2
 80032e4:	f7ff ff74 	bl	80031d0 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <oneWire_writeByte+0x50>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <oneWire_writeByte+0x50>)
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	60d3      	str	r3, [r2, #12]
	for(uint8_t i=0; i<8; i++){
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e00f      	b.n	800331a <oneWire_writeByte+0x42>
		oneWire_writeBit(byte & 1<<i);
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2201      	movs	r2, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	b25a      	sxtb	r2, r3
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	4013      	ands	r3, r2
 800330a:	b25b      	sxtb	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ffb8 	bl	8003284 <oneWire_writeBit>
	for(uint8_t i=0; i<8; i++){
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	3301      	adds	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b07      	cmp	r3, #7
 800331e:	d9ec      	bls.n	80032fa <oneWire_writeByte+0x22>
	}
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40010800 	.word	0x40010800

0800332c <oneWire_readbit>:

uint8_t oneWire_readbit(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
	oneWire_direction_set(ONE_WIRE_BUS_OUTPUT);
 8003330:	2002      	movs	r0, #2
 8003332:	f7ff ff4d 	bl	80031d0 <oneWire_direction_set>
	ONE_WIRE_DATA1_GPIO_Port->ODR &= ~ONE_WIRE_DATA1_Pin;
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <oneWire_readbit+0x4c>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <oneWire_readbit+0x4c>)
 800333c:	f023 0308 	bic.w	r3, r3, #8
 8003340:	60d3      	str	r3, [r2, #12]
	simple_delay_us(2);
 8003342:	2002      	movs	r0, #2
 8003344:	f7ff fef5 	bl	8003132 <simple_delay_us>
	oneWire_direction_set(ONE_WIRE_BUS_INPUT);
 8003348:	2001      	movs	r0, #1
 800334a:	f7ff ff41 	bl	80031d0 <oneWire_direction_set>
	simple_delay_us(10);
 800334e:	200a      	movs	r0, #10
 8003350:	f7ff feef 	bl	8003132 <simple_delay_us>
	if(ONE_WIRE_DATA1_GPIO_Port->IDR & ONE_WIRE_DATA1_Pin)
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <oneWire_readbit+0x4c>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <oneWire_readbit+0x3e>
	{
		simple_delay_us(60);
 8003360:	203c      	movs	r0, #60	; 0x3c
 8003362:	f7ff fee6 	bl	8003132 <simple_delay_us>
		return 1;
 8003366:	2301      	movs	r3, #1
 8003368:	e003      	b.n	8003372 <oneWire_readbit+0x46>
	}
	else{
		simple_delay_us(60);
 800336a:	203c      	movs	r0, #60	; 0x3c
 800336c:	f7ff fee1 	bl	8003132 <simple_delay_us>
		return 0;
 8003370:	2300      	movs	r3, #0
	}
}
 8003372:	4618      	mov	r0, r3
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40010800 	.word	0x40010800

0800337c <write_data_to_struct>:
	}
	return devices_counter;
}

void write_data_to_struct(uint8_t bit_cnt, uint8_t bit_data, uint8_t deviceNo)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
 8003386:	460b      	mov	r3, r1
 8003388:	71bb      	strb	r3, [r7, #6]
 800338a:	4613      	mov	r3, r2
 800338c:	717b      	strb	r3, [r7, #5]
	if(bit_cnt < 8) // write to family no
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	2b07      	cmp	r3, #7
 8003392:	d815      	bhi.n	80033c0 <write_data_to_struct+0x44>
	{
		 if(bit_data) rom_address[deviceNo].ROM_FAMILY_NO |= (1 << bit_cnt);
 8003394:	79bb      	ldrb	r3, [r7, #6]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06e      	beq.n	8003478 <write_data_to_struct+0xfc>
 800339a:	797b      	ldrb	r3, [r7, #5]
 800339c:	4a39      	ldr	r2, [pc, #228]	; (8003484 <write_data_to_struct+0x108>)
 800339e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	b25a      	sxtb	r2, r3
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b25a      	sxtb	r2, r3
 80033b4:	797b      	ldrb	r3, [r7, #5]
 80033b6:	b2d1      	uxtb	r1, r2
 80033b8:	4a32      	ldr	r2, [pc, #200]	; (8003484 <write_data_to_struct+0x108>)
 80033ba:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	}
	else if( bit_cnt >= 56) // CRC
	{
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
	}
}
 80033be:	e05b      	b.n	8003478 <write_data_to_struct+0xfc>
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	2b07      	cmp	r3, #7
 80033c4:	d919      	bls.n	80033fa <write_data_to_struct+0x7e>
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	2b27      	cmp	r3, #39	; 0x27
 80033ca:	d816      	bhi.n	80033fa <write_data_to_struct+0x7e>
		if(bit_data) rom_address[deviceNo].ROM_NO_FIRST_HALF |= (1 << (bit_cnt - 8));
 80033cc:	79bb      	ldrb	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d052      	beq.n	8003478 <write_data_to_struct+0xfc>
 80033d2:	797b      	ldrb	r3, [r7, #5]
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <write_data_to_struct+0x108>)
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	3b08      	subs	r3, #8
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	4619      	mov	r1, r3
 80033ea:	797b      	ldrb	r3, [r7, #5]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	4925      	ldr	r1, [pc, #148]	; (8003484 <write_data_to_struct+0x108>)
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	f8c3 2001 	str.w	r2, [r3, #1]
 80033f8:	e03e      	b.n	8003478 <write_data_to_struct+0xfc>
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) )  // Serial no first half
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2b27      	cmp	r3, #39	; 0x27
 80033fe:	d91e      	bls.n	800343e <write_data_to_struct+0xc2>
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	2b37      	cmp	r3, #55	; 0x37
 8003404:	d81b      	bhi.n	800343e <write_data_to_struct+0xc2>
		if(bit_data) rom_address[deviceNo].ROM_NO_SECOUND_HALF |= (1 << (bit_cnt - 40 ));
 8003406:	79bb      	ldrb	r3, [r7, #6]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d035      	beq.n	8003478 <write_data_to_struct+0xfc>
 800340c:	797b      	ldrb	r3, [r7, #5]
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <write_data_to_struct+0x108>)
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003418:	b29b      	uxth	r3, r3
 800341a:	b21a      	sxth	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	3b28      	subs	r3, #40	; 0x28
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	b21b      	sxth	r3, r3
 8003428:	4313      	orrs	r3, r2
 800342a:	b21a      	sxth	r2, r3
 800342c:	797b      	ldrb	r3, [r7, #5]
 800342e:	b291      	uxth	r1, r2
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <write_data_to_struct+0x108>)
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	460a      	mov	r2, r1
 8003438:	f8a3 2005 	strh.w	r2, [r3, #5]
 800343c:	e01c      	b.n	8003478 <write_data_to_struct+0xfc>
	else if( bit_cnt >= 56) // CRC
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	2b37      	cmp	r3, #55	; 0x37
 8003442:	d919      	bls.n	8003478 <write_data_to_struct+0xfc>
		if(bit_data) rom_address[deviceNo].ROM_CRC |= (1 << (bit_cnt - 56));
 8003444:	79bb      	ldrb	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <write_data_to_struct+0xfc>
 800344a:	797b      	ldrb	r3, [r7, #5]
 800344c:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <write_data_to_struct+0x108>)
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	79db      	ldrb	r3, [r3, #7]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	b25a      	sxtb	r2, r3
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	3b38      	subs	r3, #56	; 0x38
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	b25b      	sxtb	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b25a      	sxtb	r2, r3
 8003468:	797b      	ldrb	r3, [r7, #5]
 800346a:	b2d1      	uxtb	r1, r2
 800346c:	4a05      	ldr	r2, [pc, #20]	; (8003484 <write_data_to_struct+0x108>)
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	460a      	mov	r2, r1
 8003474:	71da      	strb	r2, [r3, #7]
}
 8003476:	e7ff      	b.n	8003478 <write_data_to_struct+0xfc>
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000138 	.word	0x20000138

08003488 <read_address_bit_form_struct>:
//		if(bit_data) ROM_CRC[deviceNo] |= (1 << (bit_cnt - 56));
//	}
//}

uint8_t read_address_bit_form_struct(uint8_t bit_cnt, uint8_t deviceNo)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	460a      	mov	r2, r1
 8003492:	71fb      	strb	r3, [r7, #7]
 8003494:	4613      	mov	r3, r2
 8003496:	71bb      	strb	r3, [r7, #6]
	if(bit_cnt < 8) // write to family no
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b07      	cmp	r3, #7
 800349c:	d810      	bhi.n	80034c0 <read_address_bit_form_struct+0x38>
	{
		 return ((rom_address[deviceNo].ROM_FAMILY_NO & (1 << bit_cnt))> 0);
 800349e:	79bb      	ldrb	r3, [r7, #6]
 80034a0:	4a2e      	ldr	r2, [pc, #184]	; (800355c <read_address_bit_form_struct+0xd4>)
 80034a2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	2201      	movs	r2, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	400b      	ands	r3, r1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bfcc      	ite	gt
 80034b8:	2301      	movgt	r3, #1
 80034ba:	2300      	movle	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e048      	b.n	8003552 <read_address_bit_form_struct+0xca>
	}
	else if( (bit_cnt >= 8) && (bit_cnt < 40)) // Serial no first half
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	2b07      	cmp	r3, #7
 80034c4:	d914      	bls.n	80034f0 <read_address_bit_form_struct+0x68>
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	2b27      	cmp	r3, #39	; 0x27
 80034ca:	d811      	bhi.n	80034f0 <read_address_bit_form_struct+0x68>
	{
		return ((rom_address[deviceNo].ROM_NO_FIRST_HALF & ( 1 << (bit_cnt - 8) )) > 0);
 80034cc:	79bb      	ldrb	r3, [r7, #6]
 80034ce:	4a23      	ldr	r2, [pc, #140]	; (800355c <read_address_bit_form_struct+0xd4>)
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80034d8:	79fa      	ldrb	r2, [r7, #7]
 80034da:	3a08      	subs	r2, #8
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e030      	b.n	8003552 <read_address_bit_form_struct+0xca>
	}
	else if( (bit_cnt >= 40)  && (bit_cnt < 56) ) // Serial no first half
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	2b27      	cmp	r3, #39	; 0x27
 80034f4:	d916      	bls.n	8003524 <read_address_bit_form_struct+0x9c>
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	2b37      	cmp	r3, #55	; 0x37
 80034fa:	d813      	bhi.n	8003524 <read_address_bit_form_struct+0x9c>
	{
		return ((rom_address[deviceNo].ROM_NO_SECOUND_HALF & (1 << (bit_cnt - 40) )) > 0);
 80034fc:	79bb      	ldrb	r3, [r7, #6]
 80034fe:	4a17      	ldr	r2, [pc, #92]	; (800355c <read_address_bit_form_struct+0xd4>)
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003508:	b29b      	uxth	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	3b28      	subs	r3, #40	; 0x28
 8003510:	2201      	movs	r2, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	400b      	ands	r3, r1
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfcc      	ite	gt
 800351c:	2301      	movgt	r3, #1
 800351e:	2300      	movle	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e016      	b.n	8003552 <read_address_bit_form_struct+0xca>
	}
	else if( bit_cnt >= 56) // CRC
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b37      	cmp	r3, #55	; 0x37
 8003528:	d912      	bls.n	8003550 <read_address_bit_form_struct+0xc8>
	{
		return ((rom_address[deviceNo].ROM_CRC & (1 << (bit_cnt - 56) )) > 0) ;
 800352a:	79bb      	ldrb	r3, [r7, #6]
 800352c:	4a0b      	ldr	r2, [pc, #44]	; (800355c <read_address_bit_form_struct+0xd4>)
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	79db      	ldrb	r3, [r3, #7]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	3b38      	subs	r3, #56	; 0x38
 800353c:	2201      	movs	r2, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	400b      	ands	r3, r1
 8003544:	2b00      	cmp	r3, #0
 8003546:	bfcc      	ite	gt
 8003548:	2301      	movgt	r3, #1
 800354a:	2300      	movle	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e000      	b.n	8003552 <read_address_bit_form_struct+0xca>
	}
	else // not used // TODO add asset
	{
		return 0;
 8003550:	2300      	movs	r3, #0
	}

}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20000138 	.word	0x20000138

08003560 <ds18b20_check_crc>:
//	}
//}


uint8_t ds18b20_check_crc(uint8_t DS18B20_sensor_no)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
	uint8_t sensor_crc;
	sensor_crc = crc8(&rom_address[DS18B20_sensor_no], 7);
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <ds18b20_check_crc+0x40>)
 8003570:	4413      	add	r3, r2
 8003572:	2107      	movs	r1, #7
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fdf2 	bl	800315e <crc8>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]
	if(sensor_crc == rom_address[DS18B20_sensor_no].ROM_CRC) return DS18B20_CRC_ACK_OK;
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <ds18b20_check_crc+0x40>)
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	79db      	ldrb	r3, [r3, #7]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	429a      	cmp	r2, r3
 800358e:	d101      	bne.n	8003594 <ds18b20_check_crc+0x34>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <ds18b20_check_crc+0x36>
	else return DS18B20_CRC_ACK_FAIL;
 8003594:	2300      	movs	r3, #0

}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000138 	.word	0x20000138

080035a4 <ds18b20_search_rom>:
/***
 * searching algorithm based on :
 * https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/187.html
 */
uint8_t ds18b20_search_rom(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
	uint8_t bit_counter = 0, true_bit = 0, complement_bit = 0, devices_counter = 0 ;
 80035aa:	2300      	movs	r3, #0
 80035ac:	71fb      	strb	r3, [r7, #7]
 80035ae:	2300      	movs	r3, #0
 80035b0:	707b      	strb	r3, [r7, #1]
 80035b2:	2300      	movs	r3, #0
 80035b4:	703b      	strb	r3, [r7, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	71bb      	strb	r3, [r7, #6]
	uint8_t lastDiscrepancy = 0, searchDirection = 0, lastZero = 0; // może byc 0 bo na pierwszych 8 pozycjach zapisana jest rodzina urządzeń
 80035ba:	2300      	movs	r3, #0
 80035bc:	717b      	strb	r3, [r7, #5]
 80035be:	2300      	movs	r3, #0
 80035c0:	713b      	strb	r3, [r7, #4]
 80035c2:	2300      	movs	r3, #0
 80035c4:	70fb      	strb	r3, [r7, #3]
	do{
		if(oneWire_init() == ONE_WIRE_PRESENCE_FAIL) return ROM_SARCHING_ERROR;
 80035c6:	f7ff fe31 	bl	800322c <oneWire_init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <ds18b20_search_rom+0x30>
 80035d0:	2300      	movs	r3, #0
 80035d2:	e07d      	b.n	80036d0 <ds18b20_search_rom+0x12c>

		// there is at least one sensor - someone send presensce ack
		oneWire_writeByte(0xF0);
 80035d4:	20f0      	movs	r0, #240	; 0xf0
 80035d6:	f7ff fe7f 	bl	80032d8 <oneWire_writeByte>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 80035da:	2300      	movs	r3, #0
 80035dc:	71fb      	strb	r3, [r7, #7]
 80035de:	e04c      	b.n	800367a <ds18b20_search_rom+0xd6>
		{
			true_bit = oneWire_readbit();
 80035e0:	f7ff fea4 	bl	800332c <oneWire_readbit>
 80035e4:	4603      	mov	r3, r0
 80035e6:	707b      	strb	r3, [r7, #1]
			complement_bit = oneWire_readbit();
 80035e8:	f7ff fea0 	bl	800332c <oneWire_readbit>
 80035ec:	4603      	mov	r3, r0
 80035ee:	703b      	strb	r3, [r7, #0]
			if( ( true_bit ==  0 ) && (complement_bit == 0) ) {
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d12d      	bne.n	8003652 <ds18b20_search_rom+0xae>
 80035f6:	783b      	ldrb	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d12a      	bne.n	8003652 <ds18b20_search_rom+0xae>

				if((bit_counter + 1) ==  lastDiscrepancy)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	797b      	ldrb	r3, [r7, #5]
 8003602:	429a      	cmp	r2, r3
 8003604:	d102      	bne.n	800360c <ds18b20_search_rom+0x68>
				{
					searchDirection = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	713b      	strb	r3, [r7, #4]
 800360a:	e011      	b.n	8003630 <ds18b20_search_rom+0x8c>
				}
				else if((bit_counter + 1) > lastDiscrepancy )
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	797b      	ldrb	r3, [r7, #5]
 8003612:	429a      	cmp	r2, r3
 8003614:	dd02      	ble.n	800361c <ds18b20_search_rom+0x78>
				{
					searchDirection = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	713b      	strb	r3, [r7, #4]
 800361a:	e009      	b.n	8003630 <ds18b20_search_rom+0x8c>

				}
				else // (bit_counter + 1) < lastDiscrepancy
				{
					searchDirection = read_address_bit_form_struct(bit_counter, devices_counter-1);
 800361c:	79bb      	ldrb	r3, [r7, #6]
 800361e:	3b01      	subs	r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff2e 	bl	8003488 <read_address_bit_form_struct>
 800362c:	4603      	mov	r3, r0
 800362e:	713b      	strb	r3, [r7, #4]
				}

				oneWire_writeBit(searchDirection);
 8003630:	793b      	ldrb	r3, [r7, #4]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe26 	bl	8003284 <oneWire_writeBit>
				write_data_to_struct(bit_counter, searchDirection, devices_counter);
 8003638:	79ba      	ldrb	r2, [r7, #6]
 800363a:	7939      	ldrb	r1, [r7, #4]
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fe9c 	bl	800337c <write_data_to_struct>
				//write_data_to_tables(bit_counter, searchDirection, devices_counter); // ROM tables


				searchDirection ? (lastZero = lastZero) : (lastZero = bit_counter+1);
 8003644:	793b      	ldrb	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d114      	bne.n	8003674 <ds18b20_search_rom+0xd0>
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	3301      	adds	r3, #1
 800364e:	70fb      	strb	r3, [r7, #3]
 8003650:	e010      	b.n	8003674 <ds18b20_search_rom+0xd0>
			}
			else if( true_bit != complement_bit)
 8003652:	787a      	ldrb	r2, [r7, #1]
 8003654:	783b      	ldrb	r3, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d00a      	beq.n	8003670 <ds18b20_search_rom+0xcc>
			{
				write_data_to_struct(bit_counter, true_bit, devices_counter);
 800365a:	79ba      	ldrb	r2, [r7, #6]
 800365c:	7879      	ldrb	r1, [r7, #1]
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fe8b 	bl	800337c <write_data_to_struct>
				//write_data_to_tables(bit_counter, true_bit, devices_counter); // ROM tables
				oneWire_writeBit(true_bit);
 8003666:	787b      	ldrb	r3, [r7, #1]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fe0b 	bl	8003284 <oneWire_writeBit>
 800366e:	e001      	b.n	8003674 <ds18b20_search_rom+0xd0>
			}
			else{
				return ROM_SARCHING_ERROR;
 8003670:	2300      	movs	r3, #0
 8003672:	e02d      	b.n	80036d0 <ds18b20_search_rom+0x12c>
		for(bit_counter = 0 ; bit_counter < 64; bit_counter++)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	3301      	adds	r3, #1
 8003678:	71fb      	strb	r3, [r7, #7]
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2b3f      	cmp	r3, #63	; 0x3f
 800367e:	d9af      	bls.n	80035e0 <ds18b20_search_rom+0x3c>
			}
		}
		lastDiscrepancy = lastZero;
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	717b      	strb	r3, [r7, #5]
		lastZero = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	70fb      	strb	r3, [r7, #3]
		if(lastDiscrepancy != 0)
 8003688:	797b      	ldrb	r3, [r7, #5]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <ds18b20_search_rom+0xf0>
		{
			devices_counter++  ;
 800368e:	79bb      	ldrb	r3, [r7, #6]
 8003690:	3301      	adds	r3, #1
 8003692:	71bb      	strb	r3, [r7, #6]
		}

	}while(lastDiscrepancy != 0);
 8003694:	797b      	ldrb	r3, [r7, #5]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d195      	bne.n	80035c6 <ds18b20_search_rom+0x22>

	ds18b20_sensors_amount = devices_counter + 1; //counter from 0 to device amount - 1
 800369a:	79bb      	ldrb	r3, [r7, #6]
 800369c:	3301      	adds	r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <ds18b20_search_rom+0x134>)
 80036a2:	701a      	strb	r2, [r3, #0]


	// check CRC codes ..

	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	70bb      	strb	r3, [r7, #2]
 80036a8:	e00b      	b.n	80036c2 <ds18b20_search_rom+0x11e>
	{
		if(ds18b20_check_crc(founded_sensor_no) == DS18B20_CRC_ACK_FAIL)
 80036aa:	78bb      	ldrb	r3, [r7, #2]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff57 	bl	8003560 <ds18b20_check_crc>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <ds18b20_search_rom+0x118>
		{
			return DS18B20_CRC_ACK_FAIL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e009      	b.n	80036d0 <ds18b20_search_rom+0x12c>
	for(uint8_t founded_sensor_no = 0; founded_sensor_no < ds18b20_sensors_amount ; founded_sensor_no++)
 80036bc:	78bb      	ldrb	r3, [r7, #2]
 80036be:	3301      	adds	r3, #1
 80036c0:	70bb      	strb	r3, [r7, #2]
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <ds18b20_search_rom+0x134>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	78ba      	ldrb	r2, [r7, #2]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d3ed      	bcc.n	80036aa <ds18b20_search_rom+0x106>
		}
	}
	return ROM_SARCHING_OK;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000028 	.word	0x20000028

080036dc <ds18b20_initalize>:
	}
	*(temperature_str_hex++) = '\0';
}

void ds18b20_initalize(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	ds18b20_search_rom();
 80036e0:	f7ff ff60 	bl	80035a4 <ds18b20_search_rom>
	ui_change_ds18B20_status(ds18b20_sensors_amount);
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <ds18b20_initalize+0x18>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f93c 	bl	8003968 <ui_change_ds18B20_status>
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000028 	.word	0x20000028

080036f8 <LCD_Data_Bus_Input>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void LCD_Data_Bus_Input(void){
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
	GPIOB->CRL = 0x88888888;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <LCD_Data_Bus_Input+0x14>)
 80036fe:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003702:	601a      	str	r2, [r3, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40010c00 	.word	0x40010c00

08003710 <LCD_Data_Bus_Output>:
void LCD_Data_Bus_Output(void){
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	GPIOB->CRL = 0x77777777;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <LCD_Data_Bus_Output+0x14>)
 8003716:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40010c00 	.word	0x40010c00

08003728 <_LCD_Write>:


void _LCD_Write(uint8_t data){
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
	LCD_Data_Bus_Output();
 8003732:	f7ff ffed 	bl	8003710 <LCD_Data_Bus_Output>

	LCD_RW_GPIO_Port->ODR &= ~LCD_RW_Pin;
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <_LCD_Write+0x58>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4a11      	ldr	r2, [pc, #68]	; (8003780 <_LCD_Write+0x58>)
 800373c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003740:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <_LCD_Write+0x58>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <_LCD_Write+0x58>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	60d3      	str	r3, [r2, #12]
	LCD_D0_GPIO_Port->ODR &= 0xff00;
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <_LCD_Write+0x58>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <_LCD_Write+0x58>)
 8003754:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003758:	60d3      	str	r3, [r2, #12]
	LCD_D0_GPIO_Port->ODR |= data;
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <_LCD_Write+0x58>)
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	4907      	ldr	r1, [pc, #28]	; (8003780 <_LCD_Write+0x58>)
 8003762:	4313      	orrs	r3, r2
 8003764:	60cb      	str	r3, [r1, #12]
	simple_delay_us(4);
 8003766:	2004      	movs	r0, #4
 8003768:	f7ff fce3 	bl	8003132 <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <_LCD_Write+0x58>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a03      	ldr	r2, [pc, #12]	; (8003780 <_LCD_Write+0x58>)
 8003772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003776:	60d3      	str	r3, [r2, #12]
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40010c00 	.word	0x40010c00

08003784 <_LCD_Read>:
//
// Funkcja odczytu bajtu z wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------

uint8_t _LCD_Read(void){
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	71fb      	strb	r3, [r7, #7]

	LCD_Data_Bus_Input();
 800378e:	f7ff ffb3 	bl	80036f8 <LCD_Data_Bus_Input>

	LCD_RW_GPIO_Port->ODR |= LCD_RW_Pin;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <_LCD_Read+0x50>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <_LCD_Read+0x50>)
 8003798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379c:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 800379e:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <_LCD_Read+0x50>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <_LCD_Read+0x50>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	60d3      	str	r3, [r2, #12]
	simple_delay_us(10);
 80037aa:	200a      	movs	r0, #10
 80037ac:	f7ff fcc1 	bl	8003132 <simple_delay_us>
	tmp = (uint8_t) (LCD_D0_GPIO_Port->IDR & 0x00ff);
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <_LCD_Read+0x50>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	71fb      	strb	r3, [r7, #7]
	simple_delay_us(2);
 80037b6:	2002      	movs	r0, #2
 80037b8:	f7ff fcbb 	bl	8003132 <simple_delay_us>
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <_LCD_Read+0x50>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <_LCD_Read+0x50>)
 80037c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c6:	60d3      	str	r3, [r2, #12]
	return tmp;
 80037c8:	79fb      	ldrb	r3, [r7, #7]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40010c00 	.word	0x40010c00

080037d8 <LCD_WriteCommand>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(uint8_t command){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <LCD_WriteCommand+0x3c>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <LCD_WriteCommand+0x3c>)
 80037e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037ec:	60d3      	str	r3, [r2, #12]
	_LCD_Write(command);
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff99 	bl	8003728 <_LCD_Write>
	simple_delay_us(2);
 80037f6:	2002      	movs	r0, #2
 80037f8:	f7ff fc9b 	bl	8003132 <simple_delay_us>
	while(LCD_ReadStatus() & 0x80);
 80037fc:	bf00      	nop
 80037fe:	f000 f80b 	bl	8003818 <LCD_ReadStatus>
 8003802:	4603      	mov	r3, r0
 8003804:	b25b      	sxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	dbf9      	blt.n	80037fe <LCD_WriteCommand+0x26>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40010800 	.word	0x40010800

08003818 <LCD_ReadStatus>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
uint8_t LCD_ReadStatus(void){
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <LCD_ReadStatus+0x20>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a05      	ldr	r2, [pc, #20]	; (8003838 <LCD_ReadStatus+0x20>)
 8003822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003826:	60d3      	str	r3, [r2, #12]
	simple_delay_us(2);
 8003828:	2002      	movs	r0, #2
 800382a:	f7ff fc82 	bl	8003132 <simple_delay_us>
	return _LCD_Read();
 800382e:	f7ff ffa9 	bl	8003784 <_LCD_Read>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40010800 	.word	0x40010800

0800383c <LCD_WriteData>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(uint8_t data){
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <LCD_WriteData+0x34>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <LCD_WriteData+0x34>)
 800384c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003850:	60d3      	str	r3, [r2, #12]
	_LCD_Write(data);
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff67 	bl	8003728 <_LCD_Write>
	//simple_delay_ms(10);
	while(LCD_ReadStatus() & 0x80);
 800385a:	bf00      	nop
 800385c:	f7ff ffdc 	bl	8003818 <LCD_ReadStatus>
 8003860:	4603      	mov	r3, r0
 8003862:	b25b      	sxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	dbf9      	blt.n	800385c <LCD_WriteData+0x20>
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40010800 	.word	0x40010800

08003874 <LCD_WriteText>:
//-------------------------------------------------------------------------------------------------
//
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text){
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	while(*text)	LCD_WriteData(*text++);
 800387c:	e006      	b.n	800388c <LCD_WriteText+0x18>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ffd8 	bl	800383c <LCD_WriteData>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f4      	bne.n	800387e <LCD_WriteText+0xa>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0


	LCD_Data_Bus_Output();
 80038a2:	f7ff ff35 	bl	8003710 <LCD_Data_Bus_Output>
	simple_delay_ms(15);
 80038a6:	200f      	movs	r0, #15
 80038a8:	f7ff fc2c 	bl	8003104 <simple_delay_ms>
	LCD_RS_GPIO_Port->ODR &= ~LCD_RS_Pin;
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <LCD_Initalize+0xc0>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4a2a      	ldr	r2, [pc, #168]	; (800395c <LCD_Initalize+0xc0>)
 80038b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038b6:	60d3      	str	r3, [r2, #12]
	LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80038b8:	4b29      	ldr	r3, [pc, #164]	; (8003960 <LCD_Initalize+0xc4>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a28      	ldr	r2, [pc, #160]	; (8003960 <LCD_Initalize+0xc4>)
 80038be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c2:	60d3      	str	r3, [r2, #12]
	LCD_RW_GPIO_Port->ODR  &= ~LCD_RW_Pin;
 80038c4:	4b26      	ldr	r3, [pc, #152]	; (8003960 <LCD_Initalize+0xc4>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a25      	ldr	r2, [pc, #148]	; (8003960 <LCD_Initalize+0xc4>)
 80038ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ce:	60d3      	str	r3, [r2, #12]

	for(uint8_t i = 0; i < 3; i++){
 80038d0:	2300      	movs	r3, #0
 80038d2:	71fb      	strb	r3, [r7, #7]
 80038d4:	e01d      	b.n	8003912 <LCD_Initalize+0x76>
		LCD_E_GPIO_Port->ODR |= LCD_E_Pin;
 80038d6:	4b22      	ldr	r3, [pc, #136]	; (8003960 <LCD_Initalize+0xc4>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4a21      	ldr	r2, [pc, #132]	; (8003960 <LCD_Initalize+0xc4>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	60d3      	str	r3, [r2, #12]
		LCD_D0_GPIO_Port->ODR &= 0xff00;
 80038e2:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <LCD_Initalize+0xc4>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <LCD_Initalize+0xc4>)
 80038e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038ec:	60d3      	str	r3, [r2, #12]
		LCD_D0_GPIO_Port->ODR |=  0x003F;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <LCD_Initalize+0xc4>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <LCD_Initalize+0xc4>)
 80038f4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80038f8:	60d3      	str	r3, [r2, #12]
		LCD_E_GPIO_Port->ODR &= ~LCD_E_Pin;
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <LCD_Initalize+0xc4>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <LCD_Initalize+0xc4>)
 8003900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003904:	60d3      	str	r3, [r2, #12]
		simple_delay_ms(5);
 8003906:	2005      	movs	r0, #5
 8003908:	f7ff fbfc 	bl	8003104 <simple_delay_ms>
	for(uint8_t i = 0; i < 3; i++){
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	3301      	adds	r3, #1
 8003910:	71fb      	strb	r3, [r7, #7]
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d9de      	bls.n	80038d6 <LCD_Initalize+0x3a>
	  }

	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_8_BIT);
 8003918:	2038      	movs	r0, #56	; 0x38
 800391a:	f7ff ff5d 	bl	80037d8 <LCD_WriteCommand>
	simple_delay_ms(1);
 800391e:	2001      	movs	r0, #1
 8003920:	f7ff fbf0 	bl	8003104 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8003924:	2008      	movs	r0, #8
 8003926:	f7ff ff57 	bl	80037d8 <LCD_WriteCommand>
	simple_delay_ms(1);
 800392a:	2001      	movs	r0, #1
 800392c:	f7ff fbea 	bl	8003104 <simple_delay_ms>
	LCD_WriteCommand(HD44780_CLEAR);
 8003930:	2001      	movs	r0, #1
 8003932:	f7ff ff51 	bl	80037d8 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003936:	2001      	movs	r0, #1
 8003938:	f7ff fbe4 	bl	8003104 <simple_delay_ms>
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 800393c:	2006      	movs	r0, #6
 800393e:	f7ff ff4b 	bl	80037d8 <LCD_WriteCommand>
	simple_delay_ms(1);
 8003942:	2001      	movs	r0, #1
 8003944:	f7ff fbde 	bl	8003104 <simple_delay_ms>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 8003948:	200c      	movs	r0, #12
 800394a:	f7ff ff45 	bl	80037d8 <LCD_WriteCommand>

	LCD_WriteText("HC_2020");
 800394e:	4805      	ldr	r0, [pc, #20]	; (8003964 <LCD_Initalize+0xc8>)
 8003950:	f7ff ff90 	bl	8003874 <LCD_WriteText>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40010800 	.word	0x40010800
 8003960:	40010c00 	.word	0x40010c00
 8003964:	08004350 	.word	0x08004350

08003968 <ui_change_ds18B20_status>:

	ui_handler_flag = UI_HANDLER_FLAG_BUSY;
}

void ui_change_ds18B20_status(uint8_t status)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
	HC_status.ds18b20_amount = status;
 8003972:	4a04      	ldr	r2, [pc, #16]	; (8003984 <ui_change_ds18B20_status+0x1c>)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	7013      	strb	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000178 	.word	0x20000178

08003988 <ui_increment_ms_counter>:

/***
 * 	function is calling in SysTick IRQ Handler
 */
inline void ui_increment_ms_counter(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	ui_handler_flag = UI_HANDLER_FLAG_FREE;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <ui_increment_ms_counter+0x30>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
	if(++ms_counter >= 1000)
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <ui_increment_ms_counter+0x34>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	b29b      	uxth	r3, r3
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <ui_increment_ms_counter+0x34>)
 800399e:	4619      	mov	r1, r3
 80039a0:	8011      	strh	r1, [r2, #0]
 80039a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a6:	d302      	bcc.n	80039ae <ui_increment_ms_counter+0x26>
	{
		ms_counter = 0;
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <ui_increment_ms_counter+0x34>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	801a      	strh	r2, [r3, #0]
	}
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000186 	.word	0x20000186
 80039bc:	20000076 	.word	0x20000076

080039c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039c4:	f7fc fbc2 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039c8:	f000 f80d 	bl	80039e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039cc:	f000 f9ec 	bl	8003da8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80039d0:	f000 f864 	bl	8003a9c <MX_ADC1_Init>
  MX_SPI2_Init();
 80039d4:	f000 f90c 	bl	8003bf0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80039d8:	f000 f940 	bl	8003c5c <MX_TIM1_Init>
  //MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  LCD_Initalize();
 80039dc:	f7ff ff5e 	bl	800389c <LCD_Initalize>
  ds18b20_initalize();
 80039e0:	f7ff fe7c 	bl	80036dc <ds18b20_initalize>
  //pwmctrl_enable_timer_irq();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80039e4:	e7fe      	b.n	80039e4 <main+0x24>

080039e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b094      	sub	sp, #80	; 0x50
 80039ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f0:	2228      	movs	r2, #40	; 0x28
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fc83 	bl	8004300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003a20:	2300      	movs	r3, #0
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a24:	2301      	movs	r3, #1
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003a32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd fd15 	bl	800146c <HAL_RCC_OscConfig>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003a48:	f000 fa58 	bl	8003efc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a50:	2302      	movs	r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a62:	f107 0314 	add.w	r3, r7, #20
 8003a66:	2102      	movs	r1, #2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd ff7f 	bl	800196c <HAL_RCC_ClockConfig>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003a74:	f000 fa42 	bl	8003efc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a80:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe f8f9 	bl	8001c7c <HAL_RCCEx_PeriphCLKConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003a90:	f000 fa34 	bl	8003efc <Error_Handler>
  }
}
 8003a94:	bf00      	nop
 8003a96:	3750      	adds	r7, #80	; 0x50
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003aac:	4b4a      	ldr	r3, [pc, #296]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003aae:	4a4b      	ldr	r2, [pc, #300]	; (8003bdc <MX_ADC1_Init+0x140>)
 8003ab0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003ab2:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ac0:	4b45      	ldr	r3, [pc, #276]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ac6:	4b44      	ldr	r3, [pc, #272]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003ac8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003acc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ace:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003ad4:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ada:	483f      	ldr	r0, [pc, #252]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003adc:	f7fc fb98 	bl	8000210 <HAL_ADC_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003ae6:	f000 fa09 	bl	8003efc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003aee:	2301      	movs	r3, #1
 8003af0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003af2:	2307      	movs	r3, #7
 8003af4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4837      	ldr	r0, [pc, #220]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003afc:	f7fc fe26 	bl	800074c <HAL_ADC_ConfigChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003b06:	f000 f9f9 	bl	8003efc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4830      	ldr	r0, [pc, #192]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003b18:	f7fc fe18 	bl	800074c <HAL_ADC_ConfigChannel>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003b22:	f000 f9eb 	bl	8003efc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003b26:	2302      	movs	r3, #2
 8003b28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4829      	ldr	r0, [pc, #164]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003b34:	f7fc fe0a 	bl	800074c <HAL_ADC_ConfigChannel>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003b3e:	f000 f9dd 	bl	8003efc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003b42:	2310      	movs	r3, #16
 8003b44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003b46:	2304      	movs	r3, #4
 8003b48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4822      	ldr	r0, [pc, #136]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003b50:	f7fc fdfc 	bl	800074c <HAL_ADC_ConfigChannel>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8003b5a:	f000 f9cf 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <MX_ADC1_Init+0x144>)
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <MX_ADC1_Init+0x144>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6153      	str	r3, [r2, #20]
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <MX_ADC1_Init+0x144>)
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]

  hdma1.Instance = DMA1_Channel1;
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003b78:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <MX_ADC1_Init+0x14c>)
 8003b7a:	601a      	str	r2, [r3, #0]
  hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	605a      	str	r2, [r3, #4]
  hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
  hdma1.Init.MemInc = DMA_MINC_ENABLE;
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	60da      	str	r2, [r3, #12]
  hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b94:	611a      	str	r2, [r3, #16]
  hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b9c:	615a      	str	r2, [r3, #20]
  hdma1.Init.Mode = DMA_CIRCULAR;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	619a      	str	r2, [r3, #24]
  hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003baa:	61da      	str	r2, [r3, #28]


  HAL_ADCEx_Calibration_Start(&hadc1);
 8003bac:	480a      	ldr	r0, [pc, #40]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003bae:	f7fc ffb7 	bl	8000b20 <HAL_ADCEx_Calibration_Start>
  HAL_DMA_Init(&hdma1);
 8003bb2:	480c      	ldr	r0, [pc, #48]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003bb4:	f7fd f968 	bl	8000e88 <HAL_DMA_Init>
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003bbc:	621a      	str	r2, [r3, #32]
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_ADC1_Init+0x148>)
 8003bc0:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, ADC_CHANNELS);
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	4909      	ldr	r1, [pc, #36]	; (8003bec <MX_ADC1_Init+0x150>)
 8003bc8:	4803      	ldr	r0, [pc, #12]	; (8003bd8 <MX_ADC1_Init+0x13c>)
 8003bca:	f7fc fbf9 	bl	80003c0 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC1_Init 2 */

}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000080 	.word	0x20000080
 8003bdc:	40012400 	.word	0x40012400
 8003be0:	40021000 	.word	0x40021000
 8003be4:	20000030 	.word	0x20000030
 8003be8:	40020008 	.word	0x40020008
 8003bec:	20000078 	.word	0x20000078

08003bf0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <MX_SPI2_Init+0x68>)
 8003bf8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c20:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c3c:	220a      	movs	r2, #10
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <MX_SPI2_Init+0x64>)
 8003c42:	f7fe f98d 	bl	8001f60 <HAL_SPI_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c4c:	f000 f956 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000188 	.word	0x20000188
 8003c58:	40003800 	.word	0x40003800

08003c5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b096      	sub	sp, #88	; 0x58
 8003c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	615a      	str	r2, [r3, #20]
 8003c8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	2220      	movs	r2, #32
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fb33 	bl	8004300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c9a:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003c9c:	4a41      	ldr	r2, [pc, #260]	; (8003da4 <MX_TIM1_Init+0x148>)
 8003c9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003ca2:	2247      	movs	r2, #71	; 0x47
 8003ca4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca6:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9800;
 8003cac:	4b3c      	ldr	r3, [pc, #240]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003cae:	f242 6248 	movw	r2, #9800	; 0x2648
 8003cb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb4:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cc6:	4836      	ldr	r0, [pc, #216]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003cc8:	f7fe f9ab 	bl	8002022 <HAL_TIM_Base_Init>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003cd2:	f000 f913 	bl	8003efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	482f      	ldr	r0, [pc, #188]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003ce4:	f7fe fbcc 	bl	8002480 <HAL_TIM_ConfigClockSource>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003cee:	f000 f905 	bl	8003efc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003cf2:	482b      	ldr	r0, [pc, #172]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003cf4:	f7fe f9e3 	bl	80020be <HAL_TIM_OC_Init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003cfe:	f000 f8fd 	bl	8003efc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8003d02:	2108      	movs	r1, #8
 8003d04:	4826      	ldr	r0, [pc, #152]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003d06:	f7fe fa0e 	bl	8002126 <HAL_TIM_OnePulse_Init>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8003d10:	f000 f8f4 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d20:	4619      	mov	r1, r3
 8003d22:	481f      	ldr	r0, [pc, #124]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003d24:	f7fe ff10 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003d2e:	f000 f8e5 	bl	8003efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d52:	2200      	movs	r2, #0
 8003d54:	4619      	mov	r1, r3
 8003d56:	4812      	ldr	r0, [pc, #72]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003d58:	f7fe fb32 	bl	80023c0 <HAL_TIM_OC_ConfigChannel>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003d62:	f000 f8cb 	bl	8003efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	4619      	mov	r1, r3
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <MX_TIM1_Init+0x144>)
 8003d8a:	f7fe ff21 	bl	8002bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8003d94:	f000 f8b2 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d98:	bf00      	nop
 8003d9a:	3758      	adds	r7, #88	; 0x58
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200000b0 	.word	0x200000b0
 8003da4:	40012c00 	.word	0x40012c00

08003da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dae:	f107 0310 	add.w	r3, r7, #16
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dbc:	4b49      	ldr	r3, [pc, #292]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	4a48      	ldr	r2, [pc, #288]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003dc2:	f043 0310 	orr.w	r3, r3, #16
 8003dc6:	6193      	str	r3, [r2, #24]
 8003dc8:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003dda:	f043 0320 	orr.w	r3, r3, #32
 8003dde:	6193      	str	r3, [r2, #24]
 8003de0:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dec:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4a3c      	ldr	r2, [pc, #240]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003df2:	f043 0304 	orr.w	r3, r3, #4
 8003df6:	6193      	str	r3, [r2, #24]
 8003df8:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	4a36      	ldr	r2, [pc, #216]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003e0a:	f043 0308 	orr.w	r3, r3, #8
 8003e0e:	6193      	str	r3, [r2, #24]
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <MX_GPIO_Init+0x13c>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f248 7178 	movw	r1, #34680	; 0x8778
 8003e22:	4831      	ldr	r0, [pc, #196]	; (8003ee8 <MX_GPIO_Init+0x140>)
 8003e24:	f7fd fae8 	bl	80013f8 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e2e:	482f      	ldr	r0, [pc, #188]	; (8003eec <MX_GPIO_Init+0x144>)
 8003e30:	f7fd fae2 	bl	80013f8 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_EXIT_Pin BUTTON_OK_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_EXIT_Pin|BUTTON_OK_Pin;
 8003e34:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <MX_GPIO_Init+0x148>)
 8003e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e42:	f107 0310 	add.w	r3, r7, #16
 8003e46:	4619      	mov	r1, r3
 8003e48:	482a      	ldr	r0, [pc, #168]	; (8003ef4 <MX_GPIO_Init+0x14c>)
 8003e4a:	f7fd f97b 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONE_WIRE_DATA1_Pin ONE_WIRE_DATA2_Pin LED_RED_Pin LED_GREEN_Pin 
                           BUZZER_Pin FAN_CTRL_Pin HEATER_CTRL_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_DATA1_Pin|ONE_WIRE_DATA2_Pin|LED_RED_Pin|LED_GREEN_Pin 
 8003e4e:	f248 7378 	movw	r3, #34680	; 0x8778
 8003e52:	613b      	str	r3, [r7, #16]
                          |BUZZER_Pin|FAN_CTRL_Pin|HEATER_CTRL_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e54:	2301      	movs	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e60:	f107 0310 	add.w	r3, r7, #16
 8003e64:	4619      	mov	r1, r3
 8003e66:	4820      	ldr	r0, [pc, #128]	; (8003ee8 <MX_GPIO_Init+0x140>)
 8003e68:	f7fd f96c 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <MX_GPIO_Init+0x150>)
 8003e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 0310 	add.w	r3, r7, #16
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	481a      	ldr	r0, [pc, #104]	; (8003ee8 <MX_GPIO_Init+0x140>)
 8003e80:	f7fd f960 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D1B2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin 
                           LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D1B2_Pin|LCD_D3_Pin 
 8003e84:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003e88:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
                          |LCD_E_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2302      	movs	r3, #2
 8003e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4813      	ldr	r0, [pc, #76]	; (8003eec <MX_GPIO_Init+0x144>)
 8003e9e:	f7fd f951 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 8003ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <MX_GPIO_Init+0x148>)
 8003eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 8003eb0:	f107 0310 	add.w	r3, r7, #16
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	480d      	ldr	r0, [pc, #52]	; (8003eec <MX_GPIO_Init+0x144>)
 8003eb8:	f7fd f944 	bl	8001144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2017      	movs	r0, #23
 8003ec2:	f7fc ffaa 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ec6:	2017      	movs	r0, #23
 8003ec8:	f7fc ffc3 	bl	8000e52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2028      	movs	r0, #40	; 0x28
 8003ed2:	f7fc ffa2 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ed6:	2028      	movs	r0, #40	; 0x28
 8003ed8:	f7fc ffbb 	bl	8000e52 <HAL_NVIC_EnableIRQ>

}
 8003edc:	bf00      	nop
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40010800 	.word	0x40010800
 8003eec:	40010c00 	.word	0x40010c00
 8003ef0:	10210000 	.word	0x10210000
 8003ef4:	40011000 	.word	0x40011000
 8003ef8:	10310000 	.word	0x10310000

08003efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_MspInit+0x5c>)
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <HAL_MspInit+0x5c>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6193      	str	r3, [r2, #24]
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_MspInit+0x5c>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <HAL_MspInit+0x5c>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <HAL_MspInit+0x5c>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	61d3      	str	r3, [r2, #28]
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <HAL_MspInit+0x5c>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_MspInit+0x60>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <HAL_MspInit+0x60>)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40010000 	.word	0x40010000

08003f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	f107 0310 	add.w	r3, r7, #16
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_ADC_MspInit+0x7c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d129      	bne.n	8003fe0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_ADC_MspInit+0x80>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	4a16      	ldr	r2, [pc, #88]	; (8003fec <HAL_ADC_MspInit+0x80>)
 8003f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f96:	6193      	str	r3, [r2, #24]
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_ADC_MspInit+0x80>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_ADC_MspInit+0x80>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	4a10      	ldr	r2, [pc, #64]	; (8003fec <HAL_ADC_MspInit+0x80>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6193      	str	r3, [r2, #24]
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_ADC_MspInit+0x80>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003fbc:	2307      	movs	r3, #7
 8003fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc4:	f107 0310 	add.w	r3, r7, #16
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4809      	ldr	r0, [pc, #36]	; (8003ff0 <HAL_ADC_MspInit+0x84>)
 8003fcc:	f7fd f8ba 	bl	8001144 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2012      	movs	r0, #18
 8003fd6:	f7fc ff20 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003fda:	2012      	movs	r0, #18
 8003fdc:	f7fc ff39 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fe0:	bf00      	nop
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40012400 	.word	0x40012400
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40010800 	.word	0x40010800

08003ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffc:	f107 0310 	add.w	r3, r7, #16
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <HAL_SPI_MspInit+0x8c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d131      	bne.n	8004078 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_SPI_MspInit+0x90>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_SPI_MspInit+0x90>)
 800401a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401e:	61d3      	str	r3, [r2, #28]
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_SPI_MspInit+0x90>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <HAL_SPI_MspInit+0x90>)
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <HAL_SPI_MspInit+0x90>)
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	6193      	str	r3, [r2, #24]
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_SPI_MspInit+0x90>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004044:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004048:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	2302      	movs	r3, #2
 800404c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004052:	f107 0310 	add.w	r3, r7, #16
 8004056:	4619      	mov	r1, r3
 8004058:	480b      	ldr	r0, [pc, #44]	; (8004088 <HAL_SPI_MspInit+0x94>)
 800405a:	f7fd f873 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800405e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406c:	f107 0310 	add.w	r3, r7, #16
 8004070:	4619      	mov	r1, r3
 8004072:	4805      	ldr	r0, [pc, #20]	; (8004088 <HAL_SPI_MspInit+0x94>)
 8004074:	f7fd f866 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004078:	bf00      	nop
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40003800 	.word	0x40003800
 8004084:	40021000 	.word	0x40021000
 8004088:	40010c00 	.word	0x40010c00

0800408c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a11      	ldr	r2, [pc, #68]	; (80040e0 <HAL_TIM_Base_MspInit+0x54>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d11b      	bne.n	80040d6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800409e:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <HAL_TIM_Base_MspInit+0x58>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <HAL_TIM_Base_MspInit+0x58>)
 80040a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040a8:	6193      	str	r3, [r2, #24]
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_TIM_Base_MspInit+0x58>)
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80040b6:	2200      	movs	r2, #0
 80040b8:	2100      	movs	r1, #0
 80040ba:	2019      	movs	r0, #25
 80040bc:	f7fc fead 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80040c0:	2019      	movs	r0, #25
 80040c2:	f7fc fec6 	bl	8000e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2100      	movs	r1, #0
 80040ca:	201b      	movs	r0, #27
 80040cc:	f7fc fea5 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80040d0:	201b      	movs	r0, #27
 80040d2:	f7fc febe 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40021000 	.word	0x40021000

080040e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f8:	e7fe      	b.n	80040f8 <HardFault_Handler+0x4>

080040fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040fe:	e7fe      	b.n	80040fe <MemManage_Handler+0x4>

08004100 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004104:	e7fe      	b.n	8004104 <BusFault_Handler+0x4>

08004106 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800410a:	e7fe      	b.n	800410a <UsageFault_Handler+0x4>

0800410c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ui_increment_ms_counter();
 8004134:	f7ff fc28 	bl	8003988 <ui_increment_ms_counter>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004138:	f7fc f84e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}

08004140 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <ADC1_2_IRQHandler+0x10>)
 8004146:	f7fc fa19 	bl	800057c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000080 	.word	0x20000080

08004154 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ZCD_Pin))
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <EXTI9_5_IRQHandler+0x28>)
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	d006      	beq.n	8004172 <EXTI9_5_IRQHandler+0x1e>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8004164:	4806      	ldr	r0, [pc, #24]	; (8004180 <EXTI9_5_IRQHandler+0x2c>)
 8004166:	f7fd ff87 	bl	8002078 <HAL_TIM_Base_Start_IT>
		HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <EXTI9_5_IRQHandler+0x30>)
 800416c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004170:	615a      	str	r2, [r3, #20]
		//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004172:	2080      	movs	r0, #128	; 0x80
 8004174:	f7fd f958 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010400 	.word	0x40010400
 8004180:	200000b0 	.word	0x200000b0
 8004184:	40010800 	.word	0x40010800

08004188 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;

	// for a test
	//LED_RED_GPIO_Port->BRR = LED_RED_Pin;
	HEATER_CTRL_GPIO_Port->BRR = HEATER_CTRL_Pin;
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <TIM1_UP_IRQHandler+0x18>)
 800418e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004192:	615a      	str	r2, [r3, #20]


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004194:	4803      	ldr	r0, [pc, #12]	; (80041a4 <TIM1_UP_IRQHandler+0x1c>)
 8004196:	f7fe f80b 	bl	80021b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40010800 	.word	0x40010800
 80041a4:	200000b0 	.word	0x200000b0

080041a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
	// for a test	//LED_RED_GPIO_Port->BSRR = LED_RED_Pin;

	HEATER_CTRL_GPIO_Port->BSRR = HEATER_CTRL_Pin;
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <TIM1_CC_IRQHandler+0x18>)
 80041ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041b2:	611a      	str	r2, [r3, #16]

	/* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041b4:	4803      	ldr	r0, [pc, #12]	; (80041c4 <TIM1_CC_IRQHandler+0x1c>)
 80041b6:	f7fd fffb 	bl	80021b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40010800 	.word	0x40010800
 80041c4:	200000b0 	.word	0x200000b0

080041c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041cc:	4802      	ldr	r0, [pc, #8]	; (80041d8 <USART3_IRQHandler+0x10>)
 80041ce:	f7fe fd63 	bl	8002c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	200001e0 	.word	0x200001e0

080041dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80041e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041e4:	f7fd f920 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80041e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041ec:	f7fd f91c 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80041f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041f4:	f7fd f918 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80041f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041fc:	f7fd f914 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}

08004204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <SystemInit+0x5c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a14      	ldr	r2, [pc, #80]	; (8004260 <SystemInit+0x5c>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <SystemInit+0x5c>)
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4911      	ldr	r1, [pc, #68]	; (8004260 <SystemInit+0x5c>)
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <SystemInit+0x60>)
 800421c:	4013      	ands	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <SystemInit+0x5c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <SystemInit+0x5c>)
 8004226:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <SystemInit+0x5c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <SystemInit+0x5c>)
 8004236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <SystemInit+0x5c>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a07      	ldr	r2, [pc, #28]	; (8004260 <SystemInit+0x5c>)
 8004242:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004246:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <SystemInit+0x5c>)
 800424a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800424e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <SystemInit+0x64>)
 8004252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004256:	609a      	str	r2, [r3, #8]
#endif 
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40021000 	.word	0x40021000
 8004264:	f8ff0000 	.word	0xf8ff0000
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800426c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800426e:	e003      	b.n	8004278 <LoopCopyDataInit>

08004270 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004272:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004274:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004276:	3104      	adds	r1, #4

08004278 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004278:	480a      	ldr	r0, [pc, #40]	; (80042a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800427c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800427e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004280:	d3f6      	bcc.n	8004270 <CopyDataInit>
  ldr r2, =_sbss
 8004282:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004284:	e002      	b.n	800428c <LoopFillZerobss>

08004286 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004286:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004288:	f842 3b04 	str.w	r3, [r2], #4

0800428c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800428e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004290:	d3f9      	bcc.n	8004286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004292:	f7ff ffb7 	bl	8004204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004296:	f000 f80f 	bl	80042b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800429a:	f7ff fb91 	bl	80039c0 <main>
  bx lr
 800429e:	4770      	bx	lr
  ldr r3, =_sidata
 80042a0:	08004378 	.word	0x08004378
  ldr r0, =_sdata
 80042a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80042a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80042ac:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80042b0:	20000220 	.word	0x20000220

080042b4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042b4:	e7fe      	b.n	80042b4 <CAN1_RX1_IRQHandler>
	...

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	2500      	movs	r5, #0
 80042bc:	4e0c      	ldr	r6, [pc, #48]	; (80042f0 <__libc_init_array+0x38>)
 80042be:	4c0d      	ldr	r4, [pc, #52]	; (80042f4 <__libc_init_array+0x3c>)
 80042c0:	1ba4      	subs	r4, r4, r6
 80042c2:	10a4      	asrs	r4, r4, #2
 80042c4:	42a5      	cmp	r5, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	f000 f822 	bl	8004310 <_init>
 80042cc:	2500      	movs	r5, #0
 80042ce:	4e0a      	ldr	r6, [pc, #40]	; (80042f8 <__libc_init_array+0x40>)
 80042d0:	4c0a      	ldr	r4, [pc, #40]	; (80042fc <__libc_init_array+0x44>)
 80042d2:	1ba4      	subs	r4, r4, r6
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	42a5      	cmp	r5, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042e0:	4798      	blx	r3
 80042e2:	3501      	adds	r5, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ea:	4798      	blx	r3
 80042ec:	3501      	adds	r5, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	08004370 	.word	0x08004370
 80042f4:	08004370 	.word	0x08004370
 80042f8:	08004370 	.word	0x08004370
 80042fc:	08004374 	.word	0x08004374

08004300 <memset>:
 8004300:	4603      	mov	r3, r0
 8004302:	4402      	add	r2, r0
 8004304:	4293      	cmp	r3, r2
 8004306:	d100      	bne.n	800430a <memset+0xa>
 8004308:	4770      	bx	lr
 800430a:	f803 1b01 	strb.w	r1, [r3], #1
 800430e:	e7f9      	b.n	8004304 <memset+0x4>

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
